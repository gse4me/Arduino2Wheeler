
ArduGirobot.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000019a  00800100  0000436a  000043fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000436a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000240  0080029a  0080029a  00004598  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00004598  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000045f4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00001080  00000000  00000000  00004634  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0001dfc6  00000000  00000000  000056b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000037fa  00000000  00000000  0002367a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00006d1c  00000000  00000000  00026e74  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00003a18  00000000  00000000  0002db90  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00007432  00000000  00000000  000315a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00011163  00000000  00000000  000389da  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001020  00000000  00000000  00049b3d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 ac 00 	jmp	0x158	; 0x158 <__ctors_end>
       4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
       8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
       c:	0c 94 65 14 	jmp	0x28ca	; 0x28ca <__vector_3>
      10:	0c 94 e2 14 	jmp	0x29c4	; 0x29c4 <__vector_4>
      14:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      18:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      1c:	0c 94 ee 10 	jmp	0x21dc	; 0x21dc <__vector_7>
      20:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      24:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      28:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      2c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      30:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      34:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      38:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      3c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      40:	0c 94 e1 1c 	jmp	0x39c2	; 0x39c2 <__vector_16>
      44:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      48:	0c 94 5a 1a 	jmp	0x34b4	; 0x34b4 <__vector_18>
      4c:	0c 94 8c 1a 	jmp	0x3518	; 0x3518 <__vector_19>
      50:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      54:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      58:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      5c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      60:	0c 94 eb 11 	jmp	0x23d6	; 0x23d6 <__vector_24>
      64:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      68:	9f 14       	cp	r9, r15
      6a:	ab 14       	cp	r10, r11
      6c:	b7 14       	cp	r11, r7
      6e:	ab 14       	cp	r10, r11
      70:	d6 14       	cp	r13, r6
      72:	c3 14       	cp	r12, r3
      74:	9f 14       	cp	r9, r15
      76:	9f 14       	cp	r9, r15
      78:	c3 14       	cp	r12, r3
      7a:	d6 14       	cp	r13, r6
      7c:	ab 14       	cp	r10, r11
      7e:	b7 14       	cp	r11, r7
      80:	ab 14       	cp	r10, r11
      82:	9f 14       	cp	r9, r15
      84:	1a 15       	cp	r17, r10
      86:	26 15       	cp	r18, r6
      88:	32 15       	cp	r19, r2
      8a:	26 15       	cp	r18, r6
      8c:	51 15       	cp	r21, r1
      8e:	3e 15       	cp	r19, r14
      90:	1a 15       	cp	r17, r10
      92:	1a 15       	cp	r17, r10
      94:	3e 15       	cp	r19, r14
      96:	51 15       	cp	r21, r1
      98:	26 15       	cp	r18, r6
      9a:	32 15       	cp	r19, r2
      9c:	26 15       	cp	r18, r6
      9e:	1a 15       	cp	r17, r10
      a0:	08 4a       	sbci	r16, 0xA8	; 168
      a2:	d7 3b       	cpi	r29, 0xB7	; 183
      a4:	3b ce       	rjmp	.-906    	; 0xfffffd1c <__eeprom_end+0xff7efd1c>
      a6:	01 6e       	ori	r16, 0xE1	; 225
      a8:	84 bc       	out	0x24, r8	; 36
      aa:	bf fd       	.word	0xfdbf	; ????
      ac:	c1 2f       	mov	r28, r17
      ae:	3d 6c       	ori	r19, 0xCD	; 205
      b0:	74 31       	cpi	r23, 0x14	; 20
      b2:	9a bd       	out	0x2a, r25	; 42
      b4:	56 83       	std	Z+6, r21	; 0x06
      b6:	3d da       	rcall	.-2950   	; 0xfffff532 <__eeprom_end+0xff7ef532>
      b8:	3d 00       	.word	0x003d	; ????
      ba:	c7 7f       	andi	r28, 0xF7	; 247
      bc:	11 be       	out	0x31, r1	; 49
      be:	d9 e4       	ldi	r29, 0x49	; 73
      c0:	bb 4c       	sbci	r27, 0xCB	; 203
      c2:	3e 91       	ld	r19, -X
      c4:	6b aa       	std	Y+51, r6	; 0x33
      c6:	aa be       	out	0x3a, r10	; 58
      c8:	00 00       	nop
      ca:	00 80       	ld	r0, Z
      cc:	3f 00       	.word	0x003f	; ????

000000ce <__trampolines_end>:
      ce:	4e 41       	sbci	r20, 0x1E	; 30
      d0:	4e 49       	Address 0x000000d0 is out of bounds.
.word	0xffff	; ????

000000d1 <pstr_inity>:
      d1:	49 4e 49 54 59                                      INITY

000000d6 <pstr_inf>:
      d6:	49 4e 46                                            INF

000000d9 <pwr_m10>:
      d9:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
      e9:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

000000f1 <pwr_p10>:
      f1:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
     101:	ca 1b 0e 5a ae c5 9d 74                             ...Z...t

00000109 <digital_pin_to_bit_mask_PGM>:
     109:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     119:	04 08 10 20                                         ... 

0000011d <digital_pin_to_port_PGM>:
     11d:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     12d:	03 03 03 03                                         ....

00000131 <port_to_input_PGM>:
     131:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

0000013b <port_to_output_PGM>:
     13b:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

00000145 <port_to_mode_PGM>:
     145:	00 00 00 00 24 00 27 00 2a 00 00                    ....$.'.*..

00000150 <__ctors_start>:
     150:	3c 07       	cpc	r19, r28
     152:	3a 14       	cp	r3, r10
     154:	3e 14       	cp	r3, r14
     156:	bc 1a       	sub	r11, r28

00000158 <__ctors_end>:
     158:	11 24       	eor	r1, r1
     15a:	1f be       	out	0x3f, r1	; 63
     15c:	cf ef       	ldi	r28, 0xFF	; 255
     15e:	d8 e0       	ldi	r29, 0x08	; 8
     160:	de bf       	out	0x3e, r29	; 62
     162:	cd bf       	out	0x3d, r28	; 61

00000164 <__do_copy_data>:
     164:	12 e0       	ldi	r17, 0x02	; 2
     166:	a0 e0       	ldi	r26, 0x00	; 0
     168:	b1 e0       	ldi	r27, 0x01	; 1
     16a:	ea e6       	ldi	r30, 0x6A	; 106
     16c:	f3 e4       	ldi	r31, 0x43	; 67
     16e:	02 c0       	rjmp	.+4      	; 0x174 <__do_copy_data+0x10>
     170:	05 90       	lpm	r0, Z+
     172:	0d 92       	st	X+, r0
     174:	aa 39       	cpi	r26, 0x9A	; 154
     176:	b1 07       	cpc	r27, r17
     178:	d9 f7       	brne	.-10     	; 0x170 <__do_copy_data+0xc>

0000017a <__do_clear_bss>:
     17a:	24 e0       	ldi	r18, 0x04	; 4
     17c:	aa e9       	ldi	r26, 0x9A	; 154
     17e:	b2 e0       	ldi	r27, 0x02	; 2
     180:	01 c0       	rjmp	.+2      	; 0x184 <.do_clear_bss_start>

00000182 <.do_clear_bss_loop>:
     182:	1d 92       	st	X+, r1

00000184 <.do_clear_bss_start>:
     184:	aa 3d       	cpi	r26, 0xDA	; 218
     186:	b2 07       	cpc	r27, r18
     188:	e1 f7       	brne	.-8      	; 0x182 <.do_clear_bss_loop>

0000018a <__do_global_ctors>:
     18a:	10 e0       	ldi	r17, 0x00	; 0
     18c:	cc ea       	ldi	r28, 0xAC	; 172
     18e:	d0 e0       	ldi	r29, 0x00	; 0
     190:	04 c0       	rjmp	.+8      	; 0x19a <__do_global_ctors+0x10>
     192:	21 97       	sbiw	r28, 0x01	; 1
     194:	fe 01       	movw	r30, r28
     196:	0e 94 63 1e 	call	0x3cc6	; 0x3cc6 <__tablejump2__>
     19a:	c8 3a       	cpi	r28, 0xA8	; 168
     19c:	d1 07       	cpc	r29, r17
     19e:	c9 f7       	brne	.-14     	; 0x192 <__do_global_ctors+0x8>
     1a0:	0e 94 ea 1a 	call	0x35d4	; 0x35d4 <main>
     1a4:	0c 94 b3 21 	jmp	0x4366	; 0x4366 <_exit>

000001a8 <__bad_interrupt>:
     1a8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001ac <_Z15initPidControlsv>:

PID *Mot0_Pid;
PID *Mot1_Pid;
PID *Giro_Pid;

void initPidControls() {
     1ac:	8f 92       	push	r8
     1ae:	9f 92       	push	r9
     1b0:	af 92       	push	r10
     1b2:	bf 92       	push	r11
     1b4:	cf 92       	push	r12
     1b6:	df 92       	push	r13
     1b8:	ef 92       	push	r14
     1ba:	ff 92       	push	r15
     1bc:	0f 93       	push	r16
     1be:	1f 93       	push	r17
     1c0:	cf 93       	push	r28
     1c2:	df 93       	push	r29
    Mot0_PidCtl= new PIDConfig_e("M0",MOT0__KP,MOT0__KI,MOT0__KD,0);
     1c4:	8d e1       	ldi	r24, 0x1D	; 29
     1c6:	90 e0       	ldi	r25, 0x00	; 0
     1c8:	0e 94 f9 1a 	call	0x35f2	; 0x35f2 <_Znwj>
     1cc:	ec 01       	movw	r28, r24
    double Input;
    double Output;

    PIDConfig_e(char* name, double kp, double ki, double kd, double setpoint)
    {
        strcpy(Name, name);
     1ce:	6a e0       	ldi	r22, 0x0A	; 10
     1d0:	71 e0       	ldi	r23, 0x01	; 1
     1d2:	0e 94 d4 1f 	call	0x3fa8	; 0x3fa8 <strcpy>
        Kp=kp;
     1d6:	c1 2c       	mov	r12, r1
     1d8:	d1 2c       	mov	r13, r1
     1da:	80 e2       	ldi	r24, 0x20	; 32
     1dc:	e8 2e       	mov	r14, r24
     1de:	82 e4       	ldi	r24, 0x42	; 66
     1e0:	f8 2e       	mov	r15, r24
     1e2:	cd 82       	std	Y+5, r12	; 0x05
     1e4:	de 82       	std	Y+6, r13	; 0x06
     1e6:	ef 82       	std	Y+7, r14	; 0x07
     1e8:	f8 86       	std	Y+8, r15	; 0x08
        Kd=kd;
     1ea:	1d 86       	std	Y+13, r1	; 0x0d
     1ec:	1e 86       	std	Y+14, r1	; 0x0e
     1ee:	1f 86       	std	Y+15, r1	; 0x0f
     1f0:	18 8a       	std	Y+16, r1	; 0x10
        Ki=ki;
     1f2:	81 2c       	mov	r8, r1
     1f4:	91 2c       	mov	r9, r1
     1f6:	98 ec       	ldi	r25, 0xC8	; 200
     1f8:	a9 2e       	mov	r10, r25
     1fa:	92 e4       	ldi	r25, 0x42	; 66
     1fc:	b9 2e       	mov	r11, r25
     1fe:	89 86       	std	Y+9, r8	; 0x09
     200:	9a 86       	std	Y+10, r9	; 0x0a
     202:	ab 86       	std	Y+11, r10	; 0x0b
     204:	bc 86       	std	Y+12, r11	; 0x0c
        Setpoint=setpoint;
     206:	19 8a       	std	Y+17, r1	; 0x11
     208:	1a 8a       	std	Y+18, r1	; 0x12
     20a:	1b 8a       	std	Y+19, r1	; 0x13
     20c:	1c 8a       	std	Y+20, r1	; 0x14
     20e:	d0 93 0a 03 	sts	0x030A, r29	; 0x80030a <Mot0_PidCtl+0x1>
     212:	c0 93 09 03 	sts	0x0309, r28	; 0x800309 <Mot0_PidCtl>
    Mot1_PidCtl= new PIDConfig_e("M1",MOT1__KP,MOT1__KI,MOT1__KD,0);
     216:	8d e1       	ldi	r24, 0x1D	; 29
     218:	90 e0       	ldi	r25, 0x00	; 0
     21a:	0e 94 f9 1a 	call	0x35f2	; 0x35f2 <_Znwj>
     21e:	ec 01       	movw	r28, r24
    double Input;
    double Output;

    PIDConfig_e(char* name, double kp, double ki, double kd, double setpoint)
    {
        strcpy(Name, name);
     220:	6d e0       	ldi	r22, 0x0D	; 13
     222:	71 e0       	ldi	r23, 0x01	; 1
     224:	0e 94 d4 1f 	call	0x3fa8	; 0x3fa8 <strcpy>
        Kp=kp;
     228:	cd 82       	std	Y+5, r12	; 0x05
     22a:	de 82       	std	Y+6, r13	; 0x06
     22c:	ef 82       	std	Y+7, r14	; 0x07
     22e:	f8 86       	std	Y+8, r15	; 0x08
        Kd=kd;
     230:	1d 86       	std	Y+13, r1	; 0x0d
     232:	1e 86       	std	Y+14, r1	; 0x0e
     234:	1f 86       	std	Y+15, r1	; 0x0f
     236:	18 8a       	std	Y+16, r1	; 0x10
        Ki=ki;
     238:	89 86       	std	Y+9, r8	; 0x09
     23a:	9a 86       	std	Y+10, r9	; 0x0a
     23c:	ab 86       	std	Y+11, r10	; 0x0b
     23e:	bc 86       	std	Y+12, r11	; 0x0c
        Setpoint=setpoint;
     240:	19 8a       	std	Y+17, r1	; 0x11
     242:	1a 8a       	std	Y+18, r1	; 0x12
     244:	1b 8a       	std	Y+19, r1	; 0x13
     246:	1c 8a       	std	Y+20, r1	; 0x14
     248:	d0 93 08 03 	sts	0x0308, r29	; 0x800308 <Mot1_PidCtl+0x1>
     24c:	c0 93 07 03 	sts	0x0307, r28	; 0x800307 <Mot1_PidCtl>
    Giro_PidCtl= new PIDConfig_e("Gi",GIRO__KP,GIRO__KI,GIRO__KD,GIRO__TARGET_ANGLE);
     250:	8d e1       	ldi	r24, 0x1D	; 29
     252:	90 e0       	ldi	r25, 0x00	; 0
     254:	0e 94 f9 1a 	call	0x35f2	; 0x35f2 <_Znwj>
     258:	ec 01       	movw	r28, r24
    double Input;
    double Output;

    PIDConfig_e(char* name, double kp, double ki, double kd, double setpoint)
    {
        strcpy(Name, name);
     25a:	60 e1       	ldi	r22, 0x10	; 16
     25c:	71 e0       	ldi	r23, 0x01	; 1
     25e:	0e 94 d4 1f 	call	0x3fa8	; 0x3fa8 <strcpy>
        Kp=kp;
     262:	8d ec       	ldi	r24, 0xCD	; 205
     264:	9c ec       	ldi	r25, 0xCC	; 204
     266:	ac e4       	ldi	r26, 0x4C	; 76
     268:	bf e3       	ldi	r27, 0x3F	; 63
     26a:	8d 83       	std	Y+5, r24	; 0x05
     26c:	9e 83       	std	Y+6, r25	; 0x06
     26e:	af 83       	std	Y+7, r26	; 0x07
     270:	b8 87       	std	Y+8, r27	; 0x08
        Kd=kd;
     272:	1d 86       	std	Y+13, r1	; 0x0d
     274:	1e 86       	std	Y+14, r1	; 0x0e
     276:	1f 86       	std	Y+15, r1	; 0x0f
     278:	18 8a       	std	Y+16, r1	; 0x10
        Ki=ki;
     27a:	89 87       	std	Y+9, r24	; 0x09
     27c:	9a 87       	std	Y+10, r25	; 0x0a
     27e:	ab 87       	std	Y+11, r26	; 0x0b
     280:	bc 87       	std	Y+12, r27	; 0x0c
        Setpoint=setpoint;
     282:	80 e0       	ldi	r24, 0x00	; 0
     284:	90 e0       	ldi	r25, 0x00	; 0
     286:	a0 e4       	ldi	r26, 0x40	; 64
     288:	b0 ec       	ldi	r27, 0xC0	; 192
     28a:	89 8b       	std	Y+17, r24	; 0x11
     28c:	9a 8b       	std	Y+18, r25	; 0x12
     28e:	ab 8b       	std	Y+19, r26	; 0x13
     290:	bc 8b       	std	Y+20, r27	; 0x14
     292:	d0 93 06 03 	sts	0x0306, r29	; 0x800306 <Giro_PidCtl+0x1>
     296:	c0 93 05 03 	sts	0x0305, r28	; 0x800305 <Giro_PidCtl>

    Mot0_Pid= new PID(&Mot0_PidCtl->Input, &Mot0_PidCtl->Output, &Mot0_PidCtl->Setpoint, Mot0_PidCtl->Kp, Mot0_PidCtl->Ki, Mot0_PidCtl->Kd, P_ON_E, DIRECT);
     29a:	8c e3       	ldi	r24, 0x3C	; 60
     29c:	90 e0       	ldi	r25, 0x00	; 0
     29e:	0e 94 f9 1a 	call	0x35f2	; 0x35f2 <_Znwj>
     2a2:	4c 01       	movw	r8, r24
     2a4:	e0 91 09 03 	lds	r30, 0x0309	; 0x800309 <Mot0_PidCtl>
     2a8:	f0 91 0a 03 	lds	r31, 0x030A	; 0x80030a <Mot0_PidCtl+0x1>
     2ac:	a1 84       	ldd	r10, Z+9	; 0x09
     2ae:	b2 84       	ldd	r11, Z+10	; 0x0a
     2b0:	c3 84       	ldd	r12, Z+11	; 0x0b
     2b2:	d4 84       	ldd	r13, Z+12	; 0x0c
     2b4:	e5 80       	ldd	r14, Z+5	; 0x05
     2b6:	f6 80       	ldd	r15, Z+6	; 0x06
     2b8:	07 81       	ldd	r16, Z+7	; 0x07
     2ba:	10 85       	ldd	r17, Z+8	; 0x08
     2bc:	9f 01       	movw	r18, r30
     2be:	2f 5e       	subi	r18, 0xEF	; 239
     2c0:	3f 4f       	sbci	r19, 0xFF	; 255
     2c2:	af 01       	movw	r20, r30
     2c4:	47 5e       	subi	r20, 0xE7	; 231
     2c6:	5f 4f       	sbci	r21, 0xFF	; 255
     2c8:	bf 01       	movw	r22, r30
     2ca:	6b 5e       	subi	r22, 0xEB	; 235
     2cc:	7f 4f       	sbci	r23, 0xFF	; 255
     2ce:	1f 92       	push	r1
     2d0:	1f 92       	push	r1
     2d2:	1f 92       	push	r1
     2d4:	c1 e0       	ldi	r28, 0x01	; 1
     2d6:	cf 93       	push	r28
     2d8:	80 89       	ldd	r24, Z+16	; 0x10
     2da:	8f 93       	push	r24
     2dc:	87 85       	ldd	r24, Z+15	; 0x0f
     2de:	8f 93       	push	r24
     2e0:	86 85       	ldd	r24, Z+14	; 0x0e
     2e2:	8f 93       	push	r24
     2e4:	85 85       	ldd	r24, Z+13	; 0x0d
     2e6:	8f 93       	push	r24
     2e8:	c4 01       	movw	r24, r8
     2ea:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <_ZN3PIDC1EPdS0_S0_dddii>
     2ee:	90 92 04 03 	sts	0x0304, r9	; 0x800304 <Mot0_Pid+0x1>
     2f2:	80 92 03 03 	sts	0x0303, r8	; 0x800303 <Mot0_Pid>
    Mot1_Pid= new PID(&Mot1_PidCtl->Input, &Mot1_PidCtl->Output, &Mot1_PidCtl->Setpoint, Mot1_PidCtl->Kp, Mot1_PidCtl->Ki, Mot1_PidCtl->Kd, P_ON_E, DIRECT);
     2f6:	8c e3       	ldi	r24, 0x3C	; 60
     2f8:	90 e0       	ldi	r25, 0x00	; 0
     2fa:	0e 94 f9 1a 	call	0x35f2	; 0x35f2 <_Znwj>
     2fe:	4c 01       	movw	r8, r24
     300:	e0 91 07 03 	lds	r30, 0x0307	; 0x800307 <Mot1_PidCtl>
     304:	f0 91 08 03 	lds	r31, 0x0308	; 0x800308 <Mot1_PidCtl+0x1>
     308:	a1 84       	ldd	r10, Z+9	; 0x09
     30a:	b2 84       	ldd	r11, Z+10	; 0x0a
     30c:	c3 84       	ldd	r12, Z+11	; 0x0b
     30e:	d4 84       	ldd	r13, Z+12	; 0x0c
     310:	e5 80       	ldd	r14, Z+5	; 0x05
     312:	f6 80       	ldd	r15, Z+6	; 0x06
     314:	07 81       	ldd	r16, Z+7	; 0x07
     316:	10 85       	ldd	r17, Z+8	; 0x08
     318:	9f 01       	movw	r18, r30
     31a:	2f 5e       	subi	r18, 0xEF	; 239
     31c:	3f 4f       	sbci	r19, 0xFF	; 255
     31e:	af 01       	movw	r20, r30
     320:	47 5e       	subi	r20, 0xE7	; 231
     322:	5f 4f       	sbci	r21, 0xFF	; 255
     324:	bf 01       	movw	r22, r30
     326:	6b 5e       	subi	r22, 0xEB	; 235
     328:	7f 4f       	sbci	r23, 0xFF	; 255
     32a:	1f 92       	push	r1
     32c:	1f 92       	push	r1
     32e:	1f 92       	push	r1
     330:	cf 93       	push	r28
     332:	80 89       	ldd	r24, Z+16	; 0x10
     334:	8f 93       	push	r24
     336:	87 85       	ldd	r24, Z+15	; 0x0f
     338:	8f 93       	push	r24
     33a:	86 85       	ldd	r24, Z+14	; 0x0e
     33c:	8f 93       	push	r24
     33e:	85 85       	ldd	r24, Z+13	; 0x0d
     340:	8f 93       	push	r24
     342:	c4 01       	movw	r24, r8
     344:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <_ZN3PIDC1EPdS0_S0_dddii>
     348:	90 92 02 03 	sts	0x0302, r9	; 0x800302 <Mot1_Pid+0x1>
     34c:	80 92 01 03 	sts	0x0301, r8	; 0x800301 <Mot1_Pid>
    Giro_Pid= new PID(&Giro_PidCtl->Input, &Giro_PidCtl->Output, &Giro_PidCtl->Setpoint, Giro_PidCtl->Kp, Giro_PidCtl->Ki, Giro_PidCtl->Kd, P_ON_E, DIRECT);
     350:	8c e3       	ldi	r24, 0x3C	; 60
     352:	90 e0       	ldi	r25, 0x00	; 0
     354:	0e 94 f9 1a 	call	0x35f2	; 0x35f2 <_Znwj>
     358:	4c 01       	movw	r8, r24
     35a:	e0 91 05 03 	lds	r30, 0x0305	; 0x800305 <Giro_PidCtl>
     35e:	f0 91 06 03 	lds	r31, 0x0306	; 0x800306 <Giro_PidCtl+0x1>
     362:	a1 84       	ldd	r10, Z+9	; 0x09
     364:	b2 84       	ldd	r11, Z+10	; 0x0a
     366:	c3 84       	ldd	r12, Z+11	; 0x0b
     368:	d4 84       	ldd	r13, Z+12	; 0x0c
     36a:	e5 80       	ldd	r14, Z+5	; 0x05
     36c:	f6 80       	ldd	r15, Z+6	; 0x06
     36e:	07 81       	ldd	r16, Z+7	; 0x07
     370:	10 85       	ldd	r17, Z+8	; 0x08
     372:	9f 01       	movw	r18, r30
     374:	2f 5e       	subi	r18, 0xEF	; 239
     376:	3f 4f       	sbci	r19, 0xFF	; 255
     378:	af 01       	movw	r20, r30
     37a:	47 5e       	subi	r20, 0xE7	; 231
     37c:	5f 4f       	sbci	r21, 0xFF	; 255
     37e:	bf 01       	movw	r22, r30
     380:	6b 5e       	subi	r22, 0xEB	; 235
     382:	7f 4f       	sbci	r23, 0xFF	; 255
     384:	1f 92       	push	r1
     386:	1f 92       	push	r1
     388:	1f 92       	push	r1
     38a:	cf 93       	push	r28
     38c:	80 89       	ldd	r24, Z+16	; 0x10
     38e:	8f 93       	push	r24
     390:	87 85       	ldd	r24, Z+15	; 0x0f
     392:	8f 93       	push	r24
     394:	86 85       	ldd	r24, Z+14	; 0x0e
     396:	8f 93       	push	r24
     398:	85 85       	ldd	r24, Z+13	; 0x0d
     39a:	8f 93       	push	r24
     39c:	c4 01       	movw	r24, r8
     39e:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <_ZN3PIDC1EPdS0_S0_dddii>
     3a2:	90 92 00 03 	sts	0x0300, r9	; 0x800300 <Giro_Pid+0x1>
     3a6:	80 92 ff 02 	sts	0x02FF, r8	; 0x8002ff <Giro_Pid>

    Mot0_Pid->SetSampleTime(MOT0__SAMPLE_TIME);
     3aa:	65 e0       	ldi	r22, 0x05	; 5
     3ac:	70 e0       	ldi	r23, 0x00	; 0
     3ae:	80 91 03 03 	lds	r24, 0x0303	; 0x800303 <Mot0_Pid>
     3b2:	90 91 04 03 	lds	r25, 0x0304	; 0x800304 <Mot0_Pid+0x1>
     3b6:	0e 94 41 0c 	call	0x1882	; 0x1882 <_ZN3PID13SetSampleTimeEi>
    Mot1_Pid->SetSampleTime(MOT1__SAMPLE_TIME);
     3ba:	65 e0       	ldi	r22, 0x05	; 5
     3bc:	70 e0       	ldi	r23, 0x00	; 0
     3be:	80 91 01 03 	lds	r24, 0x0301	; 0x800301 <Mot1_Pid>
     3c2:	90 91 02 03 	lds	r25, 0x0302	; 0x800302 <Mot1_Pid+0x1>
     3c6:	0e 94 41 0c 	call	0x1882	; 0x1882 <_ZN3PID13SetSampleTimeEi>
    Giro_Pid->SetSampleTime(GIRO__SAMPLE_TIME);
     3ca:	65 e0       	ldi	r22, 0x05	; 5
     3cc:	70 e0       	ldi	r23, 0x00	; 0
     3ce:	80 91 ff 02 	lds	r24, 0x02FF	; 0x8002ff <Giro_Pid>
     3d2:	90 91 00 03 	lds	r25, 0x0300	; 0x800300 <Giro_Pid+0x1>
     3d6:	0e 94 41 0c 	call	0x1882	; 0x1882 <_ZN3PID13SetSampleTimeEi>

    Mot0_Pid->SetOutputLimits(MOT0__OUT_MIN,MOT0__OUT_MAX);
     3da:	00 e0       	ldi	r16, 0x00	; 0
     3dc:	10 e0       	ldi	r17, 0x00	; 0
     3de:	2f e7       	ldi	r18, 0x7F	; 127
     3e0:	33 e4       	ldi	r19, 0x43	; 67
     3e2:	40 e0       	ldi	r20, 0x00	; 0
     3e4:	50 e0       	ldi	r21, 0x00	; 0
     3e6:	6f e7       	ldi	r22, 0x7F	; 127
     3e8:	73 ec       	ldi	r23, 0xC3	; 195
     3ea:	80 91 03 03 	lds	r24, 0x0303	; 0x800303 <Mot0_Pid>
     3ee:	90 91 04 03 	lds	r25, 0x0304	; 0x800304 <Mot0_Pid+0x1>
     3f2:	0e 94 8f 0c 	call	0x191e	; 0x191e <_ZN3PID15SetOutputLimitsEdd>
    Mot1_Pid->SetOutputLimits(MOT1__OUT_MIN,MOT1__OUT_MAX);
     3f6:	00 e0       	ldi	r16, 0x00	; 0
     3f8:	10 e0       	ldi	r17, 0x00	; 0
     3fa:	2f e7       	ldi	r18, 0x7F	; 127
     3fc:	33 e4       	ldi	r19, 0x43	; 67
     3fe:	40 e0       	ldi	r20, 0x00	; 0
     400:	50 e0       	ldi	r21, 0x00	; 0
     402:	6f e7       	ldi	r22, 0x7F	; 127
     404:	73 ec       	ldi	r23, 0xC3	; 195
     406:	80 91 01 03 	lds	r24, 0x0301	; 0x800301 <Mot1_Pid>
     40a:	90 91 02 03 	lds	r25, 0x0302	; 0x800302 <Mot1_Pid+0x1>
     40e:	0e 94 8f 0c 	call	0x191e	; 0x191e <_ZN3PID15SetOutputLimitsEdd>
    Giro_Pid->SetOutputLimits(GIRO__OUT_MIN,GIRO__OUT_MAX); //min and max enc speed for a sample time of 10 ms
     412:	00 e0       	ldi	r16, 0x00	; 0
     414:	10 e0       	ldi	r17, 0x00	; 0
     416:	2c e0       	ldi	r18, 0x0C	; 12
     418:	32 e4       	ldi	r19, 0x42	; 66
     41a:	40 e0       	ldi	r20, 0x00	; 0
     41c:	50 e0       	ldi	r21, 0x00	; 0
     41e:	6c e0       	ldi	r22, 0x0C	; 12
     420:	72 ec       	ldi	r23, 0xC2	; 194
     422:	80 91 ff 02 	lds	r24, 0x02FF	; 0x8002ff <Giro_Pid>
     426:	90 91 00 03 	lds	r25, 0x0300	; 0x800300 <Giro_Pid+0x1>
     42a:	0e 94 8f 0c 	call	0x191e	; 0x191e <_ZN3PID15SetOutputLimitsEdd>

    Mot0_Pid->SetMode(AUTOMATIC);
     42e:	61 e0       	ldi	r22, 0x01	; 1
     430:	70 e0       	ldi	r23, 0x00	; 0
     432:	80 91 03 03 	lds	r24, 0x0303	; 0x800303 <Mot0_Pid>
     436:	90 91 04 03 	lds	r25, 0x0304	; 0x800304 <Mot0_Pid+0x1>
     43a:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <_ZN3PID7SetModeEi>
    Mot1_Pid->SetMode(AUTOMATIC);
     43e:	61 e0       	ldi	r22, 0x01	; 1
     440:	70 e0       	ldi	r23, 0x00	; 0
     442:	80 91 01 03 	lds	r24, 0x0301	; 0x800301 <Mot1_Pid>
     446:	90 91 02 03 	lds	r25, 0x0302	; 0x800302 <Mot1_Pid+0x1>
     44a:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <_ZN3PID7SetModeEi>
    Giro_Pid->SetMode(AUTOMATIC);
     44e:	8d b7       	in	r24, 0x3d	; 61
     450:	9e b7       	in	r25, 0x3e	; 62
     452:	48 96       	adiw	r24, 0x18	; 24
     454:	0f b6       	in	r0, 0x3f	; 63
     456:	f8 94       	cli
     458:	9e bf       	out	0x3e, r25	; 62
     45a:	0f be       	out	0x3f, r0	; 63
     45c:	8d bf       	out	0x3d, r24	; 61
     45e:	61 e0       	ldi	r22, 0x01	; 1
     460:	70 e0       	ldi	r23, 0x00	; 0
     462:	80 91 ff 02 	lds	r24, 0x02FF	; 0x8002ff <Giro_Pid>
     466:	90 91 00 03 	lds	r25, 0x0300	; 0x800300 <Giro_Pid+0x1>

}
     46a:	df 91       	pop	r29
     46c:	cf 91       	pop	r28
     46e:	1f 91       	pop	r17
     470:	0f 91       	pop	r16
     472:	ff 90       	pop	r15
     474:	ef 90       	pop	r14
     476:	df 90       	pop	r13
     478:	cf 90       	pop	r12
     47a:	bf 90       	pop	r11
     47c:	af 90       	pop	r10
     47e:	9f 90       	pop	r9
     480:	8f 90       	pop	r8
    Mot1_Pid->SetOutputLimits(MOT1__OUT_MIN,MOT1__OUT_MAX);
    Giro_Pid->SetOutputLimits(GIRO__OUT_MIN,GIRO__OUT_MAX); //min and max enc speed for a sample time of 10 ms

    Mot0_Pid->SetMode(AUTOMATIC);
    Mot1_Pid->SetMode(AUTOMATIC);
    Giro_Pid->SetMode(AUTOMATIC);
     482:	0c 94 55 0d 	jmp	0x1aaa	; 0x1aaa <_ZN3PID7SetModeEi>

00000486 <_Z11PrintPidCfgP11PIDConfig_e>:
<-ENC: M0val M0dir M1val M2dir

*/


void PrintPidCfg(PIDConfig_e *cfg) {
     486:	cf 93       	push	r28
     488:	df 93       	push	r29
     48a:	ec 01       	movw	r28, r24
    Serial.print("DD: ");
     48c:	63 e1       	ldi	r22, 0x13	; 19
     48e:	71 e0       	ldi	r23, 0x01	; 1
     490:	8e e2       	ldi	r24, 0x2E	; 46
     492:	94 e0       	ldi	r25, 0x04	; 4
     494:	0e 94 3a 1b 	call	0x3674	; 0x3674 <_ZN5Print5printEPKc>
    Serial.print(cfg->Name);
     498:	be 01       	movw	r22, r28
     49a:	8e e2       	ldi	r24, 0x2E	; 46
     49c:	94 e0       	ldi	r25, 0x04	; 4
     49e:	0e 94 3a 1b 	call	0x3674	; 0x3674 <_ZN5Print5printEPKc>
    Serial.print(" ");
     4a2:	60 e2       	ldi	r22, 0x20	; 32
     4a4:	71 e0       	ldi	r23, 0x01	; 1
     4a6:	8e e2       	ldi	r24, 0x2E	; 46
     4a8:	94 e0       	ldi	r25, 0x04	; 4
     4aa:	0e 94 3a 1b 	call	0x3674	; 0x3674 <_ZN5Print5printEPKc>
    Serial.print(cfg->Kp);
     4ae:	4d 81       	ldd	r20, Y+5	; 0x05
     4b0:	5e 81       	ldd	r21, Y+6	; 0x06
     4b2:	6f 81       	ldd	r22, Y+7	; 0x07
     4b4:	78 85       	ldd	r23, Y+8	; 0x08
     4b6:	22 e0       	ldi	r18, 0x02	; 2
     4b8:	30 e0       	ldi	r19, 0x00	; 0
     4ba:	8e e2       	ldi	r24, 0x2E	; 46
     4bc:	94 e0       	ldi	r25, 0x04	; 4
     4be:	0e 94 df 1c 	call	0x39be	; 0x39be <_ZN5Print5printEdi>
    Serial.print(" ");
     4c2:	60 e2       	ldi	r22, 0x20	; 32
     4c4:	71 e0       	ldi	r23, 0x01	; 1
     4c6:	8e e2       	ldi	r24, 0x2E	; 46
     4c8:	94 e0       	ldi	r25, 0x04	; 4
     4ca:	0e 94 3a 1b 	call	0x3674	; 0x3674 <_ZN5Print5printEPKc>
    Serial.print(cfg->Ki);
     4ce:	49 85       	ldd	r20, Y+9	; 0x09
     4d0:	5a 85       	ldd	r21, Y+10	; 0x0a
     4d2:	6b 85       	ldd	r22, Y+11	; 0x0b
     4d4:	7c 85       	ldd	r23, Y+12	; 0x0c
     4d6:	22 e0       	ldi	r18, 0x02	; 2
     4d8:	30 e0       	ldi	r19, 0x00	; 0
     4da:	8e e2       	ldi	r24, 0x2E	; 46
     4dc:	94 e0       	ldi	r25, 0x04	; 4
     4de:	0e 94 df 1c 	call	0x39be	; 0x39be <_ZN5Print5printEdi>
    Serial.print(" ");
     4e2:	60 e2       	ldi	r22, 0x20	; 32
     4e4:	71 e0       	ldi	r23, 0x01	; 1
     4e6:	8e e2       	ldi	r24, 0x2E	; 46
     4e8:	94 e0       	ldi	r25, 0x04	; 4
     4ea:	0e 94 3a 1b 	call	0x3674	; 0x3674 <_ZN5Print5printEPKc>
    Serial.print(cfg->Kd);
     4ee:	4d 85       	ldd	r20, Y+13	; 0x0d
     4f0:	5e 85       	ldd	r21, Y+14	; 0x0e
     4f2:	6f 85       	ldd	r22, Y+15	; 0x0f
     4f4:	78 89       	ldd	r23, Y+16	; 0x10
     4f6:	22 e0       	ldi	r18, 0x02	; 2
     4f8:	30 e0       	ldi	r19, 0x00	; 0
     4fa:	8e e2       	ldi	r24, 0x2E	; 46
     4fc:	94 e0       	ldi	r25, 0x04	; 4
     4fe:	0e 94 df 1c 	call	0x39be	; 0x39be <_ZN5Print5printEdi>
    Serial.print(" ");
     502:	60 e2       	ldi	r22, 0x20	; 32
     504:	71 e0       	ldi	r23, 0x01	; 1
     506:	8e e2       	ldi	r24, 0x2E	; 46
     508:	94 e0       	ldi	r25, 0x04	; 4
     50a:	0e 94 3a 1b 	call	0x3674	; 0x3674 <_ZN5Print5printEPKc>
    Serial.print(cfg->Setpoint);
     50e:	49 89       	ldd	r20, Y+17	; 0x11
     510:	5a 89       	ldd	r21, Y+18	; 0x12
     512:	6b 89       	ldd	r22, Y+19	; 0x13
     514:	7c 89       	ldd	r23, Y+20	; 0x14
     516:	22 e0       	ldi	r18, 0x02	; 2
     518:	30 e0       	ldi	r19, 0x00	; 0
     51a:	8e e2       	ldi	r24, 0x2E	; 46
     51c:	94 e0       	ldi	r25, 0x04	; 4
     51e:	0e 94 df 1c 	call	0x39be	; 0x39be <_ZN5Print5printEdi>
    Serial.println(" ");
     522:	60 e2       	ldi	r22, 0x20	; 32
     524:	71 e0       	ldi	r23, 0x01	; 1
     526:	8e e2       	ldi	r24, 0x2E	; 46
     528:	94 e0       	ldi	r25, 0x04	; 4
}
     52a:	df 91       	pop	r29
     52c:	cf 91       	pop	r28
    Serial.print(cfg->Ki);
    Serial.print(" ");
    Serial.print(cfg->Kd);
    Serial.print(" ");
    Serial.print(cfg->Setpoint);
    Serial.println(" ");
     52e:	0c 94 47 1b 	jmp	0x368e	; 0x368e <_ZN5Print7printlnEPKc>

00000532 <_Z18PrintEncoderValuesv>:
}

void PrintEncoderValues() {
    Serial.print("ENC: ");
     532:	68 e1       	ldi	r22, 0x18	; 24
     534:	71 e0       	ldi	r23, 0x01	; 1
     536:	8e e2       	ldi	r24, 0x2E	; 46
     538:	94 e0       	ldi	r25, 0x04	; 4
     53a:	0e 94 3a 1b 	call	0x3674	; 0x3674 <_ZN5Print5printEPKc>
    Serial.print(Mot0_PidCtl->Input);
     53e:	e0 91 09 03 	lds	r30, 0x0309	; 0x800309 <Mot0_PidCtl>
     542:	f0 91 0a 03 	lds	r31, 0x030A	; 0x80030a <Mot0_PidCtl+0x1>
     546:	45 89       	ldd	r20, Z+21	; 0x15
     548:	56 89       	ldd	r21, Z+22	; 0x16
     54a:	67 89       	ldd	r22, Z+23	; 0x17
     54c:	70 8d       	ldd	r23, Z+24	; 0x18
     54e:	22 e0       	ldi	r18, 0x02	; 2
     550:	30 e0       	ldi	r19, 0x00	; 0
     552:	8e e2       	ldi	r24, 0x2E	; 46
     554:	94 e0       	ldi	r25, 0x04	; 4
     556:	0e 94 df 1c 	call	0x39be	; 0x39be <_ZN5Print5printEdi>
    (Mot0_Dir==0xFFFF)?Serial.print(" 1 "):Serial.print(" 0 ");
     55a:	6e e1       	ldi	r22, 0x1E	; 30
     55c:	71 e0       	ldi	r23, 0x01	; 1
     55e:	8e e2       	ldi	r24, 0x2E	; 46
     560:	94 e0       	ldi	r25, 0x04	; 4
     562:	0e 94 3a 1b 	call	0x3674	; 0x3674 <_ZN5Print5printEPKc>

    Serial.print(Mot1_PidCtl->Input);
     566:	e0 91 07 03 	lds	r30, 0x0307	; 0x800307 <Mot1_PidCtl>
     56a:	f0 91 08 03 	lds	r31, 0x0308	; 0x800308 <Mot1_PidCtl+0x1>
     56e:	45 89       	ldd	r20, Z+21	; 0x15
     570:	56 89       	ldd	r21, Z+22	; 0x16
     572:	67 89       	ldd	r22, Z+23	; 0x17
     574:	70 8d       	ldd	r23, Z+24	; 0x18
     576:	22 e0       	ldi	r18, 0x02	; 2
     578:	30 e0       	ldi	r19, 0x00	; 0
     57a:	8e e2       	ldi	r24, 0x2E	; 46
     57c:	94 e0       	ldi	r25, 0x04	; 4
     57e:	0e 94 df 1c 	call	0x39be	; 0x39be <_ZN5Print5printEdi>
    (Mot1_Dir==0xFFFF)?Serial.print(" 1 "):Serial.print(" 0 ");
     582:	6e e1       	ldi	r22, 0x1E	; 30
     584:	71 e0       	ldi	r23, 0x01	; 1
     586:	8e e2       	ldi	r24, 0x2E	; 46
     588:	94 e0       	ldi	r25, 0x04	; 4
     58a:	0e 94 3a 1b 	call	0x3674	; 0x3674 <_ZN5Print5printEPKc>
    Serial.println(" ");
     58e:	60 e2       	ldi	r22, 0x20	; 32
     590:	71 e0       	ldi	r23, 0x01	; 1
     592:	8e e2       	ldi	r24, 0x2E	; 46
     594:	94 e0       	ldi	r25, 0x04	; 4
     596:	0c 94 47 1b 	jmp	0x368e	; 0x368e <_ZN5Print7printlnEPKc>

0000059a <_Z20PrintPidOutputValuesv>:
}

void PrintPidOutputValues() {
    Serial.print("PID: ");
     59a:	62 e2       	ldi	r22, 0x22	; 34
     59c:	71 e0       	ldi	r23, 0x01	; 1
     59e:	8e e2       	ldi	r24, 0x2E	; 46
     5a0:	94 e0       	ldi	r25, 0x04	; 4
     5a2:	0e 94 3a 1b 	call	0x3674	; 0x3674 <_ZN5Print5printEPKc>
    Serial.print(Mot0_PidCtl->Output);
     5a6:	e0 91 09 03 	lds	r30, 0x0309	; 0x800309 <Mot0_PidCtl>
     5aa:	f0 91 0a 03 	lds	r31, 0x030A	; 0x80030a <Mot0_PidCtl+0x1>
     5ae:	41 8d       	ldd	r20, Z+25	; 0x19
     5b0:	52 8d       	ldd	r21, Z+26	; 0x1a
     5b2:	63 8d       	ldd	r22, Z+27	; 0x1b
     5b4:	74 8d       	ldd	r23, Z+28	; 0x1c
     5b6:	22 e0       	ldi	r18, 0x02	; 2
     5b8:	30 e0       	ldi	r19, 0x00	; 0
     5ba:	8e e2       	ldi	r24, 0x2E	; 46
     5bc:	94 e0       	ldi	r25, 0x04	; 4
     5be:	0e 94 df 1c 	call	0x39be	; 0x39be <_ZN5Print5printEdi>

    Serial.print(" ");
     5c2:	60 e2       	ldi	r22, 0x20	; 32
     5c4:	71 e0       	ldi	r23, 0x01	; 1
     5c6:	8e e2       	ldi	r24, 0x2E	; 46
     5c8:	94 e0       	ldi	r25, 0x04	; 4
     5ca:	0e 94 3a 1b 	call	0x3674	; 0x3674 <_ZN5Print5printEPKc>
    Serial.print(Mot1_PidCtl->Output);
     5ce:	e0 91 07 03 	lds	r30, 0x0307	; 0x800307 <Mot1_PidCtl>
     5d2:	f0 91 08 03 	lds	r31, 0x0308	; 0x800308 <Mot1_PidCtl+0x1>
     5d6:	41 8d       	ldd	r20, Z+25	; 0x19
     5d8:	52 8d       	ldd	r21, Z+26	; 0x1a
     5da:	63 8d       	ldd	r22, Z+27	; 0x1b
     5dc:	74 8d       	ldd	r23, Z+28	; 0x1c
     5de:	22 e0       	ldi	r18, 0x02	; 2
     5e0:	30 e0       	ldi	r19, 0x00	; 0
     5e2:	8e e2       	ldi	r24, 0x2E	; 46
     5e4:	94 e0       	ldi	r25, 0x04	; 4
     5e6:	0e 94 df 1c 	call	0x39be	; 0x39be <_ZN5Print5printEdi>

    Serial.println(" ");
     5ea:	60 e2       	ldi	r22, 0x20	; 32
     5ec:	71 e0       	ldi	r23, 0x01	; 1
     5ee:	8e e2       	ldi	r24, 0x2E	; 46
     5f0:	94 e0       	ldi	r25, 0x04	; 4
     5f2:	0e 94 47 1b 	call	0x368e	; 0x368e <_ZN5Print7printlnEPKc>

    Serial.print("SET: ");
     5f6:	68 e2       	ldi	r22, 0x28	; 40
     5f8:	71 e0       	ldi	r23, 0x01	; 1
     5fa:	8e e2       	ldi	r24, 0x2E	; 46
     5fc:	94 e0       	ldi	r25, 0x04	; 4
     5fe:	0e 94 3a 1b 	call	0x3674	; 0x3674 <_ZN5Print5printEPKc>
    Serial.print(Mot0_PidCtl->Setpoint);
     602:	e0 91 09 03 	lds	r30, 0x0309	; 0x800309 <Mot0_PidCtl>
     606:	f0 91 0a 03 	lds	r31, 0x030A	; 0x80030a <Mot0_PidCtl+0x1>
     60a:	41 89       	ldd	r20, Z+17	; 0x11
     60c:	52 89       	ldd	r21, Z+18	; 0x12
     60e:	63 89       	ldd	r22, Z+19	; 0x13
     610:	74 89       	ldd	r23, Z+20	; 0x14
     612:	22 e0       	ldi	r18, 0x02	; 2
     614:	30 e0       	ldi	r19, 0x00	; 0
     616:	8e e2       	ldi	r24, 0x2E	; 46
     618:	94 e0       	ldi	r25, 0x04	; 4
     61a:	0e 94 df 1c 	call	0x39be	; 0x39be <_ZN5Print5printEdi>

    Serial.print(" ");
     61e:	60 e2       	ldi	r22, 0x20	; 32
     620:	71 e0       	ldi	r23, 0x01	; 1
     622:	8e e2       	ldi	r24, 0x2E	; 46
     624:	94 e0       	ldi	r25, 0x04	; 4
     626:	0e 94 3a 1b 	call	0x3674	; 0x3674 <_ZN5Print5printEPKc>
    Serial.print(Mot1_PidCtl->Setpoint);
     62a:	e0 91 07 03 	lds	r30, 0x0307	; 0x800307 <Mot1_PidCtl>
     62e:	f0 91 08 03 	lds	r31, 0x0308	; 0x800308 <Mot1_PidCtl+0x1>
     632:	41 89       	ldd	r20, Z+17	; 0x11
     634:	52 89       	ldd	r21, Z+18	; 0x12
     636:	63 89       	ldd	r22, Z+19	; 0x13
     638:	74 89       	ldd	r23, Z+20	; 0x14
     63a:	22 e0       	ldi	r18, 0x02	; 2
     63c:	30 e0       	ldi	r19, 0x00	; 0
     63e:	8e e2       	ldi	r24, 0x2E	; 46
     640:	94 e0       	ldi	r25, 0x04	; 4
     642:	0e 94 df 1c 	call	0x39be	; 0x39be <_ZN5Print5printEdi>

    Serial.println(" ");
     646:	60 e2       	ldi	r22, 0x20	; 32
     648:	71 e0       	ldi	r23, 0x01	; 1
     64a:	8e e2       	ldi	r24, 0x2E	; 46
     64c:	94 e0       	ldi	r25, 0x04	; 4
     64e:	0c 94 47 1b 	jmp	0x368e	; 0x368e <_ZN5Print7printlnEPKc>

00000652 <_Z13Ser_ParseDatav>:
bool DirRight=false;
bool DirLeft=false;

uint16_t RemoteCmd=0;
unsigned long RemoteCmdRecTime=0;
void Ser_ParseData() {
     652:	cf 92       	push	r12
     654:	df 92       	push	r13
     656:	ef 92       	push	r14
     658:	ff 92       	push	r15
     65a:	0f 93       	push	r16
     65c:	1f 93       	push	r17
     65e:	cf 93       	push	r28
     660:	df 93       	push	r29
    if (Ser_NewData==false) return;
     662:	80 91 be 02 	lds	r24, 0x02BE	; 0x8002be <Ser_NewData>
     666:	88 23       	and	r24, r24
     668:	09 f4       	brne	.+2      	; 0x66c <_Z13Ser_ParseDatav+0x1a>
     66a:	c3 c1       	rjmp	.+902    	; 0x9f2 <__stack+0xf3>

    char *pch;

    pch=strtok(Ser_Buffer, " ");
     66c:	60 e2       	ldi	r22, 0x20	; 32
     66e:	71 e0       	ldi	r23, 0x01	; 1
     670:	8f eb       	ldi	r24, 0xBF	; 191
     672:	92 e0       	ldi	r25, 0x02	; 2
     674:	0e 94 c6 1f 	call	0x3f8c	; 0x3f8c <strtok>
     678:	ec 01       	movw	r28, r24
    if (strcmp(pch,"C:")==0) {
     67a:	6e e2       	ldi	r22, 0x2E	; 46
     67c:	71 e0       	ldi	r23, 0x01	; 1
     67e:	0e 94 cb 1f 	call	0x3f96	; 0x3f96 <strcmp>
     682:	89 2b       	or	r24, r25
     684:	b9 f4       	brne	.+46     	; 0x6b4 <_Z13Ser_ParseDatav+0x62>
        pch=strtok(NULL, " ");
     686:	60 e2       	ldi	r22, 0x20	; 32
     688:	71 e0       	ldi	r23, 0x01	; 1
     68a:	80 e0       	ldi	r24, 0x00	; 0
     68c:	90 e0       	ldi	r25, 0x00	; 0
     68e:	0e 94 c6 1f 	call	0x3f8c	; 0x3f8c <strtok>
        RemoteCmd=atoi(pch);
     692:	0e 94 a8 1f 	call	0x3f50	; 0x3f50 <atoi>
     696:	90 93 b6 02 	sts	0x02B6, r25	; 0x8002b6 <RemoteCmd+0x1>
     69a:	80 93 b5 02 	sts	0x02B5, r24	; 0x8002b5 <RemoteCmd>
        RemoteCmdRecTime=millis();
     69e:	0e 94 27 1d 	call	0x3a4e	; 0x3a4e <millis>
     6a2:	60 93 b1 02 	sts	0x02B1, r22	; 0x8002b1 <RemoteCmdRecTime>
     6a6:	70 93 b2 02 	sts	0x02B2, r23	; 0x8002b2 <RemoteCmdRecTime+0x1>
     6aa:	80 93 b3 02 	sts	0x02B3, r24	; 0x8002b3 <RemoteCmdRecTime+0x2>
     6ae:	90 93 b4 02 	sts	0x02B4, r25	; 0x8002b4 <RemoteCmdRecTime+0x3>
     6b2:	9d c1       	rjmp	.+826    	; 0x9ee <__stack+0xef>
        //  Serial.println(RemoteCmd);
    } else if(strcmp(pch,"SP")==0) { //Set Pid
     6b4:	61 e3       	ldi	r22, 0x31	; 49
     6b6:	71 e0       	ldi	r23, 0x01	; 1
     6b8:	ce 01       	movw	r24, r28
     6ba:	0e 94 cb 1f 	call	0x3f96	; 0x3f96 <strcmp>
     6be:	89 2b       	or	r24, r25
     6c0:	09 f0       	breq	.+2      	; 0x6c4 <_Z13Ser_ParseDatav+0x72>
     6c2:	94 c0       	rjmp	.+296    	; 0x7ec <_Z13Ser_ParseDatav+0x19a>
        Serial.println("Debug: SP Start");
     6c4:	64 e3       	ldi	r22, 0x34	; 52
     6c6:	71 e0       	ldi	r23, 0x01	; 1
     6c8:	8e e2       	ldi	r24, 0x2E	; 46
     6ca:	94 e0       	ldi	r25, 0x04	; 4
     6cc:	0e 94 47 1b 	call	0x368e	; 0x368e <_ZN5Print7printlnEPKc>

        pch=strtok(NULL, " ");
     6d0:	60 e2       	ldi	r22, 0x20	; 32
     6d2:	71 e0       	ldi	r23, 0x01	; 1
     6d4:	80 e0       	ldi	r24, 0x00	; 0
     6d6:	90 e0       	ldi	r25, 0x00	; 0
     6d8:	0e 94 c6 1f 	call	0x3f8c	; 0x3f8c <strtok>
     6dc:	ec 01       	movw	r28, r24
        if(strcmp(pch,"M0")==0) {
     6de:	6a e0       	ldi	r22, 0x0A	; 10
     6e0:	71 e0       	ldi	r23, 0x01	; 1
     6e2:	0e 94 cb 1f 	call	0x3f96	; 0x3f96 <strcmp>
     6e6:	89 2b       	or	r24, r25
     6e8:	69 f4       	brne	.+26     	; 0x704 <_Z13Ser_ParseDatav+0xb2>
            CfgPtr = Mot0_PidCtl;
     6ea:	80 91 09 03 	lds	r24, 0x0309	; 0x800309 <Mot0_PidCtl>
     6ee:	90 91 0a 03 	lds	r25, 0x030A	; 0x80030a <Mot0_PidCtl+0x1>
     6f2:	90 93 bd 02 	sts	0x02BD, r25	; 0x8002bd <CfgPtr+0x1>
     6f6:	80 93 bc 02 	sts	0x02BC, r24	; 0x8002bc <CfgPtr>
            PidPtr = Mot0_Pid;
     6fa:	80 91 03 03 	lds	r24, 0x0303	; 0x800303 <Mot0_Pid>
     6fe:	90 91 04 03 	lds	r25, 0x0304	; 0x800304 <Mot0_Pid+0x1>
     702:	27 c0       	rjmp	.+78     	; 0x752 <_Z13Ser_ParseDatav+0x100>
        } else if(strcmp(pch,"M1")==0) {
     704:	6d e0       	ldi	r22, 0x0D	; 13
     706:	71 e0       	ldi	r23, 0x01	; 1
     708:	ce 01       	movw	r24, r28
     70a:	0e 94 cb 1f 	call	0x3f96	; 0x3f96 <strcmp>
     70e:	89 2b       	or	r24, r25
     710:	69 f4       	brne	.+26     	; 0x72c <_Z13Ser_ParseDatav+0xda>
            CfgPtr = Mot1_PidCtl;
     712:	80 91 07 03 	lds	r24, 0x0307	; 0x800307 <Mot1_PidCtl>
     716:	90 91 08 03 	lds	r25, 0x0308	; 0x800308 <Mot1_PidCtl+0x1>
     71a:	90 93 bd 02 	sts	0x02BD, r25	; 0x8002bd <CfgPtr+0x1>
     71e:	80 93 bc 02 	sts	0x02BC, r24	; 0x8002bc <CfgPtr>
            PidPtr = Mot1_Pid;
     722:	80 91 01 03 	lds	r24, 0x0301	; 0x800301 <Mot1_Pid>
     726:	90 91 02 03 	lds	r25, 0x0302	; 0x800302 <Mot1_Pid+0x1>
     72a:	13 c0       	rjmp	.+38     	; 0x752 <_Z13Ser_ParseDatav+0x100>
        } else if(strcmp(pch,"Gi")==0) {
     72c:	60 e1       	ldi	r22, 0x10	; 16
     72e:	71 e0       	ldi	r23, 0x01	; 1
     730:	ce 01       	movw	r24, r28
     732:	0e 94 cb 1f 	call	0x3f96	; 0x3f96 <strcmp>
     736:	89 2b       	or	r24, r25
     738:	81 f4       	brne	.+32     	; 0x75a <_Z13Ser_ParseDatav+0x108>
            CfgPtr = Giro_PidCtl;
     73a:	80 91 05 03 	lds	r24, 0x0305	; 0x800305 <Giro_PidCtl>
     73e:	90 91 06 03 	lds	r25, 0x0306	; 0x800306 <Giro_PidCtl+0x1>
     742:	90 93 bd 02 	sts	0x02BD, r25	; 0x8002bd <CfgPtr+0x1>
     746:	80 93 bc 02 	sts	0x02BC, r24	; 0x8002bc <CfgPtr>
            PidPtr =  Giro_Pid;
     74a:	80 91 ff 02 	lds	r24, 0x02FF	; 0x8002ff <Giro_Pid>
     74e:	90 91 00 03 	lds	r25, 0x0300	; 0x800300 <Giro_Pid+0x1>
     752:	90 93 bb 02 	sts	0x02BB, r25	; 0x8002bb <PidPtr+0x1>
     756:	80 93 ba 02 	sts	0x02BA, r24	; 0x8002ba <PidPtr>
        }

        pch=strtok(NULL, " ");
     75a:	60 e2       	ldi	r22, 0x20	; 32
     75c:	71 e0       	ldi	r23, 0x01	; 1
     75e:	80 e0       	ldi	r24, 0x00	; 0
     760:	90 e0       	ldi	r25, 0x00	; 0
     762:	0e 94 c6 1f 	call	0x3f8c	; 0x3f8c <strtok>
        CfgPtr->Kp=atof(pch);
     766:	c0 91 bc 02 	lds	r28, 0x02BC	; 0x8002bc <CfgPtr>
     76a:	d0 91 bd 02 	lds	r29, 0x02BD	; 0x8002bd <CfgPtr+0x1>
     76e:	0e 94 a4 1f 	call	0x3f48	; 0x3f48 <atof>
     772:	6d 83       	std	Y+5, r22	; 0x05
     774:	7e 83       	std	Y+6, r23	; 0x06
     776:	8f 83       	std	Y+7, r24	; 0x07
     778:	98 87       	std	Y+8, r25	; 0x08

        pch=strtok(NULL, " ");
     77a:	60 e2       	ldi	r22, 0x20	; 32
     77c:	71 e0       	ldi	r23, 0x01	; 1
     77e:	80 e0       	ldi	r24, 0x00	; 0
     780:	90 e0       	ldi	r25, 0x00	; 0
     782:	0e 94 c6 1f 	call	0x3f8c	; 0x3f8c <strtok>
        CfgPtr->Ki=atof(pch);
     786:	c0 91 bc 02 	lds	r28, 0x02BC	; 0x8002bc <CfgPtr>
     78a:	d0 91 bd 02 	lds	r29, 0x02BD	; 0x8002bd <CfgPtr+0x1>
     78e:	0e 94 a4 1f 	call	0x3f48	; 0x3f48 <atof>
     792:	69 87       	std	Y+9, r22	; 0x09
     794:	7a 87       	std	Y+10, r23	; 0x0a
     796:	8b 87       	std	Y+11, r24	; 0x0b
     798:	9c 87       	std	Y+12, r25	; 0x0c

        pch=strtok(NULL, " ");
     79a:	60 e2       	ldi	r22, 0x20	; 32
     79c:	71 e0       	ldi	r23, 0x01	; 1
     79e:	80 e0       	ldi	r24, 0x00	; 0
     7a0:	90 e0       	ldi	r25, 0x00	; 0
     7a2:	0e 94 c6 1f 	call	0x3f8c	; 0x3f8c <strtok>
        CfgPtr->Kd=atof(pch);
     7a6:	c0 91 bc 02 	lds	r28, 0x02BC	; 0x8002bc <CfgPtr>
     7aa:	d0 91 bd 02 	lds	r29, 0x02BD	; 0x8002bd <CfgPtr+0x1>
     7ae:	0e 94 a4 1f 	call	0x3f48	; 0x3f48 <atof>
     7b2:	6d 87       	std	Y+13, r22	; 0x0d
     7b4:	7e 87       	std	Y+14, r23	; 0x0e
     7b6:	8f 87       	std	Y+15, r24	; 0x0f
     7b8:	98 8b       	std	Y+16, r25	; 0x10

        PidPtr->SetTunings(CfgPtr->Kp,CfgPtr->Ki,CfgPtr->Kd);
     7ba:	e0 91 bc 02 	lds	r30, 0x02BC	; 0x8002bc <CfgPtr>
     7be:	f0 91 bd 02 	lds	r31, 0x02BD	; 0x8002bd <CfgPtr+0x1>
     7c2:	c5 84       	ldd	r12, Z+13	; 0x0d
     7c4:	d6 84       	ldd	r13, Z+14	; 0x0e
     7c6:	e7 84       	ldd	r14, Z+15	; 0x0f
     7c8:	f0 88       	ldd	r15, Z+16	; 0x10
     7ca:	01 85       	ldd	r16, Z+9	; 0x09
     7cc:	12 85       	ldd	r17, Z+10	; 0x0a
     7ce:	23 85       	ldd	r18, Z+11	; 0x0b
     7d0:	34 85       	ldd	r19, Z+12	; 0x0c
     7d2:	45 81       	ldd	r20, Z+5	; 0x05
     7d4:	56 81       	ldd	r21, Z+6	; 0x06
     7d6:	67 81       	ldd	r22, Z+7	; 0x07
     7d8:	70 85       	ldd	r23, Z+8	; 0x08
     7da:	80 91 ba 02 	lds	r24, 0x02BA	; 0x8002ba <PidPtr>
     7de:	90 91 bb 02 	lds	r25, 0x02BB	; 0x8002bb <PidPtr+0x1>
     7e2:	0e 94 2b 0c 	call	0x1856	; 0x1856 <_ZN3PID10SetTuningsEddd>

        Serial.println("Debug: SP Done");
     7e6:	64 e4       	ldi	r22, 0x44	; 68
     7e8:	71 e0       	ldi	r23, 0x01	; 1
     7ea:	43 c0       	rjmp	.+134    	; 0x872 <_Z13Ser_ParseDatav+0x220>
    } else  if(strcmp(pch,"GD")==0) { //Get Pid Data
     7ec:	63 e5       	ldi	r22, 0x53	; 83
     7ee:	71 e0       	ldi	r23, 0x01	; 1
     7f0:	ce 01       	movw	r24, r28
     7f2:	0e 94 cb 1f 	call	0x3f96	; 0x3f96 <strcmp>
     7f6:	89 2b       	or	r24, r25
     7f8:	09 f0       	breq	.+2      	; 0x7fc <_Z13Ser_ParseDatav+0x1aa>
     7fa:	40 c0       	rjmp	.+128    	; 0x87c <_Z13Ser_ParseDatav+0x22a>
        Serial.println("Debug: GD Start");
     7fc:	66 e5       	ldi	r22, 0x56	; 86
     7fe:	71 e0       	ldi	r23, 0x01	; 1
     800:	8e e2       	ldi	r24, 0x2E	; 46
     802:	94 e0       	ldi	r25, 0x04	; 4
     804:	0e 94 47 1b 	call	0x368e	; 0x368e <_ZN5Print7printlnEPKc>

        pch=strtok(NULL, " ");
     808:	60 e2       	ldi	r22, 0x20	; 32
     80a:	71 e0       	ldi	r23, 0x01	; 1
     80c:	80 e0       	ldi	r24, 0x00	; 0
     80e:	90 e0       	ldi	r25, 0x00	; 0
     810:	0e 94 c6 1f 	call	0x3f8c	; 0x3f8c <strtok>
     814:	ec 01       	movw	r28, r24

        if(strcmp(pch,"M0")==0) {
     816:	6a e0       	ldi	r22, 0x0A	; 10
     818:	71 e0       	ldi	r23, 0x01	; 1
     81a:	0e 94 cb 1f 	call	0x3f96	; 0x3f96 <strcmp>
     81e:	89 2b       	or	r24, r25
     820:	29 f4       	brne	.+10     	; 0x82c <_Z13Ser_ParseDatav+0x1da>
            CfgPtr = Mot0_PidCtl;
     822:	80 91 09 03 	lds	r24, 0x0309	; 0x800309 <Mot0_PidCtl>
     826:	90 91 0a 03 	lds	r25, 0x030A	; 0x80030a <Mot0_PidCtl+0x1>
     82a:	17 c0       	rjmp	.+46     	; 0x85a <_Z13Ser_ParseDatav+0x208>
        } else if(strcmp(pch,"M1")==0) {
     82c:	6d e0       	ldi	r22, 0x0D	; 13
     82e:	71 e0       	ldi	r23, 0x01	; 1
     830:	ce 01       	movw	r24, r28
     832:	0e 94 cb 1f 	call	0x3f96	; 0x3f96 <strcmp>
     836:	89 2b       	or	r24, r25
     838:	29 f4       	brne	.+10     	; 0x844 <_Z13Ser_ParseDatav+0x1f2>
            CfgPtr = Mot1_PidCtl;
     83a:	80 91 07 03 	lds	r24, 0x0307	; 0x800307 <Mot1_PidCtl>
     83e:	90 91 08 03 	lds	r25, 0x0308	; 0x800308 <Mot1_PidCtl+0x1>
     842:	0b c0       	rjmp	.+22     	; 0x85a <_Z13Ser_ParseDatav+0x208>
        } else if(strcmp(pch,"Gi")==0) {
     844:	60 e1       	ldi	r22, 0x10	; 16
     846:	71 e0       	ldi	r23, 0x01	; 1
     848:	ce 01       	movw	r24, r28
     84a:	0e 94 cb 1f 	call	0x3f96	; 0x3f96 <strcmp>
     84e:	89 2b       	or	r24, r25
     850:	41 f4       	brne	.+16     	; 0x862 <_Z13Ser_ParseDatav+0x210>
            CfgPtr = Giro_PidCtl;
     852:	80 91 05 03 	lds	r24, 0x0305	; 0x800305 <Giro_PidCtl>
     856:	90 91 06 03 	lds	r25, 0x0306	; 0x800306 <Giro_PidCtl+0x1>
     85a:	90 93 bd 02 	sts	0x02BD, r25	; 0x8002bd <CfgPtr+0x1>
     85e:	80 93 bc 02 	sts	0x02BC, r24	; 0x8002bc <CfgPtr>
        }

        PrintPidCfg(CfgPtr);
     862:	80 91 bc 02 	lds	r24, 0x02BC	; 0x8002bc <CfgPtr>
     866:	90 91 bd 02 	lds	r25, 0x02BD	; 0x8002bd <CfgPtr+0x1>
     86a:	0e 94 43 02 	call	0x486	; 0x486 <_Z11PrintPidCfgP11PIDConfig_e>

        Serial.println("Debug: GD Done");
     86e:	66 e6       	ldi	r22, 0x66	; 102
     870:	71 e0       	ldi	r23, 0x01	; 1
     872:	8e e2       	ldi	r24, 0x2E	; 46
     874:	94 e0       	ldi	r25, 0x04	; 4
     876:	0e 94 47 1b 	call	0x368e	; 0x368e <_ZN5Print7printlnEPKc>
     87a:	b9 c0       	rjmp	.+370    	; 0x9ee <__stack+0xef>
    } else if(strcmp(pch,"SS")==0) { //Set  setpoint
     87c:	65 e7       	ldi	r22, 0x75	; 117
     87e:	71 e0       	ldi	r23, 0x01	; 1
     880:	ce 01       	movw	r24, r28
     882:	0e 94 cb 1f 	call	0x3f96	; 0x3f96 <strcmp>
     886:	89 2b       	or	r24, r25
     888:	09 f0       	breq	.+2      	; 0x88c <_Z13Ser_ParseDatav+0x23a>
     88a:	4e c0       	rjmp	.+156    	; 0x928 <__stack+0x29>
        Serial.println("Debug: SS Start");
     88c:	68 e7       	ldi	r22, 0x78	; 120
     88e:	71 e0       	ldi	r23, 0x01	; 1
     890:	8e e2       	ldi	r24, 0x2E	; 46
     892:	94 e0       	ldi	r25, 0x04	; 4
     894:	0e 94 47 1b 	call	0x368e	; 0x368e <_ZN5Print7printlnEPKc>
        pch=strtok(NULL, " ");
     898:	60 e2       	ldi	r22, 0x20	; 32
     89a:	71 e0       	ldi	r23, 0x01	; 1
     89c:	80 e0       	ldi	r24, 0x00	; 0
     89e:	90 e0       	ldi	r25, 0x00	; 0
     8a0:	0e 94 c6 1f 	call	0x3f8c	; 0x3f8c <strtok>
     8a4:	ec 01       	movw	r28, r24

        if(strcmp(pch,"M0")==0) {
     8a6:	6a e0       	ldi	r22, 0x0A	; 10
     8a8:	71 e0       	ldi	r23, 0x01	; 1
     8aa:	0e 94 cb 1f 	call	0x3f96	; 0x3f96 <strcmp>
     8ae:	89 2b       	or	r24, r25
     8b0:	29 f4       	brne	.+10     	; 0x8bc <_Z13Ser_ParseDatav+0x26a>
            CfgPtr = Mot0_PidCtl;
     8b2:	80 91 09 03 	lds	r24, 0x0309	; 0x800309 <Mot0_PidCtl>
     8b6:	90 91 0a 03 	lds	r25, 0x030A	; 0x80030a <Mot0_PidCtl+0x1>
     8ba:	17 c0       	rjmp	.+46     	; 0x8ea <_Z13Ser_ParseDatav+0x298>
            PidPtr = Mot0_Pid;
        } else if(strcmp(pch,"M1")==0) {
     8bc:	6d e0       	ldi	r22, 0x0D	; 13
     8be:	71 e0       	ldi	r23, 0x01	; 1
     8c0:	ce 01       	movw	r24, r28
     8c2:	0e 94 cb 1f 	call	0x3f96	; 0x3f96 <strcmp>
     8c6:	89 2b       	or	r24, r25
     8c8:	29 f4       	brne	.+10     	; 0x8d4 <_Z13Ser_ParseDatav+0x282>
            CfgPtr = Mot1_PidCtl;
     8ca:	80 91 07 03 	lds	r24, 0x0307	; 0x800307 <Mot1_PidCtl>
     8ce:	90 91 08 03 	lds	r25, 0x0308	; 0x800308 <Mot1_PidCtl+0x1>
     8d2:	0b c0       	rjmp	.+22     	; 0x8ea <_Z13Ser_ParseDatav+0x298>
            PidPtr = Mot0_Pid;
        } else if(strcmp(pch,"Gi")==0) {
     8d4:	60 e1       	ldi	r22, 0x10	; 16
     8d6:	71 e0       	ldi	r23, 0x01	; 1
     8d8:	ce 01       	movw	r24, r28
     8da:	0e 94 cb 1f 	call	0x3f96	; 0x3f96 <strcmp>
     8de:	89 2b       	or	r24, r25
     8e0:	81 f4       	brne	.+32     	; 0x902 <__stack+0x3>
            CfgPtr = Giro_PidCtl;
     8e2:	80 91 05 03 	lds	r24, 0x0305	; 0x800305 <Giro_PidCtl>
     8e6:	90 91 06 03 	lds	r25, 0x0306	; 0x800306 <Giro_PidCtl+0x1>
     8ea:	90 93 bd 02 	sts	0x02BD, r25	; 0x8002bd <CfgPtr+0x1>
     8ee:	80 93 bc 02 	sts	0x02BC, r24	; 0x8002bc <CfgPtr>
            PidPtr = Mot0_Pid;
     8f2:	80 91 03 03 	lds	r24, 0x0303	; 0x800303 <Mot0_Pid>
     8f6:	90 91 04 03 	lds	r25, 0x0304	; 0x800304 <Mot0_Pid+0x1>
     8fa:	90 93 bb 02 	sts	0x02BB, r25	; 0x8002bb <PidPtr+0x1>
     8fe:	80 93 ba 02 	sts	0x02BA, r24	; 0x8002ba <PidPtr>
        }

        pch=strtok(NULL, " ");
     902:	60 e2       	ldi	r22, 0x20	; 32
     904:	71 e0       	ldi	r23, 0x01	; 1
     906:	80 e0       	ldi	r24, 0x00	; 0
     908:	90 e0       	ldi	r25, 0x00	; 0
     90a:	0e 94 c6 1f 	call	0x3f8c	; 0x3f8c <strtok>

        CfgPtr->Setpoint=atof(pch);
     90e:	c0 91 bc 02 	lds	r28, 0x02BC	; 0x8002bc <CfgPtr>
     912:	d0 91 bd 02 	lds	r29, 0x02BD	; 0x8002bd <CfgPtr+0x1>
     916:	0e 94 a4 1f 	call	0x3f48	; 0x3f48 <atof>
     91a:	69 8b       	std	Y+17, r22	; 0x11
     91c:	7a 8b       	std	Y+18, r23	; 0x12
     91e:	8b 8b       	std	Y+19, r24	; 0x13
     920:	9c 8b       	std	Y+20, r25	; 0x14
        Serial.println("Debug: SS Done");
     922:	68 e8       	ldi	r22, 0x88	; 136
     924:	71 e0       	ldi	r23, 0x01	; 1
     926:	a5 cf       	rjmp	.-182    	; 0x872 <_Z13Ser_ParseDatav+0x220>

    }

    else if (strcmp(pch,"GC_ON")==0) {
     928:	67 e9       	ldi	r22, 0x97	; 151
     92a:	71 e0       	ldi	r23, 0x01	; 1
     92c:	ce 01       	movw	r24, r28
     92e:	0e 94 cb 1f 	call	0x3f96	; 0x3f96 <strcmp>
     932:	89 2b       	or	r24, r25
     934:	21 f4       	brne	.+8      	; 0x93e <__stack+0x3f>
        connectGiroToMot=true;
     936:	81 e0       	ldi	r24, 0x01	; 1
     938:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <connectGiroToMot>
     93c:	58 c0       	rjmp	.+176    	; 0x9ee <__stack+0xef>
    } else if (strcmp(pch,"GC_OFF")==0) {
     93e:	6d e9       	ldi	r22, 0x9D	; 157
     940:	71 e0       	ldi	r23, 0x01	; 1
     942:	ce 01       	movw	r24, r28
     944:	0e 94 cb 1f 	call	0x3f96	; 0x3f96 <strcmp>
     948:	89 2b       	or	r24, r25
     94a:	99 f4       	brne	.+38     	; 0x972 <__stack+0x73>
        connectGiroToMot=false;
     94c:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <connectGiroToMot>
        Mot0_PidCtl->Setpoint=0;
     950:	e0 91 09 03 	lds	r30, 0x0309	; 0x800309 <Mot0_PidCtl>
     954:	f0 91 0a 03 	lds	r31, 0x030A	; 0x80030a <Mot0_PidCtl+0x1>
     958:	11 8a       	std	Z+17, r1	; 0x11
     95a:	12 8a       	std	Z+18, r1	; 0x12
     95c:	13 8a       	std	Z+19, r1	; 0x13
     95e:	14 8a       	std	Z+20, r1	; 0x14
        Mot1_PidCtl->Setpoint=0;
     960:	e0 91 07 03 	lds	r30, 0x0307	; 0x800307 <Mot1_PidCtl>
     964:	f0 91 08 03 	lds	r31, 0x0308	; 0x800308 <Mot1_PidCtl+0x1>
     968:	11 8a       	std	Z+17, r1	; 0x11
     96a:	12 8a       	std	Z+18, r1	; 0x12
     96c:	13 8a       	std	Z+19, r1	; 0x13
     96e:	14 8a       	std	Z+20, r1	; 0x14
     970:	3e c0       	rjmp	.+124    	; 0x9ee <__stack+0xef>
    } else if (strcmp(pch,"GRP_ON")==0) {
     972:	64 ea       	ldi	r22, 0xA4	; 164
     974:	71 e0       	ldi	r23, 0x01	; 1
     976:	ce 01       	movw	r24, r28
     978:	0e 94 cb 1f 	call	0x3f96	; 0x3f96 <strcmp>
     97c:	89 2b       	or	r24, r25
     97e:	21 f4       	brne	.+8      	; 0x988 <__stack+0x89>
        printRawGiro=true;
     980:	81 e0       	ldi	r24, 0x01	; 1
     982:	80 93 b9 02 	sts	0x02B9, r24	; 0x8002b9 <printRawGiro>
     986:	33 c0       	rjmp	.+102    	; 0x9ee <__stack+0xef>
    } else if (strcmp(pch,"GRP_OFF")==0) {
     988:	6b ea       	ldi	r22, 0xAB	; 171
     98a:	71 e0       	ldi	r23, 0x01	; 1
     98c:	ce 01       	movw	r24, r28
     98e:	0e 94 cb 1f 	call	0x3f96	; 0x3f96 <strcmp>
     992:	89 2b       	or	r24, r25
     994:	19 f4       	brne	.+6      	; 0x99c <__stack+0x9d>
        printRawGiro=false;
     996:	10 92 b9 02 	sts	0x02B9, r1	; 0x8002b9 <printRawGiro>
     99a:	29 c0       	rjmp	.+82     	; 0x9ee <__stack+0xef>
    } else if (strcmp(pch,"MP_ON")==0) {
     99c:	63 eb       	ldi	r22, 0xB3	; 179
     99e:	71 e0       	ldi	r23, 0x01	; 1
     9a0:	ce 01       	movw	r24, r28
     9a2:	0e 94 cb 1f 	call	0x3f96	; 0x3f96 <strcmp>
     9a6:	89 2b       	or	r24, r25
     9a8:	21 f4       	brne	.+8      	; 0x9b2 <__stack+0xb3>
        printMotPid=true;
     9aa:	81 e0       	ldi	r24, 0x01	; 1
     9ac:	80 93 b8 02 	sts	0x02B8, r24	; 0x8002b8 <printMotPid>
     9b0:	1e c0       	rjmp	.+60     	; 0x9ee <__stack+0xef>
    } else if (strcmp(pch,"MP_OFF")==0) {
     9b2:	69 eb       	ldi	r22, 0xB9	; 185
     9b4:	71 e0       	ldi	r23, 0x01	; 1
     9b6:	ce 01       	movw	r24, r28
     9b8:	0e 94 cb 1f 	call	0x3f96	; 0x3f96 <strcmp>
     9bc:	89 2b       	or	r24, r25
     9be:	19 f4       	brne	.+6      	; 0x9c6 <__stack+0xc7>
        printMotPid=false;
     9c0:	10 92 b8 02 	sts	0x02B8, r1	; 0x8002b8 <printMotPid>
     9c4:	14 c0       	rjmp	.+40     	; 0x9ee <__stack+0xef>
    } else if (strcmp(pch,"GP_ON")==0) {
     9c6:	60 ec       	ldi	r22, 0xC0	; 192
     9c8:	71 e0       	ldi	r23, 0x01	; 1
     9ca:	ce 01       	movw	r24, r28
     9cc:	0e 94 cb 1f 	call	0x3f96	; 0x3f96 <strcmp>
     9d0:	89 2b       	or	r24, r25
     9d2:	21 f4       	brne	.+8      	; 0x9dc <__stack+0xdd>
        printGiroPid=true;
     9d4:	81 e0       	ldi	r24, 0x01	; 1
     9d6:	80 93 b7 02 	sts	0x02B7, r24	; 0x8002b7 <printGiroPid>
     9da:	09 c0       	rjmp	.+18     	; 0x9ee <__stack+0xef>
    } else if (strcmp(pch,"GP_OFF")==0) {
     9dc:	66 ec       	ldi	r22, 0xC6	; 198
     9de:	71 e0       	ldi	r23, 0x01	; 1
     9e0:	ce 01       	movw	r24, r28
     9e2:	0e 94 cb 1f 	call	0x3f96	; 0x3f96 <strcmp>
     9e6:	89 2b       	or	r24, r25
     9e8:	11 f4       	brne	.+4      	; 0x9ee <__stack+0xef>
        printGiroPid=false;
     9ea:	10 92 b7 02 	sts	0x02B7, r1	; 0x8002b7 <printGiroPid>
    }



    Ser_NewData=false;
     9ee:	10 92 be 02 	sts	0x02BE, r1	; 0x8002be <Ser_NewData>
}
     9f2:	df 91       	pop	r29
     9f4:	cf 91       	pop	r28
     9f6:	1f 91       	pop	r17
     9f8:	0f 91       	pop	r16
     9fa:	ff 90       	pop	r15
     9fc:	ef 90       	pop	r14
     9fe:	df 90       	pop	r13
     a00:	cf 90       	pop	r12
     a02:	08 95       	ret

00000a04 <_Z19UpdateEncoderValuesv>:


void UpdateEncoderValues() {
     a04:	cf 93       	push	r28
     a06:	df 93       	push	r29
    Mot0_PidCtl->Input=Mot0_Enc;
     a08:	c0 91 09 03 	lds	r28, 0x0309	; 0x800309 <Mot0_PidCtl>
     a0c:	d0 91 0a 03 	lds	r29, 0x030A	; 0x80030a <Mot0_PidCtl+0x1>
     a10:	60 91 2a 04 	lds	r22, 0x042A	; 0x80042a <Mot0_Enc>
     a14:	70 91 2b 04 	lds	r23, 0x042B	; 0x80042b <Mot0_Enc+0x1>
     a18:	80 91 2c 04 	lds	r24, 0x042C	; 0x80042c <Mot0_Enc+0x2>
     a1c:	90 91 2d 04 	lds	r25, 0x042D	; 0x80042d <Mot0_Enc+0x3>
     a20:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <__floatsisf>
     a24:	6d 8b       	std	Y+21, r22	; 0x15
     a26:	7e 8b       	std	Y+22, r23	; 0x16
     a28:	8f 8b       	std	Y+23, r24	; 0x17
     a2a:	98 8f       	std	Y+24, r25	; 0x18
    Mot1_PidCtl->Input=Mot1_Enc;
     a2c:	c0 91 07 03 	lds	r28, 0x0307	; 0x800307 <Mot1_PidCtl>
     a30:	d0 91 08 03 	lds	r29, 0x0308	; 0x800308 <Mot1_PidCtl+0x1>
     a34:	60 91 26 04 	lds	r22, 0x0426	; 0x800426 <Mot1_Enc>
     a38:	70 91 27 04 	lds	r23, 0x0427	; 0x800427 <Mot1_Enc+0x1>
     a3c:	80 91 28 04 	lds	r24, 0x0428	; 0x800428 <Mot1_Enc+0x2>
     a40:	90 91 29 04 	lds	r25, 0x0429	; 0x800429 <Mot1_Enc+0x3>
     a44:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <__floatsisf>
     a48:	6d 8b       	std	Y+21, r22	; 0x15
     a4a:	7e 8b       	std	Y+22, r23	; 0x16
     a4c:	8f 8b       	std	Y+23, r24	; 0x17
     a4e:	98 8f       	std	Y+24, r25	; 0x18

    Mot0_Enc=0;
     a50:	10 92 2a 04 	sts	0x042A, r1	; 0x80042a <Mot0_Enc>
     a54:	10 92 2b 04 	sts	0x042B, r1	; 0x80042b <Mot0_Enc+0x1>
     a58:	10 92 2c 04 	sts	0x042C, r1	; 0x80042c <Mot0_Enc+0x2>
     a5c:	10 92 2d 04 	sts	0x042D, r1	; 0x80042d <Mot0_Enc+0x3>
    Mot1_Enc=0;
     a60:	10 92 26 04 	sts	0x0426, r1	; 0x800426 <Mot1_Enc>
     a64:	10 92 27 04 	sts	0x0427, r1	; 0x800427 <Mot1_Enc+0x1>
     a68:	10 92 28 04 	sts	0x0428, r1	; 0x800428 <Mot1_Enc+0x2>
     a6c:	10 92 29 04 	sts	0x0429, r1	; 0x800429 <Mot1_Enc+0x3>
}
     a70:	df 91       	pop	r29
     a72:	cf 91       	pop	r28
     a74:	08 95       	ret

00000a76 <_Z13Giro_ReadDatav>:

unsigned long Giro_currTime;
unsigned long Giro_loopTime;
unsigned long Giro_prevTime;

void Giro_ReadData() {
     a76:	8f 92       	push	r8
     a78:	9f 92       	push	r9
     a7a:	af 92       	push	r10
     a7c:	bf 92       	push	r11
     a7e:	cf 92       	push	r12
     a80:	df 92       	push	r13
     a82:	ef 92       	push	r14
     a84:	ff 92       	push	r15
     a86:	0f 93       	push	r16
     a88:	1f 93       	push	r17
     a8a:	cf 93       	push	r28
     a8c:	df 93       	push	r29

    Giro_currTime = millis();
     a8e:	0e 94 27 1d 	call	0x3a4e	; 0x3a4e <millis>
     a92:	60 93 ad 02 	sts	0x02AD, r22	; 0x8002ad <Giro_currTime>
     a96:	70 93 ae 02 	sts	0x02AE, r23	; 0x8002ae <Giro_currTime+0x1>
     a9a:	80 93 af 02 	sts	0x02AF, r24	; 0x8002af <Giro_currTime+0x2>
     a9e:	90 93 b0 02 	sts	0x02B0, r25	; 0x8002b0 <Giro_currTime+0x3>
    Giro_loopTime = Giro_currTime - Giro_prevTime;
     aa2:	c0 90 a5 02 	lds	r12, 0x02A5	; 0x8002a5 <Giro_prevTime>
     aa6:	d0 90 a6 02 	lds	r13, 0x02A6	; 0x8002a6 <Giro_prevTime+0x1>
     aaa:	e0 90 a7 02 	lds	r14, 0x02A7	; 0x8002a7 <Giro_prevTime+0x2>
     aae:	f0 90 a8 02 	lds	r15, 0x02A8	; 0x8002a8 <Giro_prevTime+0x3>
     ab2:	9b 01       	movw	r18, r22
     ab4:	ac 01       	movw	r20, r24
     ab6:	2c 19       	sub	r18, r12
     ab8:	3d 09       	sbc	r19, r13
     aba:	4e 09       	sbc	r20, r14
     abc:	5f 09       	sbc	r21, r15
     abe:	20 93 a9 02 	sts	0x02A9, r18	; 0x8002a9 <Giro_loopTime>
     ac2:	30 93 aa 02 	sts	0x02AA, r19	; 0x8002aa <Giro_loopTime+0x1>
     ac6:	40 93 ab 02 	sts	0x02AB, r20	; 0x8002ab <Giro_loopTime+0x2>
     aca:	50 93 ac 02 	sts	0x02AC, r21	; 0x8002ac <Giro_loopTime+0x3>
    Giro_prevTime = Giro_currTime;
     ace:	60 93 a5 02 	sts	0x02A5, r22	; 0x8002a5 <Giro_prevTime>
     ad2:	70 93 a6 02 	sts	0x02A6, r23	; 0x8002a6 <Giro_prevTime+0x1>
     ad6:	80 93 a7 02 	sts	0x02A7, r24	; 0x8002a7 <Giro_prevTime+0x2>
     ada:	90 93 a8 02 	sts	0x02A8, r25	; 0x8002a8 <Giro_prevTime+0x3>

    // read acceleration and gyroscope values
    Giro_AccY = mpu.getAccelerationY();
     ade:	8c e2       	ldi	r24, 0x2C	; 44
     ae0:	93 e0       	ldi	r25, 0x03	; 3
     ae2:	0e 94 ff 0f 	call	0x1ffe	; 0x1ffe <_ZN7MPU605016getAccelerationYEv>
     ae6:	90 93 2b 03 	sts	0x032B, r25	; 0x80032b <Giro_AccY+0x1>
     aea:	80 93 2a 03 	sts	0x032A, r24	; 0x80032a <Giro_AccY>
    Giro_AccZ = mpu.getAccelerationZ();
     aee:	8c e2       	ldi	r24, 0x2C	; 44
     af0:	93 e0       	ldi	r25, 0x03	; 3
     af2:	0e 94 1a 10 	call	0x2034	; 0x2034 <_ZN7MPU605016getAccelerationZEv>
     af6:	90 93 29 03 	sts	0x0329, r25	; 0x800329 <Giro_AccZ+0x1>
     afa:	80 93 28 03 	sts	0x0328, r24	; 0x800328 <Giro_AccZ>
    Giro_RotX = mpu.getRotationX();
     afe:	8c e2       	ldi	r24, 0x2C	; 44
     b00:	93 e0       	ldi	r25, 0x03	; 3
     b02:	0e 94 35 10 	call	0x206a	; 0x206a <_ZN7MPU605012getRotationXEv>
     b06:	ec 01       	movw	r28, r24
     b08:	90 93 27 03 	sts	0x0327, r25	; 0x800327 <Giro_RotX+0x1>
     b0c:	80 93 26 03 	sts	0x0326, r24	; 0x800326 <Giro_RotX>


    Giro_AccAngle = atan2(Giro_AccY, Giro_AccZ)*RAD_TO_DEG;
     b10:	60 91 28 03 	lds	r22, 0x0328	; 0x800328 <Giro_AccZ>
     b14:	70 91 29 03 	lds	r23, 0x0329	; 0x800329 <Giro_AccZ+0x1>
     b18:	07 2e       	mov	r0, r23
     b1a:	00 0c       	add	r0, r0
     b1c:	88 0b       	sbc	r24, r24
     b1e:	99 0b       	sbc	r25, r25
     b20:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <__floatsisf>
     b24:	6b 01       	movw	r12, r22
     b26:	7c 01       	movw	r14, r24
     b28:	60 91 2a 03 	lds	r22, 0x032A	; 0x80032a <Giro_AccY>
     b2c:	70 91 2b 03 	lds	r23, 0x032B	; 0x80032b <Giro_AccY+0x1>
     b30:	07 2e       	mov	r0, r23
     b32:	00 0c       	add	r0, r0
     b34:	88 0b       	sbc	r24, r24
     b36:	99 0b       	sbc	r25, r25
     b38:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <__floatsisf>
     b3c:	a7 01       	movw	r20, r14
     b3e:	96 01       	movw	r18, r12
     b40:	0e 94 bd 16 	call	0x2d7a	; 0x2d7a <atan2>
     b44:	21 ee       	ldi	r18, 0xE1	; 225
     b46:	3e e2       	ldi	r19, 0x2E	; 46
     b48:	45 e6       	ldi	r20, 0x65	; 101
     b4a:	52 e4       	ldi	r21, 0x42	; 66
     b4c:	0e 94 af 18 	call	0x315e	; 0x315e <__mulsf3>
     b50:	60 93 20 03 	sts	0x0320, r22	; 0x800320 <Giro_AccAngle>
     b54:	70 93 21 03 	sts	0x0321, r23	; 0x800321 <Giro_AccAngle+0x1>
     b58:	80 93 22 03 	sts	0x0322, r24	; 0x800322 <Giro_AccAngle+0x2>
     b5c:	90 93 23 03 	sts	0x0323, r25	; 0x800323 <Giro_AccAngle+0x3>

    Giro_Rate = map(Giro_RotX, -32768, 32767, -250, 250);
     b60:	be 01       	movw	r22, r28
     b62:	dd 0f       	add	r29, r29
     b64:	88 0b       	sbc	r24, r24
     b66:	99 0b       	sbc	r25, r25
     b68:	1f 92       	push	r1
     b6a:	1f 92       	push	r1
     b6c:	1f 92       	push	r1
     b6e:	2a ef       	ldi	r18, 0xFA	; 250
     b70:	2f 93       	push	r18
     b72:	26 e0       	ldi	r18, 0x06	; 6
     b74:	a2 2e       	mov	r10, r18
     b76:	bb 24       	eor	r11, r11
     b78:	ba 94       	dec	r11
     b7a:	cb 2c       	mov	r12, r11
     b7c:	db 2c       	mov	r13, r11
     b7e:	ee 24       	eor	r14, r14
     b80:	ea 94       	dec	r14
     b82:	1f e7       	ldi	r17, 0x7F	; 127
     b84:	f1 2e       	mov	r15, r17
     b86:	00 e0       	ldi	r16, 0x00	; 0
     b88:	10 e0       	ldi	r17, 0x00	; 0
     b8a:	20 e0       	ldi	r18, 0x00	; 0
     b8c:	30 e8       	ldi	r19, 0x80	; 128
     b8e:	4f ef       	ldi	r20, 0xFF	; 255
     b90:	5f ef       	ldi	r21, 0xFF	; 255
     b92:	0e 94 cc 1d 	call	0x3b98	; 0x3b98 <_Z3maplllll>
     b96:	70 93 25 03 	sts	0x0325, r23	; 0x800325 <Giro_Rate+0x1>
     b9a:	60 93 24 03 	sts	0x0324, r22	; 0x800324 <Giro_Rate>
    Giro_Angle = (float)Giro_Rate*Giro_loopTime/1000;
     b9e:	c0 91 24 03 	lds	r28, 0x0324	; 0x800324 <Giro_Rate>
     ba2:	d0 91 25 03 	lds	r29, 0x0325	; 0x800325 <Giro_Rate+0x1>
     ba6:	60 91 a9 02 	lds	r22, 0x02A9	; 0x8002a9 <Giro_loopTime>
     baa:	70 91 aa 02 	lds	r23, 0x02AA	; 0x8002aa <Giro_loopTime+0x1>
     bae:	80 91 ab 02 	lds	r24, 0x02AB	; 0x8002ab <Giro_loopTime+0x2>
     bb2:	90 91 ac 02 	lds	r25, 0x02AC	; 0x8002ac <Giro_loopTime+0x3>
     bb6:	0e 94 c9 17 	call	0x2f92	; 0x2f92 <__floatunsisf>
     bba:	6b 01       	movw	r12, r22
     bbc:	7c 01       	movw	r14, r24
     bbe:	be 01       	movw	r22, r28
     bc0:	dd 0f       	add	r29, r29
     bc2:	88 0b       	sbc	r24, r24
     bc4:	99 0b       	sbc	r25, r25
     bc6:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <__floatsisf>
     bca:	9b 01       	movw	r18, r22
     bcc:	ac 01       	movw	r20, r24
     bce:	c7 01       	movw	r24, r14
     bd0:	b6 01       	movw	r22, r12
     bd2:	0e 94 af 18 	call	0x315e	; 0x315e <__mulsf3>
     bd6:	20 e0       	ldi	r18, 0x00	; 0
     bd8:	30 e0       	ldi	r19, 0x00	; 0
     bda:	4a e7       	ldi	r20, 0x7A	; 122
     bdc:	54 e4       	ldi	r21, 0x44	; 68
     bde:	0e 94 21 17 	call	0x2e42	; 0x2e42 <__divsf3>
     be2:	60 93 1c 03 	sts	0x031C, r22	; 0x80031c <Giro_Angle>
     be6:	70 93 1d 03 	sts	0x031D, r23	; 0x80031d <Giro_Angle+0x1>
     bea:	80 93 1e 03 	sts	0x031E, r24	; 0x80031e <Giro_Angle+0x2>
     bee:	90 93 1f 03 	sts	0x031F, r25	; 0x80031f <Giro_Angle+0x3>

    Giro_FilteredAngle = 0.9934*(Giro_PrevAngle + Giro_Angle) + 0.0066*(Giro_AccAngle);
     bf2:	60 91 14 03 	lds	r22, 0x0314	; 0x800314 <Giro_PrevAngle>
     bf6:	70 91 15 03 	lds	r23, 0x0315	; 0x800315 <Giro_PrevAngle+0x1>
     bfa:	80 91 16 03 	lds	r24, 0x0316	; 0x800316 <Giro_PrevAngle+0x2>
     bfe:	90 91 17 03 	lds	r25, 0x0317	; 0x800317 <Giro_PrevAngle+0x3>
     c02:	20 91 1c 03 	lds	r18, 0x031C	; 0x80031c <Giro_Angle>
     c06:	30 91 1d 03 	lds	r19, 0x031D	; 0x80031d <Giro_Angle+0x1>
     c0a:	40 91 1e 03 	lds	r20, 0x031E	; 0x80031e <Giro_Angle+0x2>
     c0e:	50 91 1f 03 	lds	r21, 0x031F	; 0x80031f <Giro_Angle+0x3>
     c12:	80 90 20 03 	lds	r8, 0x0320	; 0x800320 <Giro_AccAngle>
     c16:	90 90 21 03 	lds	r9, 0x0321	; 0x800321 <Giro_AccAngle+0x1>
     c1a:	a0 90 22 03 	lds	r10, 0x0322	; 0x800322 <Giro_AccAngle+0x2>
     c1e:	b0 90 23 03 	lds	r11, 0x0323	; 0x800323 <Giro_AccAngle+0x3>
     c22:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <__addsf3>
     c26:	26 e7       	ldi	r18, 0x76	; 118
     c28:	3f e4       	ldi	r19, 0x4F	; 79
     c2a:	4e e7       	ldi	r20, 0x7E	; 126
     c2c:	5f e3       	ldi	r21, 0x3F	; 63
     c2e:	0e 94 af 18 	call	0x315e	; 0x315e <__mulsf3>
     c32:	6b 01       	movw	r12, r22
     c34:	7c 01       	movw	r14, r24
     c36:	20 ed       	ldi	r18, 0xD0	; 208
     c38:	34 e4       	ldi	r19, 0x44	; 68
     c3a:	48 ed       	ldi	r20, 0xD8	; 216
     c3c:	5b e3       	ldi	r21, 0x3B	; 59
     c3e:	c5 01       	movw	r24, r10
     c40:	b4 01       	movw	r22, r8
     c42:	0e 94 af 18 	call	0x315e	; 0x315e <__mulsf3>
     c46:	9b 01       	movw	r18, r22
     c48:	ac 01       	movw	r20, r24
     c4a:	c7 01       	movw	r24, r14
     c4c:	b6 01       	movw	r22, r12
     c4e:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <__addsf3>
     c52:	60 93 18 03 	sts	0x0318, r22	; 0x800318 <Giro_FilteredAngle>
     c56:	70 93 19 03 	sts	0x0319, r23	; 0x800319 <Giro_FilteredAngle+0x1>
     c5a:	80 93 1a 03 	sts	0x031A, r24	; 0x80031a <Giro_FilteredAngle+0x2>
     c5e:	90 93 1b 03 	sts	0x031B, r25	; 0x80031b <Giro_FilteredAngle+0x3>

    Giro_PrevAngle = Giro_FilteredAngle;
     c62:	80 91 18 03 	lds	r24, 0x0318	; 0x800318 <Giro_FilteredAngle>
     c66:	90 91 19 03 	lds	r25, 0x0319	; 0x800319 <Giro_FilteredAngle+0x1>
     c6a:	a0 91 1a 03 	lds	r26, 0x031A	; 0x80031a <Giro_FilteredAngle+0x2>
     c6e:	b0 91 1b 03 	lds	r27, 0x031B	; 0x80031b <Giro_FilteredAngle+0x3>
     c72:	80 93 14 03 	sts	0x0314, r24	; 0x800314 <Giro_PrevAngle>
     c76:	90 93 15 03 	sts	0x0315, r25	; 0x800315 <Giro_PrevAngle+0x1>
     c7a:	a0 93 16 03 	sts	0x0316, r26	; 0x800316 <Giro_PrevAngle+0x2>
     c7e:	b0 93 17 03 	sts	0x0317, r27	; 0x800317 <Giro_PrevAngle+0x3>

    Giro_PidCtl->Input=-Giro_FilteredAngle;
     c82:	80 91 18 03 	lds	r24, 0x0318	; 0x800318 <Giro_FilteredAngle>
     c86:	90 91 19 03 	lds	r25, 0x0319	; 0x800319 <Giro_FilteredAngle+0x1>
     c8a:	a0 91 1a 03 	lds	r26, 0x031A	; 0x80031a <Giro_FilteredAngle+0x2>
     c8e:	b0 91 1b 03 	lds	r27, 0x031B	; 0x80031b <Giro_FilteredAngle+0x3>
     c92:	e0 91 05 03 	lds	r30, 0x0305	; 0x800305 <Giro_PidCtl>
     c96:	f0 91 06 03 	lds	r31, 0x0306	; 0x800306 <Giro_PidCtl+0x1>
     c9a:	b0 58       	subi	r27, 0x80	; 128
     c9c:	85 8b       	std	Z+21, r24	; 0x15
     c9e:	96 8b       	std	Z+22, r25	; 0x16
     ca0:	a7 8b       	std	Z+23, r26	; 0x17
     ca2:	b0 8f       	std	Z+24, r27	; 0x18

}
     ca4:	0f 90       	pop	r0
     ca6:	0f 90       	pop	r0
     ca8:	0f 90       	pop	r0
     caa:	0f 90       	pop	r0
     cac:	df 91       	pop	r29
     cae:	cf 91       	pop	r28
     cb0:	1f 91       	pop	r17
     cb2:	0f 91       	pop	r16
     cb4:	ff 90       	pop	r15
     cb6:	ef 90       	pop	r14
     cb8:	df 90       	pop	r13
     cba:	cf 90       	pop	r12
     cbc:	bf 90       	pop	r11
     cbe:	af 90       	pop	r10
     cc0:	9f 90       	pop	r9
     cc2:	8f 90       	pop	r8
     cc4:	08 95       	ret

00000cc6 <_Z16PrintGiroRawDatav>:

void PrintGiroRawData() {
    Serial.print("GRD: ");
     cc6:	6d ec       	ldi	r22, 0xCD	; 205
     cc8:	71 e0       	ldi	r23, 0x01	; 1
     cca:	8e e2       	ldi	r24, 0x2E	; 46
     ccc:	94 e0       	ldi	r25, 0x04	; 4
     cce:	0e 94 3a 1b 	call	0x3674	; 0x3674 <_ZN5Print5printEPKc>
    Serial.print(Giro_AccY);
     cd2:	60 91 2a 03 	lds	r22, 0x032A	; 0x80032a <Giro_AccY>
     cd6:	70 91 2b 03 	lds	r23, 0x032B	; 0x80032b <Giro_AccY+0x1>
     cda:	4a e0       	ldi	r20, 0x0A	; 10
     cdc:	50 e0       	ldi	r21, 0x00	; 0
     cde:	8e e2       	ldi	r24, 0x2E	; 46
     ce0:	94 e0       	ldi	r25, 0x04	; 4
     ce2:	0e 94 fd 1b 	call	0x37fa	; 0x37fa <_ZN5Print5printEii>
    Serial.print(" ");
     ce6:	60 e2       	ldi	r22, 0x20	; 32
     ce8:	71 e0       	ldi	r23, 0x01	; 1
     cea:	8e e2       	ldi	r24, 0x2E	; 46
     cec:	94 e0       	ldi	r25, 0x04	; 4
     cee:	0e 94 3a 1b 	call	0x3674	; 0x3674 <_ZN5Print5printEPKc>
    Serial.print(Giro_AccZ);
     cf2:	60 91 28 03 	lds	r22, 0x0328	; 0x800328 <Giro_AccZ>
     cf6:	70 91 29 03 	lds	r23, 0x0329	; 0x800329 <Giro_AccZ+0x1>
     cfa:	4a e0       	ldi	r20, 0x0A	; 10
     cfc:	50 e0       	ldi	r21, 0x00	; 0
     cfe:	8e e2       	ldi	r24, 0x2E	; 46
     d00:	94 e0       	ldi	r25, 0x04	; 4
     d02:	0e 94 fd 1b 	call	0x37fa	; 0x37fa <_ZN5Print5printEii>
    Serial.print(" ");
     d06:	60 e2       	ldi	r22, 0x20	; 32
     d08:	71 e0       	ldi	r23, 0x01	; 1
     d0a:	8e e2       	ldi	r24, 0x2E	; 46
     d0c:	94 e0       	ldi	r25, 0x04	; 4
     d0e:	0e 94 3a 1b 	call	0x3674	; 0x3674 <_ZN5Print5printEPKc>
    Serial.print(Giro_RotX);
     d12:	60 91 26 03 	lds	r22, 0x0326	; 0x800326 <Giro_RotX>
     d16:	70 91 27 03 	lds	r23, 0x0327	; 0x800327 <Giro_RotX+0x1>
     d1a:	4a e0       	ldi	r20, 0x0A	; 10
     d1c:	50 e0       	ldi	r21, 0x00	; 0
     d1e:	8e e2       	ldi	r24, 0x2E	; 46
     d20:	94 e0       	ldi	r25, 0x04	; 4
     d22:	0e 94 fd 1b 	call	0x37fa	; 0x37fa <_ZN5Print5printEii>

    Serial.println(" ");
     d26:	60 e2       	ldi	r22, 0x20	; 32
     d28:	71 e0       	ldi	r23, 0x01	; 1
     d2a:	8e e2       	ldi	r24, 0x2E	; 46
     d2c:	94 e0       	ldi	r25, 0x04	; 4
     d2e:	0c 94 47 1b 	jmp	0x368e	; 0x368e <_ZN5Print7printlnEPKc>

00000d32 <_Z26PrintGiroInputOutputValuesv>:
}

void PrintGiroInputOutputValues() {
    Serial.print("GIO: ");
     d32:	63 ed       	ldi	r22, 0xD3	; 211
     d34:	71 e0       	ldi	r23, 0x01	; 1
     d36:	8e e2       	ldi	r24, 0x2E	; 46
     d38:	94 e0       	ldi	r25, 0x04	; 4
     d3a:	0e 94 3a 1b 	call	0x3674	; 0x3674 <_ZN5Print5printEPKc>
    Serial.print(Giro_PidCtl->Input);
     d3e:	e0 91 05 03 	lds	r30, 0x0305	; 0x800305 <Giro_PidCtl>
     d42:	f0 91 06 03 	lds	r31, 0x0306	; 0x800306 <Giro_PidCtl+0x1>
     d46:	45 89       	ldd	r20, Z+21	; 0x15
     d48:	56 89       	ldd	r21, Z+22	; 0x16
     d4a:	67 89       	ldd	r22, Z+23	; 0x17
     d4c:	70 8d       	ldd	r23, Z+24	; 0x18
     d4e:	22 e0       	ldi	r18, 0x02	; 2
     d50:	30 e0       	ldi	r19, 0x00	; 0
     d52:	8e e2       	ldi	r24, 0x2E	; 46
     d54:	94 e0       	ldi	r25, 0x04	; 4
     d56:	0e 94 df 1c 	call	0x39be	; 0x39be <_ZN5Print5printEdi>
    Serial.print(" ");
     d5a:	60 e2       	ldi	r22, 0x20	; 32
     d5c:	71 e0       	ldi	r23, 0x01	; 1
     d5e:	8e e2       	ldi	r24, 0x2E	; 46
     d60:	94 e0       	ldi	r25, 0x04	; 4
     d62:	0e 94 3a 1b 	call	0x3674	; 0x3674 <_ZN5Print5printEPKc>
    Serial.print(Giro_PidCtl->Output);
     d66:	e0 91 05 03 	lds	r30, 0x0305	; 0x800305 <Giro_PidCtl>
     d6a:	f0 91 06 03 	lds	r31, 0x0306	; 0x800306 <Giro_PidCtl+0x1>
     d6e:	41 8d       	ldd	r20, Z+25	; 0x19
     d70:	52 8d       	ldd	r21, Z+26	; 0x1a
     d72:	63 8d       	ldd	r22, Z+27	; 0x1b
     d74:	74 8d       	ldd	r23, Z+28	; 0x1c
     d76:	22 e0       	ldi	r18, 0x02	; 2
     d78:	30 e0       	ldi	r19, 0x00	; 0
     d7a:	8e e2       	ldi	r24, 0x2E	; 46
     d7c:	94 e0       	ldi	r25, 0x04	; 4
     d7e:	0e 94 df 1c 	call	0x39be	; 0x39be <_ZN5Print5printEdi>

    Serial.println(" ");
     d82:	60 e2       	ldi	r22, 0x20	; 32
     d84:	71 e0       	ldi	r23, 0x01	; 1
     d86:	8e e2       	ldi	r24, 0x2E	; 46
     d88:	94 e0       	ldi	r25, 0x04	; 4
     d8a:	0c 94 47 1b 	jmp	0x368e	; 0x368e <_ZN5Print7printlnEPKc>

00000d8e <setup>:
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     d8e:	26 e0       	ldi	r18, 0x06	; 6
     d90:	40 e0       	ldi	r20, 0x00	; 0
     d92:	52 ec       	ldi	r21, 0xC2	; 194
     d94:	61 e0       	ldi	r22, 0x01	; 1
     d96:	70 e0       	ldi	r23, 0x00	; 0
     d98:	8e e2       	ldi	r24, 0x2E	; 46
     d9a:	94 e0       	ldi	r25, 0x04	; 4
     d9c:	0e 94 f5 19 	call	0x33ea	; 0x33ea <_ZN14HardwareSerial5beginEmh>



void setup() {
    Serial.begin(SERIAL__BAUD_RATE);
    Serial.println("Setup:Serial Initialized");
     da0:	69 ed       	ldi	r22, 0xD9	; 217
     da2:	71 e0       	ldi	r23, 0x01	; 1
     da4:	8e e2       	ldi	r24, 0x2E	; 46
     da6:	94 e0       	ldi	r25, 0x04	; 4
     da8:	0e 94 47 1b 	call	0x368e	; 0x368e <_ZN5Print7printlnEPKc>

    //CalibSetup();
    //Sensor readings with offsets:	-3	-5	16388	0	2	-1
    //Your offsets:	501	1553	1320	150	-6	19
    //Data is printed as: acelX acelY acelZ giroX giroY giroZ
    mpu.initialize();
     dac:	8c e2       	ldi	r24, 0x2C	; 44
     dae:	93 e0       	ldi	r25, 0x03	; 3
     db0:	0e 94 62 10 	call	0x20c4	; 0x20c4 <_ZN7MPU605010initializeEv>
    mpu.setXAccelOffset(501);
     db4:	65 ef       	ldi	r22, 0xF5	; 245
     db6:	71 e0       	ldi	r23, 0x01	; 1
     db8:	8c e2       	ldi	r24, 0x2C	; 44
     dba:	93 e0       	ldi	r25, 0x03	; 3
     dbc:	0e 94 76 10 	call	0x20ec	; 0x20ec <_ZN7MPU605015setXAccelOffsetEi>
    mpu.setYAccelOffset(1553);
     dc0:	61 e1       	ldi	r22, 0x11	; 17
     dc2:	76 e0       	ldi	r23, 0x06	; 6
     dc4:	8c e2       	ldi	r24, 0x2C	; 44
     dc6:	93 e0       	ldi	r25, 0x03	; 3
     dc8:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <_ZN7MPU605015setYAccelOffsetEi>
    mpu.setZAccelOffset(1320);
     dcc:	68 e2       	ldi	r22, 0x28	; 40
     dce:	75 e0       	ldi	r23, 0x05	; 5
     dd0:	8c e2       	ldi	r24, 0x2C	; 44
     dd2:	93 e0       	ldi	r25, 0x03	; 3
     dd4:	0e 94 82 10 	call	0x2104	; 0x2104 <_ZN7MPU605015setZAccelOffsetEi>
    mpu.setXGyroOffset(150);
     dd8:	66 e9       	ldi	r22, 0x96	; 150
     dda:	70 e0       	ldi	r23, 0x00	; 0
     ddc:	8c e2       	ldi	r24, 0x2C	; 44
     dde:	93 e0       	ldi	r25, 0x03	; 3
     de0:	0e 94 88 10 	call	0x2110	; 0x2110 <_ZN7MPU605014setXGyroOffsetEi>
    mpu.setYGyroOffset(-6);
     de4:	6a ef       	ldi	r22, 0xFA	; 250
     de6:	7f ef       	ldi	r23, 0xFF	; 255
     de8:	8c e2       	ldi	r24, 0x2C	; 44
     dea:	93 e0       	ldi	r25, 0x03	; 3
     dec:	0e 94 8e 10 	call	0x211c	; 0x211c <_ZN7MPU605014setYGyroOffsetEi>
    mpu.setZGyroOffset(19);
     df0:	63 e1       	ldi	r22, 0x13	; 19
     df2:	70 e0       	ldi	r23, 0x00	; 0
     df4:	8c e2       	ldi	r24, 0x2C	; 44
     df6:	93 e0       	ldi	r25, 0x03	; 3
     df8:	0e 94 94 10 	call	0x2128	; 0x2128 <_ZN7MPU605014setZGyroOffsetEi>
    Serial.println("Setup: Mpu6050 Initialized");
     dfc:	62 ef       	ldi	r22, 0xF2	; 242
     dfe:	71 e0       	ldi	r23, 0x01	; 1
     e00:	8e e2       	ldi	r24, 0x2E	; 46
     e02:	94 e0       	ldi	r25, 0x04	; 4
     e04:	0e 94 47 1b 	call	0x368e	; 0x368e <_ZN5Print7printlnEPKc>

    Mot0_Init();
     e08:	0e 94 7e 15 	call	0x2afc	; 0x2afc <_Z9Mot0_Initv>
    Mot1_Init();
     e0c:	0e 94 91 15 	call	0x2b22	; 0x2b22 <_Z9Mot1_Initv>
    Motors_SetSpeed(0,0);
     e10:	60 e0       	ldi	r22, 0x00	; 0
     e12:	70 e0       	ldi	r23, 0x00	; 0
     e14:	80 e0       	ldi	r24, 0x00	; 0
     e16:	90 e0       	ldi	r25, 0x00	; 0
     e18:	0e 94 c9 15 	call	0x2b92	; 0x2b92 <_Z15Motors_SetSpeedii>
    Serial.println("Setup: Motors Initialized");
     e1c:	6d e0       	ldi	r22, 0x0D	; 13
     e1e:	72 e0       	ldi	r23, 0x02	; 2
     e20:	8e e2       	ldi	r24, 0x2E	; 46
     e22:	94 e0       	ldi	r25, 0x04	; 4
     e24:	0e 94 47 1b 	call	0x368e	; 0x368e <_ZN5Print7printlnEPKc>

    Enc_Init();
     e28:	0e 94 43 14 	call	0x2886	; 0x2886 <_Z8Enc_Initv>
    Serial.println("Setup: Encoders Initialized");
     e2c:	67 e2       	ldi	r22, 0x27	; 39
     e2e:	72 e0       	ldi	r23, 0x02	; 2
     e30:	8e e2       	ldi	r24, 0x2E	; 46
     e32:	94 e0       	ldi	r25, 0x04	; 4
     e34:	0e 94 47 1b 	call	0x368e	; 0x368e <_ZN5Print7printlnEPKc>

    initPidControls();
     e38:	0e 94 d6 00 	call	0x1ac	; 0x1ac <_Z15initPidControlsv>
    PrintPidCfg(Mot0_PidCtl);
     e3c:	80 91 09 03 	lds	r24, 0x0309	; 0x800309 <Mot0_PidCtl>
     e40:	90 91 0a 03 	lds	r25, 0x030A	; 0x80030a <Mot0_PidCtl+0x1>
     e44:	0e 94 43 02 	call	0x486	; 0x486 <_Z11PrintPidCfgP11PIDConfig_e>
    PrintPidCfg(Mot1_PidCtl);
     e48:	80 91 07 03 	lds	r24, 0x0307	; 0x800307 <Mot1_PidCtl>
     e4c:	90 91 08 03 	lds	r25, 0x0308	; 0x800308 <Mot1_PidCtl+0x1>
     e50:	0e 94 43 02 	call	0x486	; 0x486 <_Z11PrintPidCfgP11PIDConfig_e>
    PrintPidCfg(Giro_PidCtl);
     e54:	80 91 05 03 	lds	r24, 0x0305	; 0x800305 <Giro_PidCtl>
     e58:	90 91 06 03 	lds	r25, 0x0306	; 0x800306 <Giro_PidCtl+0x1>
     e5c:	0e 94 43 02 	call	0x486	; 0x486 <_Z11PrintPidCfgP11PIDConfig_e>
    Serial.println("Setup: Pids initialized");
     e60:	63 e4       	ldi	r22, 0x43	; 67
     e62:	72 e0       	ldi	r23, 0x02	; 2
     e64:	8e e2       	ldi	r24, 0x2E	; 46
     e66:	94 e0       	ldi	r25, 0x04	; 4
     e68:	0e 94 47 1b 	call	0x368e	; 0x368e <_ZN5Print7printlnEPKc>

    Serial.println("Setup: Done");
     e6c:	6b e5       	ldi	r22, 0x5B	; 91
     e6e:	72 e0       	ldi	r23, 0x02	; 2
     e70:	8e e2       	ldi	r24, 0x2E	; 46
     e72:	94 e0       	ldi	r25, 0x04	; 4
     e74:	0c 94 47 1b 	jmp	0x368e	; 0x368e <_ZN5Print7printlnEPKc>

00000e78 <_GLOBAL__sub_I_sonar>:
#include "PID_v1.h"
#include "Configs.h"
#include "Utils.h"


NewPing sonar(TRIGGER_PIN, ECHO_PIN, MAX_DISTANCE);
     e78:	2b e4       	ldi	r18, 0x4B	; 75
     e7a:	30 e0       	ldi	r19, 0x00	; 0
     e7c:	48 e0       	ldi	r20, 0x08	; 8
     e7e:	69 e0       	ldi	r22, 0x09	; 9
     e80:	8b e3       	ldi	r24, 0x3B	; 59
     e82:	93 e0       	ldi	r25, 0x03	; 3
     e84:	0e 94 ac 10 	call	0x2158	; 0x2158 <_ZN7NewPingC1Ehhj>
MPU6050 mpu;
     e88:	8c e2       	ldi	r24, 0x2C	; 44
     e8a:	93 e0       	ldi	r25, 0x03	; 3
     e8c:	0c 94 e2 0f 	jmp	0x1fc4	; 0x1fc4 <_ZN7MPU6050C1Ev>

00000e90 <_Z15Ser_ReceiveDatav>:

const char Ser_EndMarker = '\n';
char Ser_Buffer[SERIAL__MY_BUF_SIZE]; // an array to store the received data
boolean Ser_NewData = false;

void Ser_ReceiveData() {
     e90:	cf 93       	push	r28
     e92:	df 93       	push	r29
                ndx = SERIAL__MY_BUF_SIZE - 1;
            }
        } else {
            Ser_Buffer[ndx] = '\0'; // terminate the string
            ndx = 0;
            Ser_NewData = true;
     e94:	c1 e0       	ldi	r28, 0x01	; 1

        if (rc != Ser_EndMarker) {
            Ser_Buffer[ndx] = rc;
            ndx++;
            if (ndx >= SERIAL__MY_BUF_SIZE) {
                ndx = SERIAL__MY_BUF_SIZE - 1;
     e96:	df e3       	ldi	r29, 0x3F	; 63
void Ser_ReceiveData() {
    static byte ndx = 0;
    char rc;

    // if (Serial.available() > 0) {
    while (Serial.available() > 0 && Ser_NewData == false) {
     e98:	8e e2       	ldi	r24, 0x2E	; 46
     e9a:	94 e0       	ldi	r25, 0x04	; 4
     e9c:	0e 94 20 19 	call	0x3240	; 0x3240 <_ZN14HardwareSerial9availableEv>
     ea0:	18 16       	cp	r1, r24
     ea2:	19 06       	cpc	r1, r25
     ea4:	1c f5       	brge	.+70     	; 0xeec <_Z15Ser_ReceiveDatav+0x5c>
     ea6:	80 91 be 02 	lds	r24, 0x02BE	; 0x8002be <Ser_NewData>
     eaa:	81 11       	cpse	r24, r1
     eac:	1f c0       	rjmp	.+62     	; 0xeec <_Z15Ser_ReceiveDatav+0x5c>
        rc = Serial.read();
     eae:	8e e2       	ldi	r24, 0x2E	; 46
     eb0:	94 e0       	ldi	r25, 0x04	; 4
     eb2:	0e 94 3a 19 	call	0x3274	; 0x3274 <_ZN14HardwareSerial4readEv>
     eb6:	e0 91 9c 02 	lds	r30, 0x029C	; 0x80029c <_ZZ15Ser_ReceiveDatavE3ndx>

        if (rc != Ser_EndMarker) {
     eba:	8a 30       	cpi	r24, 0x0A	; 10
     ebc:	71 f0       	breq	.+28     	; 0xeda <_Z15Ser_ReceiveDatav+0x4a>
            Ser_Buffer[ndx] = rc;
     ebe:	ae 2f       	mov	r26, r30
     ec0:	b0 e0       	ldi	r27, 0x00	; 0
     ec2:	a1 54       	subi	r26, 0x41	; 65
     ec4:	bd 4f       	sbci	r27, 0xFD	; 253
     ec6:	8c 93       	st	X, r24
            ndx++;
     ec8:	ef 5f       	subi	r30, 0xFF	; 255
            if (ndx >= SERIAL__MY_BUF_SIZE) {
     eca:	e0 34       	cpi	r30, 0x40	; 64
     ecc:	18 f4       	brcc	.+6      	; 0xed4 <_Z15Ser_ReceiveDatav+0x44>
    while (Serial.available() > 0 && Ser_NewData == false) {
        rc = Serial.read();

        if (rc != Ser_EndMarker) {
            Ser_Buffer[ndx] = rc;
            ndx++;
     ece:	e0 93 9c 02 	sts	0x029C, r30	; 0x80029c <_ZZ15Ser_ReceiveDatavE3ndx>
     ed2:	e2 cf       	rjmp	.-60     	; 0xe98 <_Z15Ser_ReceiveDatav+0x8>
            if (ndx >= SERIAL__MY_BUF_SIZE) {
                ndx = SERIAL__MY_BUF_SIZE - 1;
     ed4:	d0 93 9c 02 	sts	0x029C, r29	; 0x80029c <_ZZ15Ser_ReceiveDatavE3ndx>
     ed8:	df cf       	rjmp	.-66     	; 0xe98 <_Z15Ser_ReceiveDatav+0x8>
            }
        } else {
            Ser_Buffer[ndx] = '\0'; // terminate the string
     eda:	f0 e0       	ldi	r31, 0x00	; 0
     edc:	e1 54       	subi	r30, 0x41	; 65
     ede:	fd 4f       	sbci	r31, 0xFD	; 253
     ee0:	10 82       	st	Z, r1
            ndx = 0;
     ee2:	10 92 9c 02 	sts	0x029C, r1	; 0x80029c <_ZZ15Ser_ReceiveDatavE3ndx>
            Ser_NewData = true;
     ee6:	c0 93 be 02 	sts	0x02BE, r28	; 0x8002be <Ser_NewData>
     eea:	d6 cf       	rjmp	.-84     	; 0xe98 <_Z15Ser_ReceiveDatav+0x8>
        }
    }
}
     eec:	df 91       	pop	r29
     eee:	cf 91       	pop	r28
     ef0:	08 95       	ret

00000ef2 <loop>:
float self_balance_pid_setpoint=0;


uint8_t turning_speed=3;

void loop() {
     ef2:	8f 92       	push	r8
     ef4:	9f 92       	push	r9
     ef6:	af 92       	push	r10
     ef8:	bf 92       	push	r11
     efa:	cf 92       	push	r12
     efc:	df 92       	push	r13
     efe:	ef 92       	push	r14
     f00:	ff 92       	push	r15
     f02:	0f 93       	push	r16
     f04:	1f 93       	push	r17
     f06:	cf 93       	push	r28
     f08:	df 93       	push	r29
    loopTime=micros();
     f0a:	0e 94 33 1d 	call	0x3a66	; 0x3a66 <micros>
     f0e:	60 93 a1 02 	sts	0x02A1, r22	; 0x8002a1 <loopTime>
     f12:	70 93 a2 02 	sts	0x02A2, r23	; 0x8002a2 <loopTime+0x1>
     f16:	80 93 a3 02 	sts	0x02A3, r24	; 0x8002a3 <loopTime+0x2>
     f1a:	90 93 a4 02 	sts	0x02A4, r25	; 0x8002a4 <loopTime+0x3>


    unsigned long currentMillis = millis();
     f1e:	0e 94 27 1d 	call	0x3a4e	; 0x3a4e <millis>
     f22:	6b 01       	movw	r12, r22
     f24:	7c 01       	movw	r14, r24
    if (currentMillis - previousMilliEnc >= intervalEnc) {
     f26:	80 91 10 03 	lds	r24, 0x0310	; 0x800310 <previousMilliEnc>
     f2a:	90 91 11 03 	lds	r25, 0x0311	; 0x800311 <previousMilliEnc+0x1>
     f2e:	a0 91 12 03 	lds	r26, 0x0312	; 0x800312 <previousMilliEnc+0x2>
     f32:	b0 91 13 03 	lds	r27, 0x0313	; 0x800313 <previousMilliEnc+0x3>
     f36:	a7 01       	movw	r20, r14
     f38:	96 01       	movw	r18, r12
     f3a:	28 1b       	sub	r18, r24
     f3c:	39 0b       	sbc	r19, r25
     f3e:	4a 0b       	sbc	r20, r26
     f40:	5b 0b       	sbc	r21, r27
     f42:	25 30       	cpi	r18, 0x05	; 5
     f44:	31 05       	cpc	r19, r1
     f46:	41 05       	cpc	r20, r1
     f48:	51 05       	cpc	r21, r1
     f4a:	50 f0       	brcs	.+20     	; 0xf60 <loop+0x6e>
        previousMilliEnc=currentMillis;
     f4c:	c0 92 10 03 	sts	0x0310, r12	; 0x800310 <previousMilliEnc>
     f50:	d0 92 11 03 	sts	0x0311, r13	; 0x800311 <previousMilliEnc+0x1>
     f54:	e0 92 12 03 	sts	0x0312, r14	; 0x800312 <previousMilliEnc+0x2>
     f58:	f0 92 13 03 	sts	0x0313, r15	; 0x800313 <previousMilliEnc+0x3>
        UpdateEncoderValues();
     f5c:	0e 94 02 05 	call	0xa04	; 0xa04 <_Z19UpdateEncoderValuesv>
    }

//---------------------------- GIRO---------------------------------------------

    Giro_ReadData();
     f60:	0e 94 3b 05 	call	0xa76	; 0xa76 <_Z13Giro_ReadDatav>
    // Giro_PidCtl->Input+=self_balance_pid_setpoint;


    if(RemoteCmd & B00000100) {                                           //If the third bit of the receive byte is set change the left and right variable to turn the robot to the right
     f64:	c0 91 b5 02 	lds	r28, 0x02B5	; 0x8002b5 <RemoteCmd>
     f68:	d0 91 b6 02 	lds	r29, 0x02B6	; 0x8002b6 <RemoteCmd+0x1>
     f6c:	c2 ff       	sbrs	r28, 2
     f6e:	3d c0       	rjmp	.+122    	; 0xfea <loop+0xf8>
        if(Giro_PidCtl->Setpoint > GIRO__TARGET_ANGLE - 7) Giro_PidCtl->Setpoint -= 0.1;                            //Slowly change the setpoint angle so the robot starts leaning forewards
     f70:	00 91 05 03 	lds	r16, 0x0305	; 0x800305 <Giro_PidCtl>
     f74:	10 91 06 03 	lds	r17, 0x0306	; 0x800306 <Giro_PidCtl+0x1>
     f78:	f8 01       	movw	r30, r16
     f7a:	81 88       	ldd	r8, Z+17	; 0x11
     f7c:	92 88       	ldd	r9, Z+18	; 0x12
     f7e:	a3 88       	ldd	r10, Z+19	; 0x13
     f80:	b4 88       	ldd	r11, Z+20	; 0x14
     f82:	20 e0       	ldi	r18, 0x00	; 0
     f84:	30 e0       	ldi	r19, 0x00	; 0
     f86:	40 e2       	ldi	r20, 0x20	; 32
     f88:	51 ec       	ldi	r21, 0xC1	; 193
     f8a:	c5 01       	movw	r24, r10
     f8c:	b4 01       	movw	r22, r8
     f8e:	0e 94 a2 18 	call	0x3144	; 0x3144 <__gesf2>
     f92:	18 16       	cp	r1, r24
     f94:	6c f4       	brge	.+26     	; 0xfb0 <loop+0xbe>
     f96:	2d ec       	ldi	r18, 0xCD	; 205
     f98:	3c ec       	ldi	r19, 0xCC	; 204
     f9a:	4c ec       	ldi	r20, 0xCC	; 204
     f9c:	5d e3       	ldi	r21, 0x3D	; 61
     f9e:	c5 01       	movw	r24, r10
     fa0:	b4 01       	movw	r22, r8
     fa2:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <__subsf3>
     fa6:	f8 01       	movw	r30, r16
     fa8:	61 8b       	std	Z+17, r22	; 0x11
     faa:	72 8b       	std	Z+18, r23	; 0x12
     fac:	83 8b       	std	Z+19, r24	; 0x13
     fae:	94 8b       	std	Z+20, r25	; 0x14
        if(Giro_PidCtl->Output > 20 * -1)Giro_PidCtl->Setpoint -= 0.05;            //Slowly change the setpoint angle so the robot starts leaning forewards
     fb0:	20 e0       	ldi	r18, 0x00	; 0
     fb2:	30 e0       	ldi	r19, 0x00	; 0
     fb4:	40 ea       	ldi	r20, 0xA0	; 160
     fb6:	51 ec       	ldi	r21, 0xC1	; 193
     fb8:	f8 01       	movw	r30, r16
     fba:	61 8d       	ldd	r22, Z+25	; 0x19
     fbc:	72 8d       	ldd	r23, Z+26	; 0x1a
     fbe:	83 8d       	ldd	r24, Z+27	; 0x1b
     fc0:	94 8d       	ldd	r25, Z+28	; 0x1c
     fc2:	0e 94 a2 18 	call	0x3144	; 0x3144 <__gesf2>
     fc6:	18 16       	cp	r1, r24
     fc8:	84 f4       	brge	.+32     	; 0xfea <loop+0xf8>
     fca:	2d ec       	ldi	r18, 0xCD	; 205
     fcc:	3c ec       	ldi	r19, 0xCC	; 204
     fce:	4c e4       	ldi	r20, 0x4C	; 76
     fd0:	5d e3       	ldi	r21, 0x3D	; 61
     fd2:	f8 01       	movw	r30, r16
     fd4:	61 89       	ldd	r22, Z+17	; 0x11
     fd6:	72 89       	ldd	r23, Z+18	; 0x12
     fd8:	83 89       	ldd	r24, Z+19	; 0x13
     fda:	94 89       	ldd	r25, Z+20	; 0x14
     fdc:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <__subsf3>
     fe0:	f8 01       	movw	r30, r16
     fe2:	61 8b       	std	Z+17, r22	; 0x11
     fe4:	72 8b       	std	Z+18, r23	; 0x12
     fe6:	83 8b       	std	Z+19, r24	; 0x13
     fe8:	94 8b       	std	Z+20, r25	; 0x14
    }
    if(RemoteCmd & B00001000) {                                           //If the forth bit of the receive byte is set change the left and right variable to turn the robot to the right
     fea:	c3 ff       	sbrs	r28, 3
     fec:	3d c0       	rjmp	.+122    	; 0x1068 <loop+0x176>
        if(Giro_PidCtl->Setpoint < GIRO__TARGET_ANGLE + 7) Giro_PidCtl->Setpoint += 0.1;                             //Slowly change the setpoint angle so the robot starts leaning backwards
     fee:	00 91 05 03 	lds	r16, 0x0305	; 0x800305 <Giro_PidCtl>
     ff2:	10 91 06 03 	lds	r17, 0x0306	; 0x800306 <Giro_PidCtl+0x1>
     ff6:	f8 01       	movw	r30, r16
     ff8:	81 88       	ldd	r8, Z+17	; 0x11
     ffa:	92 88       	ldd	r9, Z+18	; 0x12
     ffc:	a3 88       	ldd	r10, Z+19	; 0x13
     ffe:	b4 88       	ldd	r11, Z+20	; 0x14
    1000:	20 e0       	ldi	r18, 0x00	; 0
    1002:	30 e0       	ldi	r19, 0x00	; 0
    1004:	40 e8       	ldi	r20, 0x80	; 128
    1006:	50 e4       	ldi	r21, 0x40	; 64
    1008:	c5 01       	movw	r24, r10
    100a:	b4 01       	movw	r22, r8
    100c:	0e 94 1c 17 	call	0x2e38	; 0x2e38 <__cmpsf2>
    1010:	87 ff       	sbrs	r24, 7
    1012:	0d c0       	rjmp	.+26     	; 0x102e <loop+0x13c>
    1014:	2d ec       	ldi	r18, 0xCD	; 205
    1016:	3c ec       	ldi	r19, 0xCC	; 204
    1018:	4c ec       	ldi	r20, 0xCC	; 204
    101a:	5d e3       	ldi	r21, 0x3D	; 61
    101c:	c5 01       	movw	r24, r10
    101e:	b4 01       	movw	r22, r8
    1020:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <__addsf3>
    1024:	f8 01       	movw	r30, r16
    1026:	61 8b       	std	Z+17, r22	; 0x11
    1028:	72 8b       	std	Z+18, r23	; 0x12
    102a:	83 8b       	std	Z+19, r24	; 0x13
    102c:	94 8b       	std	Z+20, r25	; 0x14
        if(Giro_PidCtl->Output < 20) Giro_PidCtl->Setpoint += 0.05;                 //Slowly change the setpoint angle so the robot starts leaning backwards
    102e:	20 e0       	ldi	r18, 0x00	; 0
    1030:	30 e0       	ldi	r19, 0x00	; 0
    1032:	40 ea       	ldi	r20, 0xA0	; 160
    1034:	51 e4       	ldi	r21, 0x41	; 65
    1036:	f8 01       	movw	r30, r16
    1038:	61 8d       	ldd	r22, Z+25	; 0x19
    103a:	72 8d       	ldd	r23, Z+26	; 0x1a
    103c:	83 8d       	ldd	r24, Z+27	; 0x1b
    103e:	94 8d       	ldd	r25, Z+28	; 0x1c
    1040:	0e 94 1c 17 	call	0x2e38	; 0x2e38 <__cmpsf2>
    1044:	87 ff       	sbrs	r24, 7
    1046:	10 c0       	rjmp	.+32     	; 0x1068 <loop+0x176>
    1048:	2d ec       	ldi	r18, 0xCD	; 205
    104a:	3c ec       	ldi	r19, 0xCC	; 204
    104c:	4c e4       	ldi	r20, 0x4C	; 76
    104e:	5d e3       	ldi	r21, 0x3D	; 61
    1050:	f8 01       	movw	r30, r16
    1052:	61 89       	ldd	r22, Z+17	; 0x11
    1054:	72 89       	ldd	r23, Z+18	; 0x12
    1056:	83 89       	ldd	r24, Z+19	; 0x13
    1058:	94 89       	ldd	r25, Z+20	; 0x14
    105a:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <__addsf3>
    105e:	f8 01       	movw	r30, r16
    1060:	61 8b       	std	Z+17, r22	; 0x11
    1062:	72 8b       	std	Z+18, r23	; 0x12
    1064:	83 8b       	std	Z+19, r24	; 0x13
    1066:	94 8b       	std	Z+20, r25	; 0x14
    }

    if(!(RemoteCmd & B00001100)) {                                        //Slowly reduce the setpoint to zero if no foreward or backward command is given
    1068:	cc 70       	andi	r28, 0x0C	; 12
    106a:	dd 27       	eor	r29, r29
    106c:	cd 2b       	or	r28, r29
    106e:	d1 f5       	brne	.+116    	; 0x10e4 <loop+0x1f2>
        if(Giro_PidCtl->Setpoint > 0.5)Giro_PidCtl->Setpoint -=0.05;                              //If the PID setpoint is larger then 0.5 reduce the setpoint with 0.05 every loop
    1070:	c0 91 05 03 	lds	r28, 0x0305	; 0x800305 <Giro_PidCtl>
    1074:	d0 91 06 03 	lds	r29, 0x0306	; 0x800306 <Giro_PidCtl+0x1>
    1078:	89 88       	ldd	r8, Y+17	; 0x11
    107a:	9a 88       	ldd	r9, Y+18	; 0x12
    107c:	ab 88       	ldd	r10, Y+19	; 0x13
    107e:	bc 88       	ldd	r11, Y+20	; 0x14
    1080:	20 e0       	ldi	r18, 0x00	; 0
    1082:	30 e0       	ldi	r19, 0x00	; 0
    1084:	40 e0       	ldi	r20, 0x00	; 0
    1086:	5f e3       	ldi	r21, 0x3F	; 63
    1088:	c5 01       	movw	r24, r10
    108a:	b4 01       	movw	r22, r8
    108c:	0e 94 a2 18 	call	0x3144	; 0x3144 <__gesf2>
    1090:	18 16       	cp	r1, r24
    1092:	4c f4       	brge	.+18     	; 0x10a6 <loop+0x1b4>
    1094:	2d ec       	ldi	r18, 0xCD	; 205
    1096:	3c ec       	ldi	r19, 0xCC	; 204
    1098:	4c e4       	ldi	r20, 0x4C	; 76
    109a:	5d e3       	ldi	r21, 0x3D	; 61
    109c:	c5 01       	movw	r24, r10
    109e:	b4 01       	movw	r22, r8
    10a0:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <__subsf3>
    10a4:	12 c0       	rjmp	.+36     	; 0x10ca <loop+0x1d8>
        else if(Giro_PidCtl->Setpoint < -0.5)Giro_PidCtl->Setpoint +=0.05;                        //If the PID setpoint is smaller then -0.5 increase the setpoint with 0.05 every loop
    10a6:	20 e0       	ldi	r18, 0x00	; 0
    10a8:	30 e0       	ldi	r19, 0x00	; 0
    10aa:	40 e0       	ldi	r20, 0x00	; 0
    10ac:	5f eb       	ldi	r21, 0xBF	; 191
    10ae:	c5 01       	movw	r24, r10
    10b0:	b4 01       	movw	r22, r8
    10b2:	0e 94 1c 17 	call	0x2e38	; 0x2e38 <__cmpsf2>
    10b6:	87 ff       	sbrs	r24, 7
    10b8:	0d c0       	rjmp	.+26     	; 0x10d4 <loop+0x1e2>
    10ba:	2d ec       	ldi	r18, 0xCD	; 205
    10bc:	3c ec       	ldi	r19, 0xCC	; 204
    10be:	4c e4       	ldi	r20, 0x4C	; 76
    10c0:	5d e3       	ldi	r21, 0x3D	; 61
    10c2:	c5 01       	movw	r24, r10
    10c4:	b4 01       	movw	r22, r8
    10c6:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <__addsf3>
    10ca:	69 8b       	std	Y+17, r22	; 0x11
    10cc:	7a 8b       	std	Y+18, r23	; 0x12
    10ce:	8b 8b       	std	Y+19, r24	; 0x13
    10d0:	9c 8b       	std	Y+20, r25	; 0x14
    10d2:	08 c0       	rjmp	.+16     	; 0x10e4 <loop+0x1f2>
        else Giro_PidCtl->Setpoint = GIRO__TARGET_ANGLE;                                                  //If the PID setpoint is smaller then 0.5 or larger then -0.5 set the setpoint to 0
    10d4:	80 e0       	ldi	r24, 0x00	; 0
    10d6:	90 e0       	ldi	r25, 0x00	; 0
    10d8:	a0 e4       	ldi	r26, 0x40	; 64
    10da:	b0 ec       	ldi	r27, 0xC0	; 192
    10dc:	89 8b       	std	Y+17, r24	; 0x11
    10de:	9a 8b       	std	Y+18, r25	; 0x12
    10e0:	ab 8b       	std	Y+19, r26	; 0x13
    10e2:	bc 8b       	std	Y+20, r27	; 0x14
    }

    Giro_Pid->Compute();
    10e4:	80 91 ff 02 	lds	r24, 0x02FF	; 0x8002ff <Giro_Pid>
    10e8:	90 91 00 03 	lds	r25, 0x0300	; 0x800300 <Giro_Pid+0x1>
    10ec:	0e 94 ee 09 	call	0x13dc	; 0x13dc <_ZN3PID7ComputeEv>

// Remote go fwd/bck
    if(RemoteCmd & B00000001) {                                           //If the first bit of the receive byte is set change the left and right variable to turn the robot to the left
    10f0:	c0 91 b5 02 	lds	r28, 0x02B5	; 0x8002b5 <RemoteCmd>
    10f4:	d0 91 b6 02 	lds	r29, 0x02B6	; 0x8002b6 <RemoteCmd+0x1>
    10f8:	c0 ff       	sbrs	r28, 0
    10fa:	2d c0       	rjmp	.+90     	; 0x1156 <loop+0x264>
        Mot0_PidCtl->Input += turning_speed;                                       //Increase the left motor speed
    10fc:	00 91 09 03 	lds	r16, 0x0309	; 0x800309 <Mot0_PidCtl>
    1100:	10 91 0a 03 	lds	r17, 0x030A	; 0x80030a <Mot0_PidCtl+0x1>
    1104:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <turning_speed>
    1108:	70 e0       	ldi	r23, 0x00	; 0
    110a:	80 e0       	ldi	r24, 0x00	; 0
    110c:	90 e0       	ldi	r25, 0x00	; 0
    110e:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <__floatsisf>
    1112:	4b 01       	movw	r8, r22
    1114:	5c 01       	movw	r10, r24
    1116:	9b 01       	movw	r18, r22
    1118:	ac 01       	movw	r20, r24
    111a:	f8 01       	movw	r30, r16
    111c:	65 89       	ldd	r22, Z+21	; 0x15
    111e:	76 89       	ldd	r23, Z+22	; 0x16
    1120:	87 89       	ldd	r24, Z+23	; 0x17
    1122:	90 8d       	ldd	r25, Z+24	; 0x18
    1124:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <__addsf3>
    1128:	f8 01       	movw	r30, r16
    112a:	65 8b       	std	Z+21, r22	; 0x15
    112c:	76 8b       	std	Z+22, r23	; 0x16
    112e:	87 8b       	std	Z+23, r24	; 0x17
    1130:	90 8f       	std	Z+24, r25	; 0x18
        Mot1_PidCtl->Input -= turning_speed;                                      //Decrease the right motor speed
    1132:	00 91 07 03 	lds	r16, 0x0307	; 0x800307 <Mot1_PidCtl>
    1136:	10 91 08 03 	lds	r17, 0x0308	; 0x800308 <Mot1_PidCtl+0x1>
    113a:	a5 01       	movw	r20, r10
    113c:	94 01       	movw	r18, r8
    113e:	f8 01       	movw	r30, r16
    1140:	65 89       	ldd	r22, Z+21	; 0x15
    1142:	76 89       	ldd	r23, Z+22	; 0x16
    1144:	87 89       	ldd	r24, Z+23	; 0x17
    1146:	90 8d       	ldd	r25, Z+24	; 0x18
    1148:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <__subsf3>
    114c:	f8 01       	movw	r30, r16
    114e:	65 8b       	std	Z+21, r22	; 0x15
    1150:	76 8b       	std	Z+22, r23	; 0x16
    1152:	87 8b       	std	Z+23, r24	; 0x17
    1154:	90 8f       	std	Z+24, r25	; 0x18
    }
    if(RemoteCmd & B00000010) {                                           //If the second bit of the receive byte is set change the left and right variable to turn the robot to the right
    1156:	c1 ff       	sbrs	r28, 1
    1158:	2a c0       	rjmp	.+84     	; 0x11ae <loop+0x2bc>
        Mot0_PidCtl->Input -= turning_speed;                                       //Decrease the left motor speed
    115a:	c0 91 09 03 	lds	r28, 0x0309	; 0x800309 <Mot0_PidCtl>
    115e:	d0 91 0a 03 	lds	r29, 0x030A	; 0x80030a <Mot0_PidCtl+0x1>
    1162:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <turning_speed>
    1166:	70 e0       	ldi	r23, 0x00	; 0
    1168:	80 e0       	ldi	r24, 0x00	; 0
    116a:	90 e0       	ldi	r25, 0x00	; 0
    116c:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <__floatsisf>
    1170:	4b 01       	movw	r8, r22
    1172:	5c 01       	movw	r10, r24
    1174:	9b 01       	movw	r18, r22
    1176:	ac 01       	movw	r20, r24
    1178:	6d 89       	ldd	r22, Y+21	; 0x15
    117a:	7e 89       	ldd	r23, Y+22	; 0x16
    117c:	8f 89       	ldd	r24, Y+23	; 0x17
    117e:	98 8d       	ldd	r25, Y+24	; 0x18
    1180:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <__subsf3>
    1184:	6d 8b       	std	Y+21, r22	; 0x15
    1186:	7e 8b       	std	Y+22, r23	; 0x16
    1188:	8f 8b       	std	Y+23, r24	; 0x17
    118a:	98 8f       	std	Y+24, r25	; 0x18
        Mot1_PidCtl->Input += turning_speed;                                      //Increase the right motor speed
    118c:	c0 91 07 03 	lds	r28, 0x0307	; 0x800307 <Mot1_PidCtl>
    1190:	d0 91 08 03 	lds	r29, 0x0308	; 0x800308 <Mot1_PidCtl+0x1>
    1194:	a5 01       	movw	r20, r10
    1196:	94 01       	movw	r18, r8
    1198:	6d 89       	ldd	r22, Y+21	; 0x15
    119a:	7e 89       	ldd	r23, Y+22	; 0x16
    119c:	8f 89       	ldd	r24, Y+23	; 0x17
    119e:	98 8d       	ldd	r25, Y+24	; 0x18
    11a0:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <__addsf3>
    11a4:	6d 8b       	std	Y+21, r22	; 0x15
    11a6:	7e 8b       	std	Y+22, r23	; 0x16
    11a8:	8f 8b       	std	Y+23, r24	; 0x17
    11aa:	98 8f       	std	Y+24, r25	; 0x18
    11ac:	02 c0       	rjmp	.+4      	; 0x11b2 <loop+0x2c0>
    }


    if (RemoteCmd ) {
    11ae:	cd 2b       	or	r28, r29
    11b0:	c1 f0       	breq	.+48     	; 0x11e2 <loop+0x2f0>
        if(millis()-RemoteCmdRecTime >=40) {
    11b2:	0e 94 27 1d 	call	0x3a4e	; 0x3a4e <millis>
    11b6:	00 91 b1 02 	lds	r16, 0x02B1	; 0x8002b1 <RemoteCmdRecTime>
    11ba:	10 91 b2 02 	lds	r17, 0x02B2	; 0x8002b2 <RemoteCmdRecTime+0x1>
    11be:	20 91 b3 02 	lds	r18, 0x02B3	; 0x8002b3 <RemoteCmdRecTime+0x2>
    11c2:	30 91 b4 02 	lds	r19, 0x02B4	; 0x8002b4 <RemoteCmdRecTime+0x3>
    11c6:	dc 01       	movw	r26, r24
    11c8:	cb 01       	movw	r24, r22
    11ca:	80 1b       	sub	r24, r16
    11cc:	91 0b       	sbc	r25, r17
    11ce:	a2 0b       	sbc	r26, r18
    11d0:	b3 0b       	sbc	r27, r19
    11d2:	88 97       	sbiw	r24, 0x28	; 40
    11d4:	a1 05       	cpc	r26, r1
    11d6:	b1 05       	cpc	r27, r1
    11d8:	20 f0       	brcs	.+8      	; 0x11e2 <loop+0x2f0>
            RemoteCmd=0;
    11da:	10 92 b6 02 	sts	0x02B6, r1	; 0x8002b6 <RemoteCmd+0x1>
    11de:	10 92 b5 02 	sts	0x02B5, r1	; 0x8002b5 <RemoteCmd>
        }
    }

    if (connectGiroToMot==true) {
    11e2:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <connectGiroToMot>
    11e6:	88 23       	and	r24, r24
    11e8:	c1 f0       	breq	.+48     	; 0x121a <loop+0x328>
        Mot0_PidCtl->Setpoint=Giro_PidCtl->Output;
    11ea:	e0 91 05 03 	lds	r30, 0x0305	; 0x800305 <Giro_PidCtl>
    11ee:	f0 91 06 03 	lds	r31, 0x0306	; 0x800306 <Giro_PidCtl+0x1>
    11f2:	81 8d       	ldd	r24, Z+25	; 0x19
    11f4:	92 8d       	ldd	r25, Z+26	; 0x1a
    11f6:	a3 8d       	ldd	r26, Z+27	; 0x1b
    11f8:	b4 8d       	ldd	r27, Z+28	; 0x1c
    11fa:	e0 91 09 03 	lds	r30, 0x0309	; 0x800309 <Mot0_PidCtl>
    11fe:	f0 91 0a 03 	lds	r31, 0x030A	; 0x80030a <Mot0_PidCtl+0x1>
    1202:	81 8b       	std	Z+17, r24	; 0x11
    1204:	92 8b       	std	Z+18, r25	; 0x12
    1206:	a3 8b       	std	Z+19, r26	; 0x13
    1208:	b4 8b       	std	Z+20, r27	; 0x14
        Mot1_PidCtl->Setpoint=Giro_PidCtl->Output;
    120a:	e0 91 07 03 	lds	r30, 0x0307	; 0x800307 <Mot1_PidCtl>
    120e:	f0 91 08 03 	lds	r31, 0x0308	; 0x800308 <Mot1_PidCtl+0x1>
    1212:	81 8b       	std	Z+17, r24	; 0x11
    1214:	92 8b       	std	Z+18, r25	; 0x12
    1216:	a3 8b       	std	Z+19, r26	; 0x13
    1218:	b4 8b       	std	Z+20, r27	; 0x14
    }

//--------------------------- MOTORS --------------------------------------
    Mot0_Pid->Compute();
    121a:	80 91 03 03 	lds	r24, 0x0303	; 0x800303 <Mot0_Pid>
    121e:	90 91 04 03 	lds	r25, 0x0304	; 0x800304 <Mot0_Pid+0x1>
    1222:	0e 94 ee 09 	call	0x13dc	; 0x13dc <_ZN3PID7ComputeEv>
    Mot1_Pid->Compute();
    1226:	80 91 01 03 	lds	r24, 0x0301	; 0x800301 <Mot1_Pid>
    122a:	90 91 02 03 	lds	r25, 0x0302	; 0x800302 <Mot1_Pid+0x1>
    122e:	0e 94 ee 09 	call	0x13dc	; 0x13dc <_ZN3PID7ComputeEv>

    if  ( (running==false) &&
    1232:	80 91 0b 03 	lds	r24, 0x030B	; 0x80030b <running>
    1236:	81 11       	cpse	r24, r1
    1238:	1e c0       	rjmp	.+60     	; 0x1276 <loop+0x384>
            (Giro_PidCtl->Input > GIRO__TARGET_ANGLE-3 ) &&
    123a:	e0 91 05 03 	lds	r30, 0x0305	; 0x800305 <Giro_PidCtl>
    123e:	f0 91 06 03 	lds	r31, 0x0306	; 0x800306 <Giro_PidCtl+0x1>
    1242:	85 88       	ldd	r8, Z+21	; 0x15
    1244:	96 88       	ldd	r9, Z+22	; 0x16
    1246:	a7 88       	ldd	r10, Z+23	; 0x17
    1248:	b0 8c       	ldd	r11, Z+24	; 0x18

//--------------------------- MOTORS --------------------------------------
    Mot0_Pid->Compute();
    Mot1_Pid->Compute();

    if  ( (running==false) &&
    124a:	20 e0       	ldi	r18, 0x00	; 0
    124c:	30 e0       	ldi	r19, 0x00	; 0
    124e:	40 ec       	ldi	r20, 0xC0	; 192
    1250:	50 ec       	ldi	r21, 0xC0	; 192
    1252:	c5 01       	movw	r24, r10
    1254:	b4 01       	movw	r22, r8
    1256:	0e 94 a2 18 	call	0x3144	; 0x3144 <__gesf2>
    125a:	18 16       	cp	r1, r24
    125c:	64 f4       	brge	.+24     	; 0x1276 <loop+0x384>
            (Giro_PidCtl->Input > GIRO__TARGET_ANGLE-3 ) &&
    125e:	20 e0       	ldi	r18, 0x00	; 0
    1260:	30 e0       	ldi	r19, 0x00	; 0
    1262:	a9 01       	movw	r20, r18
    1264:	c5 01       	movw	r24, r10
    1266:	b4 01       	movw	r22, r8
    1268:	0e 94 1c 17 	call	0x2e38	; 0x2e38 <__cmpsf2>
    126c:	87 ff       	sbrs	r24, 7
    126e:	03 c0       	rjmp	.+6      	; 0x1276 <loop+0x384>
            (Giro_PidCtl->Input < GIRO__TARGET_ANGLE+3 )
        ) {
        running = true;
    1270:	81 e0       	ldi	r24, 0x01	; 1
    1272:	80 93 0b 03 	sts	0x030B, r24	; 0x80030b <running>





    if((connectGiroToMot==true) &&
    1276:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <connectGiroToMot>
    127a:	88 23       	and	r24, r24
    127c:	09 f4       	brne	.+2      	; 0x1280 <loop+0x38e>
    127e:	49 c0       	rjmp	.+146    	; 0x1312 <loop+0x420>
    1280:	80 91 0b 03 	lds	r24, 0x030B	; 0x80030b <running>
    1284:	88 23       	and	r24, r24
    1286:	a1 f1       	breq	.+104    	; 0x12f0 <loop+0x3fe>
            ((running==false) ||
             (Giro_PidCtl->Input > 50 || Giro_PidCtl->Input < -50) || //we fell
    1288:	c0 91 05 03 	lds	r28, 0x0305	; 0x800305 <Giro_PidCtl>
    128c:	d0 91 06 03 	lds	r29, 0x0306	; 0x800306 <Giro_PidCtl+0x1>
    1290:	8d 88       	ldd	r8, Y+21	; 0x15
    1292:	9e 88       	ldd	r9, Y+22	; 0x16
    1294:	af 88       	ldd	r10, Y+23	; 0x17
    1296:	b8 8c       	ldd	r11, Y+24	; 0x18




    if((connectGiroToMot==true) &&
            ((running==false) ||
    1298:	20 e0       	ldi	r18, 0x00	; 0
    129a:	30 e0       	ldi	r19, 0x00	; 0
    129c:	48 e4       	ldi	r20, 0x48	; 72
    129e:	52 e4       	ldi	r21, 0x42	; 66
    12a0:	c5 01       	movw	r24, r10
    12a2:	b4 01       	movw	r22, r8
    12a4:	0e 94 a2 18 	call	0x3144	; 0x3144 <__gesf2>
    12a8:	18 16       	cp	r1, r24
    12aa:	14 f1       	brlt	.+68     	; 0x12f0 <loop+0x3fe>
             (Giro_PidCtl->Input > 50 || Giro_PidCtl->Input < -50) || //we fell
    12ac:	20 e0       	ldi	r18, 0x00	; 0
    12ae:	30 e0       	ldi	r19, 0x00	; 0
    12b0:	48 e4       	ldi	r20, 0x48	; 72
    12b2:	52 ec       	ldi	r21, 0xC2	; 194
    12b4:	c5 01       	movw	r24, r10
    12b6:	b4 01       	movw	r22, r8
    12b8:	0e 94 1c 17 	call	0x2e38	; 0x2e38 <__cmpsf2>
    12bc:	87 fd       	sbrc	r24, 7
    12be:	18 c0       	rjmp	.+48     	; 0x12f0 <loop+0x3fe>
             ((Giro_PidCtl->Output >1) && (Giro_PidCtl->Output < 1))) //somewhat equilibrium
    12c0:	89 8c       	ldd	r8, Y+25	; 0x19
    12c2:	9a 8c       	ldd	r9, Y+26	; 0x1a
    12c4:	ab 8c       	ldd	r10, Y+27	; 0x1b
    12c6:	bc 8c       	ldd	r11, Y+28	; 0x1c



    if((connectGiroToMot==true) &&
            ((running==false) ||
             (Giro_PidCtl->Input > 50 || Giro_PidCtl->Input < -50) || //we fell
    12c8:	20 e0       	ldi	r18, 0x00	; 0
    12ca:	30 e0       	ldi	r19, 0x00	; 0
    12cc:	40 e8       	ldi	r20, 0x80	; 128
    12ce:	5f e3       	ldi	r21, 0x3F	; 63
    12d0:	c5 01       	movw	r24, r10
    12d2:	b4 01       	movw	r22, r8
    12d4:	0e 94 a2 18 	call	0x3144	; 0x3144 <__gesf2>
    12d8:	18 16       	cp	r1, r24
    12da:	dc f4       	brge	.+54     	; 0x1312 <loop+0x420>
             ((Giro_PidCtl->Output >1) && (Giro_PidCtl->Output < 1))) //somewhat equilibrium
    12dc:	20 e0       	ldi	r18, 0x00	; 0
    12de:	30 e0       	ldi	r19, 0x00	; 0
    12e0:	40 e8       	ldi	r20, 0x80	; 128
    12e2:	5f e3       	ldi	r21, 0x3F	; 63
    12e4:	c5 01       	movw	r24, r10
    12e6:	b4 01       	movw	r22, r8
    12e8:	0e 94 1c 17 	call	0x2e38	; 0x2e38 <__cmpsf2>
    12ec:	87 ff       	sbrs	r24, 7
    12ee:	11 c0       	rjmp	.+34     	; 0x1312 <loop+0x420>
      ) {
        Motors_SetSpeed(0,0);
    12f0:	60 e0       	ldi	r22, 0x00	; 0
    12f2:	70 e0       	ldi	r23, 0x00	; 0
    12f4:	80 e0       	ldi	r24, 0x00	; 0
    12f6:	90 e0       	ldi	r25, 0x00	; 0
    12f8:	0e 94 c9 15 	call	0x2b92	; 0x2b92 <_Z15Motors_SetSpeedii>
        running=false;
    12fc:	10 92 0b 03 	sts	0x030B, r1	; 0x80030b <running>
        self_balance_pid_setpoint = 0;
    1300:	10 92 9d 02 	sts	0x029D, r1	; 0x80029d <self_balance_pid_setpoint>
    1304:	10 92 9e 02 	sts	0x029E, r1	; 0x80029e <self_balance_pid_setpoint+0x1>
    1308:	10 92 9f 02 	sts	0x029F, r1	; 0x80029f <self_balance_pid_setpoint+0x2>
    130c:	10 92 a0 02 	sts	0x02A0, r1	; 0x8002a0 <self_balance_pid_setpoint+0x3>
    1310:	1b c0       	rjmp	.+54     	; 0x1348 <loop+0x456>
    } else {
        Motors_SetSpeed(Mot0_PidCtl->Output,Mot1_PidCtl->Output);
    1312:	e0 91 07 03 	lds	r30, 0x0307	; 0x800307 <Mot1_PidCtl>
    1316:	f0 91 08 03 	lds	r31, 0x0308	; 0x800308 <Mot1_PidCtl+0x1>
    131a:	61 8d       	ldd	r22, Z+25	; 0x19
    131c:	72 8d       	ldd	r23, Z+26	; 0x1a
    131e:	83 8d       	ldd	r24, Z+27	; 0x1b
    1320:	94 8d       	ldd	r25, Z+28	; 0x1c
    1322:	0e 94 93 17 	call	0x2f26	; 0x2f26 <__fixsfsi>
    1326:	4b 01       	movw	r8, r22
    1328:	5c 01       	movw	r10, r24
    132a:	e0 91 09 03 	lds	r30, 0x0309	; 0x800309 <Mot0_PidCtl>
    132e:	f0 91 0a 03 	lds	r31, 0x030A	; 0x80030a <Mot0_PidCtl+0x1>
    1332:	61 8d       	ldd	r22, Z+25	; 0x19
    1334:	72 8d       	ldd	r23, Z+26	; 0x1a
    1336:	83 8d       	ldd	r24, Z+27	; 0x1b
    1338:	94 8d       	ldd	r25, Z+28	; 0x1c
    133a:	0e 94 93 17 	call	0x2f26	; 0x2f26 <__fixsfsi>
    133e:	dc 01       	movw	r26, r24
    1340:	cb 01       	movw	r24, r22
    1342:	b4 01       	movw	r22, r8
    1344:	0e 94 c9 15 	call	0x2b92	; 0x2b92 <_Z15Motors_SetSpeedii>
    }




    if (currentMillis - previousMilliSerialLog >= intervalSerialLog) {
    1348:	80 91 0c 03 	lds	r24, 0x030C	; 0x80030c <previousMilliSerialLog>
    134c:	90 91 0d 03 	lds	r25, 0x030D	; 0x80030d <previousMilliSerialLog+0x1>
    1350:	a0 91 0e 03 	lds	r26, 0x030E	; 0x80030e <previousMilliSerialLog+0x2>
    1354:	b0 91 0f 03 	lds	r27, 0x030F	; 0x80030f <previousMilliSerialLog+0x3>
    1358:	a7 01       	movw	r20, r14
    135a:	96 01       	movw	r18, r12
    135c:	28 1b       	sub	r18, r24
    135e:	39 0b       	sbc	r19, r25
    1360:	4a 0b       	sbc	r20, r26
    1362:	5b 0b       	sbc	r21, r27
    1364:	24 36       	cpi	r18, 0x64	; 100
    1366:	31 05       	cpc	r19, r1
    1368:	41 05       	cpc	r20, r1
    136a:	51 05       	cpc	r21, r1
    136c:	50 f1       	brcs	.+84     	; 0x13c2 <loop+0x4d0>
        previousMilliSerialLog=currentMillis;
    136e:	c0 92 0c 03 	sts	0x030C, r12	; 0x80030c <previousMilliSerialLog>
    1372:	d0 92 0d 03 	sts	0x030D, r13	; 0x80030d <previousMilliSerialLog+0x1>
    1376:	e0 92 0e 03 	sts	0x030E, r14	; 0x80030e <previousMilliSerialLog+0x2>
    137a:	f0 92 0f 03 	sts	0x030F, r15	; 0x80030f <previousMilliSerialLog+0x3>


        if (printRawGiro==true) {
    137e:	80 91 b9 02 	lds	r24, 0x02B9	; 0x8002b9 <printRawGiro>
    1382:	81 11       	cpse	r24, r1
            PrintGiroRawData();
    1384:	0e 94 63 06 	call	0xcc6	; 0xcc6 <_Z16PrintGiroRawDatav>
        }

        if (printGiroPid==true) {
    1388:	80 91 b7 02 	lds	r24, 0x02B7	; 0x8002b7 <printGiroPid>
    138c:	81 11       	cpse	r24, r1
            PrintGiroInputOutputValues();
    138e:	0e 94 99 06 	call	0xd32	; 0xd32 <_Z26PrintGiroInputOutputValuesv>
        }

        if(printMotPid==true) {
    1392:	80 91 b8 02 	lds	r24, 0x02B8	; 0x8002b8 <printMotPid>
    1396:	88 23       	and	r24, r24
    1398:	21 f0       	breq	.+8      	; 0x13a2 <loop+0x4b0>
            PrintEncoderValues();
    139a:	0e 94 99 02 	call	0x532	; 0x532 <_Z18PrintEncoderValuesv>
            PrintPidOutputValues();
    139e:	0e 94 cd 02 	call	0x59a	; 0x59a <_Z20PrintPidOutputValuesv>
        }

        Ser_ReceiveData();
    13a2:	0e 94 48 07 	call	0xe90	; 0xe90 <_Z15Ser_ReceiveDatav>
           Serial.println(loopTime);
        */
    }


}
    13a6:	df 91       	pop	r29
    13a8:	cf 91       	pop	r28
    13aa:	1f 91       	pop	r17
    13ac:	0f 91       	pop	r16
    13ae:	ff 90       	pop	r15
    13b0:	ef 90       	pop	r14
    13b2:	df 90       	pop	r13
    13b4:	cf 90       	pop	r12
    13b6:	bf 90       	pop	r11
    13b8:	af 90       	pop	r10
    13ba:	9f 90       	pop	r9
    13bc:	8f 90       	pop	r8
            PrintEncoderValues();
            PrintPidOutputValues();
        }

        Ser_ReceiveData();
        Ser_ParseData();
    13be:	0c 94 29 03 	jmp	0x652	; 0x652 <_Z13Ser_ParseDatav>
           Serial.println(loopTime);
        */
    }


}
    13c2:	df 91       	pop	r29
    13c4:	cf 91       	pop	r28
    13c6:	1f 91       	pop	r17
    13c8:	0f 91       	pop	r16
    13ca:	ff 90       	pop	r15
    13cc:	ef 90       	pop	r14
    13ce:	df 90       	pop	r13
    13d0:	cf 90       	pop	r12
    13d2:	bf 90       	pop	r11
    13d4:	af 90       	pop	r10
    13d6:	9f 90       	pop	r9
    13d8:	8f 90       	pop	r8
    13da:	08 95       	ret

000013dc <_ZN3PID7ComputeEv>:
 *   every time "void loop()" executes.  the function will decide for itself whether a new
 *   pid Output needs to be computed.  returns true when the output is computed,
 *   false when nothing has been done.
 **********************************************************************************/
bool PID::Compute()
{
    13dc:	2f 92       	push	r2
    13de:	3f 92       	push	r3
    13e0:	4f 92       	push	r4
    13e2:	5f 92       	push	r5
    13e4:	6f 92       	push	r6
    13e6:	7f 92       	push	r7
    13e8:	8f 92       	push	r8
    13ea:	9f 92       	push	r9
    13ec:	af 92       	push	r10
    13ee:	bf 92       	push	r11
    13f0:	cf 92       	push	r12
    13f2:	df 92       	push	r13
    13f4:	ef 92       	push	r14
    13f6:	ff 92       	push	r15
    13f8:	0f 93       	push	r16
    13fa:	1f 93       	push	r17
    13fc:	cf 93       	push	r28
    13fe:	df 93       	push	r29
    1400:	cd b7       	in	r28, 0x3d	; 61
    1402:	de b7       	in	r29, 0x3e	; 62
    1404:	60 97       	sbiw	r28, 0x10	; 16
    1406:	0f b6       	in	r0, 0x3f	; 63
    1408:	f8 94       	cli
    140a:	de bf       	out	0x3e, r29	; 62
    140c:	0f be       	out	0x3f, r0	; 63
    140e:	cd bf       	out	0x3d, r28	; 61
   if(!inAuto) return false;
    1410:	dc 01       	movw	r26, r24
    1412:	da 96       	adiw	r26, 0x3a	; 58
    1414:	bc 91       	ld	r27, X
    1416:	b9 83       	std	Y+1, r27	; 0x01
    1418:	b1 11       	cpse	r27, r1
    141a:	02 c0       	rjmp	.+4      	; 0x1420 <_ZN3PID7ComputeEv+0x44>
    141c:	19 82       	std	Y+1, r1	; 0x01
    141e:	2b c1       	rjmp	.+598    	; 0x1676 <_ZN3PID7ComputeEv+0x29a>
    1420:	98 8b       	std	Y+16, r25	; 0x10
    1422:	8f 87       	std	Y+15, r24	; 0x0f
   unsigned long now = millis();
    1424:	0e 94 27 1d 	call	0x3a4e	; 0x3a4e <millis>
    1428:	6e 83       	std	Y+6, r22	; 0x06
    142a:	7f 83       	std	Y+7, r23	; 0x07
    142c:	88 87       	std	Y+8, r24	; 0x08
    142e:	99 87       	std	Y+9, r25	; 0x09
   unsigned long timeChange = (now - lastTime);
   if(timeChange>=SampleTime)
    1430:	ef 85       	ldd	r30, Y+15	; 0x0f
    1432:	f8 89       	ldd	r31, Y+16	; 0x10
    1434:	82 a1       	ldd	r24, Z+34	; 0x22
    1436:	93 a1       	ldd	r25, Z+35	; 0x23
    1438:	a4 a1       	ldd	r26, Z+36	; 0x24
    143a:	b5 a1       	ldd	r27, Z+37	; 0x25
    143c:	4e 81       	ldd	r20, Y+6	; 0x06
    143e:	5f 81       	ldd	r21, Y+7	; 0x07
    1440:	68 85       	ldd	r22, Y+8	; 0x08
    1442:	79 85       	ldd	r23, Y+9	; 0x09
    1444:	48 1b       	sub	r20, r24
    1446:	59 0b       	sbc	r21, r25
    1448:	6a 0b       	sbc	r22, r26
    144a:	7b 0b       	sbc	r23, r27
    144c:	86 a5       	ldd	r24, Z+46	; 0x2e
    144e:	97 a5       	ldd	r25, Z+47	; 0x2f
    1450:	a0 a9       	ldd	r26, Z+48	; 0x30
    1452:	b1 a9       	ldd	r27, Z+49	; 0x31
    1454:	48 17       	cp	r20, r24
    1456:	59 07       	cpc	r21, r25
    1458:	6a 07       	cpc	r22, r26
    145a:	7b 07       	cpc	r23, r27
    145c:	f8 f2       	brcs	.-66     	; 0x141c <_ZN3PID7ComputeEv+0x40>
   {
      /*Compute all the working error variables*/
      double input = *myInput;
    145e:	04 8c       	ldd	r0, Z+28	; 0x1c
    1460:	f5 8d       	ldd	r31, Z+29	; 0x1d
    1462:	e0 2d       	mov	r30, r0
    1464:	80 81       	ld	r24, Z
    1466:	91 81       	ldd	r25, Z+1	; 0x01
    1468:	a2 81       	ldd	r26, Z+2	; 0x02
    146a:	b3 81       	ldd	r27, Z+3	; 0x03
    146c:	8a 83       	std	Y+2, r24	; 0x02
    146e:	9b 83       	std	Y+3, r25	; 0x03
    1470:	ac 83       	std	Y+4, r26	; 0x04
    1472:	bd 83       	std	Y+5, r27	; 0x05
      double error = *mySetpoint - input;
    1474:	af 85       	ldd	r26, Y+15	; 0x0f
    1476:	b8 89       	ldd	r27, Y+16	; 0x10
    1478:	90 96       	adiw	r26, 0x20	; 32
    147a:	ed 91       	ld	r30, X+
    147c:	fc 91       	ld	r31, X
    147e:	91 97       	sbiw	r26, 0x21	; 33
    1480:	2a 81       	ldd	r18, Y+2	; 0x02
    1482:	3b 81       	ldd	r19, Y+3	; 0x03
    1484:	4c 81       	ldd	r20, Y+4	; 0x04
    1486:	5d 81       	ldd	r21, Y+5	; 0x05
    1488:	60 81       	ld	r22, Z
    148a:	71 81       	ldd	r23, Z+1	; 0x01
    148c:	82 81       	ldd	r24, Z+2	; 0x02
    148e:	93 81       	ldd	r25, Z+3	; 0x03
    1490:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <__subsf3>
    1494:	4b 01       	movw	r8, r22
    1496:	5c 01       	movw	r10, r24
      double dInput = (input - lastInput);
    1498:	ef 85       	ldd	r30, Y+15	; 0x0f
    149a:	f8 89       	ldd	r31, Y+16	; 0x10
    149c:	22 a5       	ldd	r18, Z+42	; 0x2a
    149e:	33 a5       	ldd	r19, Z+43	; 0x2b
    14a0:	44 a5       	ldd	r20, Z+44	; 0x2c
    14a2:	55 a5       	ldd	r21, Z+45	; 0x2d
    14a4:	6a 81       	ldd	r22, Y+2	; 0x02
    14a6:	7b 81       	ldd	r23, Y+3	; 0x03
    14a8:	8c 81       	ldd	r24, Y+4	; 0x04
    14aa:	9d 81       	ldd	r25, Y+5	; 0x05
    14ac:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <__subsf3>
    14b0:	6b 01       	movw	r12, r22
    14b2:	7c 01       	movw	r14, r24
      outputSum+= (ki * error);
    14b4:	af 85       	ldd	r26, Y+15	; 0x0f
    14b6:	b8 89       	ldd	r27, Y+16	; 0x10
    14b8:	50 96       	adiw	r26, 0x10	; 16
    14ba:	2d 91       	ld	r18, X+
    14bc:	3d 91       	ld	r19, X+
    14be:	4d 91       	ld	r20, X+
    14c0:	5c 91       	ld	r21, X
    14c2:	53 97       	sbiw	r26, 0x13	; 19
    14c4:	c5 01       	movw	r24, r10
    14c6:	b4 01       	movw	r22, r8
    14c8:	0e 94 af 18 	call	0x315e	; 0x315e <__mulsf3>
    14cc:	ef 85       	ldd	r30, Y+15	; 0x0f
    14ce:	f8 89       	ldd	r31, Y+16	; 0x10
    14d0:	26 a1       	ldd	r18, Z+38	; 0x26
    14d2:	37 a1       	ldd	r19, Z+39	; 0x27
    14d4:	40 a5       	ldd	r20, Z+40	; 0x28
    14d6:	51 a5       	ldd	r21, Z+41	; 0x29
    14d8:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <__addsf3>
    14dc:	2b 01       	movw	r4, r22
    14de:	3c 01       	movw	r6, r24
    14e0:	af 85       	ldd	r26, Y+15	; 0x0f
    14e2:	b8 89       	ldd	r27, Y+16	; 0x10
    14e4:	96 96       	adiw	r26, 0x26	; 38
    14e6:	6d 93       	st	X+, r22
    14e8:	7d 93       	st	X+, r23
    14ea:	8d 93       	st	X+, r24
    14ec:	9c 93       	st	X, r25
    14ee:	99 97       	sbiw	r26, 0x29	; 41

      /*Add Proportional on Measurement, if P_ON_M is specified*/
      if(!pOnE) outputSum-= kp * dInput;
    14f0:	db 96       	adiw	r26, 0x3b	; 59
    14f2:	bc 91       	ld	r27, X
    14f4:	ba 87       	std	Y+10, r27	; 0x0a
    14f6:	b1 11       	cpse	r27, r1
    14f8:	18 c0       	rjmp	.+48     	; 0x152a <_ZN3PID7ComputeEv+0x14e>
    14fa:	ef 85       	ldd	r30, Y+15	; 0x0f
    14fc:	f8 89       	ldd	r31, Y+16	; 0x10
    14fe:	24 85       	ldd	r18, Z+12	; 0x0c
    1500:	35 85       	ldd	r19, Z+13	; 0x0d
    1502:	46 85       	ldd	r20, Z+14	; 0x0e
    1504:	57 85       	ldd	r21, Z+15	; 0x0f
    1506:	c7 01       	movw	r24, r14
    1508:	b6 01       	movw	r22, r12
    150a:	0e 94 af 18 	call	0x315e	; 0x315e <__mulsf3>
    150e:	9b 01       	movw	r18, r22
    1510:	ac 01       	movw	r20, r24
    1512:	c3 01       	movw	r24, r6
    1514:	b2 01       	movw	r22, r4
    1516:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <__subsf3>
    151a:	af 85       	ldd	r26, Y+15	; 0x0f
    151c:	b8 89       	ldd	r27, Y+16	; 0x10
    151e:	96 96       	adiw	r26, 0x26	; 38
    1520:	6d 93       	st	X+, r22
    1522:	7d 93       	st	X+, r23
    1524:	8d 93       	st	X+, r24
    1526:	9c 93       	st	X, r25
    1528:	99 97       	sbiw	r26, 0x29	; 41

      if(outputSum > outMax) outputSum= outMax;
    152a:	ef 85       	ldd	r30, Y+15	; 0x0f
    152c:	f8 89       	ldd	r31, Y+16	; 0x10
    152e:	46 a0       	ldd	r4, Z+38	; 0x26
    1530:	57 a0       	ldd	r5, Z+39	; 0x27
    1532:	60 a4       	ldd	r6, Z+40	; 0x28
    1534:	71 a4       	ldd	r7, Z+41	; 0x29
    1536:	16 a9       	ldd	r17, Z+54	; 0x36
    1538:	07 a9       	ldd	r16, Z+55	; 0x37
    153a:	30 ac       	ldd	r3, Z+56	; 0x38
    153c:	21 ac       	ldd	r2, Z+57	; 0x39
    153e:	21 2f       	mov	r18, r17
    1540:	30 2f       	mov	r19, r16
    1542:	43 2d       	mov	r20, r3
    1544:	52 2d       	mov	r21, r2
    1546:	c3 01       	movw	r24, r6
    1548:	b2 01       	movw	r22, r4
    154a:	0e 94 a2 18 	call	0x3144	; 0x3144 <__gesf2>
    154e:	18 16       	cp	r1, r24
    1550:	2c f4       	brge	.+10     	; 0x155c <_ZN3PID7ComputeEv+0x180>
    1552:	81 2f       	mov	r24, r17
    1554:	90 2f       	mov	r25, r16
    1556:	a3 2d       	mov	r26, r3
    1558:	b2 2d       	mov	r27, r2
    155a:	18 c0       	rjmp	.+48     	; 0x158c <_ZN3PID7ComputeEv+0x1b0>
      else if(outputSum < outMin) outputSum= outMin;
    155c:	af 85       	ldd	r26, Y+15	; 0x0f
    155e:	b8 89       	ldd	r27, Y+16	; 0x10
    1560:	d2 96       	adiw	r26, 0x32	; 50
    1562:	8d 91       	ld	r24, X+
    1564:	9d 91       	ld	r25, X+
    1566:	0d 90       	ld	r0, X+
    1568:	bc 91       	ld	r27, X
    156a:	a0 2d       	mov	r26, r0
    156c:	8b 87       	std	Y+11, r24	; 0x0b
    156e:	9c 87       	std	Y+12, r25	; 0x0c
    1570:	ad 87       	std	Y+13, r26	; 0x0d
    1572:	be 87       	std	Y+14, r27	; 0x0e
    1574:	9c 01       	movw	r18, r24
    1576:	ad 01       	movw	r20, r26
    1578:	c3 01       	movw	r24, r6
    157a:	b2 01       	movw	r22, r4
    157c:	0e 94 1c 17 	call	0x2e38	; 0x2e38 <__cmpsf2>
    1580:	87 ff       	sbrs	r24, 7
    1582:	0a c0       	rjmp	.+20     	; 0x1598 <_ZN3PID7ComputeEv+0x1bc>
    1584:	8b 85       	ldd	r24, Y+11	; 0x0b
    1586:	9c 85       	ldd	r25, Y+12	; 0x0c
    1588:	ad 85       	ldd	r26, Y+13	; 0x0d
    158a:	be 85       	ldd	r27, Y+14	; 0x0e
    158c:	ef 85       	ldd	r30, Y+15	; 0x0f
    158e:	f8 89       	ldd	r31, Y+16	; 0x10
    1590:	86 a3       	std	Z+38, r24	; 0x26
    1592:	97 a3       	std	Z+39, r25	; 0x27
    1594:	a0 a7       	std	Z+40, r26	; 0x28
    1596:	b1 a7       	std	Z+41, r27	; 0x29

      /*Add Proportional on Error, if P_ON_E is specified*/
	   double output;
      if(pOnE) output = kp * error;
    1598:	fa 85       	ldd	r31, Y+10	; 0x0a
    159a:	ff 23       	and	r31, r31
    159c:	79 f0       	breq	.+30     	; 0x15bc <_ZN3PID7ComputeEv+0x1e0>
    159e:	af 85       	ldd	r26, Y+15	; 0x0f
    15a0:	b8 89       	ldd	r27, Y+16	; 0x10
    15a2:	1c 96       	adiw	r26, 0x0c	; 12
    15a4:	2d 91       	ld	r18, X+
    15a6:	3d 91       	ld	r19, X+
    15a8:	4d 91       	ld	r20, X+
    15aa:	5c 91       	ld	r21, X
    15ac:	1f 97       	sbiw	r26, 0x0f	; 15
    15ae:	c5 01       	movw	r24, r10
    15b0:	b4 01       	movw	r22, r8
    15b2:	0e 94 af 18 	call	0x315e	; 0x315e <__mulsf3>
    15b6:	4b 01       	movw	r8, r22
    15b8:	5c 01       	movw	r10, r24
    15ba:	03 c0       	rjmp	.+6      	; 0x15c2 <_ZN3PID7ComputeEv+0x1e6>
      else output = 0;
    15bc:	81 2c       	mov	r8, r1
    15be:	91 2c       	mov	r9, r1
    15c0:	54 01       	movw	r10, r8

      /*Compute Rest of PID Output*/
      output += outputSum - kd * dInput;
    15c2:	ef 85       	ldd	r30, Y+15	; 0x0f
    15c4:	f8 89       	ldd	r31, Y+16	; 0x10
    15c6:	24 89       	ldd	r18, Z+20	; 0x14
    15c8:	35 89       	ldd	r19, Z+21	; 0x15
    15ca:	46 89       	ldd	r20, Z+22	; 0x16
    15cc:	57 89       	ldd	r21, Z+23	; 0x17
    15ce:	c7 01       	movw	r24, r14
    15d0:	b6 01       	movw	r22, r12
    15d2:	0e 94 af 18 	call	0x315e	; 0x315e <__mulsf3>
    15d6:	9b 01       	movw	r18, r22
    15d8:	ac 01       	movw	r20, r24
    15da:	af 85       	ldd	r26, Y+15	; 0x0f
    15dc:	b8 89       	ldd	r27, Y+16	; 0x10
    15de:	96 96       	adiw	r26, 0x26	; 38
    15e0:	6d 91       	ld	r22, X+
    15e2:	7d 91       	ld	r23, X+
    15e4:	8d 91       	ld	r24, X+
    15e6:	9c 91       	ld	r25, X
    15e8:	99 97       	sbiw	r26, 0x29	; 41
    15ea:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <__subsf3>
    15ee:	a5 01       	movw	r20, r10
    15f0:	94 01       	movw	r18, r8
    15f2:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <__addsf3>
    15f6:	6b 01       	movw	r12, r22
    15f8:	7c 01       	movw	r14, r24

	    if(output > outMax) output = outMax;
    15fa:	9b 01       	movw	r18, r22
    15fc:	ac 01       	movw	r20, r24
    15fe:	61 2f       	mov	r22, r17
    1600:	70 2f       	mov	r23, r16
    1602:	83 2d       	mov	r24, r3
    1604:	92 2d       	mov	r25, r2
    1606:	0e 94 1c 17 	call	0x2e38	; 0x2e38 <__cmpsf2>
    160a:	87 fd       	sbrc	r24, 7
    160c:	14 c0       	rjmp	.+40     	; 0x1636 <_ZN3PID7ComputeEv+0x25a>
      else if(output < outMin) output = outMin;
    160e:	ef 85       	ldd	r30, Y+15	; 0x0f
    1610:	f8 89       	ldd	r31, Y+16	; 0x10
    1612:	12 a9       	ldd	r17, Z+50	; 0x32
    1614:	03 a9       	ldd	r16, Z+51	; 0x33
    1616:	34 a8       	ldd	r3, Z+52	; 0x34
    1618:	25 a8       	ldd	r2, Z+53	; 0x35
    161a:	21 2f       	mov	r18, r17
    161c:	30 2f       	mov	r19, r16
    161e:	43 2d       	mov	r20, r3
    1620:	52 2d       	mov	r21, r2
    1622:	b6 01       	movw	r22, r12
    1624:	c7 01       	movw	r24, r14
    1626:	0e 94 1c 17 	call	0x2e38	; 0x2e38 <__cmpsf2>
    162a:	87 fd       	sbrc	r24, 7
    162c:	04 c0       	rjmp	.+8      	; 0x1636 <_ZN3PID7ComputeEv+0x25a>
	   double output;
      if(pOnE) output = kp * error;
      else output = 0;

      /*Compute Rest of PID Output*/
      output += outputSum - kd * dInput;
    162e:	1c 2d       	mov	r17, r12
    1630:	0d 2d       	mov	r16, r13
    1632:	3e 2c       	mov	r3, r14
    1634:	2f 2c       	mov	r2, r15

	    if(output > outMax) output = outMax;
      else if(output < outMin) output = outMin;
	    *myOutput = output;
    1636:	af 85       	ldd	r26, Y+15	; 0x0f
    1638:	b8 89       	ldd	r27, Y+16	; 0x10
    163a:	5e 96       	adiw	r26, 0x1e	; 30
    163c:	ed 91       	ld	r30, X+
    163e:	fc 91       	ld	r31, X
    1640:	5f 97       	sbiw	r26, 0x1f	; 31
    1642:	81 2f       	mov	r24, r17
    1644:	90 2f       	mov	r25, r16
    1646:	a3 2d       	mov	r26, r3
    1648:	b2 2d       	mov	r27, r2
    164a:	80 83       	st	Z, r24
    164c:	91 83       	std	Z+1, r25	; 0x01
    164e:	a2 83       	std	Z+2, r26	; 0x02
    1650:	b3 83       	std	Z+3, r27	; 0x03

      /*Remember some variables for next time*/
      lastInput = input;
    1652:	8a 81       	ldd	r24, Y+2	; 0x02
    1654:	9b 81       	ldd	r25, Y+3	; 0x03
    1656:	ac 81       	ldd	r26, Y+4	; 0x04
    1658:	bd 81       	ldd	r27, Y+5	; 0x05
    165a:	ef 85       	ldd	r30, Y+15	; 0x0f
    165c:	f8 89       	ldd	r31, Y+16	; 0x10
    165e:	82 a7       	std	Z+42, r24	; 0x2a
    1660:	93 a7       	std	Z+43, r25	; 0x2b
    1662:	a4 a7       	std	Z+44, r26	; 0x2c
    1664:	b5 a7       	std	Z+45, r27	; 0x2d
      lastTime = now;
    1666:	8e 81       	ldd	r24, Y+6	; 0x06
    1668:	9f 81       	ldd	r25, Y+7	; 0x07
    166a:	a8 85       	ldd	r26, Y+8	; 0x08
    166c:	b9 85       	ldd	r27, Y+9	; 0x09
    166e:	82 a3       	std	Z+34, r24	; 0x22
    1670:	93 a3       	std	Z+35, r25	; 0x23
    1672:	a4 a3       	std	Z+36, r26	; 0x24
    1674:	b5 a3       	std	Z+37, r27	; 0x25
	    return true;
   }
   else return false;
}
    1676:	89 81       	ldd	r24, Y+1	; 0x01
    1678:	60 96       	adiw	r28, 0x10	; 16
    167a:	0f b6       	in	r0, 0x3f	; 63
    167c:	f8 94       	cli
    167e:	de bf       	out	0x3e, r29	; 62
    1680:	0f be       	out	0x3f, r0	; 63
    1682:	cd bf       	out	0x3d, r28	; 61
    1684:	df 91       	pop	r29
    1686:	cf 91       	pop	r28
    1688:	1f 91       	pop	r17
    168a:	0f 91       	pop	r16
    168c:	ff 90       	pop	r15
    168e:	ef 90       	pop	r14
    1690:	df 90       	pop	r13
    1692:	cf 90       	pop	r12
    1694:	bf 90       	pop	r11
    1696:	af 90       	pop	r10
    1698:	9f 90       	pop	r9
    169a:	8f 90       	pop	r8
    169c:	7f 90       	pop	r7
    169e:	6f 90       	pop	r6
    16a0:	5f 90       	pop	r5
    16a2:	4f 90       	pop	r4
    16a4:	3f 90       	pop	r3
    16a6:	2f 90       	pop	r2
    16a8:	08 95       	ret

000016aa <_ZN3PID10SetTuningsEdddi>:
 * This function allows the controller's dynamic performance to be adjusted.
 * it's called automatically from the constructor, but tunings can also
 * be adjusted on the fly during normal operation
 ******************************************************************************/
void PID::SetTunings(double Kp, double Ki, double Kd, int POn)
{
    16aa:	4f 92       	push	r4
    16ac:	5f 92       	push	r5
    16ae:	6f 92       	push	r6
    16b0:	7f 92       	push	r7
    16b2:	8f 92       	push	r8
    16b4:	9f 92       	push	r9
    16b6:	af 92       	push	r10
    16b8:	bf 92       	push	r11
    16ba:	cf 92       	push	r12
    16bc:	df 92       	push	r13
    16be:	ef 92       	push	r14
    16c0:	ff 92       	push	r15
    16c2:	0f 93       	push	r16
    16c4:	1f 93       	push	r17
    16c6:	cf 93       	push	r28
    16c8:	df 93       	push	r29
    16ca:	00 d0       	rcall	.+0      	; 0x16cc <_ZN3PID10SetTuningsEdddi+0x22>
    16cc:	00 d0       	rcall	.+0      	; 0x16ce <_ZN3PID10SetTuningsEdddi+0x24>
    16ce:	00 d0       	rcall	.+0      	; 0x16d0 <_ZN3PID10SetTuningsEdddi+0x26>
    16d0:	cd b7       	in	r28, 0x3d	; 61
    16d2:	de b7       	in	r29, 0x3e	; 62
    16d4:	9e 83       	std	Y+6, r25	; 0x06
    16d6:	8d 83       	std	Y+5, r24	; 0x05
    16d8:	49 83       	std	Y+1, r20	; 0x01
    16da:	5a 83       	std	Y+2, r21	; 0x02
    16dc:	6b 83       	std	Y+3, r22	; 0x03
    16de:	7c 83       	std	Y+4, r23	; 0x04
    16e0:	28 01       	movw	r4, r16
    16e2:	39 01       	movw	r6, r18
   if (Kp<0 || Ki<0 || Kd<0) return;
    16e4:	20 e0       	ldi	r18, 0x00	; 0
    16e6:	30 e0       	ldi	r19, 0x00	; 0
    16e8:	a9 01       	movw	r20, r18
    16ea:	69 81       	ldd	r22, Y+1	; 0x01
    16ec:	7a 81       	ldd	r23, Y+2	; 0x02
    16ee:	8b 81       	ldd	r24, Y+3	; 0x03
    16f0:	9c 81       	ldd	r25, Y+4	; 0x04
    16f2:	0e 94 1c 17 	call	0x2e38	; 0x2e38 <__cmpsf2>
    16f6:	87 fd       	sbrc	r24, 7
    16f8:	97 c0       	rjmp	.+302    	; 0x1828 <_ZN3PID10SetTuningsEdddi+0x17e>
    16fa:	20 e0       	ldi	r18, 0x00	; 0
    16fc:	30 e0       	ldi	r19, 0x00	; 0
    16fe:	a9 01       	movw	r20, r18
    1700:	c3 01       	movw	r24, r6
    1702:	b2 01       	movw	r22, r4
    1704:	0e 94 1c 17 	call	0x2e38	; 0x2e38 <__cmpsf2>
    1708:	87 fd       	sbrc	r24, 7
    170a:	8e c0       	rjmp	.+284    	; 0x1828 <_ZN3PID10SetTuningsEdddi+0x17e>
    170c:	20 e0       	ldi	r18, 0x00	; 0
    170e:	30 e0       	ldi	r19, 0x00	; 0
    1710:	a9 01       	movw	r20, r18
    1712:	c7 01       	movw	r24, r14
    1714:	b6 01       	movw	r22, r12
    1716:	0e 94 1c 17 	call	0x2e38	; 0x2e38 <__cmpsf2>
    171a:	87 fd       	sbrc	r24, 7
    171c:	85 c0       	rjmp	.+266    	; 0x1828 <_ZN3PID10SetTuningsEdddi+0x17e>

   pOn = POn;
    171e:	ad 81       	ldd	r26, Y+5	; 0x05
    1720:	be 81       	ldd	r27, Y+6	; 0x06
    1722:	5b 96       	adiw	r26, 0x1b	; 27
    1724:	bc 92       	st	X, r11
    1726:	ae 92       	st	-X, r10
    1728:	5a 97       	sbiw	r26, 0x1a	; 26
   pOnE = POn == P_ON_E;
    172a:	81 e0       	ldi	r24, 0x01	; 1
    172c:	aa 94       	dec	r10
    172e:	ab 28       	or	r10, r11
    1730:	09 f0       	breq	.+2      	; 0x1734 <_ZN3PID10SetTuningsEdddi+0x8a>
    1732:	80 e0       	ldi	r24, 0x00	; 0
    1734:	ed 81       	ldd	r30, Y+5	; 0x05
    1736:	fe 81       	ldd	r31, Y+6	; 0x06
    1738:	83 af       	std	Z+59, r24	; 0x3b

   dispKp = Kp; dispKi = Ki; dispKd = Kd;
    173a:	89 81       	ldd	r24, Y+1	; 0x01
    173c:	9a 81       	ldd	r25, Y+2	; 0x02
    173e:	ab 81       	ldd	r26, Y+3	; 0x03
    1740:	bc 81       	ldd	r27, Y+4	; 0x04
    1742:	80 83       	st	Z, r24
    1744:	91 83       	std	Z+1, r25	; 0x01
    1746:	a2 83       	std	Z+2, r26	; 0x02
    1748:	b3 83       	std	Z+3, r27	; 0x03
    174a:	44 82       	std	Z+4, r4	; 0x04
    174c:	55 82       	std	Z+5, r5	; 0x05
    174e:	66 82       	std	Z+6, r6	; 0x06
    1750:	77 82       	std	Z+7, r7	; 0x07
    1752:	c0 86       	std	Z+8, r12	; 0x08
    1754:	d1 86       	std	Z+9, r13	; 0x09
    1756:	e2 86       	std	Z+10, r14	; 0x0a
    1758:	f3 86       	std	Z+11, r15	; 0x0b

   double SampleTimeInSec = ((double)SampleTime)/1000;
    175a:	66 a5       	ldd	r22, Z+46	; 0x2e
    175c:	77 a5       	ldd	r23, Z+47	; 0x2f
    175e:	80 a9       	ldd	r24, Z+48	; 0x30
    1760:	91 a9       	ldd	r25, Z+49	; 0x31
    1762:	0e 94 c9 17 	call	0x2f92	; 0x2f92 <__floatunsisf>
    1766:	20 e0       	ldi	r18, 0x00	; 0
    1768:	30 e0       	ldi	r19, 0x00	; 0
    176a:	4a e7       	ldi	r20, 0x7A	; 122
    176c:	54 e4       	ldi	r21, 0x44	; 68
    176e:	0e 94 21 17 	call	0x2e42	; 0x2e42 <__divsf3>
    1772:	4b 01       	movw	r8, r22
    1774:	5c 01       	movw	r10, r24
   kp = Kp;
    1776:	89 81       	ldd	r24, Y+1	; 0x01
    1778:	9a 81       	ldd	r25, Y+2	; 0x02
    177a:	ab 81       	ldd	r26, Y+3	; 0x03
    177c:	bc 81       	ldd	r27, Y+4	; 0x04
    177e:	ed 81       	ldd	r30, Y+5	; 0x05
    1780:	fe 81       	ldd	r31, Y+6	; 0x06
    1782:	84 87       	std	Z+12, r24	; 0x0c
    1784:	95 87       	std	Z+13, r25	; 0x0d
    1786:	a6 87       	std	Z+14, r26	; 0x0e
    1788:	b7 87       	std	Z+15, r27	; 0x0f
   ki = Ki * SampleTimeInSec;
    178a:	a5 01       	movw	r20, r10
    178c:	94 01       	movw	r18, r8
    178e:	c3 01       	movw	r24, r6
    1790:	b2 01       	movw	r22, r4
    1792:	0e 94 af 18 	call	0x315e	; 0x315e <__mulsf3>
    1796:	2b 01       	movw	r4, r22
    1798:	3c 01       	movw	r6, r24
    179a:	ad 81       	ldd	r26, Y+5	; 0x05
    179c:	be 81       	ldd	r27, Y+6	; 0x06
    179e:	50 96       	adiw	r26, 0x10	; 16
    17a0:	6d 93       	st	X+, r22
    17a2:	7d 93       	st	X+, r23
    17a4:	8d 93       	st	X+, r24
    17a6:	9c 93       	st	X, r25
    17a8:	53 97       	sbiw	r26, 0x13	; 19
   kd = Kd / SampleTimeInSec;
    17aa:	a5 01       	movw	r20, r10
    17ac:	94 01       	movw	r18, r8
    17ae:	c7 01       	movw	r24, r14
    17b0:	b6 01       	movw	r22, r12
    17b2:	0e 94 21 17 	call	0x2e42	; 0x2e42 <__divsf3>
    17b6:	6b 01       	movw	r12, r22
    17b8:	7c 01       	movw	r14, r24
    17ba:	ed 81       	ldd	r30, Y+5	; 0x05
    17bc:	fe 81       	ldd	r31, Y+6	; 0x06
    17be:	64 8b       	std	Z+20, r22	; 0x14
    17c0:	75 8b       	std	Z+21, r23	; 0x15
    17c2:	86 8b       	std	Z+22, r24	; 0x16
    17c4:	97 8b       	std	Z+23, r25	; 0x17

  if(controllerDirection ==REVERSE)
    17c6:	80 8d       	ldd	r24, Z+24	; 0x18
    17c8:	91 8d       	ldd	r25, Z+25	; 0x19
    17ca:	01 97       	sbiw	r24, 0x01	; 1
    17cc:	69 f5       	brne	.+90     	; 0x1828 <_ZN3PID10SetTuningsEdddi+0x17e>
   {
      kp = (0 - kp);
    17ce:	29 81       	ldd	r18, Y+1	; 0x01
    17d0:	3a 81       	ldd	r19, Y+2	; 0x02
    17d2:	4b 81       	ldd	r20, Y+3	; 0x03
    17d4:	5c 81       	ldd	r21, Y+4	; 0x04
    17d6:	60 e0       	ldi	r22, 0x00	; 0
    17d8:	70 e0       	ldi	r23, 0x00	; 0
    17da:	cb 01       	movw	r24, r22
    17dc:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <__subsf3>
    17e0:	ad 81       	ldd	r26, Y+5	; 0x05
    17e2:	be 81       	ldd	r27, Y+6	; 0x06
    17e4:	1c 96       	adiw	r26, 0x0c	; 12
    17e6:	6d 93       	st	X+, r22
    17e8:	7d 93       	st	X+, r23
    17ea:	8d 93       	st	X+, r24
    17ec:	9c 93       	st	X, r25
    17ee:	1f 97       	sbiw	r26, 0x0f	; 15
      ki = (0 - ki);
    17f0:	a3 01       	movw	r20, r6
    17f2:	92 01       	movw	r18, r4
    17f4:	60 e0       	ldi	r22, 0x00	; 0
    17f6:	70 e0       	ldi	r23, 0x00	; 0
    17f8:	cb 01       	movw	r24, r22
    17fa:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <__subsf3>
    17fe:	ed 81       	ldd	r30, Y+5	; 0x05
    1800:	fe 81       	ldd	r31, Y+6	; 0x06
    1802:	60 8b       	std	Z+16, r22	; 0x10
    1804:	71 8b       	std	Z+17, r23	; 0x11
    1806:	82 8b       	std	Z+18, r24	; 0x12
    1808:	93 8b       	std	Z+19, r25	; 0x13
      kd = (0 - kd);
    180a:	a7 01       	movw	r20, r14
    180c:	96 01       	movw	r18, r12
    180e:	60 e0       	ldi	r22, 0x00	; 0
    1810:	70 e0       	ldi	r23, 0x00	; 0
    1812:	cb 01       	movw	r24, r22
    1814:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <__subsf3>
    1818:	ad 81       	ldd	r26, Y+5	; 0x05
    181a:	be 81       	ldd	r27, Y+6	; 0x06
    181c:	54 96       	adiw	r26, 0x14	; 20
    181e:	6d 93       	st	X+, r22
    1820:	7d 93       	st	X+, r23
    1822:	8d 93       	st	X+, r24
    1824:	9c 93       	st	X, r25
    1826:	57 97       	sbiw	r26, 0x17	; 23
   }
}
    1828:	26 96       	adiw	r28, 0x06	; 6
    182a:	0f b6       	in	r0, 0x3f	; 63
    182c:	f8 94       	cli
    182e:	de bf       	out	0x3e, r29	; 62
    1830:	0f be       	out	0x3f, r0	; 63
    1832:	cd bf       	out	0x3d, r28	; 61
    1834:	df 91       	pop	r29
    1836:	cf 91       	pop	r28
    1838:	1f 91       	pop	r17
    183a:	0f 91       	pop	r16
    183c:	ff 90       	pop	r15
    183e:	ef 90       	pop	r14
    1840:	df 90       	pop	r13
    1842:	cf 90       	pop	r12
    1844:	bf 90       	pop	r11
    1846:	af 90       	pop	r10
    1848:	9f 90       	pop	r9
    184a:	8f 90       	pop	r8
    184c:	7f 90       	pop	r7
    184e:	6f 90       	pop	r6
    1850:	5f 90       	pop	r5
    1852:	4f 90       	pop	r4
    1854:	08 95       	ret

00001856 <_ZN3PID10SetTuningsEddd>:

/* SetTunings(...)*************************************************************
 * Set Tunings using the last-rembered POn setting
 ******************************************************************************/
void PID::SetTunings(double Kp, double Ki, double Kd){
    1856:	af 92       	push	r10
    1858:	bf 92       	push	r11
    185a:	cf 92       	push	r12
    185c:	df 92       	push	r13
    185e:	ef 92       	push	r14
    1860:	ff 92       	push	r15
    1862:	0f 93       	push	r16
    1864:	1f 93       	push	r17
    SetTunings(Kp, Ki, Kd, pOn); 
    1866:	fc 01       	movw	r30, r24
    1868:	a2 8c       	ldd	r10, Z+26	; 0x1a
    186a:	b3 8c       	ldd	r11, Z+27	; 0x1b
    186c:	0e 94 55 0b 	call	0x16aa	; 0x16aa <_ZN3PID10SetTuningsEdddi>
}
    1870:	1f 91       	pop	r17
    1872:	0f 91       	pop	r16
    1874:	ff 90       	pop	r15
    1876:	ef 90       	pop	r14
    1878:	df 90       	pop	r13
    187a:	cf 90       	pop	r12
    187c:	bf 90       	pop	r11
    187e:	af 90       	pop	r10
    1880:	08 95       	ret

00001882 <_ZN3PID13SetSampleTimeEi>:

/* SetSampleTime(...) *********************************************************
 * sets the period, in Milliseconds, at which the calculation is performed
 ******************************************************************************/
void PID::SetSampleTime(int NewSampleTime)
{
    1882:	8f 92       	push	r8
    1884:	9f 92       	push	r9
    1886:	af 92       	push	r10
    1888:	bf 92       	push	r11
    188a:	cf 92       	push	r12
    188c:	df 92       	push	r13
    188e:	ef 92       	push	r14
    1890:	ff 92       	push	r15
    1892:	cf 93       	push	r28
    1894:	df 93       	push	r29
   if (NewSampleTime > 0)
    1896:	16 16       	cp	r1, r22
    1898:	17 06       	cpc	r1, r23
    189a:	b4 f5       	brge	.+108    	; 0x1908 <_ZN3PID13SetSampleTimeEi+0x86>
    189c:	6b 01       	movw	r12, r22
    189e:	ec 01       	movw	r28, r24
   {
      double ratio  = (double)NewSampleTime
                      / (double)SampleTime;
    18a0:	0d 2c       	mov	r0, r13
    18a2:	00 0c       	add	r0, r0
    18a4:	ee 08       	sbc	r14, r14
    18a6:	ff 08       	sbc	r15, r15
    18a8:	c7 01       	movw	r24, r14
    18aa:	b6 01       	movw	r22, r12
    18ac:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <__floatsisf>
    18b0:	4b 01       	movw	r8, r22
    18b2:	5c 01       	movw	r10, r24
    18b4:	6e a5       	ldd	r22, Y+46	; 0x2e
    18b6:	7f a5       	ldd	r23, Y+47	; 0x2f
    18b8:	88 a9       	ldd	r24, Y+48	; 0x30
    18ba:	99 a9       	ldd	r25, Y+49	; 0x31
    18bc:	0e 94 c9 17 	call	0x2f92	; 0x2f92 <__floatunsisf>
    18c0:	9b 01       	movw	r18, r22
    18c2:	ac 01       	movw	r20, r24
    18c4:	c5 01       	movw	r24, r10
    18c6:	b4 01       	movw	r22, r8
    18c8:	0e 94 21 17 	call	0x2e42	; 0x2e42 <__divsf3>
    18cc:	4b 01       	movw	r8, r22
    18ce:	5c 01       	movw	r10, r24
      ki *= ratio;
    18d0:	9b 01       	movw	r18, r22
    18d2:	ac 01       	movw	r20, r24
    18d4:	68 89       	ldd	r22, Y+16	; 0x10
    18d6:	79 89       	ldd	r23, Y+17	; 0x11
    18d8:	8a 89       	ldd	r24, Y+18	; 0x12
    18da:	9b 89       	ldd	r25, Y+19	; 0x13
    18dc:	0e 94 af 18 	call	0x315e	; 0x315e <__mulsf3>
    18e0:	68 8b       	std	Y+16, r22	; 0x10
    18e2:	79 8b       	std	Y+17, r23	; 0x11
    18e4:	8a 8b       	std	Y+18, r24	; 0x12
    18e6:	9b 8b       	std	Y+19, r25	; 0x13
      kd /= ratio;
    18e8:	a5 01       	movw	r20, r10
    18ea:	94 01       	movw	r18, r8
    18ec:	6c 89       	ldd	r22, Y+20	; 0x14
    18ee:	7d 89       	ldd	r23, Y+21	; 0x15
    18f0:	8e 89       	ldd	r24, Y+22	; 0x16
    18f2:	9f 89       	ldd	r25, Y+23	; 0x17
    18f4:	0e 94 21 17 	call	0x2e42	; 0x2e42 <__divsf3>
    18f8:	6c 8b       	std	Y+20, r22	; 0x14
    18fa:	7d 8b       	std	Y+21, r23	; 0x15
    18fc:	8e 8b       	std	Y+22, r24	; 0x16
    18fe:	9f 8b       	std	Y+23, r25	; 0x17
      SampleTime = (unsigned long)NewSampleTime;
    1900:	ce a6       	std	Y+46, r12	; 0x2e
    1902:	df a6       	std	Y+47, r13	; 0x2f
    1904:	e8 aa       	std	Y+48, r14	; 0x30
    1906:	f9 aa       	std	Y+49, r15	; 0x31
   }
}
    1908:	df 91       	pop	r29
    190a:	cf 91       	pop	r28
    190c:	ff 90       	pop	r15
    190e:	ef 90       	pop	r14
    1910:	df 90       	pop	r13
    1912:	cf 90       	pop	r12
    1914:	bf 90       	pop	r11
    1916:	af 90       	pop	r10
    1918:	9f 90       	pop	r9
    191a:	8f 90       	pop	r8
    191c:	08 95       	ret

0000191e <_ZN3PID15SetOutputLimitsEdd>:
 *  be doing a time window and will need 0-8000 or something.  or maybe they'll
 *  want to clamp it from 0-125.  who knows.  at any rate, that can all be done
 *  here.
 **************************************************************************/
void PID::SetOutputLimits(double Min, double Max)
{
    191e:	2f 92       	push	r2
    1920:	3f 92       	push	r3
    1922:	4f 92       	push	r4
    1924:	5f 92       	push	r5
    1926:	6f 92       	push	r6
    1928:	7f 92       	push	r7
    192a:	8f 92       	push	r8
    192c:	9f 92       	push	r9
    192e:	af 92       	push	r10
    1930:	bf 92       	push	r11
    1932:	cf 92       	push	r12
    1934:	df 92       	push	r13
    1936:	ef 92       	push	r14
    1938:	ff 92       	push	r15
    193a:	0f 93       	push	r16
    193c:	1f 93       	push	r17
    193e:	cf 93       	push	r28
    1940:	df 93       	push	r29
    1942:	ec 01       	movw	r28, r24
    1944:	6a 01       	movw	r12, r20
    1946:	7b 01       	movw	r14, r22
    1948:	48 01       	movw	r8, r16
    194a:	59 01       	movw	r10, r18
   if(Min >= Max) return;
    194c:	a9 01       	movw	r20, r18
    194e:	98 01       	movw	r18, r16
    1950:	c7 01       	movw	r24, r14
    1952:	b6 01       	movw	r22, r12
    1954:	0e 94 a2 18 	call	0x3144	; 0x3144 <__gesf2>
    1958:	87 ff       	sbrs	r24, 7
    195a:	4e c0       	rjmp	.+156    	; 0x19f8 <_ZN3PID15SetOutputLimitsEdd+0xda>
   outMin = Min;
    195c:	ca aa       	std	Y+50, r12	; 0x32
    195e:	db aa       	std	Y+51, r13	; 0x33
    1960:	ec aa       	std	Y+52, r14	; 0x34
    1962:	fd aa       	std	Y+53, r15	; 0x35
   outMax = Max;
    1964:	8e aa       	std	Y+54, r8	; 0x36
    1966:	9f aa       	std	Y+55, r9	; 0x37
    1968:	a8 ae       	std	Y+56, r10	; 0x38
    196a:	b9 ae       	std	Y+57, r11	; 0x39

   if(inAuto)
    196c:	8a ad       	ldd	r24, Y+58	; 0x3a
    196e:	88 23       	and	r24, r24
    1970:	09 f4       	brne	.+2      	; 0x1974 <_ZN3PID15SetOutputLimitsEdd+0x56>
    1972:	42 c0       	rjmp	.+132    	; 0x19f8 <_ZN3PID15SetOutputLimitsEdd+0xda>
   {
	   if(*myOutput > outMax) *myOutput = outMax;
    1974:	2e 8c       	ldd	r2, Y+30	; 0x1e
    1976:	3f 8c       	ldd	r3, Y+31	; 0x1f
    1978:	f1 01       	movw	r30, r2
    197a:	40 80       	ld	r4, Z
    197c:	51 80       	ldd	r5, Z+1	; 0x01
    197e:	62 80       	ldd	r6, Z+2	; 0x02
    1980:	73 80       	ldd	r7, Z+3	; 0x03
    1982:	a3 01       	movw	r20, r6
    1984:	92 01       	movw	r18, r4
    1986:	c5 01       	movw	r24, r10
    1988:	b4 01       	movw	r22, r8
    198a:	0e 94 1c 17 	call	0x2e38	; 0x2e38 <__cmpsf2>
    198e:	87 ff       	sbrs	r24, 7
    1990:	06 c0       	rjmp	.+12     	; 0x199e <_ZN3PID15SetOutputLimitsEdd+0x80>
    1992:	f1 01       	movw	r30, r2
    1994:	80 82       	st	Z, r8
    1996:	91 82       	std	Z+1, r9	; 0x01
    1998:	a2 82       	std	Z+2, r10	; 0x02
    199a:	b3 82       	std	Z+3, r11	; 0x03
    199c:	0d c0       	rjmp	.+26     	; 0x19b8 <_ZN3PID15SetOutputLimitsEdd+0x9a>
	   else if(*myOutput < outMin) *myOutput = outMin;
    199e:	a3 01       	movw	r20, r6
    19a0:	92 01       	movw	r18, r4
    19a2:	c7 01       	movw	r24, r14
    19a4:	b6 01       	movw	r22, r12
    19a6:	0e 94 a2 18 	call	0x3144	; 0x3144 <__gesf2>
    19aa:	18 16       	cp	r1, r24
    19ac:	2c f4       	brge	.+10     	; 0x19b8 <_ZN3PID15SetOutputLimitsEdd+0x9a>
    19ae:	f1 01       	movw	r30, r2
    19b0:	c0 82       	st	Z, r12
    19b2:	d1 82       	std	Z+1, r13	; 0x01
    19b4:	e2 82       	std	Z+2, r14	; 0x02
    19b6:	f3 82       	std	Z+3, r15	; 0x03

	   if(outputSum > outMax) outputSum= outMax;
    19b8:	8e a0       	ldd	r8, Y+38	; 0x26
    19ba:	9f a0       	ldd	r9, Y+39	; 0x27
    19bc:	a8 a4       	ldd	r10, Y+40	; 0x28
    19be:	b9 a4       	ldd	r11, Y+41	; 0x29
    19c0:	ce a8       	ldd	r12, Y+54	; 0x36
    19c2:	df a8       	ldd	r13, Y+55	; 0x37
    19c4:	e8 ac       	ldd	r14, Y+56	; 0x38
    19c6:	f9 ac       	ldd	r15, Y+57	; 0x39
    19c8:	a7 01       	movw	r20, r14
    19ca:	96 01       	movw	r18, r12
    19cc:	c5 01       	movw	r24, r10
    19ce:	b4 01       	movw	r22, r8
    19d0:	0e 94 a2 18 	call	0x3144	; 0x3144 <__gesf2>
    19d4:	18 16       	cp	r1, r24
    19d6:	64 f0       	brlt	.+24     	; 0x19f0 <_ZN3PID15SetOutputLimitsEdd+0xd2>
	   else if(outputSum < outMin) outputSum= outMin;
    19d8:	ca a8       	ldd	r12, Y+50	; 0x32
    19da:	db a8       	ldd	r13, Y+51	; 0x33
    19dc:	ec a8       	ldd	r14, Y+52	; 0x34
    19de:	fd a8       	ldd	r15, Y+53	; 0x35
    19e0:	a7 01       	movw	r20, r14
    19e2:	96 01       	movw	r18, r12
    19e4:	c5 01       	movw	r24, r10
    19e6:	b4 01       	movw	r22, r8
    19e8:	0e 94 1c 17 	call	0x2e38	; 0x2e38 <__cmpsf2>
    19ec:	87 ff       	sbrs	r24, 7
    19ee:	04 c0       	rjmp	.+8      	; 0x19f8 <_ZN3PID15SetOutputLimitsEdd+0xda>
    19f0:	ce a2       	std	Y+38, r12	; 0x26
    19f2:	df a2       	std	Y+39, r13	; 0x27
    19f4:	e8 a6       	std	Y+40, r14	; 0x28
    19f6:	f9 a6       	std	Y+41, r15	; 0x29
   }
}
    19f8:	df 91       	pop	r29
    19fa:	cf 91       	pop	r28
    19fc:	1f 91       	pop	r17
    19fe:	0f 91       	pop	r16
    1a00:	ff 90       	pop	r15
    1a02:	ef 90       	pop	r14
    1a04:	df 90       	pop	r13
    1a06:	cf 90       	pop	r12
    1a08:	bf 90       	pop	r11
    1a0a:	af 90       	pop	r10
    1a0c:	9f 90       	pop	r9
    1a0e:	8f 90       	pop	r8
    1a10:	7f 90       	pop	r7
    1a12:	6f 90       	pop	r6
    1a14:	5f 90       	pop	r5
    1a16:	4f 90       	pop	r4
    1a18:	3f 90       	pop	r3
    1a1a:	2f 90       	pop	r2
    1a1c:	08 95       	ret

00001a1e <_ZN3PID10InitializeEv>:
/* Initialize()****************************************************************
 *	does all the things that need to happen to ensure a bumpless transfer
 *  from manual to automatic mode.
 ******************************************************************************/
void PID::Initialize()
{
    1a1e:	8f 92       	push	r8
    1a20:	9f 92       	push	r9
    1a22:	af 92       	push	r10
    1a24:	bf 92       	push	r11
    1a26:	cf 92       	push	r12
    1a28:	df 92       	push	r13
    1a2a:	ef 92       	push	r14
    1a2c:	ff 92       	push	r15
    1a2e:	cf 93       	push	r28
    1a30:	df 93       	push	r29
    1a32:	ec 01       	movw	r28, r24
   outputSum = *myOutput;
    1a34:	ee 8d       	ldd	r30, Y+30	; 0x1e
    1a36:	ff 8d       	ldd	r31, Y+31	; 0x1f
    1a38:	c0 80       	ld	r12, Z
    1a3a:	d1 80       	ldd	r13, Z+1	; 0x01
    1a3c:	e2 80       	ldd	r14, Z+2	; 0x02
    1a3e:	f3 80       	ldd	r15, Z+3	; 0x03
    1a40:	ce a2       	std	Y+38, r12	; 0x26
    1a42:	df a2       	std	Y+39, r13	; 0x27
    1a44:	e8 a6       	std	Y+40, r14	; 0x28
    1a46:	f9 a6       	std	Y+41, r15	; 0x29
   lastInput = *myInput;
    1a48:	ec 8d       	ldd	r30, Y+28	; 0x1c
    1a4a:	fd 8d       	ldd	r31, Y+29	; 0x1d
    1a4c:	80 81       	ld	r24, Z
    1a4e:	91 81       	ldd	r25, Z+1	; 0x01
    1a50:	a2 81       	ldd	r26, Z+2	; 0x02
    1a52:	b3 81       	ldd	r27, Z+3	; 0x03
    1a54:	8a a7       	std	Y+42, r24	; 0x2a
    1a56:	9b a7       	std	Y+43, r25	; 0x2b
    1a58:	ac a7       	std	Y+44, r26	; 0x2c
    1a5a:	bd a7       	std	Y+45, r27	; 0x2d
   if(outputSum > outMax) outputSum = outMax;
    1a5c:	8e a8       	ldd	r8, Y+54	; 0x36
    1a5e:	9f a8       	ldd	r9, Y+55	; 0x37
    1a60:	a8 ac       	ldd	r10, Y+56	; 0x38
    1a62:	b9 ac       	ldd	r11, Y+57	; 0x39
    1a64:	a5 01       	movw	r20, r10
    1a66:	94 01       	movw	r18, r8
    1a68:	c7 01       	movw	r24, r14
    1a6a:	b6 01       	movw	r22, r12
    1a6c:	0e 94 a2 18 	call	0x3144	; 0x3144 <__gesf2>
    1a70:	18 16       	cp	r1, r24
    1a72:	64 f0       	brlt	.+24     	; 0x1a8c <_ZN3PID10InitializeEv+0x6e>
   else if(outputSum < outMin) outputSum = outMin;
    1a74:	8a a8       	ldd	r8, Y+50	; 0x32
    1a76:	9b a8       	ldd	r9, Y+51	; 0x33
    1a78:	ac a8       	ldd	r10, Y+52	; 0x34
    1a7a:	bd a8       	ldd	r11, Y+53	; 0x35
    1a7c:	a5 01       	movw	r20, r10
    1a7e:	94 01       	movw	r18, r8
    1a80:	c7 01       	movw	r24, r14
    1a82:	b6 01       	movw	r22, r12
    1a84:	0e 94 1c 17 	call	0x2e38	; 0x2e38 <__cmpsf2>
    1a88:	87 ff       	sbrs	r24, 7
    1a8a:	04 c0       	rjmp	.+8      	; 0x1a94 <_ZN3PID10InitializeEv+0x76>
    1a8c:	8e a2       	std	Y+38, r8	; 0x26
    1a8e:	9f a2       	std	Y+39, r9	; 0x27
    1a90:	a8 a6       	std	Y+40, r10	; 0x28
    1a92:	b9 a6       	std	Y+41, r11	; 0x29
}
    1a94:	df 91       	pop	r29
    1a96:	cf 91       	pop	r28
    1a98:	ff 90       	pop	r15
    1a9a:	ef 90       	pop	r14
    1a9c:	df 90       	pop	r13
    1a9e:	cf 90       	pop	r12
    1aa0:	bf 90       	pop	r11
    1aa2:	af 90       	pop	r10
    1aa4:	9f 90       	pop	r9
    1aa6:	8f 90       	pop	r8
    1aa8:	08 95       	ret

00001aaa <_ZN3PID7SetModeEi>:
 * Allows the controller Mode to be set to manual (0) or Automatic (non-zero)
 * when the transition from manual to auto occurs, the controller is
 * automatically initialized
 ******************************************************************************/
void PID::SetMode(int Mode)
{
    1aaa:	1f 93       	push	r17
    1aac:	cf 93       	push	r28
    1aae:	df 93       	push	r29
    1ab0:	ec 01       	movw	r28, r24
    bool newAuto = (Mode == AUTOMATIC);
    1ab2:	11 e0       	ldi	r17, 0x01	; 1
    1ab4:	61 30       	cpi	r22, 0x01	; 1
    1ab6:	71 05       	cpc	r23, r1
    1ab8:	09 f0       	breq	.+2      	; 0x1abc <_ZN3PID7SetModeEi+0x12>
    1aba:	10 e0       	ldi	r17, 0x00	; 0
    if(newAuto && !inAuto)
    1abc:	61 30       	cpi	r22, 0x01	; 1
    1abe:	71 05       	cpc	r23, r1
    1ac0:	31 f4       	brne	.+12     	; 0x1ace <_ZN3PID7SetModeEi+0x24>
    1ac2:	8a ad       	ldd	r24, Y+58	; 0x3a
    1ac4:	81 11       	cpse	r24, r1
    1ac6:	03 c0       	rjmp	.+6      	; 0x1ace <_ZN3PID7SetModeEi+0x24>
    {  /*we just went from manual to auto*/
        PID::Initialize();
    1ac8:	ce 01       	movw	r24, r28
    1aca:	0e 94 0f 0d 	call	0x1a1e	; 0x1a1e <_ZN3PID10InitializeEv>
    }
    inAuto = newAuto;
    1ace:	1a af       	std	Y+58, r17	; 0x3a
}
    1ad0:	df 91       	pop	r29
    1ad2:	cf 91       	pop	r28
    1ad4:	1f 91       	pop	r17
    1ad6:	08 95       	ret

00001ad8 <_ZN3PID22SetControllerDirectionEi>:
 * to +Input) or a REVERSE acting process(+Output leads to -Input.)  we need to
 * know which one, because otherwise we may increase the output when we should
 * be decreasing.  This is called from the constructor.
 ******************************************************************************/
void PID::SetControllerDirection(int Direction)
{
    1ad8:	0f 93       	push	r16
    1ada:	1f 93       	push	r17
    1adc:	cf 93       	push	r28
    1ade:	df 93       	push	r29
    1ae0:	ec 01       	movw	r28, r24
    1ae2:	8b 01       	movw	r16, r22
   if(inAuto && Direction !=controllerDirection)
    1ae4:	8a ad       	ldd	r24, Y+58	; 0x3a
    1ae6:	88 23       	and	r24, r24
    1ae8:	61 f1       	breq	.+88     	; 0x1b42 <_ZN3PID22SetControllerDirectionEi+0x6a>
    1aea:	88 8d       	ldd	r24, Y+24	; 0x18
    1aec:	99 8d       	ldd	r25, Y+25	; 0x19
    1aee:	86 17       	cp	r24, r22
    1af0:	97 07       	cpc	r25, r23
    1af2:	39 f1       	breq	.+78     	; 0x1b42 <_ZN3PID22SetControllerDirectionEi+0x6a>
   {
	    kp = (0 - kp);
    1af4:	2c 85       	ldd	r18, Y+12	; 0x0c
    1af6:	3d 85       	ldd	r19, Y+13	; 0x0d
    1af8:	4e 85       	ldd	r20, Y+14	; 0x0e
    1afa:	5f 85       	ldd	r21, Y+15	; 0x0f
    1afc:	60 e0       	ldi	r22, 0x00	; 0
    1afe:	70 e0       	ldi	r23, 0x00	; 0
    1b00:	cb 01       	movw	r24, r22
    1b02:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <__subsf3>
    1b06:	6c 87       	std	Y+12, r22	; 0x0c
    1b08:	7d 87       	std	Y+13, r23	; 0x0d
    1b0a:	8e 87       	std	Y+14, r24	; 0x0e
    1b0c:	9f 87       	std	Y+15, r25	; 0x0f
      ki = (0 - ki);
    1b0e:	28 89       	ldd	r18, Y+16	; 0x10
    1b10:	39 89       	ldd	r19, Y+17	; 0x11
    1b12:	4a 89       	ldd	r20, Y+18	; 0x12
    1b14:	5b 89       	ldd	r21, Y+19	; 0x13
    1b16:	60 e0       	ldi	r22, 0x00	; 0
    1b18:	70 e0       	ldi	r23, 0x00	; 0
    1b1a:	cb 01       	movw	r24, r22
    1b1c:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <__subsf3>
    1b20:	68 8b       	std	Y+16, r22	; 0x10
    1b22:	79 8b       	std	Y+17, r23	; 0x11
    1b24:	8a 8b       	std	Y+18, r24	; 0x12
    1b26:	9b 8b       	std	Y+19, r25	; 0x13
      kd = (0 - kd);
    1b28:	2c 89       	ldd	r18, Y+20	; 0x14
    1b2a:	3d 89       	ldd	r19, Y+21	; 0x15
    1b2c:	4e 89       	ldd	r20, Y+22	; 0x16
    1b2e:	5f 89       	ldd	r21, Y+23	; 0x17
    1b30:	60 e0       	ldi	r22, 0x00	; 0
    1b32:	70 e0       	ldi	r23, 0x00	; 0
    1b34:	cb 01       	movw	r24, r22
    1b36:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <__subsf3>
    1b3a:	6c 8b       	std	Y+20, r22	; 0x14
    1b3c:	7d 8b       	std	Y+21, r23	; 0x15
    1b3e:	8e 8b       	std	Y+22, r24	; 0x16
    1b40:	9f 8b       	std	Y+23, r25	; 0x17
   }
   controllerDirection = Direction;
    1b42:	19 8f       	std	Y+25, r17	; 0x19
    1b44:	08 8f       	std	Y+24, r16	; 0x18
}
    1b46:	df 91       	pop	r29
    1b48:	cf 91       	pop	r28
    1b4a:	1f 91       	pop	r17
    1b4c:	0f 91       	pop	r16
    1b4e:	08 95       	ret

00001b50 <_ZN3PIDC1EPdS0_S0_dddii>:

/*Constructor (...)*********************************************************
 *    The parameters specified here are those for for which we can't set up
 *    reliable defaults, so we need to have the user set them.
 ***************************************************************************/
PID::PID(double* Input, double* Output, double* Setpoint,
    1b50:	4f 92       	push	r4
    1b52:	5f 92       	push	r5
    1b54:	6f 92       	push	r6
    1b56:	7f 92       	push	r7
    1b58:	8f 92       	push	r8
    1b5a:	9f 92       	push	r9
    1b5c:	af 92       	push	r10
    1b5e:	bf 92       	push	r11
    1b60:	cf 92       	push	r12
    1b62:	df 92       	push	r13
    1b64:	ef 92       	push	r14
    1b66:	ff 92       	push	r15
    1b68:	0f 93       	push	r16
    1b6a:	1f 93       	push	r17
    1b6c:	cf 93       	push	r28
    1b6e:	df 93       	push	r29
    1b70:	00 d0       	rcall	.+0      	; 0x1b72 <_ZN3PIDC1EPdS0_S0_dddii+0x22>
    1b72:	00 d0       	rcall	.+0      	; 0x1b74 <_ZN3PIDC1EPdS0_S0_dddii+0x24>
    1b74:	cd b7       	in	r28, 0x3d	; 61
    1b76:	de b7       	in	r29, 0x3e	; 62
    1b78:	4c 01       	movw	r8, r24
    1b7a:	27 01       	movw	r4, r14
    1b7c:	38 01       	movw	r6, r16
    1b7e:	a9 82       	std	Y+1, r10	; 0x01
    1b80:	ba 82       	std	Y+2, r11	; 0x02
    1b82:	cb 82       	std	Y+3, r12	; 0x03
    1b84:	dc 82       	std	Y+4, r13	; 0x04
        double Kp, double Ki, double Kd, int POn, int ControllerDirection)
{
    myOutput = Output;
    1b86:	fc 01       	movw	r30, r24
    1b88:	57 8f       	std	Z+31, r21	; 0x1f
    1b8a:	46 8f       	std	Z+30, r20	; 0x1e
    myInput = Input;
    1b8c:	75 8f       	std	Z+29, r23	; 0x1d
    1b8e:	64 8f       	std	Z+28, r22	; 0x1c
    mySetpoint = Setpoint;
    1b90:	31 a3       	std	Z+33, r19	; 0x21
    1b92:	20 a3       	std	Z+32, r18	; 0x20
    inAuto = false;
    1b94:	12 ae       	std	Z+58, r1	; 0x3a
 *  here.
 **************************************************************************/
void PID::SetOutputLimits(double Min, double Max)
{
   if(Min >= Max) return;
   outMin = Min;
    1b96:	12 aa       	std	Z+50, r1	; 0x32
    1b98:	13 aa       	std	Z+51, r1	; 0x33
    1b9a:	14 aa       	std	Z+52, r1	; 0x34
    1b9c:	15 aa       	std	Z+53, r1	; 0x35
   outMax = Max;
    1b9e:	80 e0       	ldi	r24, 0x00	; 0
    1ba0:	90 e0       	ldi	r25, 0x00	; 0
    1ba2:	af e7       	ldi	r26, 0x7F	; 127
    1ba4:	b3 e4       	ldi	r27, 0x43	; 67
    1ba6:	86 ab       	std	Z+54, r24	; 0x36
    1ba8:	97 ab       	std	Z+55, r25	; 0x37
    1baa:	a0 af       	std	Z+56, r26	; 0x38
    1bac:	b1 af       	std	Z+57, r27	; 0x39
    inAuto = false;

    PID::SetOutputLimits(0, 255);				//default output limit corresponds to
												//the arduino pwm limits

    SampleTime = 100;							//default Controller Sample Time is 0.1 seconds
    1bae:	84 e6       	ldi	r24, 0x64	; 100
    1bb0:	90 e0       	ldi	r25, 0x00	; 0
    1bb2:	a0 e0       	ldi	r26, 0x00	; 0
    1bb4:	b0 e0       	ldi	r27, 0x00	; 0
    1bb6:	86 a7       	std	Z+46, r24	; 0x2e
    1bb8:	97 a7       	std	Z+47, r25	; 0x2f
    1bba:	a0 ab       	std	Z+48, r26	; 0x30
    1bbc:	b1 ab       	std	Z+49, r27	; 0x31

    PID::SetControllerDirection(ControllerDirection);
    1bbe:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1bc0:	7e 8d       	ldd	r23, Y+30	; 0x1e
    1bc2:	c4 01       	movw	r24, r8
    1bc4:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <_ZN3PID22SetControllerDirectionEi>
    PID::SetTunings(Kp, Ki, Kd, POn);
    1bc8:	ab 8c       	ldd	r10, Y+27	; 0x1b
    1bca:	bc 8c       	ldd	r11, Y+28	; 0x1c
    1bcc:	cf 88       	ldd	r12, Y+23	; 0x17
    1bce:	d8 8c       	ldd	r13, Y+24	; 0x18
    1bd0:	e9 8c       	ldd	r14, Y+25	; 0x19
    1bd2:	fa 8c       	ldd	r15, Y+26	; 0x1a
    1bd4:	09 81       	ldd	r16, Y+1	; 0x01
    1bd6:	1a 81       	ldd	r17, Y+2	; 0x02
    1bd8:	2b 81       	ldd	r18, Y+3	; 0x03
    1bda:	3c 81       	ldd	r19, Y+4	; 0x04
    1bdc:	b3 01       	movw	r22, r6
    1bde:	a2 01       	movw	r20, r4
    1be0:	c4 01       	movw	r24, r8
    1be2:	0e 94 55 0b 	call	0x16aa	; 0x16aa <_ZN3PID10SetTuningsEdddi>

    lastTime = millis()-SampleTime;
    1be6:	0e 94 27 1d 	call	0x3a4e	; 0x3a4e <millis>
    1bea:	f4 01       	movw	r30, r8
    1bec:	46 a4       	ldd	r4, Z+46	; 0x2e
    1bee:	57 a4       	ldd	r5, Z+47	; 0x2f
    1bf0:	60 a8       	ldd	r6, Z+48	; 0x30
    1bf2:	71 a8       	ldd	r7, Z+49	; 0x31
    1bf4:	dc 01       	movw	r26, r24
    1bf6:	cb 01       	movw	r24, r22
    1bf8:	84 19       	sub	r24, r4
    1bfa:	95 09       	sbc	r25, r5
    1bfc:	a6 09       	sbc	r26, r6
    1bfe:	b7 09       	sbc	r27, r7
    1c00:	82 a3       	std	Z+34, r24	; 0x22
    1c02:	93 a3       	std	Z+35, r25	; 0x23
    1c04:	a4 a3       	std	Z+36, r26	; 0x24
    1c06:	b5 a3       	std	Z+37, r27	; 0x25
}
    1c08:	0f 90       	pop	r0
    1c0a:	0f 90       	pop	r0
    1c0c:	0f 90       	pop	r0
    1c0e:	0f 90       	pop	r0
    1c10:	df 91       	pop	r29
    1c12:	cf 91       	pop	r28
    1c14:	1f 91       	pop	r17
    1c16:	0f 91       	pop	r16
    1c18:	ff 90       	pop	r15
    1c1a:	ef 90       	pop	r14
    1c1c:	df 90       	pop	r13
    1c1e:	cf 90       	pop	r12
    1c20:	bf 90       	pop	r11
    1c22:	af 90       	pop	r10
    1c24:	9f 90       	pop	r9
    1c26:	8f 90       	pop	r8
    1c28:	7f 90       	pop	r7
    1c2a:	6f 90       	pop	r6
    1c2c:	5f 90       	pop	r5
    1c2e:	4f 90       	pop	r4
    1c30:	08 95       	ret

00001c32 <_ZN6I2Cdev10writeBytesEhhhPh>:
        b &= mask;
        b >>= (bitStart - length + 1);
        *data = b;
    }
    return count;
}
    1c32:	ff 92       	push	r15
    1c34:	0f 93       	push	r16
    1c36:	1f 93       	push	r17
    1c38:	cf 93       	push	r28
    1c3a:	df 93       	push	r29
    1c3c:	c6 2f       	mov	r28, r22
    1c3e:	14 2f       	mov	r17, r20
    1c40:	f2 2e       	mov	r15, r18
    1c42:	03 2f       	mov	r16, r19
    1c44:	68 2f       	mov	r22, r24
    1c46:	8d eb       	ldi	r24, 0xBD	; 189
    1c48:	93 e0       	ldi	r25, 0x03	; 3
    1c4a:	0e 94 b3 13 	call	0x2766	; 0x2766 <_ZN7TwoWire17beginTransmissionEh>
    1c4e:	6c 2f       	mov	r22, r28
    1c50:	8d eb       	ldi	r24, 0xBD	; 189
    1c52:	93 e0       	ldi	r25, 0x03	; 3
    1c54:	0e 94 74 13 	call	0x26e8	; 0x26e8 <_ZN7TwoWire5writeEh>
    1c58:	cf 2d       	mov	r28, r15
    1c5a:	d0 2f       	mov	r29, r16
    1c5c:	ce 01       	movw	r24, r28
    1c5e:	81 0f       	add	r24, r17
    1c60:	91 1d       	adc	r25, r1
    1c62:	8c 01       	movw	r16, r24
    1c64:	c0 17       	cp	r28, r16
    1c66:	d1 07       	cpc	r29, r17
    1c68:	31 f0       	breq	.+12     	; 0x1c76 <_ZN6I2Cdev10writeBytesEhhhPh+0x44>
    1c6a:	69 91       	ld	r22, Y+
    1c6c:	8d eb       	ldi	r24, 0xBD	; 189
    1c6e:	93 e0       	ldi	r25, 0x03	; 3
    1c70:	0e 94 74 13 	call	0x26e8	; 0x26e8 <_ZN7TwoWire5writeEh>
    1c74:	f7 cf       	rjmp	.-18     	; 0x1c64 <_ZN6I2Cdev10writeBytesEhhhPh+0x32>
    1c76:	8d eb       	ldi	r24, 0xBD	; 189
    1c78:	93 e0       	ldi	r25, 0x03	; 3
    1c7a:	0e 94 37 14 	call	0x286e	; 0x286e <_ZN7TwoWire15endTransmissionEv>
    1c7e:	91 e0       	ldi	r25, 0x01	; 1
    1c80:	81 11       	cpse	r24, r1
    1c82:	90 e0       	ldi	r25, 0x00	; 0
    1c84:	89 2f       	mov	r24, r25
    1c86:	df 91       	pop	r29
    1c88:	cf 91       	pop	r28
    1c8a:	1f 91       	pop	r17
    1c8c:	0f 91       	pop	r16
    1c8e:	ff 90       	pop	r15
    1c90:	08 95       	ret

00001c92 <_ZN6I2Cdev9writeByteEhhh>:
    1c92:	cf 93       	push	r28
    1c94:	df 93       	push	r29
    1c96:	1f 92       	push	r1
    1c98:	cd b7       	in	r28, 0x3d	; 61
    1c9a:	de b7       	in	r29, 0x3e	; 62
    1c9c:	49 83       	std	Y+1, r20	; 0x01
    1c9e:	9e 01       	movw	r18, r28
    1ca0:	2f 5f       	subi	r18, 0xFF	; 255
    1ca2:	3f 4f       	sbci	r19, 0xFF	; 255
    1ca4:	41 e0       	ldi	r20, 0x01	; 1
    1ca6:	0e 94 19 0e 	call	0x1c32	; 0x1c32 <_ZN6I2Cdev10writeBytesEhhhPh>
    1caa:	0f 90       	pop	r0
    1cac:	df 91       	pop	r29
    1cae:	cf 91       	pop	r28
    1cb0:	08 95       	ret

00001cb2 <_ZN6I2Cdev10writeWordsEhhhPj>:
    1cb2:	cf 92       	push	r12
    1cb4:	df 92       	push	r13
    1cb6:	ff 92       	push	r15
    1cb8:	0f 93       	push	r16
    1cba:	1f 93       	push	r17
    1cbc:	cf 93       	push	r28
    1cbe:	df 93       	push	r29
    1cc0:	c6 2f       	mov	r28, r22
    1cc2:	04 2f       	mov	r16, r20
    1cc4:	69 01       	movw	r12, r18
    1cc6:	68 2f       	mov	r22, r24
    1cc8:	8d eb       	ldi	r24, 0xBD	; 189
    1cca:	93 e0       	ldi	r25, 0x03	; 3
    1ccc:	0e 94 b3 13 	call	0x2766	; 0x2766 <_ZN7TwoWire17beginTransmissionEh>
    1cd0:	6c 2f       	mov	r22, r28
    1cd2:	8d eb       	ldi	r24, 0xBD	; 189
    1cd4:	93 e0       	ldi	r25, 0x03	; 3
    1cd6:	0e 94 74 13 	call	0x26e8	; 0x26e8 <_ZN7TwoWire5writeEh>
    1cda:	10 e0       	ldi	r17, 0x00	; 0
    1cdc:	00 0f       	add	r16, r16
    1cde:	11 1f       	adc	r17, r17
    1ce0:	f1 2c       	mov	r15, r1
    1ce2:	cf 2d       	mov	r28, r15
    1ce4:	d0 e0       	ldi	r29, 0x00	; 0
    1ce6:	c0 17       	cp	r28, r16
    1ce8:	d1 07       	cpc	r29, r17
    1cea:	8c f4       	brge	.+34     	; 0x1d0e <_ZN6I2Cdev10writeWordsEhhhPj+0x5c>
    1cec:	cc 0f       	add	r28, r28
    1cee:	dd 1f       	adc	r29, r29
    1cf0:	cc 0d       	add	r28, r12
    1cf2:	dd 1d       	adc	r29, r13
    1cf4:	69 81       	ldd	r22, Y+1	; 0x01
    1cf6:	8d eb       	ldi	r24, 0xBD	; 189
    1cf8:	93 e0       	ldi	r25, 0x03	; 3
    1cfa:	0e 94 74 13 	call	0x26e8	; 0x26e8 <_ZN7TwoWire5writeEh>
    1cfe:	68 81       	ld	r22, Y
    1d00:	8d eb       	ldi	r24, 0xBD	; 189
    1d02:	93 e0       	ldi	r25, 0x03	; 3
    1d04:	0e 94 74 13 	call	0x26e8	; 0x26e8 <_ZN7TwoWire5writeEh>
    1d08:	f3 94       	inc	r15
    1d0a:	f3 94       	inc	r15
    1d0c:	ea cf       	rjmp	.-44     	; 0x1ce2 <_ZN6I2Cdev10writeWordsEhhhPj+0x30>
    1d0e:	8d eb       	ldi	r24, 0xBD	; 189
    1d10:	93 e0       	ldi	r25, 0x03	; 3
    1d12:	0e 94 37 14 	call	0x286e	; 0x286e <_ZN7TwoWire15endTransmissionEv>
    1d16:	91 e0       	ldi	r25, 0x01	; 1
    1d18:	81 11       	cpse	r24, r1
    1d1a:	90 e0       	ldi	r25, 0x00	; 0
    1d1c:	89 2f       	mov	r24, r25
    1d1e:	df 91       	pop	r29
    1d20:	cf 91       	pop	r28
    1d22:	1f 91       	pop	r17
    1d24:	0f 91       	pop	r16
    1d26:	ff 90       	pop	r15
    1d28:	df 90       	pop	r13
    1d2a:	cf 90       	pop	r12
    1d2c:	08 95       	ret

00001d2e <_ZN6I2Cdev9writeWordEhhj>:
    1d2e:	cf 93       	push	r28
    1d30:	df 93       	push	r29
    1d32:	00 d0       	rcall	.+0      	; 0x1d34 <_ZN6I2Cdev9writeWordEhhj+0x6>
    1d34:	cd b7       	in	r28, 0x3d	; 61
    1d36:	de b7       	in	r29, 0x3e	; 62
    1d38:	5a 83       	std	Y+2, r21	; 0x02
    1d3a:	49 83       	std	Y+1, r20	; 0x01
    1d3c:	9e 01       	movw	r18, r28
    1d3e:	2f 5f       	subi	r18, 0xFF	; 255
    1d40:	3f 4f       	sbci	r19, 0xFF	; 255
    1d42:	41 e0       	ldi	r20, 0x01	; 1
    1d44:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <_ZN6I2Cdev10writeWordsEhhhPj>
    1d48:	0f 90       	pop	r0
    1d4a:	0f 90       	pop	r0
    1d4c:	df 91       	pop	r29
    1d4e:	cf 91       	pop	r28
    1d50:	08 95       	ret

00001d52 <_ZN6I2Cdev9readBytesEhhhPhj>:
    1d52:	3f 92       	push	r3
    1d54:	4f 92       	push	r4
    1d56:	5f 92       	push	r5
    1d58:	6f 92       	push	r6
    1d5a:	7f 92       	push	r7
    1d5c:	8f 92       	push	r8
    1d5e:	9f 92       	push	r9
    1d60:	af 92       	push	r10
    1d62:	bf 92       	push	r11
    1d64:	cf 92       	push	r12
    1d66:	df 92       	push	r13
    1d68:	ef 92       	push	r14
    1d6a:	ff 92       	push	r15
    1d6c:	0f 93       	push	r16
    1d6e:	1f 93       	push	r17
    1d70:	cf 93       	push	r28
    1d72:	df 93       	push	r29
    1d74:	00 d0       	rcall	.+0      	; 0x1d76 <_ZN6I2Cdev9readBytesEhhhPhj+0x24>
    1d76:	00 d0       	rcall	.+0      	; 0x1d78 <_ZN6I2Cdev9readBytesEhhhPhj+0x26>
    1d78:	00 d0       	rcall	.+0      	; 0x1d7a <_ZN6I2Cdev9readBytesEhhhPhj+0x28>
    1d7a:	cd b7       	in	r28, 0x3d	; 61
    1d7c:	de b7       	in	r29, 0x3e	; 62
    1d7e:	d8 2e       	mov	r13, r24
    1d80:	c6 2e       	mov	r12, r22
    1d82:	4d 83       	std	Y+5, r20	; 0x05
    1d84:	79 01       	movw	r14, r18
    1d86:	0e 94 27 1d 	call	0x3a4e	; 0x3a4e <millis>
    1d8a:	4b 01       	movw	r8, r22
    1d8c:	5c 01       	movw	r10, r24
    1d8e:	31 2c       	mov	r3, r1
    1d90:	1e 82       	std	Y+6, r1	; 0x06
    1d92:	9d 81       	ldd	r25, Y+5	; 0x05
    1d94:	89 2f       	mov	r24, r25
    1d96:	90 e0       	ldi	r25, 0x00	; 0
    1d98:	9c 83       	std	Y+4, r25	; 0x04
    1d9a:	8b 83       	std	Y+3, r24	; 0x03
    1d9c:	28 01       	movw	r4, r16
    1d9e:	61 2c       	mov	r6, r1
    1da0:	71 2c       	mov	r7, r1
    1da2:	ed 81       	ldd	r30, Y+5	; 0x05
    1da4:	3e 16       	cp	r3, r30
    1da6:	c8 f5       	brcc	.+114    	; 0x1e1a <_ZN6I2Cdev9readBytesEhhhPhj+0xc8>
    1da8:	6d 2d       	mov	r22, r13
    1daa:	8d eb       	ldi	r24, 0xBD	; 189
    1dac:	93 e0       	ldi	r25, 0x03	; 3
    1dae:	0e 94 b3 13 	call	0x2766	; 0x2766 <_ZN7TwoWire17beginTransmissionEh>
    1db2:	6c 2d       	mov	r22, r12
    1db4:	8d eb       	ldi	r24, 0xBD	; 189
    1db6:	93 e0       	ldi	r25, 0x03	; 3
    1db8:	0e 94 74 13 	call	0x26e8	; 0x26e8 <_ZN7TwoWire5writeEh>
    1dbc:	8d eb       	ldi	r24, 0xBD	; 189
    1dbe:	93 e0       	ldi	r25, 0x03	; 3
    1dc0:	0e 94 37 14 	call	0x286e	; 0x286e <_ZN7TwoWire15endTransmissionEv>
    1dc4:	6d 2d       	mov	r22, r13
    1dc6:	8d eb       	ldi	r24, 0xBD	; 189
    1dc8:	93 e0       	ldi	r25, 0x03	; 3
    1dca:	0e 94 b3 13 	call	0x2766	; 0x2766 <_ZN7TwoWire17beginTransmissionEh>
    1dce:	4b 81       	ldd	r20, Y+3	; 0x03
    1dd0:	5c 81       	ldd	r21, Y+4	; 0x04
    1dd2:	43 19       	sub	r20, r3
    1dd4:	51 09       	sbc	r21, r1
    1dd6:	41 32       	cpi	r20, 0x21	; 33
    1dd8:	51 05       	cpc	r21, r1
    1dda:	14 f0       	brlt	.+4      	; 0x1de0 <_ZN6I2Cdev9readBytesEhhhPhj+0x8e>
    1ddc:	40 e2       	ldi	r20, 0x20	; 32
    1dde:	50 e0       	ldi	r21, 0x00	; 0
    1de0:	6d 2d       	mov	r22, r13
    1de2:	8d eb       	ldi	r24, 0xBD	; 189
    1de4:	93 e0       	ldi	r25, 0x03	; 3
    1de6:	0e 94 34 14 	call	0x2868	; 0x2868 <_ZN7TwoWire11requestFromEhh>
    1dea:	8d eb       	ldi	r24, 0xBD	; 189
    1dec:	93 e0       	ldi	r25, 0x03	; 3
    1dee:	0e 94 1b 13 	call	0x2636	; 0x2636 <_ZN7TwoWire9availableEv>
    1df2:	89 2b       	or	r24, r25
    1df4:	09 f4       	brne	.+2      	; 0x1df8 <_ZN6I2Cdev9readBytesEhhhPhj+0xa6>
    1df6:	43 c0       	rjmp	.+134    	; 0x1e7e <_ZN6I2Cdev9readBytesEhhhPhj+0x12c>
    1df8:	01 15       	cp	r16, r1
    1dfa:	11 05       	cpc	r17, r1
    1dfc:	69 f1       	breq	.+90     	; 0x1e58 <_ZN6I2Cdev9readBytesEhhhPhj+0x106>
    1dfe:	0e 94 27 1d 	call	0x3a4e	; 0x3a4e <millis>
    1e02:	dc 01       	movw	r26, r24
    1e04:	cb 01       	movw	r24, r22
    1e06:	88 19       	sub	r24, r8
    1e08:	99 09       	sbc	r25, r9
    1e0a:	aa 09       	sbc	r26, r10
    1e0c:	bb 09       	sbc	r27, r11
    1e0e:	84 15       	cp	r24, r4
    1e10:	95 05       	cpc	r25, r5
    1e12:	a6 05       	cpc	r26, r6
    1e14:	b7 05       	cpc	r27, r7
    1e16:	00 f1       	brcs	.+64     	; 0x1e58 <_ZN6I2Cdev9readBytesEhhhPhj+0x106>
    1e18:	32 c0       	rjmp	.+100    	; 0x1e7e <_ZN6I2Cdev9readBytesEhhhPhj+0x12c>
    1e1a:	01 15       	cp	r16, r1
    1e1c:	11 05       	cpc	r17, r1
    1e1e:	a9 f1       	breq	.+106    	; 0x1e8a <_ZN6I2Cdev9readBytesEhhhPhj+0x138>
    1e20:	0e 94 27 1d 	call	0x3a4e	; 0x3a4e <millis>
    1e24:	dc 01       	movw	r26, r24
    1e26:	cb 01       	movw	r24, r22
    1e28:	88 19       	sub	r24, r8
    1e2a:	99 09       	sbc	r25, r9
    1e2c:	aa 09       	sbc	r26, r10
    1e2e:	bb 09       	sbc	r27, r11
    1e30:	20 e0       	ldi	r18, 0x00	; 0
    1e32:	30 e0       	ldi	r19, 0x00	; 0
    1e34:	80 17       	cp	r24, r16
    1e36:	91 07       	cpc	r25, r17
    1e38:	a2 07       	cpc	r26, r18
    1e3a:	b3 07       	cpc	r27, r19
    1e3c:	30 f1       	brcs	.+76     	; 0x1e8a <_ZN6I2Cdev9readBytesEhhhPhj+0x138>
    1e3e:	fd 81       	ldd	r31, Y+5	; 0x05
    1e40:	2f 2f       	mov	r18, r31
    1e42:	30 e0       	ldi	r19, 0x00	; 0
    1e44:	4e 81       	ldd	r20, Y+6	; 0x06
    1e46:	84 2f       	mov	r24, r20
    1e48:	44 0f       	add	r20, r20
    1e4a:	99 0b       	sbc	r25, r25
    1e4c:	82 17       	cp	r24, r18
    1e4e:	93 07       	cpc	r25, r19
    1e50:	e4 f4       	brge	.+56     	; 0x1e8a <_ZN6I2Cdev9readBytesEhhhPhj+0x138>
    1e52:	8f ef       	ldi	r24, 0xFF	; 255
    1e54:	8e 83       	std	Y+6, r24	; 0x06
    1e56:	19 c0       	rjmp	.+50     	; 0x1e8a <_ZN6I2Cdev9readBytesEhhhPhj+0x138>
    1e58:	f7 01       	movw	r30, r14
    1e5a:	2e 81       	ldd	r18, Y+6	; 0x06
    1e5c:	e2 0f       	add	r30, r18
    1e5e:	f1 1d       	adc	r31, r1
    1e60:	27 fd       	sbrc	r18, 7
    1e62:	fa 95       	dec	r31
    1e64:	fa 83       	std	Y+2, r31	; 0x02
    1e66:	e9 83       	std	Y+1, r30	; 0x01
    1e68:	8d eb       	ldi	r24, 0xBD	; 189
    1e6a:	93 e0       	ldi	r25, 0x03	; 3
    1e6c:	0e 94 23 13 	call	0x2646	; 0x2646 <_ZN7TwoWire4readEv>
    1e70:	e9 81       	ldd	r30, Y+1	; 0x01
    1e72:	fa 81       	ldd	r31, Y+2	; 0x02
    1e74:	80 83       	st	Z, r24
    1e76:	fe 81       	ldd	r31, Y+6	; 0x06
    1e78:	ff 5f       	subi	r31, 0xFF	; 255
    1e7a:	fe 83       	std	Y+6, r31	; 0x06
    1e7c:	b6 cf       	rjmp	.-148    	; 0x1dea <_ZN6I2Cdev9readBytesEhhhPhj+0x98>
    1e7e:	8d 81       	ldd	r24, Y+5	; 0x05
    1e80:	81 32       	cpi	r24, 0x21	; 33
    1e82:	08 f0       	brcs	.+2      	; 0x1e86 <_ZN6I2Cdev9readBytesEhhhPhj+0x134>
    1e84:	80 e2       	ldi	r24, 0x20	; 32
    1e86:	38 0e       	add	r3, r24
    1e88:	8c cf       	rjmp	.-232    	; 0x1da2 <_ZN6I2Cdev9readBytesEhhhPhj+0x50>
    1e8a:	8e 81       	ldd	r24, Y+6	; 0x06
    1e8c:	26 96       	adiw	r28, 0x06	; 6
    1e8e:	0f b6       	in	r0, 0x3f	; 63
    1e90:	f8 94       	cli
    1e92:	de bf       	out	0x3e, r29	; 62
    1e94:	0f be       	out	0x3f, r0	; 63
    1e96:	cd bf       	out	0x3d, r28	; 61
    1e98:	df 91       	pop	r29
    1e9a:	cf 91       	pop	r28
    1e9c:	1f 91       	pop	r17
    1e9e:	0f 91       	pop	r16
    1ea0:	ff 90       	pop	r15
    1ea2:	ef 90       	pop	r14
    1ea4:	df 90       	pop	r13
    1ea6:	cf 90       	pop	r12
    1ea8:	bf 90       	pop	r11
    1eaa:	af 90       	pop	r10
    1eac:	9f 90       	pop	r9
    1eae:	8f 90       	pop	r8
    1eb0:	7f 90       	pop	r7
    1eb2:	6f 90       	pop	r6
    1eb4:	5f 90       	pop	r5
    1eb6:	4f 90       	pop	r4
    1eb8:	3f 90       	pop	r3
    1eba:	08 95       	ret

00001ebc <_ZN6I2Cdev8readByteEhhPhj>:
    1ebc:	0f 93       	push	r16
    1ebe:	1f 93       	push	r17
    1ec0:	89 01       	movw	r16, r18
    1ec2:	9a 01       	movw	r18, r20
    1ec4:	41 e0       	ldi	r20, 0x01	; 1
    1ec6:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <_ZN6I2Cdev9readBytesEhhhPhj>
    1eca:	1f 91       	pop	r17
    1ecc:	0f 91       	pop	r16
    1ece:	08 95       	ret

00001ed0 <_ZN6I2Cdev8writeBitEhhhh>:
 * @param regAddr Register regAddr to write to
 * @param bitNum Bit position to write (0-7)
 * @param value New bit value to write
 * @return Status of operation (true = success)
 */
bool I2Cdev::writeBit(uint8_t devAddr, uint8_t regAddr, uint8_t bitNum, uint8_t data) {
    1ed0:	ef 92       	push	r14
    1ed2:	ff 92       	push	r15
    1ed4:	0f 93       	push	r16
    1ed6:	1f 93       	push	r17
    1ed8:	cf 93       	push	r28
    1eda:	df 93       	push	r29
    1edc:	1f 92       	push	r1
    1ede:	cd b7       	in	r28, 0x3d	; 61
    1ee0:	de b7       	in	r29, 0x3e	; 62
    1ee2:	18 2f       	mov	r17, r24
    1ee4:	06 2f       	mov	r16, r22
    1ee6:	f4 2e       	mov	r15, r20
    1ee8:	e2 2e       	mov	r14, r18
    uint8_t b;
    readByte(devAddr, regAddr, &b);
    1eea:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <_ZN6I2Cdev11readTimeoutE>
    1eee:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <_ZN6I2Cdev11readTimeoutE+0x1>
    1ef2:	ae 01       	movw	r20, r28
    1ef4:	4f 5f       	subi	r20, 0xFF	; 255
    1ef6:	5f 4f       	sbci	r21, 0xFF	; 255
    1ef8:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <_ZN6I2Cdev8readByteEhhPhj>
    1efc:	89 81       	ldd	r24, Y+1	; 0x01
    b = (data != 0) ? (b | (1 << bitNum)) : (b & ~(1 << bitNum));
    1efe:	41 e0       	ldi	r20, 0x01	; 1
    1f00:	50 e0       	ldi	r21, 0x00	; 0
    1f02:	01 c0       	rjmp	.+2      	; 0x1f06 <_ZN6I2Cdev8writeBitEhhhh+0x36>
    1f04:	44 0f       	add	r20, r20
    1f06:	fa 94       	dec	r15
    1f08:	ea f7       	brpl	.-6      	; 0x1f04 <_ZN6I2Cdev8writeBitEhhhh+0x34>
    1f0a:	ee 20       	and	r14, r14
    1f0c:	11 f0       	breq	.+4      	; 0x1f12 <_ZN6I2Cdev8writeBitEhhhh+0x42>
    1f0e:	48 2b       	or	r20, r24
    1f10:	02 c0       	rjmp	.+4      	; 0x1f16 <_ZN6I2Cdev8writeBitEhhhh+0x46>
    1f12:	40 95       	com	r20
    1f14:	48 23       	and	r20, r24
    1f16:	49 83       	std	Y+1, r20	; 0x01
    return writeByte(devAddr, regAddr, b);
    1f18:	60 2f       	mov	r22, r16
    1f1a:	81 2f       	mov	r24, r17
    1f1c:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <_ZN6I2Cdev9writeByteEhhh>
}
    1f20:	0f 90       	pop	r0
    1f22:	df 91       	pop	r29
    1f24:	cf 91       	pop	r28
    1f26:	1f 91       	pop	r17
    1f28:	0f 91       	pop	r16
    1f2a:	ff 90       	pop	r15
    1f2c:	ef 90       	pop	r14
    1f2e:	08 95       	ret

00001f30 <_ZN6I2Cdev9writeBitsEhhhhh>:
 * @param bitStart First bit position to write (0-7)
 * @param length Number of bits to write (not more than 8)
 * @param data Right-aligned value to write
 * @return Status of operation (true = success)
 */
bool I2Cdev::writeBits(uint8_t devAddr, uint8_t regAddr, uint8_t bitStart, uint8_t length, uint8_t data) {
    1f30:	df 92       	push	r13
    1f32:	ef 92       	push	r14
    1f34:	ff 92       	push	r15
    1f36:	0f 93       	push	r16
    1f38:	1f 93       	push	r17
    1f3a:	cf 93       	push	r28
    1f3c:	df 93       	push	r29
    1f3e:	1f 92       	push	r1
    1f40:	cd b7       	in	r28, 0x3d	; 61
    1f42:	de b7       	in	r29, 0x3e	; 62
    1f44:	18 2f       	mov	r17, r24
    1f46:	f6 2e       	mov	r15, r22
    1f48:	e4 2e       	mov	r14, r20
    1f4a:	d2 2e       	mov	r13, r18
    // 00011100 mask byte
    // 10101111 original value (sample)
    // 10100011 original & ~mask
    // 10101011 masked | value
    uint8_t b;
    if (readByte(devAddr, regAddr, &b) != 0) {
    1f4c:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <_ZN6I2Cdev11readTimeoutE>
    1f50:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <_ZN6I2Cdev11readTimeoutE+0x1>
    1f54:	ae 01       	movw	r20, r28
    1f56:	4f 5f       	subi	r20, 0xFF	; 255
    1f58:	5f 4f       	sbci	r21, 0xFF	; 255
    1f5a:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <_ZN6I2Cdev8readByteEhhPhj>
    1f5e:	88 23       	and	r24, r24
    1f60:	39 f1       	breq	.+78     	; 0x1fb0 <_ZN6I2Cdev9writeBitsEhhhhh+0x80>
        uint8_t mask = ((1 << length) - 1) << (bitStart - length + 1);
    1f62:	2e 2d       	mov	r18, r14
    1f64:	30 e0       	ldi	r19, 0x00	; 0
    1f66:	2d 19       	sub	r18, r13
    1f68:	31 09       	sbc	r19, r1
    1f6a:	2f 5f       	subi	r18, 0xFF	; 255
    1f6c:	3f 4f       	sbci	r19, 0xFF	; 255
    1f6e:	81 e0       	ldi	r24, 0x01	; 1
    1f70:	90 e0       	ldi	r25, 0x00	; 0
    1f72:	02 c0       	rjmp	.+4      	; 0x1f78 <_ZN6I2Cdev9writeBitsEhhhhh+0x48>
    1f74:	88 0f       	add	r24, r24
    1f76:	99 1f       	adc	r25, r25
    1f78:	da 94       	dec	r13
    1f7a:	e2 f7       	brpl	.-8      	; 0x1f74 <_ZN6I2Cdev9writeBitsEhhhhh+0x44>
    1f7c:	01 97       	sbiw	r24, 0x01	; 1
    1f7e:	02 2e       	mov	r0, r18
    1f80:	01 c0       	rjmp	.+2      	; 0x1f84 <_ZN6I2Cdev9writeBitsEhhhhh+0x54>
    1f82:	88 0f       	add	r24, r24
    1f84:	0a 94       	dec	r0
    1f86:	ea f7       	brpl	.-6      	; 0x1f82 <_ZN6I2Cdev9writeBitsEhhhhh+0x52>
        data <<= (bitStart - length + 1); // shift data into correct position
    1f88:	40 2f       	mov	r20, r16
    1f8a:	50 e0       	ldi	r21, 0x00	; 0
    1f8c:	ba 01       	movw	r22, r20
    1f8e:	02 c0       	rjmp	.+4      	; 0x1f94 <_ZN6I2Cdev9writeBitsEhhhhh+0x64>
    1f90:	66 0f       	add	r22, r22
    1f92:	77 1f       	adc	r23, r23
    1f94:	2a 95       	dec	r18
    1f96:	e2 f7       	brpl	.-8      	; 0x1f90 <_ZN6I2Cdev9writeBitsEhhhhh+0x60>
        data &= mask; // zero all non-important bits in data
        b &= ~(mask); // zero all important bits in existing byte
        b |= data; // combine data with existing byte
    1f98:	48 2f       	mov	r20, r24
    1f9a:	40 95       	com	r20
    1f9c:	99 81       	ldd	r25, Y+1	; 0x01
    1f9e:	49 23       	and	r20, r25
    1fa0:	86 23       	and	r24, r22
    1fa2:	48 2b       	or	r20, r24
    1fa4:	49 83       	std	Y+1, r20	; 0x01
        return writeByte(devAddr, regAddr, b);
    1fa6:	6f 2d       	mov	r22, r15
    1fa8:	81 2f       	mov	r24, r17
    1faa:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <_ZN6I2Cdev9writeByteEhhh>
    1fae:	01 c0       	rjmp	.+2      	; 0x1fb2 <_ZN6I2Cdev9writeBitsEhhhhh+0x82>
    } else {
        return false;
    1fb0:	80 e0       	ldi	r24, 0x00	; 0
    }
}
    1fb2:	0f 90       	pop	r0
    1fb4:	df 91       	pop	r29
    1fb6:	cf 91       	pop	r28
    1fb8:	1f 91       	pop	r17
    1fba:	0f 91       	pop	r16
    1fbc:	ff 90       	pop	r15
    1fbe:	ef 90       	pop	r14
    1fc0:	df 90       	pop	r13
    1fc2:	08 95       	ret

00001fc4 <_ZN7MPU6050C1Ev>:
// ZG_OFFS_USR* register

int16_t MPU6050::getZGyroOffset() {
    I2Cdev::readBytes(devAddr, MPU6050_RA_ZG_OFFS_USRH, 2, buffer);
    return (((int16_t)buffer[0]) << 8) | buffer[1];
}
    1fc4:	28 e6       	ldi	r18, 0x68	; 104
    1fc6:	fc 01       	movw	r30, r24
    1fc8:	20 83       	st	Z, r18
    1fca:	08 95       	ret

00001fcc <_ZN7MPU6050C1Eh>:
    1fcc:	fc 01       	movw	r30, r24
    1fce:	60 83       	st	Z, r22
    1fd0:	08 95       	ret

00001fd2 <_ZN7MPU605021setFullScaleGyroRangeEh>:
    1fd2:	0f 93       	push	r16
    1fd4:	06 2f       	mov	r16, r22
    1fd6:	22 e0       	ldi	r18, 0x02	; 2
    1fd8:	44 e0       	ldi	r20, 0x04	; 4
    1fda:	6b e1       	ldi	r22, 0x1B	; 27
    1fdc:	fc 01       	movw	r30, r24
    1fde:	80 81       	ld	r24, Z
    1fe0:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <_ZN6I2Cdev9writeBitsEhhhhh>
    1fe4:	0f 91       	pop	r16
    1fe6:	08 95       	ret

00001fe8 <_ZN7MPU605022setFullScaleAccelRangeEh>:
    1fe8:	0f 93       	push	r16
    1fea:	06 2f       	mov	r16, r22
    1fec:	22 e0       	ldi	r18, 0x02	; 2
    1fee:	44 e0       	ldi	r20, 0x04	; 4
    1ff0:	6c e1       	ldi	r22, 0x1C	; 28
    1ff2:	fc 01       	movw	r30, r24
    1ff4:	80 81       	ld	r24, Z
    1ff6:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <_ZN6I2Cdev9writeBitsEhhhhh>
    1ffa:	0f 91       	pop	r16
    1ffc:	08 95       	ret

00001ffe <_ZN7MPU605016getAccelerationYEv>:
    1ffe:	0f 93       	push	r16
    2000:	1f 93       	push	r17
    2002:	cf 93       	push	r28
    2004:	df 93       	push	r29
    2006:	ec 01       	movw	r28, r24
    2008:	00 91 08 01 	lds	r16, 0x0108	; 0x800108 <_ZN6I2Cdev11readTimeoutE>
    200c:	10 91 09 01 	lds	r17, 0x0109	; 0x800109 <_ZN6I2Cdev11readTimeoutE+0x1>
    2010:	9c 01       	movw	r18, r24
    2012:	2f 5f       	subi	r18, 0xFF	; 255
    2014:	3f 4f       	sbci	r19, 0xFF	; 255
    2016:	42 e0       	ldi	r20, 0x02	; 2
    2018:	6d e3       	ldi	r22, 0x3D	; 61
    201a:	88 81       	ld	r24, Y
    201c:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <_ZN6I2Cdev9readBytesEhhhPhj>
    2020:	89 81       	ldd	r24, Y+1	; 0x01
    2022:	9a 81       	ldd	r25, Y+2	; 0x02
    2024:	98 27       	eor	r25, r24
    2026:	89 27       	eor	r24, r25
    2028:	98 27       	eor	r25, r24
    202a:	df 91       	pop	r29
    202c:	cf 91       	pop	r28
    202e:	1f 91       	pop	r17
    2030:	0f 91       	pop	r16
    2032:	08 95       	ret

00002034 <_ZN7MPU605016getAccelerationZEv>:
    2034:	0f 93       	push	r16
    2036:	1f 93       	push	r17
    2038:	cf 93       	push	r28
    203a:	df 93       	push	r29
    203c:	ec 01       	movw	r28, r24
    203e:	00 91 08 01 	lds	r16, 0x0108	; 0x800108 <_ZN6I2Cdev11readTimeoutE>
    2042:	10 91 09 01 	lds	r17, 0x0109	; 0x800109 <_ZN6I2Cdev11readTimeoutE+0x1>
    2046:	9c 01       	movw	r18, r24
    2048:	2f 5f       	subi	r18, 0xFF	; 255
    204a:	3f 4f       	sbci	r19, 0xFF	; 255
    204c:	42 e0       	ldi	r20, 0x02	; 2
    204e:	6f e3       	ldi	r22, 0x3F	; 63
    2050:	88 81       	ld	r24, Y
    2052:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <_ZN6I2Cdev9readBytesEhhhPhj>
    2056:	89 81       	ldd	r24, Y+1	; 0x01
    2058:	9a 81       	ldd	r25, Y+2	; 0x02
    205a:	98 27       	eor	r25, r24
    205c:	89 27       	eor	r24, r25
    205e:	98 27       	eor	r25, r24
    2060:	df 91       	pop	r29
    2062:	cf 91       	pop	r28
    2064:	1f 91       	pop	r17
    2066:	0f 91       	pop	r16
    2068:	08 95       	ret

0000206a <_ZN7MPU605012getRotationXEv>:
    206a:	0f 93       	push	r16
    206c:	1f 93       	push	r17
    206e:	cf 93       	push	r28
    2070:	df 93       	push	r29
    2072:	ec 01       	movw	r28, r24
    2074:	00 91 08 01 	lds	r16, 0x0108	; 0x800108 <_ZN6I2Cdev11readTimeoutE>
    2078:	10 91 09 01 	lds	r17, 0x0109	; 0x800109 <_ZN6I2Cdev11readTimeoutE+0x1>
    207c:	9c 01       	movw	r18, r24
    207e:	2f 5f       	subi	r18, 0xFF	; 255
    2080:	3f 4f       	sbci	r19, 0xFF	; 255
    2082:	42 e0       	ldi	r20, 0x02	; 2
    2084:	63 e4       	ldi	r22, 0x43	; 67
    2086:	88 81       	ld	r24, Y
    2088:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <_ZN6I2Cdev9readBytesEhhhPhj>
    208c:	89 81       	ldd	r24, Y+1	; 0x01
    208e:	9a 81       	ldd	r25, Y+2	; 0x02
    2090:	98 27       	eor	r25, r24
    2092:	89 27       	eor	r24, r25
    2094:	98 27       	eor	r25, r24
    2096:	df 91       	pop	r29
    2098:	cf 91       	pop	r28
    209a:	1f 91       	pop	r17
    209c:	0f 91       	pop	r16
    209e:	08 95       	ret

000020a0 <_ZN7MPU605015setSleepEnabledEb>:
    20a0:	26 2f       	mov	r18, r22
    20a2:	46 e0       	ldi	r20, 0x06	; 6
    20a4:	6b e6       	ldi	r22, 0x6B	; 107
    20a6:	fc 01       	movw	r30, r24
    20a8:	80 81       	ld	r24, Z
    20aa:	0c 94 68 0f 	jmp	0x1ed0	; 0x1ed0 <_ZN6I2Cdev8writeBitEhhhh>

000020ae <_ZN7MPU605014setClockSourceEh>:
    20ae:	0f 93       	push	r16
    20b0:	06 2f       	mov	r16, r22
    20b2:	23 e0       	ldi	r18, 0x03	; 3
    20b4:	42 e0       	ldi	r20, 0x02	; 2
    20b6:	6b e6       	ldi	r22, 0x6B	; 107
    20b8:	fc 01       	movw	r30, r24
    20ba:	80 81       	ld	r24, Z
    20bc:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <_ZN6I2Cdev9writeBitsEhhhhh>
    20c0:	0f 91       	pop	r16
    20c2:	08 95       	ret

000020c4 <_ZN7MPU605010initializeEv>:
    20c4:	cf 93       	push	r28
    20c6:	df 93       	push	r29
    20c8:	ec 01       	movw	r28, r24
    20ca:	61 e0       	ldi	r22, 0x01	; 1
    20cc:	0e 94 57 10 	call	0x20ae	; 0x20ae <_ZN7MPU605014setClockSourceEh>
    20d0:	60 e0       	ldi	r22, 0x00	; 0
    20d2:	ce 01       	movw	r24, r28
    20d4:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <_ZN7MPU605021setFullScaleGyroRangeEh>
    20d8:	60 e0       	ldi	r22, 0x00	; 0
    20da:	ce 01       	movw	r24, r28
    20dc:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <_ZN7MPU605022setFullScaleAccelRangeEh>
    20e0:	60 e0       	ldi	r22, 0x00	; 0
    20e2:	ce 01       	movw	r24, r28
    20e4:	df 91       	pop	r29
    20e6:	cf 91       	pop	r28
    20e8:	0c 94 50 10 	jmp	0x20a0	; 0x20a0 <_ZN7MPU605015setSleepEnabledEb>

000020ec <_ZN7MPU605015setXAccelOffsetEi>:
    20ec:	ab 01       	movw	r20, r22
    20ee:	66 e0       	ldi	r22, 0x06	; 6
    20f0:	fc 01       	movw	r30, r24
    20f2:	80 81       	ld	r24, Z
    20f4:	0c 94 97 0e 	jmp	0x1d2e	; 0x1d2e <_ZN6I2Cdev9writeWordEhhj>

000020f8 <_ZN7MPU605015setYAccelOffsetEi>:
    20f8:	ab 01       	movw	r20, r22
    20fa:	68 e0       	ldi	r22, 0x08	; 8
    20fc:	fc 01       	movw	r30, r24
    20fe:	80 81       	ld	r24, Z
    2100:	0c 94 97 0e 	jmp	0x1d2e	; 0x1d2e <_ZN6I2Cdev9writeWordEhhj>

00002104 <_ZN7MPU605015setZAccelOffsetEi>:
    2104:	ab 01       	movw	r20, r22
    2106:	6a e0       	ldi	r22, 0x0A	; 10
    2108:	fc 01       	movw	r30, r24
    210a:	80 81       	ld	r24, Z
    210c:	0c 94 97 0e 	jmp	0x1d2e	; 0x1d2e <_ZN6I2Cdev9writeWordEhhj>

00002110 <_ZN7MPU605014setXGyroOffsetEi>:
    2110:	ab 01       	movw	r20, r22
    2112:	63 e1       	ldi	r22, 0x13	; 19
    2114:	fc 01       	movw	r30, r24
    2116:	80 81       	ld	r24, Z
    2118:	0c 94 97 0e 	jmp	0x1d2e	; 0x1d2e <_ZN6I2Cdev9writeWordEhhj>

0000211c <_ZN7MPU605014setYGyroOffsetEi>:
    211c:	ab 01       	movw	r20, r22
    211e:	65 e1       	ldi	r22, 0x15	; 21
    2120:	fc 01       	movw	r30, r24
    2122:	80 81       	ld	r24, Z
    2124:	0c 94 97 0e 	jmp	0x1d2e	; 0x1d2e <_ZN6I2Cdev9writeWordEhhj>

00002128 <_ZN7MPU605014setZGyroOffsetEi>:
void MPU6050::setZGyroOffset(int16_t offset) {
    2128:	ab 01       	movw	r20, r22
    I2Cdev::writeWord(devAddr, MPU6050_RA_ZG_OFFS_USRH, offset);
    212a:	67 e1       	ldi	r22, 0x17	; 23
    212c:	fc 01       	movw	r30, r24
    212e:	80 81       	ld	r24, Z
    2130:	0c 94 97 0e 	jmp	0x1d2e	; 0x1d2e <_ZN6I2Cdev9writeWordEhhj>

00002134 <_ZN7NewPing16set_max_distanceEj>:
	TIMSK4 = (1<<TOIE4);   // Enable Timer4 interrupt.
#elif defined (__arm__) && defined (TEENSYDUINO)  // Timer for Teensy 3.x
	itimer.begin(NewPing::timer_ms_cntdwn, 1000); // Set timer to 1ms (1000 uS).
#else
	OCR2A = 249;           // Every count is 4uS, so 1ms = 250 counts - 1.
	TIMSK2 |= (1<<OCIE2A); // Enable Timer2 interrupt.
    2134:	6f 5f       	subi	r22, 0xFF	; 255
    2136:	7f 4f       	sbci	r23, 0xFF	; 255
    2138:	49 e3       	ldi	r20, 0x39	; 57
    213a:	46 9f       	mul	r20, r22
    213c:	90 01       	movw	r18, r0
    213e:	47 9f       	mul	r20, r23
    2140:	30 0d       	add	r19, r0
    2142:	11 24       	eor	r1, r1
    2144:	2e 38       	cpi	r18, 0x8E	; 142
    2146:	4f e6       	ldi	r20, 0x6F	; 111
    2148:	34 07       	cpc	r19, r20
    214a:	10 f0       	brcs	.+4      	; 0x2150 <_ZN7NewPing16set_max_distanceEj+0x1c>
    214c:	2d e8       	ldi	r18, 0x8D	; 141
    214e:	3f e6       	ldi	r19, 0x6F	; 111
    2150:	fc 01       	movw	r30, r24
    2152:	35 87       	std	Z+13, r19	; 0x0d
    2154:	24 87       	std	Z+12, r18	; 0x0c
    2156:	08 95       	ret

00002158 <_ZN7NewPingC1Ehhj>:
    2158:	dc 01       	movw	r26, r24
    215a:	70 e0       	ldi	r23, 0x00	; 0
    215c:	fb 01       	movw	r30, r22
    215e:	e7 5f       	subi	r30, 0xF7	; 247
    2160:	fe 4f       	sbci	r31, 0xFE	; 254
    2162:	e4 91       	lpm	r30, Z
    2164:	14 96       	adiw	r26, 0x04	; 4
    2166:	ec 93       	st	X, r30
    2168:	14 97       	sbiw	r26, 0x04	; 4
    216a:	50 e0       	ldi	r21, 0x00	; 0
    216c:	fa 01       	movw	r30, r20
    216e:	e7 5f       	subi	r30, 0xF7	; 247
    2170:	fe 4f       	sbci	r31, 0xFE	; 254
    2172:	e4 91       	lpm	r30, Z
    2174:	15 96       	adiw	r26, 0x05	; 5
    2176:	ec 93       	st	X, r30
    2178:	15 97       	sbiw	r26, 0x05	; 5
    217a:	63 5e       	subi	r22, 0xE3	; 227
    217c:	7e 4f       	sbci	r23, 0xFE	; 254
    217e:	fb 01       	movw	r30, r22
    2180:	84 91       	lpm	r24, Z
    2182:	e8 2f       	mov	r30, r24
    2184:	f0 e0       	ldi	r31, 0x00	; 0
    2186:	ee 0f       	add	r30, r30
    2188:	ff 1f       	adc	r31, r31
    218a:	e5 5c       	subi	r30, 0xC5	; 197
    218c:	fe 4f       	sbci	r31, 0xFE	; 254
    218e:	85 91       	lpm	r24, Z+
    2190:	94 91       	lpm	r25, Z
    2192:	17 96       	adiw	r26, 0x07	; 7
    2194:	9c 93       	st	X, r25
    2196:	8e 93       	st	-X, r24
    2198:	16 97       	sbiw	r26, 0x06	; 6
    219a:	fa 01       	movw	r30, r20
    219c:	e3 5e       	subi	r30, 0xE3	; 227
    219e:	fe 4f       	sbci	r31, 0xFE	; 254
    21a0:	e4 91       	lpm	r30, Z
    21a2:	f0 e0       	ldi	r31, 0x00	; 0
    21a4:	ee 0f       	add	r30, r30
    21a6:	ff 1f       	adc	r31, r31
    21a8:	ef 5c       	subi	r30, 0xCF	; 207
    21aa:	fe 4f       	sbci	r31, 0xFE	; 254
    21ac:	85 91       	lpm	r24, Z+
    21ae:	94 91       	lpm	r25, Z
    21b0:	19 96       	adiw	r26, 0x09	; 9
    21b2:	9c 93       	st	X, r25
    21b4:	8e 93       	st	-X, r24
    21b6:	18 97       	sbiw	r26, 0x08	; 8
    21b8:	fb 01       	movw	r30, r22
    21ba:	64 91       	lpm	r22, Z
    21bc:	e6 2f       	mov	r30, r22
    21be:	f0 e0       	ldi	r31, 0x00	; 0
    21c0:	ee 0f       	add	r30, r30
    21c2:	ff 1f       	adc	r31, r31
    21c4:	eb 5b       	subi	r30, 0xBB	; 187
    21c6:	fe 4f       	sbci	r31, 0xFE	; 254
    21c8:	85 91       	lpm	r24, Z+
    21ca:	94 91       	lpm	r25, Z
    21cc:	1b 96       	adiw	r26, 0x0b	; 11
    21ce:	9c 93       	st	X, r25
    21d0:	8e 93       	st	-X, r24
    21d2:	1a 97       	sbiw	r26, 0x0a	; 10
    21d4:	b9 01       	movw	r22, r18
    21d6:	cd 01       	movw	r24, r26
    21d8:	0c 94 9a 10 	jmp	0x2134	; 0x2134 <_ZN7NewPing16set_max_distanceEj>

000021dc <__vector_7>:
	intFunc(); // Call wrapped function.
}
#elif defined (__arm__)
// Do nothing...
#else
ISR(TIMER2_COMPA_vect) {
    21dc:	1f 92       	push	r1
    21de:	0f 92       	push	r0
    21e0:	0f b6       	in	r0, 0x3f	; 63
    21e2:	0f 92       	push	r0
    21e4:	11 24       	eor	r1, r1
    21e6:	2f 93       	push	r18
    21e8:	3f 93       	push	r19
    21ea:	4f 93       	push	r20
    21ec:	5f 93       	push	r21
    21ee:	6f 93       	push	r22
    21f0:	7f 93       	push	r23
    21f2:	8f 93       	push	r24
    21f4:	9f 93       	push	r25
    21f6:	af 93       	push	r26
    21f8:	bf 93       	push	r27
    21fa:	ef 93       	push	r30
    21fc:	ff 93       	push	r31
	intFunc(); // Call wrapped function.
    21fe:	e0 91 4d 03 	lds	r30, 0x034D	; 0x80034d <intFunc>
    2202:	f0 91 4e 03 	lds	r31, 0x034E	; 0x80034e <intFunc+0x1>
    2206:	09 95       	icall
}
    2208:	ff 91       	pop	r31
    220a:	ef 91       	pop	r30
    220c:	bf 91       	pop	r27
    220e:	af 91       	pop	r26
    2210:	9f 91       	pop	r25
    2212:	8f 91       	pop	r24
    2214:	7f 91       	pop	r23
    2216:	6f 91       	pop	r22
    2218:	5f 91       	pop	r21
    221a:	4f 91       	pop	r20
    221c:	3f 91       	pop	r19
    221e:	2f 91       	pop	r18
    2220:	0f 90       	pop	r0
    2222:	0f be       	out	0x3f, r0	; 63
    2224:	0f 90       	pop	r0
    2226:	1f 90       	pop	r1
    2228:	18 95       	reti

0000222a <twi_readFrom>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    222a:	41 32       	cpi	r20, 0x21	; 33
    222c:	08 f0       	brcs	.+2      	; 0x2230 <twi_readFrom+0x6>
    222e:	43 c0       	rjmp	.+134    	; 0x22b6 <twi_readFrom+0x8c>
    2230:	90 91 bc 03 	lds	r25, 0x03BC	; 0x8003bc <twi_state>
    2234:	91 11       	cpse	r25, r1
    2236:	fc cf       	rjmp	.-8      	; 0x2230 <twi_readFrom+0x6>
    2238:	91 e0       	ldi	r25, 0x01	; 1
    223a:	90 93 bc 03 	sts	0x03BC, r25	; 0x8003bc <twi_state>
    223e:	20 93 ba 03 	sts	0x03BA, r18	; 0x8003ba <twi_sendStop>
    2242:	2f ef       	ldi	r18, 0xFF	; 255
    2244:	20 93 4f 03 	sts	0x034F, r18	; 0x80034f <twi_error>
    2248:	10 92 94 03 	sts	0x0394, r1	; 0x800394 <twi_masterBufferIndex>
    224c:	24 0f       	add	r18, r20
    224e:	20 93 93 03 	sts	0x0393, r18	; 0x800393 <twi_masterBufferLength>
    2252:	90 93 bb 03 	sts	0x03BB, r25	; 0x8003bb <twi_slarw>
    2256:	90 91 bb 03 	lds	r25, 0x03BB	; 0x8003bb <twi_slarw>
    225a:	88 0f       	add	r24, r24
    225c:	89 2b       	or	r24, r25
    225e:	80 93 bb 03 	sts	0x03BB, r24	; 0x8003bb <twi_slarw>
    2262:	80 91 b9 03 	lds	r24, 0x03B9	; 0x8003b9 <twi_inRepStart>
    2266:	81 30       	cpi	r24, 0x01	; 1
    2268:	61 f4       	brne	.+24     	; 0x2282 <twi_readFrom+0x58>
    226a:	10 92 b9 03 	sts	0x03B9, r1	; 0x8003b9 <twi_inRepStart>
    226e:	80 91 bb 03 	lds	r24, 0x03BB	; 0x8003bb <twi_slarw>
    2272:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    2276:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    227a:	83 fd       	sbrc	r24, 3
    227c:	f8 cf       	rjmp	.-16     	; 0x226e <twi_readFrom+0x44>
    227e:	85 ec       	ldi	r24, 0xC5	; 197
    2280:	01 c0       	rjmp	.+2      	; 0x2284 <twi_readFrom+0x5a>
    2282:	85 ee       	ldi	r24, 0xE5	; 229
    2284:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    2288:	80 91 bc 03 	lds	r24, 0x03BC	; 0x8003bc <twi_state>
    228c:	81 30       	cpi	r24, 0x01	; 1
    228e:	e1 f3       	breq	.-8      	; 0x2288 <twi_readFrom+0x5e>
    2290:	80 91 94 03 	lds	r24, 0x0394	; 0x800394 <twi_masterBufferIndex>
    2294:	84 17       	cp	r24, r20
    2296:	10 f4       	brcc	.+4      	; 0x229c <twi_readFrom+0x72>
    2298:	40 91 94 03 	lds	r20, 0x0394	; 0x800394 <twi_masterBufferIndex>
    229c:	a5 e9       	ldi	r26, 0x95	; 149
    229e:	b3 e0       	ldi	r27, 0x03	; 3
    22a0:	96 2f       	mov	r25, r22
    22a2:	fb 01       	movw	r30, r22
    22a4:	8e 2f       	mov	r24, r30
    22a6:	89 1b       	sub	r24, r25
    22a8:	84 17       	cp	r24, r20
    22aa:	18 f4       	brcc	.+6      	; 0x22b2 <twi_readFrom+0x88>
    22ac:	8d 91       	ld	r24, X+
    22ae:	81 93       	st	Z+, r24
    22b0:	f9 cf       	rjmp	.-14     	; 0x22a4 <twi_readFrom+0x7a>
    22b2:	84 2f       	mov	r24, r20
    22b4:	08 95       	ret
    22b6:	80 e0       	ldi	r24, 0x00	; 0
    22b8:	08 95       	ret

000022ba <twi_writeTo>:
    22ba:	0f 93       	push	r16
    22bc:	41 32       	cpi	r20, 0x21	; 33
    22be:	08 f0       	brcs	.+2      	; 0x22c2 <twi_writeTo+0x8>
    22c0:	4a c0       	rjmp	.+148    	; 0x2356 <twi_writeTo+0x9c>
    22c2:	90 91 bc 03 	lds	r25, 0x03BC	; 0x8003bc <twi_state>
    22c6:	91 11       	cpse	r25, r1
    22c8:	fc cf       	rjmp	.-8      	; 0x22c2 <twi_writeTo+0x8>
    22ca:	32 e0       	ldi	r19, 0x02	; 2
    22cc:	30 93 bc 03 	sts	0x03BC, r19	; 0x8003bc <twi_state>
    22d0:	00 93 ba 03 	sts	0x03BA, r16	; 0x8003ba <twi_sendStop>
    22d4:	3f ef       	ldi	r19, 0xFF	; 255
    22d6:	30 93 4f 03 	sts	0x034F, r19	; 0x80034f <twi_error>
    22da:	10 92 94 03 	sts	0x0394, r1	; 0x800394 <twi_masterBufferIndex>
    22de:	40 93 93 03 	sts	0x0393, r20	; 0x800393 <twi_masterBufferLength>
    22e2:	56 2f       	mov	r21, r22
    22e4:	a5 e9       	ldi	r26, 0x95	; 149
    22e6:	b3 e0       	ldi	r27, 0x03	; 3
    22e8:	fb 01       	movw	r30, r22
    22ea:	3e 2f       	mov	r19, r30
    22ec:	35 1b       	sub	r19, r21
    22ee:	34 17       	cp	r19, r20
    22f0:	18 f4       	brcc	.+6      	; 0x22f8 <twi_writeTo+0x3e>
    22f2:	31 91       	ld	r19, Z+
    22f4:	3d 93       	st	X+, r19
    22f6:	f9 cf       	rjmp	.-14     	; 0x22ea <twi_writeTo+0x30>
    22f8:	10 92 bb 03 	sts	0x03BB, r1	; 0x8003bb <twi_slarw>
    22fc:	30 91 bb 03 	lds	r19, 0x03BB	; 0x8003bb <twi_slarw>
    2300:	88 0f       	add	r24, r24
    2302:	83 2b       	or	r24, r19
    2304:	80 93 bb 03 	sts	0x03BB, r24	; 0x8003bb <twi_slarw>
    2308:	80 91 b9 03 	lds	r24, 0x03B9	; 0x8003b9 <twi_inRepStart>
    230c:	81 30       	cpi	r24, 0x01	; 1
    230e:	61 f4       	brne	.+24     	; 0x2328 <twi_writeTo+0x6e>
    2310:	10 92 b9 03 	sts	0x03B9, r1	; 0x8003b9 <twi_inRepStart>
    2314:	80 91 bb 03 	lds	r24, 0x03BB	; 0x8003bb <twi_slarw>
    2318:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    231c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    2320:	83 fd       	sbrc	r24, 3
    2322:	f8 cf       	rjmp	.-16     	; 0x2314 <twi_writeTo+0x5a>
    2324:	85 ec       	ldi	r24, 0xC5	; 197
    2326:	01 c0       	rjmp	.+2      	; 0x232a <twi_writeTo+0x70>
    2328:	85 ee       	ldi	r24, 0xE5	; 229
    232a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    232e:	22 23       	and	r18, r18
    2330:	21 f0       	breq	.+8      	; 0x233a <twi_writeTo+0x80>
    2332:	80 91 bc 03 	lds	r24, 0x03BC	; 0x8003bc <twi_state>
    2336:	82 30       	cpi	r24, 0x02	; 2
    2338:	d1 f3       	breq	.-12     	; 0x232e <twi_writeTo+0x74>
    233a:	80 91 4f 03 	lds	r24, 0x034F	; 0x80034f <twi_error>
    233e:	8f 3f       	cpi	r24, 0xFF	; 255
    2340:	79 f0       	breq	.+30     	; 0x2360 <twi_writeTo+0xa6>
    2342:	80 91 4f 03 	lds	r24, 0x034F	; 0x80034f <twi_error>
    2346:	80 32       	cpi	r24, 0x20	; 32
    2348:	41 f0       	breq	.+16     	; 0x235a <twi_writeTo+0xa0>
    234a:	80 91 4f 03 	lds	r24, 0x034F	; 0x80034f <twi_error>
    234e:	80 33       	cpi	r24, 0x30	; 48
    2350:	31 f0       	breq	.+12     	; 0x235e <twi_writeTo+0xa4>
    2352:	94 e0       	ldi	r25, 0x04	; 4
    2354:	05 c0       	rjmp	.+10     	; 0x2360 <twi_writeTo+0xa6>
    2356:	91 e0       	ldi	r25, 0x01	; 1
    2358:	03 c0       	rjmp	.+6      	; 0x2360 <twi_writeTo+0xa6>
    235a:	92 e0       	ldi	r25, 0x02	; 2
    235c:	01 c0       	rjmp	.+2      	; 0x2360 <twi_writeTo+0xa6>
    235e:	93 e0       	ldi	r25, 0x03	; 3
    2360:	89 2f       	mov	r24, r25
    2362:	0f 91       	pop	r16
    2364:	08 95       	ret

00002366 <twi_transmit>:
    2366:	40 91 71 03 	lds	r20, 0x0371	; 0x800371 <twi_txBufferLength>
    236a:	26 2f       	mov	r18, r22
    236c:	30 e0       	ldi	r19, 0x00	; 0
    236e:	24 0f       	add	r18, r20
    2370:	31 1d       	adc	r19, r1
    2372:	21 32       	cpi	r18, 0x21	; 33
    2374:	31 05       	cpc	r19, r1
    2376:	dc f4       	brge	.+54     	; 0x23ae <twi_transmit+0x48>
    2378:	20 91 bc 03 	lds	r18, 0x03BC	; 0x8003bc <twi_state>
    237c:	24 30       	cpi	r18, 0x04	; 4
    237e:	c9 f4       	brne	.+50     	; 0x23b2 <twi_transmit+0x4c>
    2380:	fc 01       	movw	r30, r24
    2382:	80 e0       	ldi	r24, 0x00	; 0
    2384:	90 e0       	ldi	r25, 0x00	; 0
    2386:	86 17       	cp	r24, r22
    2388:	58 f4       	brcc	.+22     	; 0x23a0 <twi_transmit+0x3a>
    238a:	30 91 71 03 	lds	r19, 0x0371	; 0x800371 <twi_txBufferLength>
    238e:	21 91       	ld	r18, Z+
    2390:	dc 01       	movw	r26, r24
    2392:	ad 58       	subi	r26, 0x8D	; 141
    2394:	bc 4f       	sbci	r27, 0xFC	; 252
    2396:	a3 0f       	add	r26, r19
    2398:	b1 1d       	adc	r27, r1
    239a:	2c 93       	st	X, r18
    239c:	01 96       	adiw	r24, 0x01	; 1
    239e:	f3 cf       	rjmp	.-26     	; 0x2386 <twi_transmit+0x20>
    23a0:	80 91 71 03 	lds	r24, 0x0371	; 0x800371 <twi_txBufferLength>
    23a4:	68 0f       	add	r22, r24
    23a6:	60 93 71 03 	sts	0x0371, r22	; 0x800371 <twi_txBufferLength>
    23aa:	80 e0       	ldi	r24, 0x00	; 0
    23ac:	08 95       	ret
    23ae:	81 e0       	ldi	r24, 0x01	; 1
    23b0:	08 95       	ret
    23b2:	82 e0       	ldi	r24, 0x02	; 2
    23b4:	08 95       	ret

000023b6 <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    23b6:	85 ed       	ldi	r24, 0xD5	; 213
    23b8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    23bc:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    23c0:	84 fd       	sbrc	r24, 4
    23c2:	fc cf       	rjmp	.-8      	; 0x23bc <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    23c4:	10 92 bc 03 	sts	0x03BC, r1	; 0x8003bc <twi_state>
    23c8:	08 95       	ret

000023ca <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    23ca:	85 ec       	ldi	r24, 0xC5	; 197
    23cc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // update twi state
  twi_state = TWI_READY;
    23d0:	10 92 bc 03 	sts	0x03BC, r1	; 0x8003bc <twi_state>
    23d4:	08 95       	ret

000023d6 <__vector_24>:
}

ISR(TWI_vect)
{
    23d6:	1f 92       	push	r1
    23d8:	0f 92       	push	r0
    23da:	0f b6       	in	r0, 0x3f	; 63
    23dc:	0f 92       	push	r0
    23de:	11 24       	eor	r1, r1
    23e0:	2f 93       	push	r18
    23e2:	3f 93       	push	r19
    23e4:	4f 93       	push	r20
    23e6:	5f 93       	push	r21
    23e8:	6f 93       	push	r22
    23ea:	7f 93       	push	r23
    23ec:	8f 93       	push	r24
    23ee:	9f 93       	push	r25
    23f0:	af 93       	push	r26
    23f2:	bf 93       	push	r27
    23f4:	ef 93       	push	r30
    23f6:	ff 93       	push	r31
  switch(TW_STATUS){
    23f8:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    23fc:	88 7f       	andi	r24, 0xF8	; 248
    23fe:	80 36       	cpi	r24, 0x60	; 96
    2400:	09 f4       	brne	.+2      	; 0x2404 <__vector_24+0x2e>
    2402:	9e c0       	rjmp	.+316    	; 0x2540 <__vector_24+0x16a>
    2404:	78 f5       	brcc	.+94     	; 0x2464 <__vector_24+0x8e>
    2406:	88 32       	cpi	r24, 0x28	; 40
    2408:	09 f4       	brne	.+2      	; 0x240c <__vector_24+0x36>
    240a:	5d c0       	rjmp	.+186    	; 0x24c6 <__vector_24+0xf0>
    240c:	90 f4       	brcc	.+36     	; 0x2432 <__vector_24+0x5c>
    240e:	80 31       	cpi	r24, 0x10	; 16
    2410:	09 f4       	brne	.+2      	; 0x2414 <__vector_24+0x3e>
    2412:	56 c0       	rjmp	.+172    	; 0x24c0 <__vector_24+0xea>
    2414:	38 f4       	brcc	.+14     	; 0x2424 <__vector_24+0x4e>
    2416:	88 23       	and	r24, r24
    2418:	09 f4       	brne	.+2      	; 0x241c <__vector_24+0x46>
    241a:	f5 c0       	rjmp	.+490    	; 0x2606 <__vector_24+0x230>
    241c:	88 30       	cpi	r24, 0x08	; 8
    241e:	09 f4       	brne	.+2      	; 0x2422 <__vector_24+0x4c>
    2420:	4f c0       	rjmp	.+158    	; 0x24c0 <__vector_24+0xea>
    2422:	f5 c0       	rjmp	.+490    	; 0x260e <__vector_24+0x238>
    2424:	88 31       	cpi	r24, 0x18	; 24
    2426:	09 f4       	brne	.+2      	; 0x242a <__vector_24+0x54>
    2428:	4e c0       	rjmp	.+156    	; 0x24c6 <__vector_24+0xf0>
    242a:	80 32       	cpi	r24, 0x20	; 32
    242c:	09 f4       	brne	.+2      	; 0x2430 <__vector_24+0x5a>
    242e:	5f c0       	rjmp	.+190    	; 0x24ee <__vector_24+0x118>
    2430:	ee c0       	rjmp	.+476    	; 0x260e <__vector_24+0x238>
    2432:	80 34       	cpi	r24, 0x40	; 64
    2434:	09 f4       	brne	.+2      	; 0x2438 <__vector_24+0x62>
    2436:	6a c0       	rjmp	.+212    	; 0x250c <__vector_24+0x136>
    2438:	58 f4       	brcc	.+22     	; 0x2450 <__vector_24+0x7a>
    243a:	80 33       	cpi	r24, 0x30	; 48
    243c:	09 f4       	brne	.+2      	; 0x2440 <__vector_24+0x6a>
    243e:	57 c0       	rjmp	.+174    	; 0x24ee <__vector_24+0x118>
    2440:	88 33       	cpi	r24, 0x38	; 56
    2442:	09 f0       	breq	.+2      	; 0x2446 <__vector_24+0x70>
    2444:	e4 c0       	rjmp	.+456    	; 0x260e <__vector_24+0x238>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    2446:	80 93 4f 03 	sts	0x034F, r24	; 0x80034f <twi_error>
      twi_releaseBus();
    244a:	0e 94 e5 11 	call	0x23ca	; 0x23ca <twi_releaseBus>
      break;
    244e:	df c0       	rjmp	.+446    	; 0x260e <__vector_24+0x238>
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    2450:	80 35       	cpi	r24, 0x50	; 80
    2452:	09 f4       	brne	.+2      	; 0x2456 <__vector_24+0x80>
    2454:	4f c0       	rjmp	.+158    	; 0x24f4 <__vector_24+0x11e>
    2456:	88 35       	cpi	r24, 0x58	; 88
    2458:	09 f4       	brne	.+2      	; 0x245c <__vector_24+0x86>
    245a:	5d c0       	rjmp	.+186    	; 0x2516 <__vector_24+0x140>
    245c:	88 34       	cpi	r24, 0x48	; 72
    245e:	09 f0       	breq	.+2      	; 0x2462 <__vector_24+0x8c>
    2460:	d6 c0       	rjmp	.+428    	; 0x260e <__vector_24+0x238>
    2462:	d3 c0       	rjmp	.+422    	; 0x260a <__vector_24+0x234>
    2464:	88 39       	cpi	r24, 0x98	; 152
    2466:	09 f4       	brne	.+2      	; 0x246a <__vector_24+0x94>
    2468:	c4 c0       	rjmp	.+392    	; 0x25f2 <__vector_24+0x21c>
    246a:	a8 f4       	brcc	.+42     	; 0x2496 <__vector_24+0xc0>
    246c:	88 37       	cpi	r24, 0x78	; 120
    246e:	09 f4       	brne	.+2      	; 0x2472 <__vector_24+0x9c>
    2470:	67 c0       	rjmp	.+206    	; 0x2540 <__vector_24+0x16a>
    2472:	38 f4       	brcc	.+14     	; 0x2482 <__vector_24+0xac>
    2474:	88 36       	cpi	r24, 0x68	; 104
    2476:	09 f4       	brne	.+2      	; 0x247a <__vector_24+0xa4>
    2478:	63 c0       	rjmp	.+198    	; 0x2540 <__vector_24+0x16a>
    247a:	80 37       	cpi	r24, 0x70	; 112
    247c:	09 f4       	brne	.+2      	; 0x2480 <__vector_24+0xaa>
    247e:	60 c0       	rjmp	.+192    	; 0x2540 <__vector_24+0x16a>
    2480:	c6 c0       	rjmp	.+396    	; 0x260e <__vector_24+0x238>
    2482:	88 38       	cpi	r24, 0x88	; 136
    2484:	09 f4       	brne	.+2      	; 0x2488 <__vector_24+0xb2>
    2486:	b5 c0       	rjmp	.+362    	; 0x25f2 <__vector_24+0x21c>
    2488:	80 39       	cpi	r24, 0x90	; 144
    248a:	09 f4       	brne	.+2      	; 0x248e <__vector_24+0xb8>
    248c:	5f c0       	rjmp	.+190    	; 0x254c <__vector_24+0x176>
    248e:	80 38       	cpi	r24, 0x80	; 128
    2490:	09 f0       	breq	.+2      	; 0x2494 <__vector_24+0xbe>
    2492:	bd c0       	rjmp	.+378    	; 0x260e <__vector_24+0x238>
    2494:	5b c0       	rjmp	.+182    	; 0x254c <__vector_24+0x176>
    2496:	80 3b       	cpi	r24, 0xB0	; 176
    2498:	09 f4       	brne	.+2      	; 0x249c <__vector_24+0xc6>
    249a:	83 c0       	rjmp	.+262    	; 0x25a2 <__vector_24+0x1cc>
    249c:	38 f4       	brcc	.+14     	; 0x24ac <__vector_24+0xd6>
    249e:	80 3a       	cpi	r24, 0xA0	; 160
    24a0:	09 f4       	brne	.+2      	; 0x24a4 <__vector_24+0xce>
    24a2:	66 c0       	rjmp	.+204    	; 0x2570 <__vector_24+0x19a>
    24a4:	88 3a       	cpi	r24, 0xA8	; 168
    24a6:	09 f4       	brne	.+2      	; 0x24aa <__vector_24+0xd4>
    24a8:	7c c0       	rjmp	.+248    	; 0x25a2 <__vector_24+0x1cc>
    24aa:	b1 c0       	rjmp	.+354    	; 0x260e <__vector_24+0x238>
    24ac:	80 3c       	cpi	r24, 0xC0	; 192
    24ae:	09 f4       	brne	.+2      	; 0x24b2 <__vector_24+0xdc>
    24b0:	a4 c0       	rjmp	.+328    	; 0x25fa <__vector_24+0x224>
    24b2:	88 3c       	cpi	r24, 0xC8	; 200
    24b4:	09 f4       	brne	.+2      	; 0x24b8 <__vector_24+0xe2>
    24b6:	a1 c0       	rjmp	.+322    	; 0x25fa <__vector_24+0x224>
    24b8:	88 3b       	cpi	r24, 0xB8	; 184
    24ba:	09 f4       	brne	.+2      	; 0x24be <__vector_24+0xe8>
    24bc:	87 c0       	rjmp	.+270    	; 0x25cc <__vector_24+0x1f6>
    24be:	a7 c0       	rjmp	.+334    	; 0x260e <__vector_24+0x238>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    24c0:	80 91 bb 03 	lds	r24, 0x03BB	; 0x8003bb <twi_slarw>
    24c4:	10 c0       	rjmp	.+32     	; 0x24e6 <__vector_24+0x110>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    24c6:	90 91 94 03 	lds	r25, 0x0394	; 0x800394 <twi_masterBufferIndex>
    24ca:	80 91 93 03 	lds	r24, 0x0393	; 0x800393 <twi_masterBufferLength>
    24ce:	98 17       	cp	r25, r24
    24d0:	70 f5       	brcc	.+92     	; 0x252e <__vector_24+0x158>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    24d2:	e0 91 94 03 	lds	r30, 0x0394	; 0x800394 <twi_masterBufferIndex>
    24d6:	81 e0       	ldi	r24, 0x01	; 1
    24d8:	8e 0f       	add	r24, r30
    24da:	80 93 94 03 	sts	0x0394, r24	; 0x800394 <twi_masterBufferIndex>
    24de:	f0 e0       	ldi	r31, 0x00	; 0
    24e0:	eb 56       	subi	r30, 0x6B	; 107
    24e2:	fc 4f       	sbci	r31, 0xFC	; 252
    24e4:	80 81       	ld	r24, Z
    24e6:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    24ea:	85 ec       	ldi	r24, 0xC5	; 197
    24ec:	83 c0       	rjmp	.+262    	; 0x25f4 <__vector_24+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    24ee:	80 93 4f 03 	sts	0x034F, r24	; 0x80034f <twi_error>
    24f2:	8b c0       	rjmp	.+278    	; 0x260a <__vector_24+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    24f4:	e0 91 94 03 	lds	r30, 0x0394	; 0x800394 <twi_masterBufferIndex>
    24f8:	81 e0       	ldi	r24, 0x01	; 1
    24fa:	8e 0f       	add	r24, r30
    24fc:	80 93 94 03 	sts	0x0394, r24	; 0x800394 <twi_masterBufferIndex>
    2500:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    2504:	f0 e0       	ldi	r31, 0x00	; 0
    2506:	eb 56       	subi	r30, 0x6B	; 107
    2508:	fc 4f       	sbci	r31, 0xFC	; 252
    250a:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    250c:	90 91 94 03 	lds	r25, 0x0394	; 0x800394 <twi_masterBufferIndex>
    2510:	80 91 93 03 	lds	r24, 0x0393	; 0x800393 <twi_masterBufferLength>
    2514:	6b c0       	rjmp	.+214    	; 0x25ec <__vector_24+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    2516:	e0 91 94 03 	lds	r30, 0x0394	; 0x800394 <twi_masterBufferIndex>
    251a:	81 e0       	ldi	r24, 0x01	; 1
    251c:	8e 0f       	add	r24, r30
    251e:	80 93 94 03 	sts	0x0394, r24	; 0x800394 <twi_masterBufferIndex>
    2522:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    2526:	f0 e0       	ldi	r31, 0x00	; 0
    2528:	eb 56       	subi	r30, 0x6B	; 107
    252a:	fc 4f       	sbci	r31, 0xFC	; 252
    252c:	80 83       	st	Z, r24
	if (twi_sendStop)
    252e:	80 91 ba 03 	lds	r24, 0x03BA	; 0x8003ba <twi_sendStop>
    2532:	81 11       	cpse	r24, r1
    2534:	6a c0       	rjmp	.+212    	; 0x260a <__vector_24+0x234>
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    2536:	81 e0       	ldi	r24, 0x01	; 1
    2538:	80 93 b9 03 	sts	0x03B9, r24	; 0x8003b9 <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    253c:	84 ea       	ldi	r24, 0xA4	; 164
    253e:	5e c0       	rjmp	.+188    	; 0x25fc <__vector_24+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    2540:	83 e0       	ldi	r24, 0x03	; 3
    2542:	80 93 bc 03 	sts	0x03BC, r24	; 0x8003bc <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    2546:	10 92 50 03 	sts	0x0350, r1	; 0x800350 <twi_rxBufferIndex>
    254a:	cf cf       	rjmp	.-98     	; 0x24ea <__vector_24+0x114>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    254c:	80 91 50 03 	lds	r24, 0x0350	; 0x800350 <twi_rxBufferIndex>
    2550:	80 32       	cpi	r24, 0x20	; 32
    2552:	08 f0       	brcs	.+2      	; 0x2556 <__vector_24+0x180>
    2554:	4e c0       	rjmp	.+156    	; 0x25f2 <__vector_24+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    2556:	e0 91 50 03 	lds	r30, 0x0350	; 0x800350 <twi_rxBufferIndex>
    255a:	81 e0       	ldi	r24, 0x01	; 1
    255c:	8e 0f       	add	r24, r30
    255e:	80 93 50 03 	sts	0x0350, r24	; 0x800350 <twi_rxBufferIndex>
    2562:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    2566:	f0 e0       	ldi	r31, 0x00	; 0
    2568:	ef 5a       	subi	r30, 0xAF	; 175
    256a:	fc 4f       	sbci	r31, 0xFC	; 252
    256c:	80 83       	st	Z, r24
    256e:	bd cf       	rjmp	.-134    	; 0x24ea <__vector_24+0x114>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    2570:	0e 94 e5 11 	call	0x23ca	; 0x23ca <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    2574:	80 91 50 03 	lds	r24, 0x0350	; 0x800350 <twi_rxBufferIndex>
    2578:	80 32       	cpi	r24, 0x20	; 32
    257a:	30 f4       	brcc	.+12     	; 0x2588 <__vector_24+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    257c:	e0 91 50 03 	lds	r30, 0x0350	; 0x800350 <twi_rxBufferIndex>
    2580:	f0 e0       	ldi	r31, 0x00	; 0
    2582:	ef 5a       	subi	r30, 0xAF	; 175
    2584:	fc 4f       	sbci	r31, 0xFC	; 252
    2586:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    2588:	60 91 50 03 	lds	r22, 0x0350	; 0x800350 <twi_rxBufferIndex>
    258c:	70 e0       	ldi	r23, 0x00	; 0
    258e:	e0 91 b5 03 	lds	r30, 0x03B5	; 0x8003b5 <twi_onSlaveReceive>
    2592:	f0 91 b6 03 	lds	r31, 0x03B6	; 0x8003b6 <twi_onSlaveReceive+0x1>
    2596:	81 e5       	ldi	r24, 0x51	; 81
    2598:	93 e0       	ldi	r25, 0x03	; 3
    259a:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    259c:	10 92 50 03 	sts	0x0350, r1	; 0x800350 <twi_rxBufferIndex>
      break;
    25a0:	36 c0       	rjmp	.+108    	; 0x260e <__vector_24+0x238>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    25a2:	84 e0       	ldi	r24, 0x04	; 4
    25a4:	80 93 bc 03 	sts	0x03BC, r24	; 0x8003bc <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    25a8:	10 92 72 03 	sts	0x0372, r1	; 0x800372 <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    25ac:	10 92 71 03 	sts	0x0371, r1	; 0x800371 <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    25b0:	e0 91 b7 03 	lds	r30, 0x03B7	; 0x8003b7 <twi_onSlaveTransmit>
    25b4:	f0 91 b8 03 	lds	r31, 0x03B8	; 0x8003b8 <twi_onSlaveTransmit+0x1>
    25b8:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    25ba:	80 91 71 03 	lds	r24, 0x0371	; 0x800371 <twi_txBufferLength>
    25be:	81 11       	cpse	r24, r1
    25c0:	05 c0       	rjmp	.+10     	; 0x25cc <__vector_24+0x1f6>
        twi_txBufferLength = 1;
    25c2:	81 e0       	ldi	r24, 0x01	; 1
    25c4:	80 93 71 03 	sts	0x0371, r24	; 0x800371 <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    25c8:	10 92 73 03 	sts	0x0373, r1	; 0x800373 <twi_txBuffer>
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    25cc:	e0 91 72 03 	lds	r30, 0x0372	; 0x800372 <twi_txBufferIndex>
    25d0:	81 e0       	ldi	r24, 0x01	; 1
    25d2:	8e 0f       	add	r24, r30
    25d4:	80 93 72 03 	sts	0x0372, r24	; 0x800372 <twi_txBufferIndex>
    25d8:	f0 e0       	ldi	r31, 0x00	; 0
    25da:	ed 58       	subi	r30, 0x8D	; 141
    25dc:	fc 4f       	sbci	r31, 0xFC	; 252
    25de:	80 81       	ld	r24, Z
    25e0:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    25e4:	90 91 72 03 	lds	r25, 0x0372	; 0x800372 <twi_txBufferIndex>
    25e8:	80 91 71 03 	lds	r24, 0x0371	; 0x800371 <twi_txBufferLength>
    25ec:	98 17       	cp	r25, r24
    25ee:	08 f4       	brcc	.+2      	; 0x25f2 <__vector_24+0x21c>
    25f0:	7c cf       	rjmp	.-264    	; 0x24ea <__vector_24+0x114>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    25f2:	85 e8       	ldi	r24, 0x85	; 133
    25f4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    25f8:	0a c0       	rjmp	.+20     	; 0x260e <__vector_24+0x238>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    25fa:	85 ec       	ldi	r24, 0xC5	; 197
    25fc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    2600:	10 92 bc 03 	sts	0x03BC, r1	; 0x8003bc <twi_state>
      break;
    2604:	04 c0       	rjmp	.+8      	; 0x260e <__vector_24+0x238>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    2606:	10 92 4f 03 	sts	0x034F, r1	; 0x80034f <twi_error>
      twi_stop();
    260a:	0e 94 db 11 	call	0x23b6	; 0x23b6 <twi_stop>
      break;
  }
}
    260e:	ff 91       	pop	r31
    2610:	ef 91       	pop	r30
    2612:	bf 91       	pop	r27
    2614:	af 91       	pop	r26
    2616:	9f 91       	pop	r25
    2618:	8f 91       	pop	r24
    261a:	7f 91       	pop	r23
    261c:	6f 91       	pop	r22
    261e:	5f 91       	pop	r21
    2620:	4f 91       	pop	r20
    2622:	3f 91       	pop	r19
    2624:	2f 91       	pop	r18
    2626:	0f 90       	pop	r0
    2628:	0f be       	out	0x3f, r0	; 63
    262a:	0f 90       	pop	r0
    262c:	1f 90       	pop	r1
    262e:	18 95       	reti

00002630 <_ZN5Print17availableForWriteEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    2630:	80 e0       	ldi	r24, 0x00	; 0
    2632:	90 e0       	ldi	r25, 0x00	; 0
    2634:	08 95       	ret

00002636 <_ZN7TwoWire9availableEv>:
    2636:	80 91 ed 03 	lds	r24, 0x03ED	; 0x8003ed <_ZN7TwoWire14rxBufferLengthE>
    263a:	90 e0       	ldi	r25, 0x00	; 0
    263c:	20 91 ee 03 	lds	r18, 0x03EE	; 0x8003ee <_ZN7TwoWire13rxBufferIndexE>
    2640:	82 1b       	sub	r24, r18
    2642:	91 09       	sbc	r25, r1
    2644:	08 95       	ret

00002646 <_ZN7TwoWire4readEv>:
    2646:	90 91 ee 03 	lds	r25, 0x03EE	; 0x8003ee <_ZN7TwoWire13rxBufferIndexE>
    264a:	80 91 ed 03 	lds	r24, 0x03ED	; 0x8003ed <_ZN7TwoWire14rxBufferLengthE>
    264e:	98 17       	cp	r25, r24
    2650:	50 f4       	brcc	.+20     	; 0x2666 <_ZN7TwoWire4readEv+0x20>
    2652:	e9 2f       	mov	r30, r25
    2654:	f0 e0       	ldi	r31, 0x00	; 0
    2656:	e1 51       	subi	r30, 0x11	; 17
    2658:	fc 4f       	sbci	r31, 0xFC	; 252
    265a:	20 81       	ld	r18, Z
    265c:	30 e0       	ldi	r19, 0x00	; 0
    265e:	9f 5f       	subi	r25, 0xFF	; 255
    2660:	90 93 ee 03 	sts	0x03EE, r25	; 0x8003ee <_ZN7TwoWire13rxBufferIndexE>
    2664:	02 c0       	rjmp	.+4      	; 0x266a <_ZN7TwoWire4readEv+0x24>
    2666:	2f ef       	ldi	r18, 0xFF	; 255
    2668:	3f ef       	ldi	r19, 0xFF	; 255
    266a:	c9 01       	movw	r24, r18
    266c:	08 95       	ret

0000266e <_ZN7TwoWire4peekEv>:
    266e:	e0 91 ee 03 	lds	r30, 0x03EE	; 0x8003ee <_ZN7TwoWire13rxBufferIndexE>
    2672:	80 91 ed 03 	lds	r24, 0x03ED	; 0x8003ed <_ZN7TwoWire14rxBufferLengthE>
    2676:	e8 17       	cp	r30, r24
    2678:	30 f4       	brcc	.+12     	; 0x2686 <_ZN7TwoWire4peekEv+0x18>
    267a:	f0 e0       	ldi	r31, 0x00	; 0
    267c:	e1 51       	subi	r30, 0x11	; 17
    267e:	fc 4f       	sbci	r31, 0xFC	; 252
    2680:	80 81       	ld	r24, Z
    2682:	90 e0       	ldi	r25, 0x00	; 0
    2684:	08 95       	ret
    2686:	8f ef       	ldi	r24, 0xFF	; 255
    2688:	9f ef       	ldi	r25, 0xFF	; 255
    268a:	08 95       	ret

0000268c <_ZN7TwoWire5flushEv>:
    268c:	08 95       	ret

0000268e <_ZN7TwoWire5writeEPKhj>:
    268e:	cf 92       	push	r12
    2690:	df 92       	push	r13
    2692:	ef 92       	push	r14
    2694:	ff 92       	push	r15
    2696:	0f 93       	push	r16
    2698:	1f 93       	push	r17
    269a:	cf 93       	push	r28
    269c:	df 93       	push	r29
    269e:	7c 01       	movw	r14, r24
    26a0:	cb 01       	movw	r24, r22
    26a2:	8a 01       	movw	r16, r20
    26a4:	20 91 c9 03 	lds	r18, 0x03C9	; 0x8003c9 <_ZN7TwoWire12transmittingE>
    26a8:	22 23       	and	r18, r18
    26aa:	89 f0       	breq	.+34     	; 0x26ce <_ZN7TwoWire5writeEPKhj+0x40>
    26ac:	eb 01       	movw	r28, r22
    26ae:	6b 01       	movw	r12, r22
    26b0:	c4 0e       	add	r12, r20
    26b2:	d5 1e       	adc	r13, r21
    26b4:	cc 15       	cp	r28, r12
    26b6:	dd 05       	cpc	r29, r13
    26b8:	69 f0       	breq	.+26     	; 0x26d4 <_ZN7TwoWire5writeEPKhj+0x46>
    26ba:	69 91       	ld	r22, Y+
    26bc:	d7 01       	movw	r26, r14
    26be:	ed 91       	ld	r30, X+
    26c0:	fc 91       	ld	r31, X
    26c2:	01 90       	ld	r0, Z+
    26c4:	f0 81       	ld	r31, Z
    26c6:	e0 2d       	mov	r30, r0
    26c8:	c7 01       	movw	r24, r14
    26ca:	09 95       	icall
    26cc:	f3 cf       	rjmp	.-26     	; 0x26b4 <_ZN7TwoWire5writeEPKhj+0x26>
    26ce:	64 2f       	mov	r22, r20
    26d0:	0e 94 b3 11 	call	0x2366	; 0x2366 <twi_transmit>
    26d4:	c8 01       	movw	r24, r16
    26d6:	df 91       	pop	r29
    26d8:	cf 91       	pop	r28
    26da:	1f 91       	pop	r17
    26dc:	0f 91       	pop	r16
    26de:	ff 90       	pop	r15
    26e0:	ef 90       	pop	r14
    26e2:	df 90       	pop	r13
    26e4:	cf 90       	pop	r12
    26e6:	08 95       	ret

000026e8 <_ZN7TwoWire5writeEh>:
    26e8:	cf 93       	push	r28
    26ea:	df 93       	push	r29
    26ec:	1f 92       	push	r1
    26ee:	cd b7       	in	r28, 0x3d	; 61
    26f0:	de b7       	in	r29, 0x3e	; 62
    26f2:	69 83       	std	Y+1, r22	; 0x01
    26f4:	20 91 c9 03 	lds	r18, 0x03C9	; 0x8003c9 <_ZN7TwoWire12transmittingE>
    26f8:	22 23       	and	r18, r18
    26fa:	d1 f0       	breq	.+52     	; 0x2730 <_ZN7TwoWire5writeEh+0x48>
    26fc:	20 91 ca 03 	lds	r18, 0x03CA	; 0x8003ca <_ZN7TwoWire14txBufferLengthE>
    2700:	20 32       	cpi	r18, 0x20	; 32
    2702:	40 f0       	brcs	.+16     	; 0x2714 <_ZN7TwoWire5writeEh+0x2c>
    2704:	21 e0       	ldi	r18, 0x01	; 1
    2706:	30 e0       	ldi	r19, 0x00	; 0
    2708:	fc 01       	movw	r30, r24
    270a:	33 83       	std	Z+3, r19	; 0x03
    270c:	22 83       	std	Z+2, r18	; 0x02
    270e:	80 e0       	ldi	r24, 0x00	; 0
    2710:	90 e0       	ldi	r25, 0x00	; 0
    2712:	15 c0       	rjmp	.+42     	; 0x273e <_ZN7TwoWire5writeEh+0x56>
    2714:	80 91 cb 03 	lds	r24, 0x03CB	; 0x8003cb <_ZN7TwoWire13txBufferIndexE>
    2718:	e8 2f       	mov	r30, r24
    271a:	f0 e0       	ldi	r31, 0x00	; 0
    271c:	e4 53       	subi	r30, 0x34	; 52
    271e:	fc 4f       	sbci	r31, 0xFC	; 252
    2720:	99 81       	ldd	r25, Y+1	; 0x01
    2722:	90 83       	st	Z, r25
    2724:	8f 5f       	subi	r24, 0xFF	; 255
    2726:	80 93 cb 03 	sts	0x03CB, r24	; 0x8003cb <_ZN7TwoWire13txBufferIndexE>
    272a:	80 93 ca 03 	sts	0x03CA, r24	; 0x8003ca <_ZN7TwoWire14txBufferLengthE>
    272e:	05 c0       	rjmp	.+10     	; 0x273a <_ZN7TwoWire5writeEh+0x52>
    2730:	61 e0       	ldi	r22, 0x01	; 1
    2732:	ce 01       	movw	r24, r28
    2734:	01 96       	adiw	r24, 0x01	; 1
    2736:	0e 94 b3 11 	call	0x2366	; 0x2366 <twi_transmit>
    273a:	81 e0       	ldi	r24, 0x01	; 1
    273c:	90 e0       	ldi	r25, 0x00	; 0
    273e:	0f 90       	pop	r0
    2740:	df 91       	pop	r29
    2742:	cf 91       	pop	r28
    2744:	08 95       	ret

00002746 <_ZN7TwoWireC1Ev>:
    2746:	fc 01       	movw	r30, r24
    2748:	13 82       	std	Z+3, r1	; 0x03
    274a:	12 82       	std	Z+2, r1	; 0x02
    274c:	88 ee       	ldi	r24, 0xE8	; 232
    274e:	93 e0       	ldi	r25, 0x03	; 3
    2750:	a0 e0       	ldi	r26, 0x00	; 0
    2752:	b0 e0       	ldi	r27, 0x00	; 0
    2754:	84 83       	std	Z+4, r24	; 0x04
    2756:	95 83       	std	Z+5, r25	; 0x05
    2758:	a6 83       	std	Z+6, r26	; 0x06
    275a:	b7 83       	std	Z+7, r27	; 0x07
    275c:	8b e6       	ldi	r24, 0x6B	; 107
    275e:	92 e0       	ldi	r25, 0x02	; 2
    2760:	91 83       	std	Z+1, r25	; 0x01
    2762:	80 83       	st	Z, r24
    2764:	08 95       	ret

00002766 <_ZN7TwoWire17beginTransmissionEh>:
    2766:	81 e0       	ldi	r24, 0x01	; 1
    2768:	80 93 c9 03 	sts	0x03C9, r24	; 0x8003c9 <_ZN7TwoWire12transmittingE>
    276c:	60 93 ec 03 	sts	0x03EC, r22	; 0x8003ec <_ZN7TwoWire9txAddressE>
    2770:	10 92 cb 03 	sts	0x03CB, r1	; 0x8003cb <_ZN7TwoWire13txBufferIndexE>
    2774:	10 92 ca 03 	sts	0x03CA, r1	; 0x8003ca <_ZN7TwoWire14txBufferLengthE>
    2778:	08 95       	ret

0000277a <_ZN7TwoWire15endTransmissionEh>:
    277a:	0f 93       	push	r16
    277c:	06 2f       	mov	r16, r22
    277e:	21 e0       	ldi	r18, 0x01	; 1
    2780:	40 91 ca 03 	lds	r20, 0x03CA	; 0x8003ca <_ZN7TwoWire14txBufferLengthE>
    2784:	6c ec       	ldi	r22, 0xCC	; 204
    2786:	73 e0       	ldi	r23, 0x03	; 3
    2788:	80 91 ec 03 	lds	r24, 0x03EC	; 0x8003ec <_ZN7TwoWire9txAddressE>
    278c:	0e 94 5d 11 	call	0x22ba	; 0x22ba <twi_writeTo>
    2790:	10 92 cb 03 	sts	0x03CB, r1	; 0x8003cb <_ZN7TwoWire13txBufferIndexE>
    2794:	10 92 ca 03 	sts	0x03CA, r1	; 0x8003ca <_ZN7TwoWire14txBufferLengthE>
    2798:	10 92 c9 03 	sts	0x03C9, r1	; 0x8003c9 <_ZN7TwoWire12transmittingE>
    279c:	0f 91       	pop	r16
    279e:	08 95       	ret

000027a0 <_ZN7TwoWire11requestFromEhhmhh>:
    27a0:	4f 92       	push	r4
    27a2:	5f 92       	push	r5
    27a4:	6f 92       	push	r6
    27a6:	7f 92       	push	r7
    27a8:	af 92       	push	r10
    27aa:	bf 92       	push	r11
    27ac:	cf 92       	push	r12
    27ae:	ef 92       	push	r14
    27b0:	ff 92       	push	r15
    27b2:	0f 93       	push	r16
    27b4:	1f 93       	push	r17
    27b6:	cf 93       	push	r28
    27b8:	df 93       	push	r29
    27ba:	5c 01       	movw	r10, r24
    27bc:	f6 2e       	mov	r15, r22
    27be:	d4 2f       	mov	r29, r20
    27c0:	28 01       	movw	r4, r16
    27c2:	39 01       	movw	r6, r18
    27c4:	ee 20       	and	r14, r14
    27c6:	21 f1       	breq	.+72     	; 0x2810 <_ZN7TwoWire11requestFromEhhmhh+0x70>
    27c8:	0e 94 b3 13 	call	0x2766	; 0x2766 <_ZN7TwoWire17beginTransmissionEh>
    27cc:	ce 2d       	mov	r28, r14
    27ce:	c4 30       	cpi	r28, 0x04	; 4
    27d0:	08 f0       	brcs	.+2      	; 0x27d4 <_ZN7TwoWire11requestFromEhhmhh+0x34>
    27d2:	c3 e0       	ldi	r28, 0x03	; 3
    27d4:	c1 50       	subi	r28, 0x01	; 1
    27d6:	c0 f0       	brcs	.+48     	; 0x2808 <_ZN7TwoWire11requestFromEhhmhh+0x68>
    27d8:	28 e0       	ldi	r18, 0x08	; 8
    27da:	c2 9f       	mul	r28, r18
    27dc:	c0 01       	movw	r24, r0
    27de:	11 24       	eor	r1, r1
    27e0:	a3 01       	movw	r20, r6
    27e2:	92 01       	movw	r18, r4
    27e4:	04 c0       	rjmp	.+8      	; 0x27ee <_ZN7TwoWire11requestFromEhhmhh+0x4e>
    27e6:	56 95       	lsr	r21
    27e8:	47 95       	ror	r20
    27ea:	37 95       	ror	r19
    27ec:	27 95       	ror	r18
    27ee:	8a 95       	dec	r24
    27f0:	d2 f7       	brpl	.-12     	; 0x27e6 <_ZN7TwoWire11requestFromEhhmhh+0x46>
    27f2:	ca 01       	movw	r24, r20
    27f4:	b9 01       	movw	r22, r18
    27f6:	d5 01       	movw	r26, r10
    27f8:	ed 91       	ld	r30, X+
    27fa:	fc 91       	ld	r31, X
    27fc:	01 90       	ld	r0, Z+
    27fe:	f0 81       	ld	r31, Z
    2800:	e0 2d       	mov	r30, r0
    2802:	c5 01       	movw	r24, r10
    2804:	09 95       	icall
    2806:	e6 cf       	rjmp	.-52     	; 0x27d4 <_ZN7TwoWire11requestFromEhhmhh+0x34>
    2808:	60 e0       	ldi	r22, 0x00	; 0
    280a:	c5 01       	movw	r24, r10
    280c:	0e 94 bd 13 	call	0x277a	; 0x277a <_ZN7TwoWire15endTransmissionEh>
    2810:	4d 2f       	mov	r20, r29
    2812:	d1 32       	cpi	r29, 0x21	; 33
    2814:	08 f0       	brcs	.+2      	; 0x2818 <_ZN7TwoWire11requestFromEhhmhh+0x78>
    2816:	40 e2       	ldi	r20, 0x20	; 32
    2818:	2c 2d       	mov	r18, r12
    281a:	6f ee       	ldi	r22, 0xEF	; 239
    281c:	73 e0       	ldi	r23, 0x03	; 3
    281e:	8f 2d       	mov	r24, r15
    2820:	0e 94 15 11 	call	0x222a	; 0x222a <twi_readFrom>
    2824:	10 92 ee 03 	sts	0x03EE, r1	; 0x8003ee <_ZN7TwoWire13rxBufferIndexE>
    2828:	80 93 ed 03 	sts	0x03ED, r24	; 0x8003ed <_ZN7TwoWire14rxBufferLengthE>
    282c:	df 91       	pop	r29
    282e:	cf 91       	pop	r28
    2830:	1f 91       	pop	r17
    2832:	0f 91       	pop	r16
    2834:	ff 90       	pop	r15
    2836:	ef 90       	pop	r14
    2838:	cf 90       	pop	r12
    283a:	bf 90       	pop	r11
    283c:	af 90       	pop	r10
    283e:	7f 90       	pop	r7
    2840:	6f 90       	pop	r6
    2842:	5f 90       	pop	r5
    2844:	4f 90       	pop	r4
    2846:	08 95       	ret

00002848 <_ZN7TwoWire11requestFromEhhh>:
    2848:	cf 92       	push	r12
    284a:	ef 92       	push	r14
    284c:	0f 93       	push	r16
    284e:	1f 93       	push	r17
    2850:	c2 2e       	mov	r12, r18
    2852:	e1 2c       	mov	r14, r1
    2854:	00 e0       	ldi	r16, 0x00	; 0
    2856:	10 e0       	ldi	r17, 0x00	; 0
    2858:	98 01       	movw	r18, r16
    285a:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <_ZN7TwoWire11requestFromEhhmhh>
    285e:	1f 91       	pop	r17
    2860:	0f 91       	pop	r16
    2862:	ef 90       	pop	r14
    2864:	cf 90       	pop	r12
    2866:	08 95       	ret

00002868 <_ZN7TwoWire11requestFromEhh>:
    2868:	21 e0       	ldi	r18, 0x01	; 1
    286a:	0c 94 24 14 	jmp	0x2848	; 0x2848 <_ZN7TwoWire11requestFromEhhh>

0000286e <_ZN7TwoWire15endTransmissionEv>:
    286e:	61 e0       	ldi	r22, 0x01	; 1
    2870:	0c 94 bd 13 	jmp	0x277a	; 0x277a <_ZN7TwoWire15endTransmissionEh>

00002874 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    2874:	8d eb       	ldi	r24, 0xBD	; 189
    2876:	93 e0       	ldi	r25, 0x03	; 3
    2878:	0c 94 a3 13 	jmp	0x2746	; 0x2746 <_ZN7TwoWireC1Ev>

0000287c <_GLOBAL__sub_I_buffersize>:
// default I2C address is 0x68
// specific I2C addresses may be passed as a parameter here
// AD0 low = 0x68 (default for InvenSense evaluation board)
// AD0 high = 0x69
//MPU6050 accelgyro;
MPU6050 accelgyro(0x68); // <-- use for AD0 high
    287c:	68 e6       	ldi	r22, 0x68	; 104
    287e:	8f e0       	ldi	r24, 0x0F	; 15
    2880:	94 e0       	ldi	r25, 0x04	; 4
    2882:	0c 94 e6 0f 	jmp	0x1fcc	; 0x1fcc <_ZN7MPU6050C1Eh>

00002886 <_Z8Enc_Initv>:

#include "ENC_lib.h"

void Enc_Init()
{
    pinMode(A1,INPUT_PULLUP);
    2886:	62 e0       	ldi	r22, 0x02	; 2
    2888:	8f e0       	ldi	r24, 0x0F	; 15
    288a:	0e 94 90 1d 	call	0x3b20	; 0x3b20 <pinMode>
    pinMode(A0,INPUT_PULLUP);
    288e:	62 e0       	ldi	r22, 0x02	; 2
    2890:	8e e0       	ldi	r24, 0x0E	; 14
    2892:	0e 94 90 1d 	call	0x3b20	; 0x3b20 <pinMode>
    pinMode(13,INPUT_PULLUP);//pinMode(13,INPUT_PULLUP); //led
    2896:	62 e0       	ldi	r22, 0x02	; 2
    2898:	8d e0       	ldi	r24, 0x0D	; 13
    289a:	0e 94 90 1d 	call	0x3b20	; 0x3b20 <pinMode>
    pinMode(12,INPUT_PULLUP);
    289e:	62 e0       	ldi	r22, 0x02	; 2
    28a0:	8c e0       	ldi	r24, 0x0C	; 12
    28a2:	0e 94 90 1d 	call	0x3b20	; 0x3b20 <pinMode>

    PCICR = (1 << PCIE0) | // Enable pin change interrupt 0 {PCINT[14:8]}
            (1 << PCIE1) ; // Enable pin change interrupt 1 {PCINT[7:0]}
    28a6:	83 e0       	ldi	r24, 0x03	; 3
    28a8:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>


    PCMSK0 = (1 << PCINT4); // Pin change enable mask 5
    28ac:	ab e6       	ldi	r26, 0x6B	; 107
    28ae:	b0 e0       	ldi	r27, 0x00	; 0
    28b0:	80 e1       	ldi	r24, 0x10	; 16
    28b2:	8c 93       	st	X, r24
    PCMSK1 = (1 << PCINT9); // Pin change enable mask 9
    28b4:	ec e6       	ldi	r30, 0x6C	; 108
    28b6:	f0 e0       	ldi	r31, 0x00	; 0
    28b8:	82 e0       	ldi	r24, 0x02	; 2
    28ba:	80 83       	st	Z, r24
#ifdef ENC__USE_DOUBLE_INT
    PCMSK0 |= (1 << PCINT5); // Pin change enable mask 5
    28bc:	8c 91       	ld	r24, X
    28be:	80 62       	ori	r24, 0x20	; 32
    28c0:	8c 93       	st	X, r24
    PCMSK1 |= (1 << PCINT8); // Pin change enable mask 9
    28c2:	80 81       	ld	r24, Z
    28c4:	81 60       	ori	r24, 0x01	; 1
    28c6:	80 83       	st	Z, r24
    28c8:	08 95       	ret

000028ca <__vector_3>:
uint8_t Mot0_tmpState;



ISR(PCINT0_vect)
{
    28ca:	1f 92       	push	r1
    28cc:	0f 92       	push	r0
    28ce:	0f b6       	in	r0, 0x3f	; 63
    28d0:	0f 92       	push	r0
    28d2:	11 24       	eor	r1, r1
    28d4:	2f 93       	push	r18
    28d6:	8f 93       	push	r24
    28d8:	9f 93       	push	r25
    28da:	af 93       	push	r26
    28dc:	bf 93       	push	r27
    28de:	ef 93       	push	r30
    28e0:	ff 93       	push	r31
    Mot1_p1Val = bitRead(PINB,5);
    28e2:	23 b1       	in	r18, 0x03	; 3
    28e4:	25 fb       	bst	r18, 5
    28e6:	22 27       	eor	r18, r18
    28e8:	20 f9       	bld	r18, 0
    28ea:	20 93 24 04 	sts	0x0424, r18	; 0x800424 <Mot1_p1Val>
    Mot1_p2Val = bitRead(PINB,4);
    28ee:	83 b1       	in	r24, 0x03	; 3
    28f0:	82 95       	swap	r24
    28f2:	81 70       	andi	r24, 0x01	; 1
    28f4:	80 93 23 04 	sts	0x0423, r24	; 0x800423 <Mot1_p2Val>
    Mot1_tmpState = Mot1_state & 3;
    28f8:	90 91 25 04 	lds	r25, 0x0425	; 0x800425 <Mot1_state>
    28fc:	93 70       	andi	r25, 0x03	; 3

    if (Mot1_p1Val) Mot1_tmpState |= 8;
    28fe:	21 11       	cpse	r18, r1
    2900:	98 60       	ori	r25, 0x08	; 8
    2902:	90 93 22 04 	sts	0x0422, r25	; 0x800422 <Mot1_tmpState>
    if (Mot1_p2Val) Mot1_tmpState |= 4;
    2906:	88 23       	and	r24, r24
    2908:	29 f0       	breq	.+10     	; 0x2914 <__vector_3+0x4a>
    290a:	80 91 22 04 	lds	r24, 0x0422	; 0x800422 <Mot1_tmpState>
    290e:	84 60       	ori	r24, 0x04	; 4
    2910:	80 93 22 04 	sts	0x0422, r24	; 0x800422 <Mot1_tmpState>

    Mot1_state = (Mot1_tmpState >> 2);
    2914:	e0 91 22 04 	lds	r30, 0x0422	; 0x800422 <Mot1_tmpState>
    2918:	8e 2f       	mov	r24, r30
    291a:	90 e0       	ldi	r25, 0x00	; 0
    291c:	95 95       	asr	r25
    291e:	87 95       	ror	r24
    2920:	95 95       	asr	r25
    2922:	87 95       	ror	r24
    2924:	80 93 25 04 	sts	0x0425, r24	; 0x800425 <Mot1_state>
    switch (Mot1_tmpState)
    2928:	8e 2f       	mov	r24, r30
    292a:	90 e0       	ldi	r25, 0x00	; 0
    292c:	fc 01       	movw	r30, r24
    292e:	31 97       	sbiw	r30, 0x01	; 1
    2930:	ee 30       	cpi	r30, 0x0E	; 14
    2932:	f1 05       	cpc	r31, r1
    2934:	d8 f5       	brcc	.+118    	; 0x29ac <__vector_3+0xe2>
    2936:	ec 5c       	subi	r30, 0xCC	; 204
    2938:	ff 4f       	sbci	r31, 0xFF	; 255
    293a:	0c 94 63 1e 	jmp	0x3cc6	; 0x3cc6 <__tablejump2__>
        {
        case 1:
        case 7:
        case 8:
        case 14:
            Mot1_Enc++;
    293e:	80 91 26 04 	lds	r24, 0x0426	; 0x800426 <Mot1_Enc>
    2942:	90 91 27 04 	lds	r25, 0x0427	; 0x800427 <Mot1_Enc+0x1>
    2946:	a0 91 28 04 	lds	r26, 0x0428	; 0x800428 <Mot1_Enc+0x2>
    294a:	b0 91 29 04 	lds	r27, 0x0429	; 0x800429 <Mot1_Enc+0x3>
    294e:	01 96       	adiw	r24, 0x01	; 1
    2950:	a1 1d       	adc	r26, r1
    2952:	b1 1d       	adc	r27, r1
    2954:	23 c0       	rjmp	.+70     	; 0x299c <__vector_3+0xd2>
            return;
        case 2:
        case 4:
        case 11:
        case 13:
            Mot1_Enc--;
    2956:	80 91 26 04 	lds	r24, 0x0426	; 0x800426 <Mot1_Enc>
    295a:	90 91 27 04 	lds	r25, 0x0427	; 0x800427 <Mot1_Enc+0x1>
    295e:	a0 91 28 04 	lds	r26, 0x0428	; 0x800428 <Mot1_Enc+0x2>
    2962:	b0 91 29 04 	lds	r27, 0x0429	; 0x800429 <Mot1_Enc+0x3>
    2966:	01 97       	sbiw	r24, 0x01	; 1
    2968:	a1 09       	sbc	r26, r1
    296a:	b1 09       	sbc	r27, r1
    296c:	17 c0       	rjmp	.+46     	; 0x299c <__vector_3+0xd2>
            return;
        case 3:
        case 12:
            Mot1_Enc += 2;
    296e:	80 91 26 04 	lds	r24, 0x0426	; 0x800426 <Mot1_Enc>
    2972:	90 91 27 04 	lds	r25, 0x0427	; 0x800427 <Mot1_Enc+0x1>
    2976:	a0 91 28 04 	lds	r26, 0x0428	; 0x800428 <Mot1_Enc+0x2>
    297a:	b0 91 29 04 	lds	r27, 0x0429	; 0x800429 <Mot1_Enc+0x3>
    297e:	02 96       	adiw	r24, 0x02	; 2
    2980:	a1 1d       	adc	r26, r1
    2982:	b1 1d       	adc	r27, r1
    2984:	0b c0       	rjmp	.+22     	; 0x299c <__vector_3+0xd2>
            return;
        case 6:
        case 9:
            Mot1_Enc -= 2;
    2986:	80 91 26 04 	lds	r24, 0x0426	; 0x800426 <Mot1_Enc>
    298a:	90 91 27 04 	lds	r25, 0x0427	; 0x800427 <Mot1_Enc+0x1>
    298e:	a0 91 28 04 	lds	r26, 0x0428	; 0x800428 <Mot1_Enc+0x2>
    2992:	b0 91 29 04 	lds	r27, 0x0429	; 0x800429 <Mot1_Enc+0x3>
    2996:	02 97       	sbiw	r24, 0x02	; 2
    2998:	a1 09       	sbc	r26, r1
    299a:	b1 09       	sbc	r27, r1
    299c:	80 93 26 04 	sts	0x0426, r24	; 0x800426 <Mot1_Enc>
    29a0:	90 93 27 04 	sts	0x0427, r25	; 0x800427 <Mot1_Enc+0x1>
    29a4:	a0 93 28 04 	sts	0x0428, r26	; 0x800428 <Mot1_Enc+0x2>
    29a8:	b0 93 29 04 	sts	0x0429, r27	; 0x800429 <Mot1_Enc+0x3>
            return;
        }
}
    29ac:	ff 91       	pop	r31
    29ae:	ef 91       	pop	r30
    29b0:	bf 91       	pop	r27
    29b2:	af 91       	pop	r26
    29b4:	9f 91       	pop	r25
    29b6:	8f 91       	pop	r24
    29b8:	2f 91       	pop	r18
    29ba:	0f 90       	pop	r0
    29bc:	0f be       	out	0x3f, r0	; 63
    29be:	0f 90       	pop	r0
    29c0:	1f 90       	pop	r1
    29c2:	18 95       	reti

000029c4 <__vector_4>:

ISR(PCINT1_vect)
{
    29c4:	1f 92       	push	r1
    29c6:	0f 92       	push	r0
    29c8:	0f b6       	in	r0, 0x3f	; 63
    29ca:	0f 92       	push	r0
    29cc:	11 24       	eor	r1, r1
    29ce:	2f 93       	push	r18
    29d0:	8f 93       	push	r24
    29d2:	9f 93       	push	r25
    29d4:	af 93       	push	r26
    29d6:	bf 93       	push	r27
    29d8:	ef 93       	push	r30
    29da:	ff 93       	push	r31
    Mot0_p1Val = bitRead(PINC,1);
    29dc:	96 b1       	in	r25, 0x06	; 6
    29de:	96 95       	lsr	r25
    29e0:	91 70       	andi	r25, 0x01	; 1
    29e2:	90 93 20 04 	sts	0x0420, r25	; 0x800420 <Mot0_p1Val>
    Mot0_p2Val = bitRead(PINC,0);
    29e6:	26 b1       	in	r18, 0x06	; 6
    29e8:	21 70       	andi	r18, 0x01	; 1
    29ea:	20 93 1f 04 	sts	0x041F, r18	; 0x80041f <Mot0_p2Val>
    Mot0_tmpState = Mot0_state & 3;
    29ee:	80 91 21 04 	lds	r24, 0x0421	; 0x800421 <Mot0_state>
    29f2:	83 70       	andi	r24, 0x03	; 3

    if (Mot0_p1Val) Mot0_tmpState |= 4;
    29f4:	91 11       	cpse	r25, r1
    29f6:	84 60       	ori	r24, 0x04	; 4
    29f8:	80 93 1e 04 	sts	0x041E, r24	; 0x80041e <Mot0_tmpState>
    if (Mot0_p2Val) Mot0_tmpState |= 8;
    29fc:	22 23       	and	r18, r18
    29fe:	29 f0       	breq	.+10     	; 0x2a0a <__vector_4+0x46>
    2a00:	80 91 1e 04 	lds	r24, 0x041E	; 0x80041e <Mot0_tmpState>
    2a04:	88 60       	ori	r24, 0x08	; 8
    2a06:	80 93 1e 04 	sts	0x041E, r24	; 0x80041e <Mot0_tmpState>

    Mot0_state = (Mot0_tmpState >> 2);
    2a0a:	e0 91 1e 04 	lds	r30, 0x041E	; 0x80041e <Mot0_tmpState>
    2a0e:	8e 2f       	mov	r24, r30
    2a10:	90 e0       	ldi	r25, 0x00	; 0
    2a12:	95 95       	asr	r25
    2a14:	87 95       	ror	r24
    2a16:	95 95       	asr	r25
    2a18:	87 95       	ror	r24
    2a1a:	80 93 21 04 	sts	0x0421, r24	; 0x800421 <Mot0_state>
    switch (Mot0_tmpState)
    2a1e:	8e 2f       	mov	r24, r30
    2a20:	90 e0       	ldi	r25, 0x00	; 0
    2a22:	fc 01       	movw	r30, r24
    2a24:	31 97       	sbiw	r30, 0x01	; 1
    2a26:	ee 30       	cpi	r30, 0x0E	; 14
    2a28:	f1 05       	cpc	r31, r1
    2a2a:	d8 f5       	brcc	.+118    	; 0x2aa2 <__vector_4+0xde>
    2a2c:	ee 5b       	subi	r30, 0xBE	; 190
    2a2e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a30:	0c 94 63 1e 	jmp	0x3cc6	; 0x3cc6 <__tablejump2__>
        {
        case 1:
        case 7:
        case 8:
        case 14:
            Mot0_Enc++;
    2a34:	80 91 2a 04 	lds	r24, 0x042A	; 0x80042a <Mot0_Enc>
    2a38:	90 91 2b 04 	lds	r25, 0x042B	; 0x80042b <Mot0_Enc+0x1>
    2a3c:	a0 91 2c 04 	lds	r26, 0x042C	; 0x80042c <Mot0_Enc+0x2>
    2a40:	b0 91 2d 04 	lds	r27, 0x042D	; 0x80042d <Mot0_Enc+0x3>
    2a44:	01 96       	adiw	r24, 0x01	; 1
    2a46:	a1 1d       	adc	r26, r1
    2a48:	b1 1d       	adc	r27, r1
    2a4a:	23 c0       	rjmp	.+70     	; 0x2a92 <__vector_4+0xce>
            return;
        case 2:
        case 4:
        case 11:
        case 13:
            Mot0_Enc--;
    2a4c:	80 91 2a 04 	lds	r24, 0x042A	; 0x80042a <Mot0_Enc>
    2a50:	90 91 2b 04 	lds	r25, 0x042B	; 0x80042b <Mot0_Enc+0x1>
    2a54:	a0 91 2c 04 	lds	r26, 0x042C	; 0x80042c <Mot0_Enc+0x2>
    2a58:	b0 91 2d 04 	lds	r27, 0x042D	; 0x80042d <Mot0_Enc+0x3>
    2a5c:	01 97       	sbiw	r24, 0x01	; 1
    2a5e:	a1 09       	sbc	r26, r1
    2a60:	b1 09       	sbc	r27, r1
    2a62:	17 c0       	rjmp	.+46     	; 0x2a92 <__vector_4+0xce>
            return;
        case 3:
        case 12:
            Mot0_Enc += 2;
    2a64:	80 91 2a 04 	lds	r24, 0x042A	; 0x80042a <Mot0_Enc>
    2a68:	90 91 2b 04 	lds	r25, 0x042B	; 0x80042b <Mot0_Enc+0x1>
    2a6c:	a0 91 2c 04 	lds	r26, 0x042C	; 0x80042c <Mot0_Enc+0x2>
    2a70:	b0 91 2d 04 	lds	r27, 0x042D	; 0x80042d <Mot0_Enc+0x3>
    2a74:	02 96       	adiw	r24, 0x02	; 2
    2a76:	a1 1d       	adc	r26, r1
    2a78:	b1 1d       	adc	r27, r1
    2a7a:	0b c0       	rjmp	.+22     	; 0x2a92 <__vector_4+0xce>
            return;
        case 6:
        case 9:
            Mot0_Enc -= 2;
    2a7c:	80 91 2a 04 	lds	r24, 0x042A	; 0x80042a <Mot0_Enc>
    2a80:	90 91 2b 04 	lds	r25, 0x042B	; 0x80042b <Mot0_Enc+0x1>
    2a84:	a0 91 2c 04 	lds	r26, 0x042C	; 0x80042c <Mot0_Enc+0x2>
    2a88:	b0 91 2d 04 	lds	r27, 0x042D	; 0x80042d <Mot0_Enc+0x3>
    2a8c:	02 97       	sbiw	r24, 0x02	; 2
    2a8e:	a1 09       	sbc	r26, r1
    2a90:	b1 09       	sbc	r27, r1
    2a92:	80 93 2a 04 	sts	0x042A, r24	; 0x80042a <Mot0_Enc>
    2a96:	90 93 2b 04 	sts	0x042B, r25	; 0x80042b <Mot0_Enc+0x1>
    2a9a:	a0 93 2c 04 	sts	0x042C, r26	; 0x80042c <Mot0_Enc+0x2>
    2a9e:	b0 93 2d 04 	sts	0x042D, r27	; 0x80042d <Mot0_Enc+0x3>
            return;
        }
}
    2aa2:	ff 91       	pop	r31
    2aa4:	ef 91       	pop	r30
    2aa6:	bf 91       	pop	r27
    2aa8:	af 91       	pop	r26
    2aaa:	9f 91       	pop	r25
    2aac:	8f 91       	pop	r24
    2aae:	2f 91       	pop	r18
    2ab0:	0f 90       	pop	r0
    2ab2:	0f be       	out	0x3f, r0	; 63
    2ab4:	0f 90       	pop	r0
    2ab6:	1f 90       	pop	r1
    2ab8:	18 95       	reti

00002aba <_Z15Motor0_SetSpeedhh.part.0>:
    PORTB &= ~(1<<PORTB3);
}


#ifdef MOT__USE_SLOW_DECAY
void Motor0_SetSpeed(uint8_t dir,uint8_t speed)
    2aba:	cf 93       	push	r28
    2abc:	c8 2f       	mov	r28, r24
            PWM_0_disable_output_ch0();
            PORTD |= (1<<PORTD6);
        }
    else if (dir==REV)
        {
            PWM_0_enable_output_ch0();
    2abe:	0e 94 f8 15 	call	0x2bf0	; 0x2bf0 <PWM_0_enable_output_ch0>
            PWM_0_load_duty_cycle_ch0(255-speed);
    2ac2:	8c 2f       	mov	r24, r28
    2ac4:	80 95       	com	r24
    2ac6:	0e 94 08 16 	call	0x2c10	; 0x2c10 <PWM_0_load_duty_cycle_ch0>

            PWM_0_disable_output_ch1();
    2aca:	0e 94 04 16 	call	0x2c08	; 0x2c08 <PWM_0_disable_output_ch1>
            PORTD |= (1<<PORTD5);
    2ace:	5d 9a       	sbi	0x0b, 5	; 11
        }
}
    2ad0:	cf 91       	pop	r28
    2ad2:	08 95       	ret

00002ad4 <_Z15Motor1_SetSpeedhh.part.1>:
        }
}
#endif

#ifdef MOT__USE_SLOW_DECAY
void Motor1_SetSpeed(uint8_t dir,uint8_t speed)
    2ad4:	cf 93       	push	r28
    2ad6:	c8 2f       	mov	r28, r24
            PWM_1_disable_output_ch0();
            PORTB |= (1<<PORTB3);
        }
    else if (dir==REV)
        {
            PWM_1_enable_output_ch0();
    2ad8:	0e 94 1f 16 	call	0x2c3e	; 0x2c3e <PWM_1_enable_output_ch0>
            PWM_1_load_duty_cycle_ch0(255-speed);
    2adc:	8c 2f       	mov	r24, r28
    2ade:	80 95       	com	r24
    2ae0:	0e 94 37 16 	call	0x2c6e	; 0x2c6e <PWM_1_load_duty_cycle_ch0>

            PWM_1_disable_output_ch1();
    2ae4:	0e 94 31 16 	call	0x2c62	; 0x2c62 <PWM_1_disable_output_ch1>
            PORTD |= (1<<PORTD3);
    2ae8:	5b 9a       	sbi	0x0b, 3	; 11
        }
}
    2aea:	cf 91       	pop	r28
    2aec:	08 95       	ret

00002aee <_Z11Motor0_Stopv>:
    Motor1_Stop();
}

void Motor0_Stop()
{
    PWM_0_disable_output_ch1();
    2aee:	0e 94 04 16 	call	0x2c08	; 0x2c08 <PWM_0_disable_output_ch1>
    PWM_0_disable_output_ch0();
    2af2:	0e 94 fc 15 	call	0x2bf8	; 0x2bf8 <PWM_0_disable_output_ch0>
    PORTD &= ~(1<<PORTD5);
    2af6:	5d 98       	cbi	0x0b, 5	; 11
    PORTD &= ~(1<<PORTD6);
    2af8:	5e 98       	cbi	0x0b, 6	; 11
    2afa:	08 95       	ret

00002afc <_Z9Mot0_Initv>:
#include "pwm_basic.h"


void Mot0_Init(void)
{
    PWM_0_init();
    2afc:	0e 94 e8 15 	call	0x2bd0	; 0x2bd0 <PWM_0_init>

    pinMode(PD5Pin,OUTPUT);
    2b00:	61 e0       	ldi	r22, 0x01	; 1
    2b02:	85 e0       	ldi	r24, 0x05	; 5
    2b04:	0e 94 90 1d 	call	0x3b20	; 0x3b20 <pinMode>
    pinMode(PD6Pin,OUTPUT);
    2b08:	61 e0       	ldi	r22, 0x01	; 1
    2b0a:	86 e0       	ldi	r24, 0x06	; 6
    2b0c:	0e 94 90 1d 	call	0x3b20	; 0x3b20 <pinMode>
    Motor0_Stop();
    2b10:	0c 94 77 15 	jmp	0x2aee	; 0x2aee <_Z11Motor0_Stopv>

00002b14 <_Z11Motor1_Stopv>:
    PORTD &= ~(1<<PORTD6);
}

void Motor1_Stop()
{
    PWM_1_disable_output_ch1();
    2b14:	0e 94 31 16 	call	0x2c62	; 0x2c62 <PWM_1_disable_output_ch1>
    PWM_1_disable_output_ch0();
    2b18:	0e 94 25 16 	call	0x2c4a	; 0x2c4a <PWM_1_disable_output_ch0>
    PORTD &= ~(1<<PORTD3);
    2b1c:	5b 98       	cbi	0x0b, 3	; 11
    PORTB &= ~(1<<PORTB3);
    2b1e:	2b 98       	cbi	0x05, 3	; 5
    2b20:	08 95       	ret

00002b22 <_Z9Mot1_Initv>:
    Motor0_Stop();
}

void Mot1_Init(void)
{
    PWM_1_init();
    2b22:	0e 94 0c 16 	call	0x2c18	; 0x2c18 <PWM_1_init>

    pinMode(PB3Pin,OUTPUT);
    2b26:	61 e0       	ldi	r22, 0x01	; 1
    2b28:	8b e0       	ldi	r24, 0x0B	; 11
    2b2a:	0e 94 90 1d 	call	0x3b20	; 0x3b20 <pinMode>
    pinMode(PD3Pin,OUTPUT);
    2b2e:	61 e0       	ldi	r22, 0x01	; 1
    2b30:	83 e0       	ldi	r24, 0x03	; 3
    2b32:	0e 94 90 1d 	call	0x3b20	; 0x3b20 <pinMode>
    Motor1_Stop();
    2b36:	0c 94 8a 15 	jmp	0x2b14	; 0x2b14 <_Z11Motor1_Stopv>

00002b3a <_Z15Motor0_SetSpeedhh>:
}


#ifdef MOT__USE_SLOW_DECAY
void Motor0_SetSpeed(uint8_t dir,uint8_t speed)
{
    2b3a:	cf 93       	push	r28
    if (dir==FWD)
    2b3c:	81 11       	cpse	r24, r1
    2b3e:	0b c0       	rjmp	.+22     	; 0x2b56 <_Z15Motor0_SetSpeedhh+0x1c>
    2b40:	c6 2f       	mov	r28, r22
        {
            PWM_0_enable_output_ch1();
    2b42:	0e 94 00 16 	call	0x2c00	; 0x2c00 <PWM_0_enable_output_ch1>
            PWM_0_load_duty_cycle_ch1(255-speed);
    2b46:	8c 2f       	mov	r24, r28
    2b48:	80 95       	com	r24
    2b4a:	0e 94 0a 16 	call	0x2c14	; 0x2c14 <PWM_0_load_duty_cycle_ch1>

            PWM_0_disable_output_ch0();
    2b4e:	0e 94 fc 15 	call	0x2bf8	; 0x2bf8 <PWM_0_disable_output_ch0>
            PORTD |= (1<<PORTD6);
    2b52:	5e 9a       	sbi	0x0b, 6	; 11
    2b54:	06 c0       	rjmp	.+12     	; 0x2b62 <_Z15Motor0_SetSpeedhh+0x28>
        }
    else if (dir==REV)
    2b56:	81 30       	cpi	r24, 0x01	; 1
    2b58:	21 f4       	brne	.+8      	; 0x2b62 <_Z15Motor0_SetSpeedhh+0x28>
    2b5a:	86 2f       	mov	r24, r22
            PWM_0_load_duty_cycle_ch0(255-speed);

            PWM_0_disable_output_ch1();
            PORTD |= (1<<PORTD5);
        }
}
    2b5c:	cf 91       	pop	r28
    2b5e:	0c 94 5d 15 	jmp	0x2aba	; 0x2aba <_Z15Motor0_SetSpeedhh.part.0>
    2b62:	cf 91       	pop	r28
    2b64:	08 95       	ret

00002b66 <_Z15Motor1_SetSpeedhh>:
}
#endif

#ifdef MOT__USE_SLOW_DECAY
void Motor1_SetSpeed(uint8_t dir,uint8_t speed)
{
    2b66:	cf 93       	push	r28
    if (dir==FWD)
    2b68:	81 11       	cpse	r24, r1
    2b6a:	0b c0       	rjmp	.+22     	; 0x2b82 <_Z15Motor1_SetSpeedhh+0x1c>
    2b6c:	c6 2f       	mov	r28, r22
        {
            PWM_1_enable_output_ch1();
    2b6e:	0e 94 2b 16 	call	0x2c56	; 0x2c56 <PWM_1_enable_output_ch1>
            PWM_1_load_duty_cycle_ch1(255-speed);
    2b72:	8c 2f       	mov	r24, r28
    2b74:	80 95       	com	r24
    2b76:	0e 94 3a 16 	call	0x2c74	; 0x2c74 <PWM_1_load_duty_cycle_ch1>

            PWM_1_disable_output_ch0();
    2b7a:	0e 94 25 16 	call	0x2c4a	; 0x2c4a <PWM_1_disable_output_ch0>
            PORTB |= (1<<PORTB3);
    2b7e:	2b 9a       	sbi	0x05, 3	; 5
    2b80:	06 c0       	rjmp	.+12     	; 0x2b8e <_Z15Motor1_SetSpeedhh+0x28>
        }
    else if (dir==REV)
    2b82:	81 30       	cpi	r24, 0x01	; 1
    2b84:	21 f4       	brne	.+8      	; 0x2b8e <_Z15Motor1_SetSpeedhh+0x28>
    2b86:	86 2f       	mov	r24, r22
            PWM_1_load_duty_cycle_ch0(255-speed);

            PWM_1_disable_output_ch1();
            PORTD |= (1<<PORTD3);
        }
}
    2b88:	cf 91       	pop	r28
    2b8a:	0c 94 6a 15 	jmp	0x2ad4	; 0x2ad4 <_Z15Motor1_SetSpeedhh.part.1>
    2b8e:	cf 91       	pop	r28
    2b90:	08 95       	ret

00002b92 <_Z15Motors_SetSpeedii>:
        }
}
#endif

void Motors_SetSpeed(int leftMotorSpeed, int rightMotorSpeed)
{
    2b92:	cf 93       	push	r28
    2b94:	df 93       	push	r29
    2b96:	eb 01       	movw	r28, r22

    if(leftMotorSpeed >= 0)
    2b98:	97 fd       	sbrc	r25, 7
    2b9a:	03 c0       	rjmp	.+6      	; 0x2ba2 <_Z15Motors_SetSpeedii+0x10>
    2b9c:	0e 94 5d 15 	call	0x2aba	; 0x2aba <_Z15Motor0_SetSpeedhh.part.0>
    2ba0:	07 c0       	rjmp	.+14     	; 0x2bb0 <_Z15Motors_SetSpeedii+0x1e>
        {
            Motor0_SetSpeed(REV,leftMotorSpeed);
        }
    else
        {
            Motor0_SetSpeed(FWD, abs(leftMotorSpeed));
    2ba2:	66 27       	eor	r22, r22
    2ba4:	77 27       	eor	r23, r23
    2ba6:	68 1b       	sub	r22, r24
    2ba8:	79 0b       	sbc	r23, r25
    2baa:	80 e0       	ldi	r24, 0x00	; 0
    2bac:	0e 94 9d 15 	call	0x2b3a	; 0x2b3a <_Z15Motor0_SetSpeedhh>
        }

    if(rightMotorSpeed >= 0)
    2bb0:	d7 fd       	sbrc	r29, 7
    2bb2:	05 c0       	rjmp	.+10     	; 0x2bbe <_Z15Motors_SetSpeedii+0x2c>
    2bb4:	8c 2f       	mov	r24, r28
        }
    else
        {
            Motor1_SetSpeed(FWD,abs(rightMotorSpeed));
        }
}
    2bb6:	df 91       	pop	r29
    2bb8:	cf 91       	pop	r28
    2bba:	0c 94 6a 15 	jmp	0x2ad4	; 0x2ad4 <_Z15Motor1_SetSpeedhh.part.1>
        {
            Motor1_SetSpeed(REV,rightMotorSpeed);
        }
    else
        {
            Motor1_SetSpeed(FWD,abs(rightMotorSpeed));
    2bbe:	66 27       	eor	r22, r22
    2bc0:	77 27       	eor	r23, r23
    2bc2:	6c 1b       	sub	r22, r28
    2bc4:	7d 0b       	sbc	r23, r29
    2bc6:	80 e0       	ldi	r24, 0x00	; 0
        }
}
    2bc8:	df 91       	pop	r29
    2bca:	cf 91       	pop	r28
        {
            Motor1_SetSpeed(REV,rightMotorSpeed);
        }
    else
        {
            Motor1_SetSpeed(FWD,abs(rightMotorSpeed));
    2bcc:	0c 94 b3 15 	jmp	0x2b66	; 0x2b66 <_Z15Motor1_SetSpeedhh>

00002bd0 <PWM_0_init>:
    TCCR2A &= ~((1 << COM2B1) | (1 << COM2B0));
}

inline void PWM_1_load_counter(PWM_1_register_t counter_value)
{
    TCNT2 = counter_value;
    2bd0:	e4 e6       	ldi	r30, 0x64	; 100
    2bd2:	f0 e0       	ldi	r31, 0x00	; 0
    2bd4:	80 81       	ld	r24, Z
    2bd6:	8f 7d       	andi	r24, 0xDF	; 223
    2bd8:	80 83       	st	Z, r24
    2bda:	83 ea       	ldi	r24, 0xA3	; 163
    2bdc:	84 bd       	out	0x24, r24	; 36
    2bde:	82 e0       	ldi	r24, 0x02	; 2
    2be0:	85 bd       	out	0x25, r24	; 37
    2be2:	81 e0       	ldi	r24, 0x01	; 1
    2be4:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
    2be8:	17 bc       	out	0x27, r1	; 39
    2bea:	18 bc       	out	0x28, r1	; 40
    2bec:	80 e0       	ldi	r24, 0x00	; 0
    2bee:	08 95       	ret

00002bf0 <PWM_0_enable_output_ch0>:
    2bf0:	84 b5       	in	r24, 0x24	; 36
    2bf2:	80 68       	ori	r24, 0x80	; 128
    2bf4:	84 bd       	out	0x24, r24	; 36
    2bf6:	08 95       	ret

00002bf8 <PWM_0_disable_output_ch0>:
    2bf8:	84 b5       	in	r24, 0x24	; 36
    2bfa:	8f 73       	andi	r24, 0x3F	; 63
    2bfc:	84 bd       	out	0x24, r24	; 36
    2bfe:	08 95       	ret

00002c00 <PWM_0_enable_output_ch1>:
    2c00:	84 b5       	in	r24, 0x24	; 36
    2c02:	80 62       	ori	r24, 0x20	; 32
    2c04:	84 bd       	out	0x24, r24	; 36
    2c06:	08 95       	ret

00002c08 <PWM_0_disable_output_ch1>:
    2c08:	84 b5       	in	r24, 0x24	; 36
    2c0a:	8f 7c       	andi	r24, 0xCF	; 207
    2c0c:	84 bd       	out	0x24, r24	; 36
    2c0e:	08 95       	ret

00002c10 <PWM_0_load_duty_cycle_ch0>:
    2c10:	87 bd       	out	0x27, r24	; 39
    2c12:	08 95       	ret

00002c14 <PWM_0_load_duty_cycle_ch1>:
    2c14:	88 bd       	out	0x28, r24	; 40
    2c16:	08 95       	ret

00002c18 <PWM_1_init>:
    2c18:	e4 e6       	ldi	r30, 0x64	; 100
    2c1a:	f0 e0       	ldi	r31, 0x00	; 0
    2c1c:	80 81       	ld	r24, Z
    2c1e:	8f 7b       	andi	r24, 0xBF	; 191
    2c20:	80 83       	st	Z, r24
    2c22:	83 ea       	ldi	r24, 0xA3	; 163
    2c24:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    2c28:	82 e0       	ldi	r24, 0x02	; 2
    2c2a:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
    2c2e:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
    2c32:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
    2c36:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
    2c3a:	80 e0       	ldi	r24, 0x00	; 0
    2c3c:	08 95       	ret

00002c3e <PWM_1_enable_output_ch0>:
    2c3e:	e0 eb       	ldi	r30, 0xB0	; 176
    2c40:	f0 e0       	ldi	r31, 0x00	; 0
    2c42:	80 81       	ld	r24, Z
    2c44:	80 68       	ori	r24, 0x80	; 128
    2c46:	80 83       	st	Z, r24
    2c48:	08 95       	ret

00002c4a <PWM_1_disable_output_ch0>:
    2c4a:	e0 eb       	ldi	r30, 0xB0	; 176
    2c4c:	f0 e0       	ldi	r31, 0x00	; 0
    2c4e:	80 81       	ld	r24, Z
    2c50:	8f 73       	andi	r24, 0x3F	; 63
    2c52:	80 83       	st	Z, r24
    2c54:	08 95       	ret

00002c56 <PWM_1_enable_output_ch1>:
    2c56:	e0 eb       	ldi	r30, 0xB0	; 176
    2c58:	f0 e0       	ldi	r31, 0x00	; 0
    2c5a:	80 81       	ld	r24, Z
    2c5c:	80 62       	ori	r24, 0x20	; 32
    2c5e:	80 83       	st	Z, r24
    2c60:	08 95       	ret

00002c62 <PWM_1_disable_output_ch1>:
    2c62:	e0 eb       	ldi	r30, 0xB0	; 176
    2c64:	f0 e0       	ldi	r31, 0x00	; 0
    2c66:	80 81       	ld	r24, Z
    2c68:	8f 7c       	andi	r24, 0xCF	; 207
    2c6a:	80 83       	st	Z, r24
    2c6c:	08 95       	ret

00002c6e <PWM_1_load_duty_cycle_ch0>:
}

inline void PWM_1_load_duty_cycle_ch0(PWM_1_register_t duty_value)
{
    OCR2A = duty_value;
    2c6e:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
    2c72:	08 95       	ret

00002c74 <PWM_1_load_duty_cycle_ch1>:
}

inline void PWM_1_load_duty_cycle_ch1(PWM_1_register_t duty_value)
{
    OCR2B = duty_value;
    2c74:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
    2c78:	08 95       	ret

00002c7a <__subsf3>:
    2c7a:	50 58       	subi	r21, 0x80	; 128

00002c7c <__addsf3>:
    2c7c:	bb 27       	eor	r27, r27
    2c7e:	aa 27       	eor	r26, r26
    2c80:	0e 94 55 16 	call	0x2caa	; 0x2caa <__addsf3x>
    2c84:	0c 94 68 18 	jmp	0x30d0	; 0x30d0 <__fp_round>
    2c88:	0e 94 5a 18 	call	0x30b4	; 0x30b4 <__fp_pscA>
    2c8c:	38 f0       	brcs	.+14     	; 0x2c9c <__addsf3+0x20>
    2c8e:	0e 94 61 18 	call	0x30c2	; 0x30c2 <__fp_pscB>
    2c92:	20 f0       	brcs	.+8      	; 0x2c9c <__addsf3+0x20>
    2c94:	39 f4       	brne	.+14     	; 0x2ca4 <__addsf3+0x28>
    2c96:	9f 3f       	cpi	r25, 0xFF	; 255
    2c98:	19 f4       	brne	.+6      	; 0x2ca0 <__addsf3+0x24>
    2c9a:	26 f4       	brtc	.+8      	; 0x2ca4 <__addsf3+0x28>
    2c9c:	0c 94 30 18 	jmp	0x3060	; 0x3060 <__fp_nan>
    2ca0:	0e f4       	brtc	.+2      	; 0x2ca4 <__addsf3+0x28>
    2ca2:	e0 95       	com	r30
    2ca4:	e7 fb       	bst	r30, 7
    2ca6:	0c 94 2a 18 	jmp	0x3054	; 0x3054 <__fp_inf>

00002caa <__addsf3x>:
    2caa:	e9 2f       	mov	r30, r25
    2cac:	0e 94 79 18 	call	0x30f2	; 0x30f2 <__fp_split3>
    2cb0:	58 f3       	brcs	.-42     	; 0x2c88 <__addsf3+0xc>
    2cb2:	ba 17       	cp	r27, r26
    2cb4:	62 07       	cpc	r22, r18
    2cb6:	73 07       	cpc	r23, r19
    2cb8:	84 07       	cpc	r24, r20
    2cba:	95 07       	cpc	r25, r21
    2cbc:	20 f0       	brcs	.+8      	; 0x2cc6 <__addsf3x+0x1c>
    2cbe:	79 f4       	brne	.+30     	; 0x2cde <__addsf3x+0x34>
    2cc0:	a6 f5       	brtc	.+104    	; 0x2d2a <__addsf3x+0x80>
    2cc2:	0c 94 9b 18 	jmp	0x3136	; 0x3136 <__fp_zero>
    2cc6:	0e f4       	brtc	.+2      	; 0x2cca <__addsf3x+0x20>
    2cc8:	e0 95       	com	r30
    2cca:	0b 2e       	mov	r0, r27
    2ccc:	ba 2f       	mov	r27, r26
    2cce:	a0 2d       	mov	r26, r0
    2cd0:	0b 01       	movw	r0, r22
    2cd2:	b9 01       	movw	r22, r18
    2cd4:	90 01       	movw	r18, r0
    2cd6:	0c 01       	movw	r0, r24
    2cd8:	ca 01       	movw	r24, r20
    2cda:	a0 01       	movw	r20, r0
    2cdc:	11 24       	eor	r1, r1
    2cde:	ff 27       	eor	r31, r31
    2ce0:	59 1b       	sub	r21, r25
    2ce2:	99 f0       	breq	.+38     	; 0x2d0a <__addsf3x+0x60>
    2ce4:	59 3f       	cpi	r21, 0xF9	; 249
    2ce6:	50 f4       	brcc	.+20     	; 0x2cfc <__addsf3x+0x52>
    2ce8:	50 3e       	cpi	r21, 0xE0	; 224
    2cea:	68 f1       	brcs	.+90     	; 0x2d46 <__addsf3x+0x9c>
    2cec:	1a 16       	cp	r1, r26
    2cee:	f0 40       	sbci	r31, 0x00	; 0
    2cf0:	a2 2f       	mov	r26, r18
    2cf2:	23 2f       	mov	r18, r19
    2cf4:	34 2f       	mov	r19, r20
    2cf6:	44 27       	eor	r20, r20
    2cf8:	58 5f       	subi	r21, 0xF8	; 248
    2cfa:	f3 cf       	rjmp	.-26     	; 0x2ce2 <__addsf3x+0x38>
    2cfc:	46 95       	lsr	r20
    2cfe:	37 95       	ror	r19
    2d00:	27 95       	ror	r18
    2d02:	a7 95       	ror	r26
    2d04:	f0 40       	sbci	r31, 0x00	; 0
    2d06:	53 95       	inc	r21
    2d08:	c9 f7       	brne	.-14     	; 0x2cfc <__addsf3x+0x52>
    2d0a:	7e f4       	brtc	.+30     	; 0x2d2a <__addsf3x+0x80>
    2d0c:	1f 16       	cp	r1, r31
    2d0e:	ba 0b       	sbc	r27, r26
    2d10:	62 0b       	sbc	r22, r18
    2d12:	73 0b       	sbc	r23, r19
    2d14:	84 0b       	sbc	r24, r20
    2d16:	ba f0       	brmi	.+46     	; 0x2d46 <__addsf3x+0x9c>
    2d18:	91 50       	subi	r25, 0x01	; 1
    2d1a:	a1 f0       	breq	.+40     	; 0x2d44 <__addsf3x+0x9a>
    2d1c:	ff 0f       	add	r31, r31
    2d1e:	bb 1f       	adc	r27, r27
    2d20:	66 1f       	adc	r22, r22
    2d22:	77 1f       	adc	r23, r23
    2d24:	88 1f       	adc	r24, r24
    2d26:	c2 f7       	brpl	.-16     	; 0x2d18 <__addsf3x+0x6e>
    2d28:	0e c0       	rjmp	.+28     	; 0x2d46 <__addsf3x+0x9c>
    2d2a:	ba 0f       	add	r27, r26
    2d2c:	62 1f       	adc	r22, r18
    2d2e:	73 1f       	adc	r23, r19
    2d30:	84 1f       	adc	r24, r20
    2d32:	48 f4       	brcc	.+18     	; 0x2d46 <__addsf3x+0x9c>
    2d34:	87 95       	ror	r24
    2d36:	77 95       	ror	r23
    2d38:	67 95       	ror	r22
    2d3a:	b7 95       	ror	r27
    2d3c:	f7 95       	ror	r31
    2d3e:	9e 3f       	cpi	r25, 0xFE	; 254
    2d40:	08 f0       	brcs	.+2      	; 0x2d44 <__addsf3x+0x9a>
    2d42:	b0 cf       	rjmp	.-160    	; 0x2ca4 <__addsf3+0x28>
    2d44:	93 95       	inc	r25
    2d46:	88 0f       	add	r24, r24
    2d48:	08 f0       	brcs	.+2      	; 0x2d4c <__addsf3x+0xa2>
    2d4a:	99 27       	eor	r25, r25
    2d4c:	ee 0f       	add	r30, r30
    2d4e:	97 95       	ror	r25
    2d50:	87 95       	ror	r24
    2d52:	08 95       	ret
    2d54:	0e 94 5a 18 	call	0x30b4	; 0x30b4 <__fp_pscA>
    2d58:	60 f0       	brcs	.+24     	; 0x2d72 <__addsf3x+0xc8>
    2d5a:	80 e8       	ldi	r24, 0x80	; 128
    2d5c:	91 e0       	ldi	r25, 0x01	; 1
    2d5e:	09 f4       	brne	.+2      	; 0x2d62 <__addsf3x+0xb8>
    2d60:	9e ef       	ldi	r25, 0xFE	; 254
    2d62:	0e 94 61 18 	call	0x30c2	; 0x30c2 <__fp_pscB>
    2d66:	28 f0       	brcs	.+10     	; 0x2d72 <__addsf3x+0xc8>
    2d68:	40 e8       	ldi	r20, 0x80	; 128
    2d6a:	51 e0       	ldi	r21, 0x01	; 1
    2d6c:	71 f4       	brne	.+28     	; 0x2d8a <atan2+0x10>
    2d6e:	5e ef       	ldi	r21, 0xFE	; 254
    2d70:	0c c0       	rjmp	.+24     	; 0x2d8a <atan2+0x10>
    2d72:	0c 94 30 18 	jmp	0x3060	; 0x3060 <__fp_nan>
    2d76:	0c 94 9b 18 	jmp	0x3136	; 0x3136 <__fp_zero>

00002d7a <atan2>:
    2d7a:	e9 2f       	mov	r30, r25
    2d7c:	e0 78       	andi	r30, 0x80	; 128
    2d7e:	0e 94 79 18 	call	0x30f2	; 0x30f2 <__fp_split3>
    2d82:	40 f3       	brcs	.-48     	; 0x2d54 <__addsf3x+0xaa>
    2d84:	09 2e       	mov	r0, r25
    2d86:	05 2a       	or	r0, r21
    2d88:	b1 f3       	breq	.-20     	; 0x2d76 <__addsf3x+0xcc>
    2d8a:	26 17       	cp	r18, r22
    2d8c:	37 07       	cpc	r19, r23
    2d8e:	48 07       	cpc	r20, r24
    2d90:	59 07       	cpc	r21, r25
    2d92:	38 f0       	brcs	.+14     	; 0x2da2 <atan2+0x28>
    2d94:	0e 2e       	mov	r0, r30
    2d96:	07 f8       	bld	r0, 7
    2d98:	e0 25       	eor	r30, r0
    2d9a:	69 f0       	breq	.+26     	; 0x2db6 <atan2+0x3c>
    2d9c:	e0 25       	eor	r30, r0
    2d9e:	e0 64       	ori	r30, 0x40	; 64
    2da0:	0a c0       	rjmp	.+20     	; 0x2db6 <atan2+0x3c>
    2da2:	ef 63       	ori	r30, 0x3F	; 63
    2da4:	07 f8       	bld	r0, 7
    2da6:	00 94       	com	r0
    2da8:	07 fa       	bst	r0, 7
    2daa:	db 01       	movw	r26, r22
    2dac:	b9 01       	movw	r22, r18
    2dae:	9d 01       	movw	r18, r26
    2db0:	dc 01       	movw	r26, r24
    2db2:	ca 01       	movw	r24, r20
    2db4:	ad 01       	movw	r20, r26
    2db6:	ef 93       	push	r30
    2db8:	0e 94 38 17 	call	0x2e70	; 0x2e70 <__divsf3_pse>
    2dbc:	0e 94 68 18 	call	0x30d0	; 0x30d0 <__fp_round>
    2dc0:	0e 94 ed 16 	call	0x2dda	; 0x2dda <atan>
    2dc4:	5f 91       	pop	r21
    2dc6:	55 23       	and	r21, r21
    2dc8:	39 f0       	breq	.+14     	; 0x2dd8 <atan2+0x5e>
    2dca:	2b ed       	ldi	r18, 0xDB	; 219
    2dcc:	3f e0       	ldi	r19, 0x0F	; 15
    2dce:	49 e4       	ldi	r20, 0x49	; 73
    2dd0:	50 fd       	sbrc	r21, 0
    2dd2:	49 ec       	ldi	r20, 0xC9	; 201
    2dd4:	0c 94 3e 16 	jmp	0x2c7c	; 0x2c7c <__addsf3>
    2dd8:	08 95       	ret

00002dda <atan>:
    2dda:	df 93       	push	r29
    2ddc:	dd 27       	eor	r29, r29
    2dde:	b9 2f       	mov	r27, r25
    2de0:	bf 77       	andi	r27, 0x7F	; 127
    2de2:	40 e8       	ldi	r20, 0x80	; 128
    2de4:	5f e3       	ldi	r21, 0x3F	; 63
    2de6:	16 16       	cp	r1, r22
    2de8:	17 06       	cpc	r1, r23
    2dea:	48 07       	cpc	r20, r24
    2dec:	5b 07       	cpc	r21, r27
    2dee:	18 f4       	brcc	.+6      	; 0x2df6 <atan+0x1c>
    2df0:	d9 2f       	mov	r29, r25
    2df2:	0e 94 a7 18 	call	0x314e	; 0x314e <inverse>
    2df6:	9f 93       	push	r25
    2df8:	8f 93       	push	r24
    2dfa:	7f 93       	push	r23
    2dfc:	6f 93       	push	r22
    2dfe:	0e 94 1c 19 	call	0x3238	; 0x3238 <square>
    2e02:	e0 ea       	ldi	r30, 0xA0	; 160
    2e04:	f0 e0       	ldi	r31, 0x00	; 0
    2e06:	0e 94 33 18 	call	0x3066	; 0x3066 <__fp_powser>
    2e0a:	0e 94 68 18 	call	0x30d0	; 0x30d0 <__fp_round>
    2e0e:	2f 91       	pop	r18
    2e10:	3f 91       	pop	r19
    2e12:	4f 91       	pop	r20
    2e14:	5f 91       	pop	r21
    2e16:	0e 94 c2 18 	call	0x3184	; 0x3184 <__mulsf3x>
    2e1a:	dd 23       	and	r29, r29
    2e1c:	51 f0       	breq	.+20     	; 0x2e32 <atan+0x58>
    2e1e:	90 58       	subi	r25, 0x80	; 128
    2e20:	a2 ea       	ldi	r26, 0xA2	; 162
    2e22:	2a ed       	ldi	r18, 0xDA	; 218
    2e24:	3f e0       	ldi	r19, 0x0F	; 15
    2e26:	49 ec       	ldi	r20, 0xC9	; 201
    2e28:	5f e3       	ldi	r21, 0x3F	; 63
    2e2a:	d0 78       	andi	r29, 0x80	; 128
    2e2c:	5d 27       	eor	r21, r29
    2e2e:	0e 94 55 16 	call	0x2caa	; 0x2caa <__addsf3x>
    2e32:	df 91       	pop	r29
    2e34:	0c 94 68 18 	jmp	0x30d0	; 0x30d0 <__fp_round>

00002e38 <__cmpsf2>:
    2e38:	0e 94 06 18 	call	0x300c	; 0x300c <__fp_cmp>
    2e3c:	08 f4       	brcc	.+2      	; 0x2e40 <__cmpsf2+0x8>
    2e3e:	81 e0       	ldi	r24, 0x01	; 1
    2e40:	08 95       	ret

00002e42 <__divsf3>:
    2e42:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <__divsf3x>
    2e46:	0c 94 68 18 	jmp	0x30d0	; 0x30d0 <__fp_round>
    2e4a:	0e 94 61 18 	call	0x30c2	; 0x30c2 <__fp_pscB>
    2e4e:	58 f0       	brcs	.+22     	; 0x2e66 <__divsf3+0x24>
    2e50:	0e 94 5a 18 	call	0x30b4	; 0x30b4 <__fp_pscA>
    2e54:	40 f0       	brcs	.+16     	; 0x2e66 <__divsf3+0x24>
    2e56:	29 f4       	brne	.+10     	; 0x2e62 <__divsf3+0x20>
    2e58:	5f 3f       	cpi	r21, 0xFF	; 255
    2e5a:	29 f0       	breq	.+10     	; 0x2e66 <__divsf3+0x24>
    2e5c:	0c 94 2a 18 	jmp	0x3054	; 0x3054 <__fp_inf>
    2e60:	51 11       	cpse	r21, r1
    2e62:	0c 94 9c 18 	jmp	0x3138	; 0x3138 <__fp_szero>
    2e66:	0c 94 30 18 	jmp	0x3060	; 0x3060 <__fp_nan>

00002e6a <__divsf3x>:
    2e6a:	0e 94 79 18 	call	0x30f2	; 0x30f2 <__fp_split3>
    2e6e:	68 f3       	brcs	.-38     	; 0x2e4a <__divsf3+0x8>

00002e70 <__divsf3_pse>:
    2e70:	99 23       	and	r25, r25
    2e72:	b1 f3       	breq	.-20     	; 0x2e60 <__divsf3+0x1e>
    2e74:	55 23       	and	r21, r21
    2e76:	91 f3       	breq	.-28     	; 0x2e5c <__divsf3+0x1a>
    2e78:	95 1b       	sub	r25, r21
    2e7a:	55 0b       	sbc	r21, r21
    2e7c:	bb 27       	eor	r27, r27
    2e7e:	aa 27       	eor	r26, r26
    2e80:	62 17       	cp	r22, r18
    2e82:	73 07       	cpc	r23, r19
    2e84:	84 07       	cpc	r24, r20
    2e86:	38 f0       	brcs	.+14     	; 0x2e96 <__divsf3_pse+0x26>
    2e88:	9f 5f       	subi	r25, 0xFF	; 255
    2e8a:	5f 4f       	sbci	r21, 0xFF	; 255
    2e8c:	22 0f       	add	r18, r18
    2e8e:	33 1f       	adc	r19, r19
    2e90:	44 1f       	adc	r20, r20
    2e92:	aa 1f       	adc	r26, r26
    2e94:	a9 f3       	breq	.-22     	; 0x2e80 <__divsf3_pse+0x10>
    2e96:	35 d0       	rcall	.+106    	; 0x2f02 <__divsf3_pse+0x92>
    2e98:	0e 2e       	mov	r0, r30
    2e9a:	3a f0       	brmi	.+14     	; 0x2eaa <__divsf3_pse+0x3a>
    2e9c:	e0 e8       	ldi	r30, 0x80	; 128
    2e9e:	32 d0       	rcall	.+100    	; 0x2f04 <__divsf3_pse+0x94>
    2ea0:	91 50       	subi	r25, 0x01	; 1
    2ea2:	50 40       	sbci	r21, 0x00	; 0
    2ea4:	e6 95       	lsr	r30
    2ea6:	00 1c       	adc	r0, r0
    2ea8:	ca f7       	brpl	.-14     	; 0x2e9c <__divsf3_pse+0x2c>
    2eaa:	2b d0       	rcall	.+86     	; 0x2f02 <__divsf3_pse+0x92>
    2eac:	fe 2f       	mov	r31, r30
    2eae:	29 d0       	rcall	.+82     	; 0x2f02 <__divsf3_pse+0x92>
    2eb0:	66 0f       	add	r22, r22
    2eb2:	77 1f       	adc	r23, r23
    2eb4:	88 1f       	adc	r24, r24
    2eb6:	bb 1f       	adc	r27, r27
    2eb8:	26 17       	cp	r18, r22
    2eba:	37 07       	cpc	r19, r23
    2ebc:	48 07       	cpc	r20, r24
    2ebe:	ab 07       	cpc	r26, r27
    2ec0:	b0 e8       	ldi	r27, 0x80	; 128
    2ec2:	09 f0       	breq	.+2      	; 0x2ec6 <__divsf3_pse+0x56>
    2ec4:	bb 0b       	sbc	r27, r27
    2ec6:	80 2d       	mov	r24, r0
    2ec8:	bf 01       	movw	r22, r30
    2eca:	ff 27       	eor	r31, r31
    2ecc:	93 58       	subi	r25, 0x83	; 131
    2ece:	5f 4f       	sbci	r21, 0xFF	; 255
    2ed0:	3a f0       	brmi	.+14     	; 0x2ee0 <__divsf3_pse+0x70>
    2ed2:	9e 3f       	cpi	r25, 0xFE	; 254
    2ed4:	51 05       	cpc	r21, r1
    2ed6:	78 f0       	brcs	.+30     	; 0x2ef6 <__divsf3_pse+0x86>
    2ed8:	0c 94 2a 18 	jmp	0x3054	; 0x3054 <__fp_inf>
    2edc:	0c 94 9c 18 	jmp	0x3138	; 0x3138 <__fp_szero>
    2ee0:	5f 3f       	cpi	r21, 0xFF	; 255
    2ee2:	e4 f3       	brlt	.-8      	; 0x2edc <__divsf3_pse+0x6c>
    2ee4:	98 3e       	cpi	r25, 0xE8	; 232
    2ee6:	d4 f3       	brlt	.-12     	; 0x2edc <__divsf3_pse+0x6c>
    2ee8:	86 95       	lsr	r24
    2eea:	77 95       	ror	r23
    2eec:	67 95       	ror	r22
    2eee:	b7 95       	ror	r27
    2ef0:	f7 95       	ror	r31
    2ef2:	9f 5f       	subi	r25, 0xFF	; 255
    2ef4:	c9 f7       	brne	.-14     	; 0x2ee8 <__divsf3_pse+0x78>
    2ef6:	88 0f       	add	r24, r24
    2ef8:	91 1d       	adc	r25, r1
    2efa:	96 95       	lsr	r25
    2efc:	87 95       	ror	r24
    2efe:	97 f9       	bld	r25, 7
    2f00:	08 95       	ret
    2f02:	e1 e0       	ldi	r30, 0x01	; 1
    2f04:	66 0f       	add	r22, r22
    2f06:	77 1f       	adc	r23, r23
    2f08:	88 1f       	adc	r24, r24
    2f0a:	bb 1f       	adc	r27, r27
    2f0c:	62 17       	cp	r22, r18
    2f0e:	73 07       	cpc	r23, r19
    2f10:	84 07       	cpc	r24, r20
    2f12:	ba 07       	cpc	r27, r26
    2f14:	20 f0       	brcs	.+8      	; 0x2f1e <__divsf3_pse+0xae>
    2f16:	62 1b       	sub	r22, r18
    2f18:	73 0b       	sbc	r23, r19
    2f1a:	84 0b       	sbc	r24, r20
    2f1c:	ba 0b       	sbc	r27, r26
    2f1e:	ee 1f       	adc	r30, r30
    2f20:	88 f7       	brcc	.-30     	; 0x2f04 <__divsf3_pse+0x94>
    2f22:	e0 95       	com	r30
    2f24:	08 95       	ret

00002f26 <__fixsfsi>:
    2f26:	0e 94 9a 17 	call	0x2f34	; 0x2f34 <__fixunssfsi>
    2f2a:	68 94       	set
    2f2c:	b1 11       	cpse	r27, r1
    2f2e:	0c 94 9c 18 	jmp	0x3138	; 0x3138 <__fp_szero>
    2f32:	08 95       	ret

00002f34 <__fixunssfsi>:
    2f34:	0e 94 81 18 	call	0x3102	; 0x3102 <__fp_splitA>
    2f38:	88 f0       	brcs	.+34     	; 0x2f5c <__fixunssfsi+0x28>
    2f3a:	9f 57       	subi	r25, 0x7F	; 127
    2f3c:	98 f0       	brcs	.+38     	; 0x2f64 <__fixunssfsi+0x30>
    2f3e:	b9 2f       	mov	r27, r25
    2f40:	99 27       	eor	r25, r25
    2f42:	b7 51       	subi	r27, 0x17	; 23
    2f44:	b0 f0       	brcs	.+44     	; 0x2f72 <__fixunssfsi+0x3e>
    2f46:	e1 f0       	breq	.+56     	; 0x2f80 <__fixunssfsi+0x4c>
    2f48:	66 0f       	add	r22, r22
    2f4a:	77 1f       	adc	r23, r23
    2f4c:	88 1f       	adc	r24, r24
    2f4e:	99 1f       	adc	r25, r25
    2f50:	1a f0       	brmi	.+6      	; 0x2f58 <__fixunssfsi+0x24>
    2f52:	ba 95       	dec	r27
    2f54:	c9 f7       	brne	.-14     	; 0x2f48 <__fixunssfsi+0x14>
    2f56:	14 c0       	rjmp	.+40     	; 0x2f80 <__fixunssfsi+0x4c>
    2f58:	b1 30       	cpi	r27, 0x01	; 1
    2f5a:	91 f0       	breq	.+36     	; 0x2f80 <__fixunssfsi+0x4c>
    2f5c:	0e 94 9b 18 	call	0x3136	; 0x3136 <__fp_zero>
    2f60:	b1 e0       	ldi	r27, 0x01	; 1
    2f62:	08 95       	ret
    2f64:	0c 94 9b 18 	jmp	0x3136	; 0x3136 <__fp_zero>
    2f68:	67 2f       	mov	r22, r23
    2f6a:	78 2f       	mov	r23, r24
    2f6c:	88 27       	eor	r24, r24
    2f6e:	b8 5f       	subi	r27, 0xF8	; 248
    2f70:	39 f0       	breq	.+14     	; 0x2f80 <__fixunssfsi+0x4c>
    2f72:	b9 3f       	cpi	r27, 0xF9	; 249
    2f74:	cc f3       	brlt	.-14     	; 0x2f68 <__fixunssfsi+0x34>
    2f76:	86 95       	lsr	r24
    2f78:	77 95       	ror	r23
    2f7a:	67 95       	ror	r22
    2f7c:	b3 95       	inc	r27
    2f7e:	d9 f7       	brne	.-10     	; 0x2f76 <__fixunssfsi+0x42>
    2f80:	3e f4       	brtc	.+14     	; 0x2f90 <__fixunssfsi+0x5c>
    2f82:	90 95       	com	r25
    2f84:	80 95       	com	r24
    2f86:	70 95       	com	r23
    2f88:	61 95       	neg	r22
    2f8a:	7f 4f       	sbci	r23, 0xFF	; 255
    2f8c:	8f 4f       	sbci	r24, 0xFF	; 255
    2f8e:	9f 4f       	sbci	r25, 0xFF	; 255
    2f90:	08 95       	ret

00002f92 <__floatunsisf>:
    2f92:	e8 94       	clt
    2f94:	09 c0       	rjmp	.+18     	; 0x2fa8 <__floatsisf+0x12>

00002f96 <__floatsisf>:
    2f96:	97 fb       	bst	r25, 7
    2f98:	3e f4       	brtc	.+14     	; 0x2fa8 <__floatsisf+0x12>
    2f9a:	90 95       	com	r25
    2f9c:	80 95       	com	r24
    2f9e:	70 95       	com	r23
    2fa0:	61 95       	neg	r22
    2fa2:	7f 4f       	sbci	r23, 0xFF	; 255
    2fa4:	8f 4f       	sbci	r24, 0xFF	; 255
    2fa6:	9f 4f       	sbci	r25, 0xFF	; 255
    2fa8:	99 23       	and	r25, r25
    2faa:	a9 f0       	breq	.+42     	; 0x2fd6 <__floatsisf+0x40>
    2fac:	f9 2f       	mov	r31, r25
    2fae:	96 e9       	ldi	r25, 0x96	; 150
    2fb0:	bb 27       	eor	r27, r27
    2fb2:	93 95       	inc	r25
    2fb4:	f6 95       	lsr	r31
    2fb6:	87 95       	ror	r24
    2fb8:	77 95       	ror	r23
    2fba:	67 95       	ror	r22
    2fbc:	b7 95       	ror	r27
    2fbe:	f1 11       	cpse	r31, r1
    2fc0:	f8 cf       	rjmp	.-16     	; 0x2fb2 <__floatsisf+0x1c>
    2fc2:	fa f4       	brpl	.+62     	; 0x3002 <__floatsisf+0x6c>
    2fc4:	bb 0f       	add	r27, r27
    2fc6:	11 f4       	brne	.+4      	; 0x2fcc <__floatsisf+0x36>
    2fc8:	60 ff       	sbrs	r22, 0
    2fca:	1b c0       	rjmp	.+54     	; 0x3002 <__floatsisf+0x6c>
    2fcc:	6f 5f       	subi	r22, 0xFF	; 255
    2fce:	7f 4f       	sbci	r23, 0xFF	; 255
    2fd0:	8f 4f       	sbci	r24, 0xFF	; 255
    2fd2:	9f 4f       	sbci	r25, 0xFF	; 255
    2fd4:	16 c0       	rjmp	.+44     	; 0x3002 <__floatsisf+0x6c>
    2fd6:	88 23       	and	r24, r24
    2fd8:	11 f0       	breq	.+4      	; 0x2fde <__floatsisf+0x48>
    2fda:	96 e9       	ldi	r25, 0x96	; 150
    2fdc:	11 c0       	rjmp	.+34     	; 0x3000 <__floatsisf+0x6a>
    2fde:	77 23       	and	r23, r23
    2fe0:	21 f0       	breq	.+8      	; 0x2fea <__floatsisf+0x54>
    2fe2:	9e e8       	ldi	r25, 0x8E	; 142
    2fe4:	87 2f       	mov	r24, r23
    2fe6:	76 2f       	mov	r23, r22
    2fe8:	05 c0       	rjmp	.+10     	; 0x2ff4 <__floatsisf+0x5e>
    2fea:	66 23       	and	r22, r22
    2fec:	71 f0       	breq	.+28     	; 0x300a <__floatsisf+0x74>
    2fee:	96 e8       	ldi	r25, 0x86	; 134
    2ff0:	86 2f       	mov	r24, r22
    2ff2:	70 e0       	ldi	r23, 0x00	; 0
    2ff4:	60 e0       	ldi	r22, 0x00	; 0
    2ff6:	2a f0       	brmi	.+10     	; 0x3002 <__floatsisf+0x6c>
    2ff8:	9a 95       	dec	r25
    2ffa:	66 0f       	add	r22, r22
    2ffc:	77 1f       	adc	r23, r23
    2ffe:	88 1f       	adc	r24, r24
    3000:	da f7       	brpl	.-10     	; 0x2ff8 <__floatsisf+0x62>
    3002:	88 0f       	add	r24, r24
    3004:	96 95       	lsr	r25
    3006:	87 95       	ror	r24
    3008:	97 f9       	bld	r25, 7
    300a:	08 95       	ret

0000300c <__fp_cmp>:
    300c:	99 0f       	add	r25, r25
    300e:	00 08       	sbc	r0, r0
    3010:	55 0f       	add	r21, r21
    3012:	aa 0b       	sbc	r26, r26
    3014:	e0 e8       	ldi	r30, 0x80	; 128
    3016:	fe ef       	ldi	r31, 0xFE	; 254
    3018:	16 16       	cp	r1, r22
    301a:	17 06       	cpc	r1, r23
    301c:	e8 07       	cpc	r30, r24
    301e:	f9 07       	cpc	r31, r25
    3020:	c0 f0       	brcs	.+48     	; 0x3052 <__fp_cmp+0x46>
    3022:	12 16       	cp	r1, r18
    3024:	13 06       	cpc	r1, r19
    3026:	e4 07       	cpc	r30, r20
    3028:	f5 07       	cpc	r31, r21
    302a:	98 f0       	brcs	.+38     	; 0x3052 <__fp_cmp+0x46>
    302c:	62 1b       	sub	r22, r18
    302e:	73 0b       	sbc	r23, r19
    3030:	84 0b       	sbc	r24, r20
    3032:	95 0b       	sbc	r25, r21
    3034:	39 f4       	brne	.+14     	; 0x3044 <__fp_cmp+0x38>
    3036:	0a 26       	eor	r0, r26
    3038:	61 f0       	breq	.+24     	; 0x3052 <__fp_cmp+0x46>
    303a:	23 2b       	or	r18, r19
    303c:	24 2b       	or	r18, r20
    303e:	25 2b       	or	r18, r21
    3040:	21 f4       	brne	.+8      	; 0x304a <__fp_cmp+0x3e>
    3042:	08 95       	ret
    3044:	0a 26       	eor	r0, r26
    3046:	09 f4       	brne	.+2      	; 0x304a <__fp_cmp+0x3e>
    3048:	a1 40       	sbci	r26, 0x01	; 1
    304a:	a6 95       	lsr	r26
    304c:	8f ef       	ldi	r24, 0xFF	; 255
    304e:	81 1d       	adc	r24, r1
    3050:	81 1d       	adc	r24, r1
    3052:	08 95       	ret

00003054 <__fp_inf>:
    3054:	97 f9       	bld	r25, 7
    3056:	9f 67       	ori	r25, 0x7F	; 127
    3058:	80 e8       	ldi	r24, 0x80	; 128
    305a:	70 e0       	ldi	r23, 0x00	; 0
    305c:	60 e0       	ldi	r22, 0x00	; 0
    305e:	08 95       	ret

00003060 <__fp_nan>:
    3060:	9f ef       	ldi	r25, 0xFF	; 255
    3062:	80 ec       	ldi	r24, 0xC0	; 192
    3064:	08 95       	ret

00003066 <__fp_powser>:
    3066:	df 93       	push	r29
    3068:	cf 93       	push	r28
    306a:	1f 93       	push	r17
    306c:	0f 93       	push	r16
    306e:	ff 92       	push	r15
    3070:	ef 92       	push	r14
    3072:	df 92       	push	r13
    3074:	7b 01       	movw	r14, r22
    3076:	8c 01       	movw	r16, r24
    3078:	68 94       	set
    307a:	06 c0       	rjmp	.+12     	; 0x3088 <__fp_powser+0x22>
    307c:	da 2e       	mov	r13, r26
    307e:	ef 01       	movw	r28, r30
    3080:	0e 94 c2 18 	call	0x3184	; 0x3184 <__mulsf3x>
    3084:	fe 01       	movw	r30, r28
    3086:	e8 94       	clt
    3088:	a5 91       	lpm	r26, Z+
    308a:	25 91       	lpm	r18, Z+
    308c:	35 91       	lpm	r19, Z+
    308e:	45 91       	lpm	r20, Z+
    3090:	55 91       	lpm	r21, Z+
    3092:	a6 f3       	brts	.-24     	; 0x307c <__fp_powser+0x16>
    3094:	ef 01       	movw	r28, r30
    3096:	0e 94 55 16 	call	0x2caa	; 0x2caa <__addsf3x>
    309a:	fe 01       	movw	r30, r28
    309c:	97 01       	movw	r18, r14
    309e:	a8 01       	movw	r20, r16
    30a0:	da 94       	dec	r13
    30a2:	69 f7       	brne	.-38     	; 0x307e <__fp_powser+0x18>
    30a4:	df 90       	pop	r13
    30a6:	ef 90       	pop	r14
    30a8:	ff 90       	pop	r15
    30aa:	0f 91       	pop	r16
    30ac:	1f 91       	pop	r17
    30ae:	cf 91       	pop	r28
    30b0:	df 91       	pop	r29
    30b2:	08 95       	ret

000030b4 <__fp_pscA>:
    30b4:	00 24       	eor	r0, r0
    30b6:	0a 94       	dec	r0
    30b8:	16 16       	cp	r1, r22
    30ba:	17 06       	cpc	r1, r23
    30bc:	18 06       	cpc	r1, r24
    30be:	09 06       	cpc	r0, r25
    30c0:	08 95       	ret

000030c2 <__fp_pscB>:
    30c2:	00 24       	eor	r0, r0
    30c4:	0a 94       	dec	r0
    30c6:	12 16       	cp	r1, r18
    30c8:	13 06       	cpc	r1, r19
    30ca:	14 06       	cpc	r1, r20
    30cc:	05 06       	cpc	r0, r21
    30ce:	08 95       	ret

000030d0 <__fp_round>:
    30d0:	09 2e       	mov	r0, r25
    30d2:	03 94       	inc	r0
    30d4:	00 0c       	add	r0, r0
    30d6:	11 f4       	brne	.+4      	; 0x30dc <__fp_round+0xc>
    30d8:	88 23       	and	r24, r24
    30da:	52 f0       	brmi	.+20     	; 0x30f0 <__fp_round+0x20>
    30dc:	bb 0f       	add	r27, r27
    30de:	40 f4       	brcc	.+16     	; 0x30f0 <__fp_round+0x20>
    30e0:	bf 2b       	or	r27, r31
    30e2:	11 f4       	brne	.+4      	; 0x30e8 <__fp_round+0x18>
    30e4:	60 ff       	sbrs	r22, 0
    30e6:	04 c0       	rjmp	.+8      	; 0x30f0 <__fp_round+0x20>
    30e8:	6f 5f       	subi	r22, 0xFF	; 255
    30ea:	7f 4f       	sbci	r23, 0xFF	; 255
    30ec:	8f 4f       	sbci	r24, 0xFF	; 255
    30ee:	9f 4f       	sbci	r25, 0xFF	; 255
    30f0:	08 95       	ret

000030f2 <__fp_split3>:
    30f2:	57 fd       	sbrc	r21, 7
    30f4:	90 58       	subi	r25, 0x80	; 128
    30f6:	44 0f       	add	r20, r20
    30f8:	55 1f       	adc	r21, r21
    30fa:	59 f0       	breq	.+22     	; 0x3112 <__fp_splitA+0x10>
    30fc:	5f 3f       	cpi	r21, 0xFF	; 255
    30fe:	71 f0       	breq	.+28     	; 0x311c <__fp_splitA+0x1a>
    3100:	47 95       	ror	r20

00003102 <__fp_splitA>:
    3102:	88 0f       	add	r24, r24
    3104:	97 fb       	bst	r25, 7
    3106:	99 1f       	adc	r25, r25
    3108:	61 f0       	breq	.+24     	; 0x3122 <__fp_splitA+0x20>
    310a:	9f 3f       	cpi	r25, 0xFF	; 255
    310c:	79 f0       	breq	.+30     	; 0x312c <__fp_splitA+0x2a>
    310e:	87 95       	ror	r24
    3110:	08 95       	ret
    3112:	12 16       	cp	r1, r18
    3114:	13 06       	cpc	r1, r19
    3116:	14 06       	cpc	r1, r20
    3118:	55 1f       	adc	r21, r21
    311a:	f2 cf       	rjmp	.-28     	; 0x3100 <__fp_split3+0xe>
    311c:	46 95       	lsr	r20
    311e:	f1 df       	rcall	.-30     	; 0x3102 <__fp_splitA>
    3120:	08 c0       	rjmp	.+16     	; 0x3132 <__fp_splitA+0x30>
    3122:	16 16       	cp	r1, r22
    3124:	17 06       	cpc	r1, r23
    3126:	18 06       	cpc	r1, r24
    3128:	99 1f       	adc	r25, r25
    312a:	f1 cf       	rjmp	.-30     	; 0x310e <__fp_splitA+0xc>
    312c:	86 95       	lsr	r24
    312e:	71 05       	cpc	r23, r1
    3130:	61 05       	cpc	r22, r1
    3132:	08 94       	sec
    3134:	08 95       	ret

00003136 <__fp_zero>:
    3136:	e8 94       	clt

00003138 <__fp_szero>:
    3138:	bb 27       	eor	r27, r27
    313a:	66 27       	eor	r22, r22
    313c:	77 27       	eor	r23, r23
    313e:	cb 01       	movw	r24, r22
    3140:	97 f9       	bld	r25, 7
    3142:	08 95       	ret

00003144 <__gesf2>:
    3144:	0e 94 06 18 	call	0x300c	; 0x300c <__fp_cmp>
    3148:	08 f4       	brcc	.+2      	; 0x314c <__gesf2+0x8>
    314a:	8f ef       	ldi	r24, 0xFF	; 255
    314c:	08 95       	ret

0000314e <inverse>:
    314e:	9b 01       	movw	r18, r22
    3150:	ac 01       	movw	r20, r24
    3152:	60 e0       	ldi	r22, 0x00	; 0
    3154:	70 e0       	ldi	r23, 0x00	; 0
    3156:	80 e8       	ldi	r24, 0x80	; 128
    3158:	9f e3       	ldi	r25, 0x3F	; 63
    315a:	0c 94 21 17 	jmp	0x2e42	; 0x2e42 <__divsf3>

0000315e <__mulsf3>:
    315e:	0e 94 c2 18 	call	0x3184	; 0x3184 <__mulsf3x>
    3162:	0c 94 68 18 	jmp	0x30d0	; 0x30d0 <__fp_round>
    3166:	0e 94 5a 18 	call	0x30b4	; 0x30b4 <__fp_pscA>
    316a:	38 f0       	brcs	.+14     	; 0x317a <__mulsf3+0x1c>
    316c:	0e 94 61 18 	call	0x30c2	; 0x30c2 <__fp_pscB>
    3170:	20 f0       	brcs	.+8      	; 0x317a <__mulsf3+0x1c>
    3172:	95 23       	and	r25, r21
    3174:	11 f0       	breq	.+4      	; 0x317a <__mulsf3+0x1c>
    3176:	0c 94 2a 18 	jmp	0x3054	; 0x3054 <__fp_inf>
    317a:	0c 94 30 18 	jmp	0x3060	; 0x3060 <__fp_nan>
    317e:	11 24       	eor	r1, r1
    3180:	0c 94 9c 18 	jmp	0x3138	; 0x3138 <__fp_szero>

00003184 <__mulsf3x>:
    3184:	0e 94 79 18 	call	0x30f2	; 0x30f2 <__fp_split3>
    3188:	70 f3       	brcs	.-36     	; 0x3166 <__mulsf3+0x8>

0000318a <__mulsf3_pse>:
    318a:	95 9f       	mul	r25, r21
    318c:	c1 f3       	breq	.-16     	; 0x317e <__mulsf3+0x20>
    318e:	95 0f       	add	r25, r21
    3190:	50 e0       	ldi	r21, 0x00	; 0
    3192:	55 1f       	adc	r21, r21
    3194:	62 9f       	mul	r22, r18
    3196:	f0 01       	movw	r30, r0
    3198:	72 9f       	mul	r23, r18
    319a:	bb 27       	eor	r27, r27
    319c:	f0 0d       	add	r31, r0
    319e:	b1 1d       	adc	r27, r1
    31a0:	63 9f       	mul	r22, r19
    31a2:	aa 27       	eor	r26, r26
    31a4:	f0 0d       	add	r31, r0
    31a6:	b1 1d       	adc	r27, r1
    31a8:	aa 1f       	adc	r26, r26
    31aa:	64 9f       	mul	r22, r20
    31ac:	66 27       	eor	r22, r22
    31ae:	b0 0d       	add	r27, r0
    31b0:	a1 1d       	adc	r26, r1
    31b2:	66 1f       	adc	r22, r22
    31b4:	82 9f       	mul	r24, r18
    31b6:	22 27       	eor	r18, r18
    31b8:	b0 0d       	add	r27, r0
    31ba:	a1 1d       	adc	r26, r1
    31bc:	62 1f       	adc	r22, r18
    31be:	73 9f       	mul	r23, r19
    31c0:	b0 0d       	add	r27, r0
    31c2:	a1 1d       	adc	r26, r1
    31c4:	62 1f       	adc	r22, r18
    31c6:	83 9f       	mul	r24, r19
    31c8:	a0 0d       	add	r26, r0
    31ca:	61 1d       	adc	r22, r1
    31cc:	22 1f       	adc	r18, r18
    31ce:	74 9f       	mul	r23, r20
    31d0:	33 27       	eor	r19, r19
    31d2:	a0 0d       	add	r26, r0
    31d4:	61 1d       	adc	r22, r1
    31d6:	23 1f       	adc	r18, r19
    31d8:	84 9f       	mul	r24, r20
    31da:	60 0d       	add	r22, r0
    31dc:	21 1d       	adc	r18, r1
    31de:	82 2f       	mov	r24, r18
    31e0:	76 2f       	mov	r23, r22
    31e2:	6a 2f       	mov	r22, r26
    31e4:	11 24       	eor	r1, r1
    31e6:	9f 57       	subi	r25, 0x7F	; 127
    31e8:	50 40       	sbci	r21, 0x00	; 0
    31ea:	9a f0       	brmi	.+38     	; 0x3212 <__mulsf3_pse+0x88>
    31ec:	f1 f0       	breq	.+60     	; 0x322a <__mulsf3_pse+0xa0>
    31ee:	88 23       	and	r24, r24
    31f0:	4a f0       	brmi	.+18     	; 0x3204 <__mulsf3_pse+0x7a>
    31f2:	ee 0f       	add	r30, r30
    31f4:	ff 1f       	adc	r31, r31
    31f6:	bb 1f       	adc	r27, r27
    31f8:	66 1f       	adc	r22, r22
    31fa:	77 1f       	adc	r23, r23
    31fc:	88 1f       	adc	r24, r24
    31fe:	91 50       	subi	r25, 0x01	; 1
    3200:	50 40       	sbci	r21, 0x00	; 0
    3202:	a9 f7       	brne	.-22     	; 0x31ee <__mulsf3_pse+0x64>
    3204:	9e 3f       	cpi	r25, 0xFE	; 254
    3206:	51 05       	cpc	r21, r1
    3208:	80 f0       	brcs	.+32     	; 0x322a <__mulsf3_pse+0xa0>
    320a:	0c 94 2a 18 	jmp	0x3054	; 0x3054 <__fp_inf>
    320e:	0c 94 9c 18 	jmp	0x3138	; 0x3138 <__fp_szero>
    3212:	5f 3f       	cpi	r21, 0xFF	; 255
    3214:	e4 f3       	brlt	.-8      	; 0x320e <__mulsf3_pse+0x84>
    3216:	98 3e       	cpi	r25, 0xE8	; 232
    3218:	d4 f3       	brlt	.-12     	; 0x320e <__mulsf3_pse+0x84>
    321a:	86 95       	lsr	r24
    321c:	77 95       	ror	r23
    321e:	67 95       	ror	r22
    3220:	b7 95       	ror	r27
    3222:	f7 95       	ror	r31
    3224:	e7 95       	ror	r30
    3226:	9f 5f       	subi	r25, 0xFF	; 255
    3228:	c1 f7       	brne	.-16     	; 0x321a <__mulsf3_pse+0x90>
    322a:	fe 2b       	or	r31, r30
    322c:	88 0f       	add	r24, r24
    322e:	91 1d       	adc	r25, r1
    3230:	96 95       	lsr	r25
    3232:	87 95       	ror	r24
    3234:	97 f9       	bld	r25, 7
    3236:	08 95       	ret

00003238 <square>:
    3238:	9b 01       	movw	r18, r22
    323a:	ac 01       	movw	r20, r24
    323c:	0c 94 af 18 	jmp	0x315e	; 0x315e <__mulsf3>

00003240 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    3240:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    3242:	91 8d       	ldd	r25, Z+25	; 0x19
    3244:	22 8d       	ldd	r18, Z+26	; 0x1a
    3246:	89 2f       	mov	r24, r25
    3248:	90 e0       	ldi	r25, 0x00	; 0
    324a:	80 5c       	subi	r24, 0xC0	; 192
    324c:	9f 4f       	sbci	r25, 0xFF	; 255
    324e:	82 1b       	sub	r24, r18
    3250:	91 09       	sbc	r25, r1
}
    3252:	8f 73       	andi	r24, 0x3F	; 63
    3254:	99 27       	eor	r25, r25
    3256:	08 95       	ret

00003258 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    3258:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    325a:	91 8d       	ldd	r25, Z+25	; 0x19
    325c:	82 8d       	ldd	r24, Z+26	; 0x1a
    325e:	98 17       	cp	r25, r24
    3260:	31 f0       	breq	.+12     	; 0x326e <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    3262:	82 8d       	ldd	r24, Z+26	; 0x1a
    3264:	e8 0f       	add	r30, r24
    3266:	f1 1d       	adc	r31, r1
    3268:	85 8d       	ldd	r24, Z+29	; 0x1d
    326a:	90 e0       	ldi	r25, 0x00	; 0
    326c:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    326e:	8f ef       	ldi	r24, 0xFF	; 255
    3270:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    3272:	08 95       	ret

00003274 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    3274:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    3276:	91 8d       	ldd	r25, Z+25	; 0x19
    3278:	82 8d       	ldd	r24, Z+26	; 0x1a
    327a:	98 17       	cp	r25, r24
    327c:	61 f0       	breq	.+24     	; 0x3296 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    327e:	82 8d       	ldd	r24, Z+26	; 0x1a
    3280:	df 01       	movw	r26, r30
    3282:	a8 0f       	add	r26, r24
    3284:	b1 1d       	adc	r27, r1
    3286:	5d 96       	adiw	r26, 0x1d	; 29
    3288:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    328a:	92 8d       	ldd	r25, Z+26	; 0x1a
    328c:	9f 5f       	subi	r25, 0xFF	; 255
    328e:	9f 73       	andi	r25, 0x3F	; 63
    3290:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    3292:	90 e0       	ldi	r25, 0x00	; 0
    3294:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    3296:	8f ef       	ldi	r24, 0xFF	; 255
    3298:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    329a:	08 95       	ret

0000329c <_ZN14HardwareSerial17availableForWriteEv>:
{
#if (SERIAL_TX_BUFFER_SIZE>256)
  uint8_t oldSREG = SREG;
  cli();
#endif
  tx_buffer_index_t head = _tx_buffer_head;
    329c:	fc 01       	movw	r30, r24
    329e:	53 8d       	ldd	r21, Z+27	; 0x1b
  tx_buffer_index_t tail = _tx_buffer_tail;
    32a0:	44 8d       	ldd	r20, Z+28	; 0x1c
    32a2:	25 2f       	mov	r18, r21
    32a4:	30 e0       	ldi	r19, 0x00	; 0
    32a6:	84 2f       	mov	r24, r20
    32a8:	90 e0       	ldi	r25, 0x00	; 0
#if (SERIAL_TX_BUFFER_SIZE>256)
  SREG = oldSREG;
#endif
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    32aa:	82 1b       	sub	r24, r18
    32ac:	93 0b       	sbc	r25, r19
    32ae:	54 17       	cp	r21, r20
    32b0:	10 f0       	brcs	.+4      	; 0x32b6 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
    32b2:	cf 96       	adiw	r24, 0x3f	; 63
    32b4:	08 95       	ret
  return tail - head - 1;
    32b6:	01 97       	sbiw	r24, 0x01	; 1
}
    32b8:	08 95       	ret

000032ba <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    32ba:	82 eb       	ldi	r24, 0xB2	; 178
    32bc:	9a e1       	ldi	r25, 0x1A	; 26
    32be:	89 2b       	or	r24, r25
    32c0:	49 f0       	breq	.+18     	; 0x32d4 <_Z14serialEventRunv+0x1a>
    32c2:	80 e0       	ldi	r24, 0x00	; 0
    32c4:	90 e0       	ldi	r25, 0x00	; 0
    32c6:	89 2b       	or	r24, r25
    32c8:	29 f0       	breq	.+10     	; 0x32d4 <_Z14serialEventRunv+0x1a>
    32ca:	0e 94 b2 1a 	call	0x3564	; 0x3564 <_Z17Serial0_availablev>
    32ce:	81 11       	cpse	r24, r1
    32d0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    32d4:	08 95       	ret

000032d6 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    32d6:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    32d8:	84 8d       	ldd	r24, Z+28	; 0x1c
    32da:	df 01       	movw	r26, r30
    32dc:	a8 0f       	add	r26, r24
    32de:	b1 1d       	adc	r27, r1
    32e0:	a3 5a       	subi	r26, 0xA3	; 163
    32e2:	bf 4f       	sbci	r27, 0xFF	; 255
    32e4:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    32e6:	84 8d       	ldd	r24, Z+28	; 0x1c
    32e8:	90 e0       	ldi	r25, 0x00	; 0
    32ea:	01 96       	adiw	r24, 0x01	; 1
    32ec:	8f 73       	andi	r24, 0x3F	; 63
    32ee:	99 27       	eor	r25, r25
    32f0:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    32f2:	a6 89       	ldd	r26, Z+22	; 0x16
    32f4:	b7 89       	ldd	r27, Z+23	; 0x17
    32f6:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
    32f8:	a0 89       	ldd	r26, Z+16	; 0x10
    32fa:	b1 89       	ldd	r27, Z+17	; 0x11
    32fc:	8c 91       	ld	r24, X
    32fe:	80 64       	ori	r24, 0x40	; 64
    3300:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
    3302:	93 8d       	ldd	r25, Z+27	; 0x1b
    3304:	84 8d       	ldd	r24, Z+28	; 0x1c
    3306:	98 13       	cpse	r25, r24
    3308:	06 c0       	rjmp	.+12     	; 0x3316 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    330a:	02 88       	ldd	r0, Z+18	; 0x12
    330c:	f3 89       	ldd	r31, Z+19	; 0x13
    330e:	e0 2d       	mov	r30, r0
    3310:	80 81       	ld	r24, Z
    3312:	8f 7d       	andi	r24, 0xDF	; 223
    3314:	80 83       	st	Z, r24
    3316:	08 95       	ret

00003318 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    3318:	ef 92       	push	r14
    331a:	ff 92       	push	r15
    331c:	0f 93       	push	r16
    331e:	1f 93       	push	r17
    3320:	cf 93       	push	r28
    3322:	df 93       	push	r29
    3324:	ec 01       	movw	r28, r24
  _written = true;
    3326:	81 e0       	ldi	r24, 0x01	; 1
    3328:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    332a:	9b 8d       	ldd	r25, Y+27	; 0x1b
    332c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    332e:	98 13       	cpse	r25, r24
    3330:	05 c0       	rjmp	.+10     	; 0x333c <_ZN14HardwareSerial5writeEh+0x24>
    3332:	e8 89       	ldd	r30, Y+16	; 0x10
    3334:	f9 89       	ldd	r31, Y+17	; 0x11
    3336:	80 81       	ld	r24, Z
    3338:	85 fd       	sbrc	r24, 5
    333a:	24 c0       	rjmp	.+72     	; 0x3384 <_ZN14HardwareSerial5writeEh+0x6c>
    333c:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    333e:	0b 8d       	ldd	r16, Y+27	; 0x1b
    3340:	10 e0       	ldi	r17, 0x00	; 0
    3342:	0f 5f       	subi	r16, 0xFF	; 255
    3344:	1f 4f       	sbci	r17, 0xFF	; 255
    3346:	0f 73       	andi	r16, 0x3F	; 63
    3348:	11 27       	eor	r17, r17
    334a:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    334c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    334e:	e8 12       	cpse	r14, r24
    3350:	0c c0       	rjmp	.+24     	; 0x336a <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
    3352:	0f b6       	in	r0, 0x3f	; 63
    3354:	07 fc       	sbrc	r0, 7
    3356:	fa cf       	rjmp	.-12     	; 0x334c <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    3358:	e8 89       	ldd	r30, Y+16	; 0x10
    335a:	f9 89       	ldd	r31, Y+17	; 0x11
    335c:	80 81       	ld	r24, Z
    335e:	85 ff       	sbrs	r24, 5
    3360:	f5 cf       	rjmp	.-22     	; 0x334c <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    3362:	ce 01       	movw	r24, r28
    3364:	0e 94 6b 19 	call	0x32d6	; 0x32d6 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    3368:	f1 cf       	rjmp	.-30     	; 0x334c <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    336a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    336c:	fe 01       	movw	r30, r28
    336e:	e8 0f       	add	r30, r24
    3370:	f1 1d       	adc	r31, r1
    3372:	e3 5a       	subi	r30, 0xA3	; 163
    3374:	ff 4f       	sbci	r31, 0xFF	; 255
    3376:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
    3378:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
    337a:	ea 89       	ldd	r30, Y+18	; 0x12
    337c:	fb 89       	ldd	r31, Y+19	; 0x13
    337e:	80 81       	ld	r24, Z
    3380:	80 62       	ori	r24, 0x20	; 32
    3382:	07 c0       	rjmp	.+14     	; 0x3392 <_ZN14HardwareSerial5writeEh+0x7a>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    3384:	ee 89       	ldd	r30, Y+22	; 0x16
    3386:	ff 89       	ldd	r31, Y+23	; 0x17
    3388:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
    338a:	e8 89       	ldd	r30, Y+16	; 0x10
    338c:	f9 89       	ldd	r31, Y+17	; 0x11
    338e:	80 81       	ld	r24, Z
    3390:	80 64       	ori	r24, 0x40	; 64
    3392:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
    3394:	81 e0       	ldi	r24, 0x01	; 1
    3396:	90 e0       	ldi	r25, 0x00	; 0
    3398:	df 91       	pop	r29
    339a:	cf 91       	pop	r28
    339c:	1f 91       	pop	r17
    339e:	0f 91       	pop	r16
    33a0:	ff 90       	pop	r15
    33a2:	ef 90       	pop	r14
    33a4:	08 95       	ret

000033a6 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    33a6:	cf 93       	push	r28
    33a8:	df 93       	push	r29
    33aa:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    33ac:	88 8d       	ldd	r24, Y+24	; 0x18
    33ae:	88 23       	and	r24, r24
    33b0:	c9 f0       	breq	.+50     	; 0x33e4 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    33b2:	ea 89       	ldd	r30, Y+18	; 0x12
    33b4:	fb 89       	ldd	r31, Y+19	; 0x13
    33b6:	80 81       	ld	r24, Z
    33b8:	85 fd       	sbrc	r24, 5
    33ba:	05 c0       	rjmp	.+10     	; 0x33c6 <_ZN14HardwareSerial5flushEv+0x20>
    33bc:	a8 89       	ldd	r26, Y+16	; 0x10
    33be:	b9 89       	ldd	r27, Y+17	; 0x11
    33c0:	8c 91       	ld	r24, X
    33c2:	86 fd       	sbrc	r24, 6
    33c4:	0f c0       	rjmp	.+30     	; 0x33e4 <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    33c6:	0f b6       	in	r0, 0x3f	; 63
    33c8:	07 fc       	sbrc	r0, 7
    33ca:	f5 cf       	rjmp	.-22     	; 0x33b6 <_ZN14HardwareSerial5flushEv+0x10>
    33cc:	80 81       	ld	r24, Z
    33ce:	85 ff       	sbrs	r24, 5
    33d0:	f2 cf       	rjmp	.-28     	; 0x33b6 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    33d2:	a8 89       	ldd	r26, Y+16	; 0x10
    33d4:	b9 89       	ldd	r27, Y+17	; 0x11
    33d6:	8c 91       	ld	r24, X
    33d8:	85 ff       	sbrs	r24, 5
    33da:	ed cf       	rjmp	.-38     	; 0x33b6 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    33dc:	ce 01       	movw	r24, r28
    33de:	0e 94 6b 19 	call	0x32d6	; 0x32d6 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    33e2:	e7 cf       	rjmp	.-50     	; 0x33b2 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    33e4:	df 91       	pop	r29
    33e6:	cf 91       	pop	r28
    33e8:	08 95       	ret

000033ea <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    33ea:	cf 92       	push	r12
    33ec:	df 92       	push	r13
    33ee:	ef 92       	push	r14
    33f0:	ff 92       	push	r15
    33f2:	1f 93       	push	r17
    33f4:	cf 93       	push	r28
    33f6:	df 93       	push	r29
    33f8:	ec 01       	movw	r28, r24
    33fa:	6a 01       	movw	r12, r20
    33fc:	7b 01       	movw	r14, r22
    33fe:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    3400:	e8 89       	ldd	r30, Y+16	; 0x10
    3402:	f9 89       	ldd	r31, Y+17	; 0x11
    3404:	82 e0       	ldi	r24, 0x02	; 2
    3406:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    3408:	41 15       	cp	r20, r1
    340a:	51 4e       	sbci	r21, 0xE1	; 225
    340c:	61 05       	cpc	r22, r1
    340e:	71 05       	cpc	r23, r1
    3410:	b1 f0       	breq	.+44     	; 0x343e <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    3412:	60 e0       	ldi	r22, 0x00	; 0
    3414:	79 e0       	ldi	r23, 0x09	; 9
    3416:	8d e3       	ldi	r24, 0x3D	; 61
    3418:	90 e0       	ldi	r25, 0x00	; 0
    341a:	a7 01       	movw	r20, r14
    341c:	96 01       	movw	r18, r12
    341e:	0e 94 22 1e 	call	0x3c44	; 0x3c44 <__udivmodsi4>
    3422:	da 01       	movw	r26, r20
    3424:	c9 01       	movw	r24, r18
    3426:	01 97       	sbiw	r24, 0x01	; 1
    3428:	a1 09       	sbc	r26, r1
    342a:	b1 09       	sbc	r27, r1
    342c:	b6 95       	lsr	r27
    342e:	a7 95       	ror	r26
    3430:	97 95       	ror	r25
    3432:	87 95       	ror	r24
    3434:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    3436:	21 15       	cp	r18, r1
    3438:	80 e1       	ldi	r24, 0x10	; 16
    343a:	38 07       	cpc	r19, r24
    343c:	a8 f0       	brcs	.+42     	; 0x3468 <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
    343e:	e8 89       	ldd	r30, Y+16	; 0x10
    3440:	f9 89       	ldd	r31, Y+17	; 0x11
    3442:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    3444:	60 e8       	ldi	r22, 0x80	; 128
    3446:	74 e8       	ldi	r23, 0x84	; 132
    3448:	8e e1       	ldi	r24, 0x1E	; 30
    344a:	90 e0       	ldi	r25, 0x00	; 0
    344c:	a7 01       	movw	r20, r14
    344e:	96 01       	movw	r18, r12
    3450:	0e 94 22 1e 	call	0x3c44	; 0x3c44 <__udivmodsi4>
    3454:	da 01       	movw	r26, r20
    3456:	c9 01       	movw	r24, r18
    3458:	01 97       	sbiw	r24, 0x01	; 1
    345a:	a1 09       	sbc	r26, r1
    345c:	b1 09       	sbc	r27, r1
    345e:	b6 95       	lsr	r27
    3460:	a7 95       	ror	r26
    3462:	97 95       	ror	r25
    3464:	87 95       	ror	r24
    3466:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    3468:	ec 85       	ldd	r30, Y+12	; 0x0c
    346a:	fd 85       	ldd	r31, Y+13	; 0x0d
    346c:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    346e:	ee 85       	ldd	r30, Y+14	; 0x0e
    3470:	ff 85       	ldd	r31, Y+15	; 0x0f
    3472:	20 83       	st	Z, r18

  _written = false;
    3474:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    3476:	ec 89       	ldd	r30, Y+20	; 0x14
    3478:	fd 89       	ldd	r31, Y+21	; 0x15
    347a:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    347c:	ea 89       	ldd	r30, Y+18	; 0x12
    347e:	fb 89       	ldd	r31, Y+19	; 0x13
    3480:	80 81       	ld	r24, Z
    3482:	80 61       	ori	r24, 0x10	; 16
    3484:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    3486:	ea 89       	ldd	r30, Y+18	; 0x12
    3488:	fb 89       	ldd	r31, Y+19	; 0x13
    348a:	80 81       	ld	r24, Z
    348c:	88 60       	ori	r24, 0x08	; 8
    348e:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    3490:	ea 89       	ldd	r30, Y+18	; 0x12
    3492:	fb 89       	ldd	r31, Y+19	; 0x13
    3494:	80 81       	ld	r24, Z
    3496:	80 68       	ori	r24, 0x80	; 128
    3498:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    349a:	ea 89       	ldd	r30, Y+18	; 0x12
    349c:	fb 89       	ldd	r31, Y+19	; 0x13
    349e:	80 81       	ld	r24, Z
    34a0:	8f 7d       	andi	r24, 0xDF	; 223
    34a2:	80 83       	st	Z, r24
}
    34a4:	df 91       	pop	r29
    34a6:	cf 91       	pop	r28
    34a8:	1f 91       	pop	r17
    34aa:	ff 90       	pop	r15
    34ac:	ef 90       	pop	r14
    34ae:	df 90       	pop	r13
    34b0:	cf 90       	pop	r12
    34b2:	08 95       	ret

000034b4 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    34b4:	1f 92       	push	r1
    34b6:	0f 92       	push	r0
    34b8:	0f b6       	in	r0, 0x3f	; 63
    34ba:	0f 92       	push	r0
    34bc:	11 24       	eor	r1, r1
    34be:	2f 93       	push	r18
    34c0:	8f 93       	push	r24
    34c2:	9f 93       	push	r25
    34c4:	ef 93       	push	r30
    34c6:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    34c8:	e0 91 3e 04 	lds	r30, 0x043E	; 0x80043e <Serial+0x10>
    34cc:	f0 91 3f 04 	lds	r31, 0x043F	; 0x80043f <Serial+0x11>
    34d0:	80 81       	ld	r24, Z
    34d2:	e0 91 44 04 	lds	r30, 0x0444	; 0x800444 <Serial+0x16>
    34d6:	f0 91 45 04 	lds	r31, 0x0445	; 0x800445 <Serial+0x17>
    34da:	82 fd       	sbrc	r24, 2
    34dc:	12 c0       	rjmp	.+36     	; 0x3502 <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    34de:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    34e0:	80 91 47 04 	lds	r24, 0x0447	; 0x800447 <Serial+0x19>
    34e4:	8f 5f       	subi	r24, 0xFF	; 255
    34e6:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    34e8:	20 91 48 04 	lds	r18, 0x0448	; 0x800448 <Serial+0x1a>
    34ec:	82 17       	cp	r24, r18
    34ee:	51 f0       	breq	.+20     	; 0x3504 <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
    34f0:	e0 91 47 04 	lds	r30, 0x0447	; 0x800447 <Serial+0x19>
    34f4:	f0 e0       	ldi	r31, 0x00	; 0
    34f6:	e2 5d       	subi	r30, 0xD2	; 210
    34f8:	fb 4f       	sbci	r31, 0xFB	; 251
    34fa:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    34fc:	80 93 47 04 	sts	0x0447, r24	; 0x800447 <Serial+0x19>
    3500:	01 c0       	rjmp	.+2      	; 0x3504 <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    3502:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    3504:	ff 91       	pop	r31
    3506:	ef 91       	pop	r30
    3508:	9f 91       	pop	r25
    350a:	8f 91       	pop	r24
    350c:	2f 91       	pop	r18
    350e:	0f 90       	pop	r0
    3510:	0f be       	out	0x3f, r0	; 63
    3512:	0f 90       	pop	r0
    3514:	1f 90       	pop	r1
    3516:	18 95       	reti

00003518 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    3518:	1f 92       	push	r1
    351a:	0f 92       	push	r0
    351c:	0f b6       	in	r0, 0x3f	; 63
    351e:	0f 92       	push	r0
    3520:	11 24       	eor	r1, r1
    3522:	2f 93       	push	r18
    3524:	3f 93       	push	r19
    3526:	4f 93       	push	r20
    3528:	5f 93       	push	r21
    352a:	6f 93       	push	r22
    352c:	7f 93       	push	r23
    352e:	8f 93       	push	r24
    3530:	9f 93       	push	r25
    3532:	af 93       	push	r26
    3534:	bf 93       	push	r27
    3536:	ef 93       	push	r30
    3538:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    353a:	8e e2       	ldi	r24, 0x2E	; 46
    353c:	94 e0       	ldi	r25, 0x04	; 4
    353e:	0e 94 6b 19 	call	0x32d6	; 0x32d6 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    3542:	ff 91       	pop	r31
    3544:	ef 91       	pop	r30
    3546:	bf 91       	pop	r27
    3548:	af 91       	pop	r26
    354a:	9f 91       	pop	r25
    354c:	8f 91       	pop	r24
    354e:	7f 91       	pop	r23
    3550:	6f 91       	pop	r22
    3552:	5f 91       	pop	r21
    3554:	4f 91       	pop	r20
    3556:	3f 91       	pop	r19
    3558:	2f 91       	pop	r18
    355a:	0f 90       	pop	r0
    355c:	0f be       	out	0x3f, r0	; 63
    355e:	0f 90       	pop	r0
    3560:	1f 90       	pop	r1
    3562:	18 95       	reti

00003564 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    3564:	8e e2       	ldi	r24, 0x2E	; 46
    3566:	94 e0       	ldi	r25, 0x04	; 4
    3568:	0e 94 20 19 	call	0x3240	; 0x3240 <_ZN14HardwareSerial9availableEv>
    356c:	21 e0       	ldi	r18, 0x01	; 1
    356e:	89 2b       	or	r24, r25
    3570:	09 f4       	brne	.+2      	; 0x3574 <_Z17Serial0_availablev+0x10>
    3572:	20 e0       	ldi	r18, 0x00	; 0
}
    3574:	82 2f       	mov	r24, r18
    3576:	08 95       	ret

00003578 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    3578:	ee e2       	ldi	r30, 0x2E	; 46
    357a:	f4 e0       	ldi	r31, 0x04	; 4
    357c:	13 82       	std	Z+3, r1	; 0x03
    357e:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    3580:	88 ee       	ldi	r24, 0xE8	; 232
    3582:	93 e0       	ldi	r25, 0x03	; 3
    3584:	a0 e0       	ldi	r26, 0x00	; 0
    3586:	b0 e0       	ldi	r27, 0x00	; 0
    3588:	84 83       	std	Z+4, r24	; 0x04
    358a:	95 83       	std	Z+5, r25	; 0x05
    358c:	a6 83       	std	Z+6, r26	; 0x06
    358e:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    3590:	8d e7       	ldi	r24, 0x7D	; 125
    3592:	92 e0       	ldi	r25, 0x02	; 2
    3594:	91 83       	std	Z+1, r25	; 0x01
    3596:	80 83       	st	Z, r24
    3598:	85 ec       	ldi	r24, 0xC5	; 197
    359a:	90 e0       	ldi	r25, 0x00	; 0
    359c:	95 87       	std	Z+13, r25	; 0x0d
    359e:	84 87       	std	Z+12, r24	; 0x0c
    35a0:	84 ec       	ldi	r24, 0xC4	; 196
    35a2:	90 e0       	ldi	r25, 0x00	; 0
    35a4:	97 87       	std	Z+15, r25	; 0x0f
    35a6:	86 87       	std	Z+14, r24	; 0x0e
    35a8:	80 ec       	ldi	r24, 0xC0	; 192
    35aa:	90 e0       	ldi	r25, 0x00	; 0
    35ac:	91 8b       	std	Z+17, r25	; 0x11
    35ae:	80 8b       	std	Z+16, r24	; 0x10
    35b0:	81 ec       	ldi	r24, 0xC1	; 193
    35b2:	90 e0       	ldi	r25, 0x00	; 0
    35b4:	93 8b       	std	Z+19, r25	; 0x13
    35b6:	82 8b       	std	Z+18, r24	; 0x12
    35b8:	82 ec       	ldi	r24, 0xC2	; 194
    35ba:	90 e0       	ldi	r25, 0x00	; 0
    35bc:	95 8b       	std	Z+21, r25	; 0x15
    35be:	84 8b       	std	Z+20, r24	; 0x14
    35c0:	86 ec       	ldi	r24, 0xC6	; 198
    35c2:	90 e0       	ldi	r25, 0x00	; 0
    35c4:	97 8b       	std	Z+23, r25	; 0x17
    35c6:	86 8b       	std	Z+22, r24	; 0x16
    35c8:	11 8e       	std	Z+25, r1	; 0x19
    35ca:	12 8e       	std	Z+26, r1	; 0x1a
    35cc:	13 8e       	std	Z+27, r1	; 0x1b
    35ce:	14 8e       	std	Z+28, r1	; 0x1c
    35d0:	08 95       	ret

000035d2 <initVariant>:
    35d2:	08 95       	ret

000035d4 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    35d4:	0e 94 55 1d 	call	0x3aaa	; 0x3aaa <init>

	initVariant();
    35d8:	0e 94 e9 1a 	call	0x35d2	; 0x35d2 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    35dc:	0e 94 c7 06 	call	0xd8e	; 0xd8e <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    35e0:	cd e5       	ldi	r28, 0x5D	; 93
    35e2:	d9 e1       	ldi	r29, 0x19	; 25
#endif
	
	setup();
    
	for (;;) {
		loop();
    35e4:	0e 94 79 07 	call	0xef2	; 0xef2 <loop>
		if (serialEventRun) serialEventRun();
    35e8:	20 97       	sbiw	r28, 0x00	; 0
    35ea:	e1 f3       	breq	.-8      	; 0x35e4 <main+0x10>
    35ec:	0e 94 5d 19 	call	0x32ba	; 0x32ba <_Z14serialEventRunv>
    35f0:	f9 cf       	rjmp	.-14     	; 0x35e4 <main+0x10>

000035f2 <_Znwj>:
    35f2:	0c 94 83 1e 	jmp	0x3d06	; 0x3d06 <malloc>

000035f6 <_ZN5Print5writeEPKhj>:
size_t Print::println(long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
    35f6:	cf 92       	push	r12
    35f8:	df 92       	push	r13
    35fa:	ef 92       	push	r14
    35fc:	ff 92       	push	r15
    35fe:	0f 93       	push	r16
    3600:	1f 93       	push	r17
    3602:	cf 93       	push	r28
    3604:	df 93       	push	r29
    3606:	6c 01       	movw	r12, r24
    3608:	7a 01       	movw	r14, r20
    360a:	8b 01       	movw	r16, r22
    360c:	c0 e0       	ldi	r28, 0x00	; 0
    360e:	d0 e0       	ldi	r29, 0x00	; 0
    3610:	ce 15       	cp	r28, r14
    3612:	df 05       	cpc	r29, r15
    3614:	81 f0       	breq	.+32     	; 0x3636 <_ZN5Print5writeEPKhj+0x40>
    3616:	d8 01       	movw	r26, r16
    3618:	6d 91       	ld	r22, X+
    361a:	8d 01       	movw	r16, r26
    361c:	d6 01       	movw	r26, r12
    361e:	ed 91       	ld	r30, X+
    3620:	fc 91       	ld	r31, X
    3622:	01 90       	ld	r0, Z+
    3624:	f0 81       	ld	r31, Z
    3626:	e0 2d       	mov	r30, r0
    3628:	c6 01       	movw	r24, r12
    362a:	09 95       	icall
    362c:	89 2b       	or	r24, r25
    362e:	11 f0       	breq	.+4      	; 0x3634 <_ZN5Print5writeEPKhj+0x3e>
    3630:	21 96       	adiw	r28, 0x01	; 1
    3632:	ee cf       	rjmp	.-36     	; 0x3610 <_ZN5Print5writeEPKhj+0x1a>
    3634:	7e 01       	movw	r14, r28
    3636:	c7 01       	movw	r24, r14
    3638:	df 91       	pop	r29
    363a:	cf 91       	pop	r28
    363c:	1f 91       	pop	r17
    363e:	0f 91       	pop	r16
    3640:	ff 90       	pop	r15
    3642:	ef 90       	pop	r14
    3644:	df 90       	pop	r13
    3646:	cf 90       	pop	r12
    3648:	08 95       	ret

0000364a <_ZN5Print5writeEPKc>:
    364a:	61 15       	cp	r22, r1
    364c:	71 05       	cpc	r23, r1
    364e:	79 f0       	breq	.+30     	; 0x366e <_ZN5Print5writeEPKc+0x24>
    3650:	fb 01       	movw	r30, r22
    3652:	01 90       	ld	r0, Z+
    3654:	00 20       	and	r0, r0
    3656:	e9 f7       	brne	.-6      	; 0x3652 <_ZN5Print5writeEPKc+0x8>
    3658:	31 97       	sbiw	r30, 0x01	; 1
    365a:	af 01       	movw	r20, r30
    365c:	46 1b       	sub	r20, r22
    365e:	57 0b       	sbc	r21, r23
    3660:	dc 01       	movw	r26, r24
    3662:	ed 91       	ld	r30, X+
    3664:	fc 91       	ld	r31, X
    3666:	02 80       	ldd	r0, Z+2	; 0x02
    3668:	f3 81       	ldd	r31, Z+3	; 0x03
    366a:	e0 2d       	mov	r30, r0
    366c:	09 94       	ijmp
    366e:	80 e0       	ldi	r24, 0x00	; 0
    3670:	90 e0       	ldi	r25, 0x00	; 0
    3672:	08 95       	ret

00003674 <_ZN5Print5printEPKc>:
    3674:	0c 94 25 1b 	jmp	0x364a	; 0x364a <_ZN5Print5writeEPKc>

00003678 <_ZN5Print5printEc>:
    3678:	dc 01       	movw	r26, r24
    367a:	ed 91       	ld	r30, X+
    367c:	fc 91       	ld	r31, X
    367e:	01 90       	ld	r0, Z+
    3680:	f0 81       	ld	r31, Z
    3682:	e0 2d       	mov	r30, r0
    3684:	09 94       	ijmp

00003686 <_ZN5Print7printlnEv>:
    3686:	6b e8       	ldi	r22, 0x8B	; 139
    3688:	72 e0       	ldi	r23, 0x02	; 2
    368a:	0c 94 25 1b 	jmp	0x364a	; 0x364a <_ZN5Print5writeEPKc>

0000368e <_ZN5Print7printlnEPKc>:
    368e:	0f 93       	push	r16
    3690:	1f 93       	push	r17
    3692:	cf 93       	push	r28
    3694:	df 93       	push	r29
    3696:	ec 01       	movw	r28, r24
    3698:	0e 94 25 1b 	call	0x364a	; 0x364a <_ZN5Print5writeEPKc>
    369c:	8c 01       	movw	r16, r24
    369e:	ce 01       	movw	r24, r28
    36a0:	0e 94 43 1b 	call	0x3686	; 0x3686 <_ZN5Print7printlnEv>
    36a4:	80 0f       	add	r24, r16
    36a6:	91 1f       	adc	r25, r17
    36a8:	df 91       	pop	r29
    36aa:	cf 91       	pop	r28
    36ac:	1f 91       	pop	r17
    36ae:	0f 91       	pop	r16
    36b0:	08 95       	ret

000036b2 <_ZN5Print11printNumberEmh>:
    36b2:	8f 92       	push	r8
    36b4:	9f 92       	push	r9
    36b6:	af 92       	push	r10
    36b8:	bf 92       	push	r11
    36ba:	ef 92       	push	r14
    36bc:	ff 92       	push	r15
    36be:	0f 93       	push	r16
    36c0:	1f 93       	push	r17
    36c2:	cf 93       	push	r28
    36c4:	df 93       	push	r29
    36c6:	cd b7       	in	r28, 0x3d	; 61
    36c8:	de b7       	in	r29, 0x3e	; 62
    36ca:	a1 97       	sbiw	r28, 0x21	; 33
    36cc:	0f b6       	in	r0, 0x3f	; 63
    36ce:	f8 94       	cli
    36d0:	de bf       	out	0x3e, r29	; 62
    36d2:	0f be       	out	0x3f, r0	; 63
    36d4:	cd bf       	out	0x3d, r28	; 61
    36d6:	7c 01       	movw	r14, r24
    36d8:	fa 01       	movw	r30, r20
    36da:	cb 01       	movw	r24, r22
    36dc:	19 a2       	std	Y+33, r1	; 0x21
    36de:	22 30       	cpi	r18, 0x02	; 2
    36e0:	08 f4       	brcc	.+2      	; 0x36e4 <_ZN5Print11printNumberEmh+0x32>
    36e2:	2a e0       	ldi	r18, 0x0A	; 10
    36e4:	8e 01       	movw	r16, r28
    36e6:	0f 5d       	subi	r16, 0xDF	; 223
    36e8:	1f 4f       	sbci	r17, 0xFF	; 255
    36ea:	82 2e       	mov	r8, r18
    36ec:	91 2c       	mov	r9, r1
    36ee:	a1 2c       	mov	r10, r1
    36f0:	b1 2c       	mov	r11, r1
    36f2:	bf 01       	movw	r22, r30
    36f4:	a5 01       	movw	r20, r10
    36f6:	94 01       	movw	r18, r8
    36f8:	0e 94 22 1e 	call	0x3c44	; 0x3c44 <__udivmodsi4>
    36fc:	f9 01       	movw	r30, r18
    36fe:	ca 01       	movw	r24, r20
    3700:	01 50       	subi	r16, 0x01	; 1
    3702:	11 09       	sbc	r17, r1
    3704:	6a 30       	cpi	r22, 0x0A	; 10
    3706:	10 f4       	brcc	.+4      	; 0x370c <_ZN5Print11printNumberEmh+0x5a>
    3708:	60 5d       	subi	r22, 0xD0	; 208
    370a:	01 c0       	rjmp	.+2      	; 0x370e <_ZN5Print11printNumberEmh+0x5c>
    370c:	69 5c       	subi	r22, 0xC9	; 201
    370e:	d8 01       	movw	r26, r16
    3710:	6c 93       	st	X, r22
    3712:	23 2b       	or	r18, r19
    3714:	24 2b       	or	r18, r20
    3716:	25 2b       	or	r18, r21
    3718:	61 f7       	brne	.-40     	; 0x36f2 <_ZN5Print11printNumberEmh+0x40>
    371a:	b8 01       	movw	r22, r16
    371c:	c7 01       	movw	r24, r14
    371e:	0e 94 25 1b 	call	0x364a	; 0x364a <_ZN5Print5writeEPKc>
    3722:	a1 96       	adiw	r28, 0x21	; 33
    3724:	0f b6       	in	r0, 0x3f	; 63
    3726:	f8 94       	cli
    3728:	de bf       	out	0x3e, r29	; 62
    372a:	0f be       	out	0x3f, r0	; 63
    372c:	cd bf       	out	0x3d, r28	; 61
    372e:	df 91       	pop	r29
    3730:	cf 91       	pop	r28
    3732:	1f 91       	pop	r17
    3734:	0f 91       	pop	r16
    3736:	ff 90       	pop	r15
    3738:	ef 90       	pop	r14
    373a:	bf 90       	pop	r11
    373c:	af 90       	pop	r10
    373e:	9f 90       	pop	r9
    3740:	8f 90       	pop	r8
    3742:	08 95       	ret

00003744 <_ZN5Print5printEmi>:
    3744:	21 15       	cp	r18, r1
    3746:	31 05       	cpc	r19, r1
    3748:	41 f4       	brne	.+16     	; 0x375a <_ZN5Print5printEmi+0x16>
    374a:	dc 01       	movw	r26, r24
    374c:	ed 91       	ld	r30, X+
    374e:	fc 91       	ld	r31, X
    3750:	01 90       	ld	r0, Z+
    3752:	f0 81       	ld	r31, Z
    3754:	e0 2d       	mov	r30, r0
    3756:	64 2f       	mov	r22, r20
    3758:	09 94       	ijmp
    375a:	0c 94 59 1b 	jmp	0x36b2	; 0x36b2 <_ZN5Print11printNumberEmh>

0000375e <_ZN5Print5printEji>:
    375e:	9a 01       	movw	r18, r20
    3760:	ab 01       	movw	r20, r22
    3762:	60 e0       	ldi	r22, 0x00	; 0
    3764:	70 e0       	ldi	r23, 0x00	; 0
    3766:	0c 94 a2 1b 	jmp	0x3744	; 0x3744 <_ZN5Print5printEmi>

0000376a <_ZN5Print5printEli>:
    376a:	cf 92       	push	r12
    376c:	df 92       	push	r13
    376e:	ef 92       	push	r14
    3770:	ff 92       	push	r15
    3772:	0f 93       	push	r16
    3774:	1f 93       	push	r17
    3776:	cf 93       	push	r28
    3778:	df 93       	push	r29
    377a:	21 15       	cp	r18, r1
    377c:	31 05       	cpc	r19, r1
    377e:	81 f4       	brne	.+32     	; 0x37a0 <_ZN5Print5printEli+0x36>
    3780:	dc 01       	movw	r26, r24
    3782:	ed 91       	ld	r30, X+
    3784:	fc 91       	ld	r31, X
    3786:	01 90       	ld	r0, Z+
    3788:	f0 81       	ld	r31, Z
    378a:	e0 2d       	mov	r30, r0
    378c:	64 2f       	mov	r22, r20
    378e:	df 91       	pop	r29
    3790:	cf 91       	pop	r28
    3792:	1f 91       	pop	r17
    3794:	0f 91       	pop	r16
    3796:	ff 90       	pop	r15
    3798:	ef 90       	pop	r14
    379a:	df 90       	pop	r13
    379c:	cf 90       	pop	r12
    379e:	09 94       	ijmp
    37a0:	2a 30       	cpi	r18, 0x0A	; 10
    37a2:	31 05       	cpc	r19, r1
    37a4:	01 f5       	brne	.+64     	; 0x37e6 <_ZN5Print5printEli+0x7c>
    37a6:	77 ff       	sbrs	r23, 7
    37a8:	1d c0       	rjmp	.+58     	; 0x37e4 <_ZN5Print5printEli+0x7a>
    37aa:	6a 01       	movw	r12, r20
    37ac:	7b 01       	movw	r14, r22
    37ae:	ec 01       	movw	r28, r24
    37b0:	6d e2       	ldi	r22, 0x2D	; 45
    37b2:	0e 94 3c 1b 	call	0x3678	; 0x3678 <_ZN5Print5printEc>
    37b6:	8c 01       	movw	r16, r24
    37b8:	44 27       	eor	r20, r20
    37ba:	55 27       	eor	r21, r21
    37bc:	ba 01       	movw	r22, r20
    37be:	4c 19       	sub	r20, r12
    37c0:	5d 09       	sbc	r21, r13
    37c2:	6e 09       	sbc	r22, r14
    37c4:	7f 09       	sbc	r23, r15
    37c6:	2a e0       	ldi	r18, 0x0A	; 10
    37c8:	ce 01       	movw	r24, r28
    37ca:	0e 94 59 1b 	call	0x36b2	; 0x36b2 <_ZN5Print11printNumberEmh>
    37ce:	80 0f       	add	r24, r16
    37d0:	91 1f       	adc	r25, r17
    37d2:	df 91       	pop	r29
    37d4:	cf 91       	pop	r28
    37d6:	1f 91       	pop	r17
    37d8:	0f 91       	pop	r16
    37da:	ff 90       	pop	r15
    37dc:	ef 90       	pop	r14
    37de:	df 90       	pop	r13
    37e0:	cf 90       	pop	r12
    37e2:	08 95       	ret
    37e4:	2a e0       	ldi	r18, 0x0A	; 10
    37e6:	df 91       	pop	r29
    37e8:	cf 91       	pop	r28
    37ea:	1f 91       	pop	r17
    37ec:	0f 91       	pop	r16
    37ee:	ff 90       	pop	r15
    37f0:	ef 90       	pop	r14
    37f2:	df 90       	pop	r13
    37f4:	cf 90       	pop	r12
    37f6:	0c 94 59 1b 	jmp	0x36b2	; 0x36b2 <_ZN5Print11printNumberEmh>

000037fa <_ZN5Print5printEii>:
    37fa:	9a 01       	movw	r18, r20
    37fc:	ab 01       	movw	r20, r22
    37fe:	77 0f       	add	r23, r23
    3800:	66 0b       	sbc	r22, r22
    3802:	77 0b       	sbc	r23, r23
    3804:	0c 94 b5 1b 	jmp	0x376a	; 0x376a <_ZN5Print5printEli>

00003808 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
    3808:	7f 92       	push	r7
    380a:	8f 92       	push	r8
    380c:	9f 92       	push	r9
    380e:	af 92       	push	r10
    3810:	bf 92       	push	r11
    3812:	cf 92       	push	r12
    3814:	df 92       	push	r13
    3816:	ef 92       	push	r14
    3818:	ff 92       	push	r15
    381a:	0f 93       	push	r16
    381c:	1f 93       	push	r17
    381e:	cf 93       	push	r28
    3820:	df 93       	push	r29
    3822:	8c 01       	movw	r16, r24
    3824:	6a 01       	movw	r12, r20
    3826:	7b 01       	movw	r14, r22
    3828:	72 2e       	mov	r7, r18
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
    382a:	9a 01       	movw	r18, r20
    382c:	ab 01       	movw	r20, r22
    382e:	c7 01       	movw	r24, r14
    3830:	b6 01       	movw	r22, r12
    3832:	0e 94 0d 1e 	call	0x3c1a	; 0x3c1a <__unordsf2>
    3836:	88 23       	and	r24, r24
    3838:	19 f0       	breq	.+6      	; 0x3840 <_ZN5Print10printFloatEdh+0x38>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    383a:	6e e8       	ldi	r22, 0x8E	; 142
    383c:	72 e0       	ldi	r23, 0x02	; 2
    383e:	27 c0       	rjmp	.+78     	; 0x388e <_ZN5Print10printFloatEdh+0x86>
size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
    3840:	46 01       	movw	r8, r12
    3842:	57 01       	movw	r10, r14
    3844:	e8 94       	clt
    3846:	b7 f8       	bld	r11, 7
    3848:	2f ef       	ldi	r18, 0xFF	; 255
    384a:	3f ef       	ldi	r19, 0xFF	; 255
    384c:	4f e7       	ldi	r20, 0x7F	; 127
    384e:	5f e7       	ldi	r21, 0x7F	; 127
    3850:	c5 01       	movw	r24, r10
    3852:	b4 01       	movw	r22, r8
    3854:	0e 94 0d 1e 	call	0x3c1a	; 0x3c1a <__unordsf2>
    3858:	81 11       	cpse	r24, r1
    385a:	0d c0       	rjmp	.+26     	; 0x3876 <_ZN5Print10printFloatEdh+0x6e>
    385c:	2f ef       	ldi	r18, 0xFF	; 255
    385e:	3f ef       	ldi	r19, 0xFF	; 255
    3860:	4f e7       	ldi	r20, 0x7F	; 127
    3862:	5f e7       	ldi	r21, 0x7F	; 127
    3864:	c5 01       	movw	r24, r10
    3866:	b4 01       	movw	r22, r8
    3868:	0e 94 1c 17 	call	0x2e38	; 0x2e38 <__cmpsf2>
    386c:	18 16       	cp	r1, r24
    386e:	1c f4       	brge	.+6      	; 0x3876 <_ZN5Print10printFloatEdh+0x6e>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    3870:	62 e9       	ldi	r22, 0x92	; 146
    3872:	72 e0       	ldi	r23, 0x02	; 2
    3874:	0c c0       	rjmp	.+24     	; 0x388e <_ZN5Print10printFloatEdh+0x86>
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
    3876:	2f ef       	ldi	r18, 0xFF	; 255
    3878:	3f ef       	ldi	r19, 0xFF	; 255
    387a:	4f e7       	ldi	r20, 0x7F	; 127
    387c:	5f e4       	ldi	r21, 0x4F	; 79
    387e:	c7 01       	movw	r24, r14
    3880:	b6 01       	movw	r22, r12
    3882:	0e 94 a2 18 	call	0x3144	; 0x3144 <__gesf2>
    3886:	18 16       	cp	r1, r24
    3888:	94 f4       	brge	.+36     	; 0x38ae <_ZN5Print10printFloatEdh+0xa6>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    388a:	66 e9       	ldi	r22, 0x96	; 150
    388c:	72 e0       	ldi	r23, 0x02	; 2
    388e:	c8 01       	movw	r24, r16
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    3890:	df 91       	pop	r29
    3892:	cf 91       	pop	r28
    3894:	1f 91       	pop	r17
    3896:	0f 91       	pop	r16
    3898:	ff 90       	pop	r15
    389a:	ef 90       	pop	r14
    389c:	df 90       	pop	r13
    389e:	cf 90       	pop	r12
    38a0:	bf 90       	pop	r11
    38a2:	af 90       	pop	r10
    38a4:	9f 90       	pop	r9
    38a6:	8f 90       	pop	r8
    38a8:	7f 90       	pop	r7
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    38aa:	0c 94 25 1b 	jmp	0x364a	; 0x364a <_ZN5Print5writeEPKc>
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
    38ae:	2f ef       	ldi	r18, 0xFF	; 255
    38b0:	3f ef       	ldi	r19, 0xFF	; 255
    38b2:	4f e7       	ldi	r20, 0x7F	; 127
    38b4:	5f ec       	ldi	r21, 0xCF	; 207
    38b6:	c7 01       	movw	r24, r14
    38b8:	b6 01       	movw	r22, r12
    38ba:	0e 94 1c 17 	call	0x2e38	; 0x2e38 <__cmpsf2>
    38be:	87 fd       	sbrc	r24, 7
    38c0:	e4 cf       	rjmp	.-56     	; 0x388a <_ZN5Print10printFloatEdh+0x82>
  
  // Handle negative numbers
  if (number < 0.0)
    38c2:	20 e0       	ldi	r18, 0x00	; 0
    38c4:	30 e0       	ldi	r19, 0x00	; 0
    38c6:	a9 01       	movw	r20, r18
    38c8:	c7 01       	movw	r24, r14
    38ca:	b6 01       	movw	r22, r12
    38cc:	0e 94 1c 17 	call	0x2e38	; 0x2e38 <__cmpsf2>
    38d0:	87 ff       	sbrs	r24, 7
    38d2:	0a c0       	rjmp	.+20     	; 0x38e8 <_ZN5Print10printFloatEdh+0xe0>
  {
     n += print('-');
    38d4:	6d e2       	ldi	r22, 0x2D	; 45
    38d6:	c8 01       	movw	r24, r16
    38d8:	0e 94 3c 1b 	call	0x3678	; 0x3678 <_ZN5Print5printEc>
    38dc:	ec 01       	movw	r28, r24
     number = -number;
    38de:	f7 fa       	bst	r15, 7
    38e0:	f0 94       	com	r15
    38e2:	f7 f8       	bld	r15, 7
    38e4:	f0 94       	com	r15
    38e6:	02 c0       	rjmp	.+4      	; 0x38ec <_ZN5Print10printFloatEdh+0xe4>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
    38e8:	c0 e0       	ldi	r28, 0x00	; 0
    38ea:	d0 e0       	ldi	r29, 0x00	; 0
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    38ec:	b1 2c       	mov	r11, r1
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
    38ee:	60 e0       	ldi	r22, 0x00	; 0
    38f0:	70 e0       	ldi	r23, 0x00	; 0
    38f2:	80 e0       	ldi	r24, 0x00	; 0
    38f4:	9f e3       	ldi	r25, 0x3F	; 63
  for (uint8_t i=0; i<digits; ++i)
    38f6:	7b 14       	cp	r7, r11
    38f8:	41 f0       	breq	.+16     	; 0x390a <_ZN5Print10printFloatEdh+0x102>
    rounding /= 10.0;
    38fa:	20 e0       	ldi	r18, 0x00	; 0
    38fc:	30 e0       	ldi	r19, 0x00	; 0
    38fe:	40 e2       	ldi	r20, 0x20	; 32
    3900:	51 e4       	ldi	r21, 0x41	; 65
    3902:	0e 94 21 17 	call	0x2e42	; 0x2e42 <__divsf3>
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    3906:	b3 94       	inc	r11
    3908:	f6 cf       	rjmp	.-20     	; 0x38f6 <_ZN5Print10printFloatEdh+0xee>
    rounding /= 10.0;
  
  number += rounding;
    390a:	a7 01       	movw	r20, r14
    390c:	96 01       	movw	r18, r12
    390e:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <__addsf3>
    3912:	6b 01       	movw	r12, r22
    3914:	7c 01       	movw	r14, r24

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
    3916:	0e 94 9a 17 	call	0x2f34	; 0x2f34 <__fixunssfsi>
    391a:	4b 01       	movw	r8, r22
    391c:	5c 01       	movw	r10, r24
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
    391e:	2a e0       	ldi	r18, 0x0A	; 10
    3920:	ab 01       	movw	r20, r22
    3922:	bc 01       	movw	r22, r24
    3924:	c8 01       	movw	r24, r16
    3926:	0e 94 59 1b 	call	0x36b2	; 0x36b2 <_ZN5Print11printNumberEmh>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    392a:	c8 0f       	add	r28, r24
    392c:	d9 1f       	adc	r29, r25

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    392e:	77 20       	and	r7, r7
    3930:	b9 f1       	breq	.+110    	; 0x39a0 <_ZN5Print10printFloatEdh+0x198>
  
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
    3932:	c5 01       	movw	r24, r10
    3934:	b4 01       	movw	r22, r8
    3936:	0e 94 c9 17 	call	0x2f92	; 0x2f92 <__floatunsisf>
    393a:	9b 01       	movw	r18, r22
    393c:	ac 01       	movw	r20, r24
    393e:	c7 01       	movw	r24, r14
    3940:	b6 01       	movw	r22, r12
    3942:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <__subsf3>
    3946:	6b 01       	movw	r12, r22
    3948:	7c 01       	movw	r14, r24
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print('.'); 
    394a:	6e e2       	ldi	r22, 0x2E	; 46
    394c:	c8 01       	movw	r24, r16
    394e:	0e 94 3c 1b 	call	0x3678	; 0x3678 <_ZN5Print5printEc>
    3952:	c8 0f       	add	r28, r24
    3954:	d9 1f       	adc	r29, r25
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    3956:	20 e0       	ldi	r18, 0x00	; 0
    3958:	30 e0       	ldi	r19, 0x00	; 0
    395a:	40 e2       	ldi	r20, 0x20	; 32
    395c:	51 e4       	ldi	r21, 0x41	; 65
    395e:	c7 01       	movw	r24, r14
    3960:	b6 01       	movw	r22, r12
    3962:	0e 94 af 18 	call	0x315e	; 0x315e <__mulsf3>
    3966:	4b 01       	movw	r8, r22
    3968:	5c 01       	movw	r10, r24
    unsigned int toPrint = (unsigned int)(remainder);
    396a:	0e 94 9a 17 	call	0x2f34	; 0x2f34 <__fixunssfsi>
    396e:	6b 01       	movw	r12, r22
    3970:	7c 01       	movw	r14, r24
    n += print(toPrint);
    3972:	4a e0       	ldi	r20, 0x0A	; 10
    3974:	50 e0       	ldi	r21, 0x00	; 0
    3976:	c8 01       	movw	r24, r16
    3978:	0e 94 af 1b 	call	0x375e	; 0x375e <_ZN5Print5printEji>
    397c:	c8 0f       	add	r28, r24
    397e:	d9 1f       	adc	r29, r25
    remainder -= toPrint; 
    3980:	b6 01       	movw	r22, r12
    3982:	80 e0       	ldi	r24, 0x00	; 0
    3984:	90 e0       	ldi	r25, 0x00	; 0
    3986:	0e 94 c9 17 	call	0x2f92	; 0x2f92 <__floatunsisf>
    398a:	9b 01       	movw	r18, r22
    398c:	ac 01       	movw	r20, r24
    398e:	c5 01       	movw	r24, r10
    3990:	b4 01       	movw	r22, r8
    3992:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <__subsf3>
    3996:	6b 01       	movw	r12, r22
    3998:	7c 01       	movw	r14, r24
    399a:	7a 94       	dec	r7
  if (digits > 0) {
    n += print('.'); 
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
    399c:	71 10       	cpse	r7, r1
    399e:	db cf       	rjmp	.-74     	; 0x3956 <_ZN5Print10printFloatEdh+0x14e>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    39a0:	ce 01       	movw	r24, r28
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    39a2:	df 91       	pop	r29
    39a4:	cf 91       	pop	r28
    39a6:	1f 91       	pop	r17
    39a8:	0f 91       	pop	r16
    39aa:	ff 90       	pop	r15
    39ac:	ef 90       	pop	r14
    39ae:	df 90       	pop	r13
    39b0:	cf 90       	pop	r12
    39b2:	bf 90       	pop	r11
    39b4:	af 90       	pop	r10
    39b6:	9f 90       	pop	r9
    39b8:	8f 90       	pop	r8
    39ba:	7f 90       	pop	r7
    39bc:	08 95       	ret

000039be <_ZN5Print5printEdi>:
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    39be:	0c 94 04 1c 	jmp	0x3808	; 0x3808 <_ZN5Print10printFloatEdh>

000039c2 <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
    39c2:	1f 92       	push	r1
    39c4:	0f 92       	push	r0
    39c6:	0f b6       	in	r0, 0x3f	; 63
    39c8:	0f 92       	push	r0
    39ca:	11 24       	eor	r1, r1
    39cc:	2f 93       	push	r18
    39ce:	3f 93       	push	r19
    39d0:	8f 93       	push	r24
    39d2:	9f 93       	push	r25
    39d4:	af 93       	push	r26
    39d6:	bf 93       	push	r27
    39d8:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <timer0_millis>
    39dc:	90 91 cd 04 	lds	r25, 0x04CD	; 0x8004cd <timer0_millis+0x1>
    39e0:	a0 91 ce 04 	lds	r26, 0x04CE	; 0x8004ce <timer0_millis+0x2>
    39e4:	b0 91 cf 04 	lds	r27, 0x04CF	; 0x8004cf <timer0_millis+0x3>
    39e8:	30 91 cb 04 	lds	r19, 0x04CB	; 0x8004cb <timer0_fract>
    39ec:	20 e1       	ldi	r18, 0x10	; 16
    39ee:	23 0f       	add	r18, r19
    39f0:	2d 37       	cpi	r18, 0x7D	; 125
    39f2:	28 f0       	brcs	.+10     	; 0x39fe <__vector_16+0x3c>
    39f4:	23 e9       	ldi	r18, 0x93	; 147
    39f6:	23 0f       	add	r18, r19
    39f8:	01 96       	adiw	r24, 0x01	; 1
    39fa:	a1 1d       	adc	r26, r1
    39fc:	b1 1d       	adc	r27, r1
    39fe:	20 93 cb 04 	sts	0x04CB, r18	; 0x8004cb <timer0_fract>
    3a02:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <timer0_millis>
    3a06:	90 93 cd 04 	sts	0x04CD, r25	; 0x8004cd <timer0_millis+0x1>
    3a0a:	a0 93 ce 04 	sts	0x04CE, r26	; 0x8004ce <timer0_millis+0x2>
    3a0e:	b0 93 cf 04 	sts	0x04CF, r27	; 0x8004cf <timer0_millis+0x3>
    3a12:	80 91 d0 04 	lds	r24, 0x04D0	; 0x8004d0 <timer0_overflow_count>
    3a16:	90 91 d1 04 	lds	r25, 0x04D1	; 0x8004d1 <timer0_overflow_count+0x1>
    3a1a:	a0 91 d2 04 	lds	r26, 0x04D2	; 0x8004d2 <timer0_overflow_count+0x2>
    3a1e:	b0 91 d3 04 	lds	r27, 0x04D3	; 0x8004d3 <timer0_overflow_count+0x3>
    3a22:	01 96       	adiw	r24, 0x01	; 1
    3a24:	a1 1d       	adc	r26, r1
    3a26:	b1 1d       	adc	r27, r1
    3a28:	80 93 d0 04 	sts	0x04D0, r24	; 0x8004d0 <timer0_overflow_count>
    3a2c:	90 93 d1 04 	sts	0x04D1, r25	; 0x8004d1 <timer0_overflow_count+0x1>
    3a30:	a0 93 d2 04 	sts	0x04D2, r26	; 0x8004d2 <timer0_overflow_count+0x2>
    3a34:	b0 93 d3 04 	sts	0x04D3, r27	; 0x8004d3 <timer0_overflow_count+0x3>
    3a38:	bf 91       	pop	r27
    3a3a:	af 91       	pop	r26
    3a3c:	9f 91       	pop	r25
    3a3e:	8f 91       	pop	r24
    3a40:	3f 91       	pop	r19
    3a42:	2f 91       	pop	r18
    3a44:	0f 90       	pop	r0
    3a46:	0f be       	out	0x3f, r0	; 63
    3a48:	0f 90       	pop	r0
    3a4a:	1f 90       	pop	r1
    3a4c:	18 95       	reti

00003a4e <millis>:
    3a4e:	2f b7       	in	r18, 0x3f	; 63
    3a50:	f8 94       	cli
    3a52:	60 91 cc 04 	lds	r22, 0x04CC	; 0x8004cc <timer0_millis>
    3a56:	70 91 cd 04 	lds	r23, 0x04CD	; 0x8004cd <timer0_millis+0x1>
    3a5a:	80 91 ce 04 	lds	r24, 0x04CE	; 0x8004ce <timer0_millis+0x2>
    3a5e:	90 91 cf 04 	lds	r25, 0x04CF	; 0x8004cf <timer0_millis+0x3>
    3a62:	2f bf       	out	0x3f, r18	; 63
    3a64:	08 95       	ret

00003a66 <micros>:
    3a66:	3f b7       	in	r19, 0x3f	; 63
    3a68:	f8 94       	cli
    3a6a:	80 91 d0 04 	lds	r24, 0x04D0	; 0x8004d0 <timer0_overflow_count>
    3a6e:	90 91 d1 04 	lds	r25, 0x04D1	; 0x8004d1 <timer0_overflow_count+0x1>
    3a72:	a0 91 d2 04 	lds	r26, 0x04D2	; 0x8004d2 <timer0_overflow_count+0x2>
    3a76:	b0 91 d3 04 	lds	r27, 0x04D3	; 0x8004d3 <timer0_overflow_count+0x3>
    3a7a:	26 b5       	in	r18, 0x26	; 38
    3a7c:	a8 9b       	sbis	0x15, 0	; 21
    3a7e:	05 c0       	rjmp	.+10     	; 0x3a8a <micros+0x24>
    3a80:	2f 3f       	cpi	r18, 0xFF	; 255
    3a82:	19 f0       	breq	.+6      	; 0x3a8a <micros+0x24>
    3a84:	01 96       	adiw	r24, 0x01	; 1
    3a86:	a1 1d       	adc	r26, r1
    3a88:	b1 1d       	adc	r27, r1
    3a8a:	3f bf       	out	0x3f, r19	; 63
    3a8c:	ba 2f       	mov	r27, r26
    3a8e:	a9 2f       	mov	r26, r25
    3a90:	98 2f       	mov	r25, r24
    3a92:	88 27       	eor	r24, r24
    3a94:	82 0f       	add	r24, r18
    3a96:	91 1d       	adc	r25, r1
    3a98:	a1 1d       	adc	r26, r1
    3a9a:	b1 1d       	adc	r27, r1
    3a9c:	bc 01       	movw	r22, r24
    3a9e:	cd 01       	movw	r24, r26
    3aa0:	96 95       	lsr	r25
    3aa2:	87 95       	ror	r24
    3aa4:	77 95       	ror	r23
    3aa6:	67 95       	ror	r22
    3aa8:	08 95       	ret

00003aaa <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    3aaa:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    3aac:	84 b5       	in	r24, 0x24	; 36
    3aae:	82 60       	ori	r24, 0x02	; 2
    3ab0:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    3ab2:	84 b5       	in	r24, 0x24	; 36
    3ab4:	81 60       	ori	r24, 0x01	; 1
    3ab6:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    3ab8:	85 b5       	in	r24, 0x25	; 37
    3aba:	82 60       	ori	r24, 0x02	; 2
    3abc:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    3abe:	85 b5       	in	r24, 0x25	; 37
    3ac0:	81 60       	ori	r24, 0x01	; 1
    3ac2:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    3ac4:	ee e6       	ldi	r30, 0x6E	; 110
    3ac6:	f0 e0       	ldi	r31, 0x00	; 0
    3ac8:	80 81       	ld	r24, Z
    3aca:	81 60       	ori	r24, 0x01	; 1
    3acc:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    3ace:	e1 e8       	ldi	r30, 0x81	; 129
    3ad0:	f0 e0       	ldi	r31, 0x00	; 0
    3ad2:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    3ad4:	80 81       	ld	r24, Z
    3ad6:	82 60       	ori	r24, 0x02	; 2
    3ad8:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    3ada:	80 81       	ld	r24, Z
    3adc:	81 60       	ori	r24, 0x01	; 1
    3ade:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    3ae0:	e0 e8       	ldi	r30, 0x80	; 128
    3ae2:	f0 e0       	ldi	r31, 0x00	; 0
    3ae4:	80 81       	ld	r24, Z
    3ae6:	81 60       	ori	r24, 0x01	; 1
    3ae8:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    3aea:	e1 eb       	ldi	r30, 0xB1	; 177
    3aec:	f0 e0       	ldi	r31, 0x00	; 0
    3aee:	80 81       	ld	r24, Z
    3af0:	84 60       	ori	r24, 0x04	; 4
    3af2:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    3af4:	e0 eb       	ldi	r30, 0xB0	; 176
    3af6:	f0 e0       	ldi	r31, 0x00	; 0
    3af8:	80 81       	ld	r24, Z
    3afa:	81 60       	ori	r24, 0x01	; 1
    3afc:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    3afe:	ea e7       	ldi	r30, 0x7A	; 122
    3b00:	f0 e0       	ldi	r31, 0x00	; 0
    3b02:	80 81       	ld	r24, Z
    3b04:	84 60       	ori	r24, 0x04	; 4
    3b06:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    3b08:	80 81       	ld	r24, Z
    3b0a:	82 60       	ori	r24, 0x02	; 2
    3b0c:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    3b0e:	80 81       	ld	r24, Z
    3b10:	81 60       	ori	r24, 0x01	; 1
    3b12:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    3b14:	80 81       	ld	r24, Z
    3b16:	80 68       	ori	r24, 0x80	; 128
    3b18:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    3b1a:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    3b1e:	08 95       	ret

00003b20 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    3b20:	cf 93       	push	r28
    3b22:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    3b24:	90 e0       	ldi	r25, 0x00	; 0
    3b26:	fc 01       	movw	r30, r24
    3b28:	e7 5f       	subi	r30, 0xF7	; 247
    3b2a:	fe 4f       	sbci	r31, 0xFE	; 254
    3b2c:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    3b2e:	fc 01       	movw	r30, r24
    3b30:	e3 5e       	subi	r30, 0xE3	; 227
    3b32:	fe 4f       	sbci	r31, 0xFE	; 254
    3b34:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    3b36:	88 23       	and	r24, r24
    3b38:	61 f1       	breq	.+88     	; 0x3b92 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    3b3a:	90 e0       	ldi	r25, 0x00	; 0
    3b3c:	88 0f       	add	r24, r24
    3b3e:	99 1f       	adc	r25, r25
    3b40:	fc 01       	movw	r30, r24
    3b42:	eb 5b       	subi	r30, 0xBB	; 187
    3b44:	fe 4f       	sbci	r31, 0xFE	; 254
    3b46:	c5 91       	lpm	r28, Z+
    3b48:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    3b4a:	fc 01       	movw	r30, r24
    3b4c:	e5 5c       	subi	r30, 0xC5	; 197
    3b4e:	fe 4f       	sbci	r31, 0xFE	; 254
    3b50:	a5 91       	lpm	r26, Z+
    3b52:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    3b54:	61 11       	cpse	r22, r1
    3b56:	09 c0       	rjmp	.+18     	; 0x3b6a <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    3b58:	9f b7       	in	r25, 0x3f	; 63
                cli();
    3b5a:	f8 94       	cli
		*reg &= ~bit;
    3b5c:	88 81       	ld	r24, Y
    3b5e:	20 95       	com	r18
    3b60:	82 23       	and	r24, r18
    3b62:	88 83       	st	Y, r24
		*out &= ~bit;
    3b64:	ec 91       	ld	r30, X
    3b66:	2e 23       	and	r18, r30
    3b68:	0b c0       	rjmp	.+22     	; 0x3b80 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    3b6a:	62 30       	cpi	r22, 0x02	; 2
    3b6c:	61 f4       	brne	.+24     	; 0x3b86 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    3b6e:	9f b7       	in	r25, 0x3f	; 63
                cli();
    3b70:	f8 94       	cli
		*reg &= ~bit;
    3b72:	88 81       	ld	r24, Y
    3b74:	32 2f       	mov	r19, r18
    3b76:	30 95       	com	r19
    3b78:	83 23       	and	r24, r19
    3b7a:	88 83       	st	Y, r24
		*out |= bit;
    3b7c:	ec 91       	ld	r30, X
    3b7e:	2e 2b       	or	r18, r30
    3b80:	2c 93       	st	X, r18
		SREG = oldSREG;
    3b82:	9f bf       	out	0x3f, r25	; 63
    3b84:	06 c0       	rjmp	.+12     	; 0x3b92 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    3b86:	8f b7       	in	r24, 0x3f	; 63
                cli();
    3b88:	f8 94       	cli
		*reg |= bit;
    3b8a:	e8 81       	ld	r30, Y
    3b8c:	2e 2b       	or	r18, r30
    3b8e:	28 83       	st	Y, r18
		SREG = oldSREG;
    3b90:	8f bf       	out	0x3f, r24	; 63
	}
}
    3b92:	df 91       	pop	r29
    3b94:	cf 91       	pop	r28
    3b96:	08 95       	ret

00003b98 <_Z3maplllll>:
  long diff = howbig - howsmall;
  return random(diff) + howsmall;
}

long map(long x, long in_min, long in_max, long out_min, long out_max)
{
    3b98:	4f 92       	push	r4
    3b9a:	5f 92       	push	r5
    3b9c:	6f 92       	push	r6
    3b9e:	7f 92       	push	r7
    3ba0:	af 92       	push	r10
    3ba2:	bf 92       	push	r11
    3ba4:	cf 92       	push	r12
    3ba6:	df 92       	push	r13
    3ba8:	ef 92       	push	r14
    3baa:	ff 92       	push	r15
    3bac:	0f 93       	push	r16
    3bae:	1f 93       	push	r17
    3bb0:	cf 93       	push	r28
    3bb2:	df 93       	push	r29
    3bb4:	cd b7       	in	r28, 0x3d	; 61
    3bb6:	de b7       	in	r29, 0x3e	; 62
    3bb8:	29 01       	movw	r4, r18
    3bba:	3a 01       	movw	r6, r20
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    3bbc:	9b 01       	movw	r18, r22
    3bbe:	ac 01       	movw	r20, r24
    3bc0:	24 19       	sub	r18, r4
    3bc2:	35 09       	sbc	r19, r5
    3bc4:	46 09       	sbc	r20, r6
    3bc6:	57 09       	sbc	r21, r7
    3bc8:	89 89       	ldd	r24, Y+17	; 0x11
    3bca:	9a 89       	ldd	r25, Y+18	; 0x12
    3bcc:	ab 89       	ldd	r26, Y+19	; 0x13
    3bce:	bc 89       	ldd	r27, Y+20	; 0x14
    3bd0:	bc 01       	movw	r22, r24
    3bd2:	cd 01       	movw	r24, r26
    3bd4:	6a 19       	sub	r22, r10
    3bd6:	7b 09       	sbc	r23, r11
    3bd8:	8c 09       	sbc	r24, r12
    3bda:	9d 09       	sbc	r25, r13
    3bdc:	0e 94 12 1e 	call	0x3c24	; 0x3c24 <__mulsi3>
    3be0:	a8 01       	movw	r20, r16
    3be2:	97 01       	movw	r18, r14
    3be4:	24 19       	sub	r18, r4
    3be6:	35 09       	sbc	r19, r5
    3be8:	46 09       	sbc	r20, r6
    3bea:	57 09       	sbc	r21, r7
    3bec:	0e 94 44 1e 	call	0x3c88	; 0x3c88 <__divmodsi4>
    3bf0:	ca 01       	movw	r24, r20
    3bf2:	b9 01       	movw	r22, r18
    3bf4:	6a 0d       	add	r22, r10
    3bf6:	7b 1d       	adc	r23, r11
    3bf8:	8c 1d       	adc	r24, r12
    3bfa:	9d 1d       	adc	r25, r13
}
    3bfc:	df 91       	pop	r29
    3bfe:	cf 91       	pop	r28
    3c00:	1f 91       	pop	r17
    3c02:	0f 91       	pop	r16
    3c04:	ff 90       	pop	r15
    3c06:	ef 90       	pop	r14
    3c08:	df 90       	pop	r13
    3c0a:	cf 90       	pop	r12
    3c0c:	bf 90       	pop	r11
    3c0e:	af 90       	pop	r10
    3c10:	7f 90       	pop	r7
    3c12:	6f 90       	pop	r6
    3c14:	5f 90       	pop	r5
    3c16:	4f 90       	pop	r4
    3c18:	08 95       	ret

00003c1a <__unordsf2>:
    3c1a:	0e 94 06 18 	call	0x300c	; 0x300c <__fp_cmp>
    3c1e:	88 0b       	sbc	r24, r24
    3c20:	99 0b       	sbc	r25, r25
    3c22:	08 95       	ret

00003c24 <__mulsi3>:
    3c24:	db 01       	movw	r26, r22
    3c26:	8f 93       	push	r24
    3c28:	9f 93       	push	r25
    3c2a:	0e 94 69 1e 	call	0x3cd2	; 0x3cd2 <__muluhisi3>
    3c2e:	bf 91       	pop	r27
    3c30:	af 91       	pop	r26
    3c32:	a2 9f       	mul	r26, r18
    3c34:	80 0d       	add	r24, r0
    3c36:	91 1d       	adc	r25, r1
    3c38:	a3 9f       	mul	r26, r19
    3c3a:	90 0d       	add	r25, r0
    3c3c:	b2 9f       	mul	r27, r18
    3c3e:	90 0d       	add	r25, r0
    3c40:	11 24       	eor	r1, r1
    3c42:	08 95       	ret

00003c44 <__udivmodsi4>:
    3c44:	a1 e2       	ldi	r26, 0x21	; 33
    3c46:	1a 2e       	mov	r1, r26
    3c48:	aa 1b       	sub	r26, r26
    3c4a:	bb 1b       	sub	r27, r27
    3c4c:	fd 01       	movw	r30, r26
    3c4e:	0d c0       	rjmp	.+26     	; 0x3c6a <__udivmodsi4_ep>

00003c50 <__udivmodsi4_loop>:
    3c50:	aa 1f       	adc	r26, r26
    3c52:	bb 1f       	adc	r27, r27
    3c54:	ee 1f       	adc	r30, r30
    3c56:	ff 1f       	adc	r31, r31
    3c58:	a2 17       	cp	r26, r18
    3c5a:	b3 07       	cpc	r27, r19
    3c5c:	e4 07       	cpc	r30, r20
    3c5e:	f5 07       	cpc	r31, r21
    3c60:	20 f0       	brcs	.+8      	; 0x3c6a <__udivmodsi4_ep>
    3c62:	a2 1b       	sub	r26, r18
    3c64:	b3 0b       	sbc	r27, r19
    3c66:	e4 0b       	sbc	r30, r20
    3c68:	f5 0b       	sbc	r31, r21

00003c6a <__udivmodsi4_ep>:
    3c6a:	66 1f       	adc	r22, r22
    3c6c:	77 1f       	adc	r23, r23
    3c6e:	88 1f       	adc	r24, r24
    3c70:	99 1f       	adc	r25, r25
    3c72:	1a 94       	dec	r1
    3c74:	69 f7       	brne	.-38     	; 0x3c50 <__udivmodsi4_loop>
    3c76:	60 95       	com	r22
    3c78:	70 95       	com	r23
    3c7a:	80 95       	com	r24
    3c7c:	90 95       	com	r25
    3c7e:	9b 01       	movw	r18, r22
    3c80:	ac 01       	movw	r20, r24
    3c82:	bd 01       	movw	r22, r26
    3c84:	cf 01       	movw	r24, r30
    3c86:	08 95       	ret

00003c88 <__divmodsi4>:
    3c88:	05 2e       	mov	r0, r21
    3c8a:	97 fb       	bst	r25, 7
    3c8c:	1e f4       	brtc	.+6      	; 0x3c94 <__divmodsi4+0xc>
    3c8e:	00 94       	com	r0
    3c90:	0e 94 5b 1e 	call	0x3cb6	; 0x3cb6 <__negsi2>
    3c94:	57 fd       	sbrc	r21, 7
    3c96:	07 d0       	rcall	.+14     	; 0x3ca6 <__divmodsi4_neg2>
    3c98:	0e 94 22 1e 	call	0x3c44	; 0x3c44 <__udivmodsi4>
    3c9c:	07 fc       	sbrc	r0, 7
    3c9e:	03 d0       	rcall	.+6      	; 0x3ca6 <__divmodsi4_neg2>
    3ca0:	4e f4       	brtc	.+18     	; 0x3cb4 <__divmodsi4_exit>
    3ca2:	0c 94 5b 1e 	jmp	0x3cb6	; 0x3cb6 <__negsi2>

00003ca6 <__divmodsi4_neg2>:
    3ca6:	50 95       	com	r21
    3ca8:	40 95       	com	r20
    3caa:	30 95       	com	r19
    3cac:	21 95       	neg	r18
    3cae:	3f 4f       	sbci	r19, 0xFF	; 255
    3cb0:	4f 4f       	sbci	r20, 0xFF	; 255
    3cb2:	5f 4f       	sbci	r21, 0xFF	; 255

00003cb4 <__divmodsi4_exit>:
    3cb4:	08 95       	ret

00003cb6 <__negsi2>:
    3cb6:	90 95       	com	r25
    3cb8:	80 95       	com	r24
    3cba:	70 95       	com	r23
    3cbc:	61 95       	neg	r22
    3cbe:	7f 4f       	sbci	r23, 0xFF	; 255
    3cc0:	8f 4f       	sbci	r24, 0xFF	; 255
    3cc2:	9f 4f       	sbci	r25, 0xFF	; 255
    3cc4:	08 95       	ret

00003cc6 <__tablejump2__>:
    3cc6:	ee 0f       	add	r30, r30
    3cc8:	ff 1f       	adc	r31, r31
    3cca:	05 90       	lpm	r0, Z+
    3ccc:	f4 91       	lpm	r31, Z
    3cce:	e0 2d       	mov	r30, r0
    3cd0:	09 94       	ijmp

00003cd2 <__muluhisi3>:
    3cd2:	0e 94 74 1e 	call	0x3ce8	; 0x3ce8 <__umulhisi3>
    3cd6:	a5 9f       	mul	r26, r21
    3cd8:	90 0d       	add	r25, r0
    3cda:	b4 9f       	mul	r27, r20
    3cdc:	90 0d       	add	r25, r0
    3cde:	a4 9f       	mul	r26, r20
    3ce0:	80 0d       	add	r24, r0
    3ce2:	91 1d       	adc	r25, r1
    3ce4:	11 24       	eor	r1, r1
    3ce6:	08 95       	ret

00003ce8 <__umulhisi3>:
    3ce8:	a2 9f       	mul	r26, r18
    3cea:	b0 01       	movw	r22, r0
    3cec:	b3 9f       	mul	r27, r19
    3cee:	c0 01       	movw	r24, r0
    3cf0:	a3 9f       	mul	r26, r19
    3cf2:	70 0d       	add	r23, r0
    3cf4:	81 1d       	adc	r24, r1
    3cf6:	11 24       	eor	r1, r1
    3cf8:	91 1d       	adc	r25, r1
    3cfa:	b2 9f       	mul	r27, r18
    3cfc:	70 0d       	add	r23, r0
    3cfe:	81 1d       	adc	r24, r1
    3d00:	11 24       	eor	r1, r1
    3d02:	91 1d       	adc	r25, r1
    3d04:	08 95       	ret

00003d06 <malloc>:
    3d06:	0f 93       	push	r16
    3d08:	1f 93       	push	r17
    3d0a:	cf 93       	push	r28
    3d0c:	df 93       	push	r29
    3d0e:	82 30       	cpi	r24, 0x02	; 2
    3d10:	91 05       	cpc	r25, r1
    3d12:	10 f4       	brcc	.+4      	; 0x3d18 <malloc+0x12>
    3d14:	82 e0       	ldi	r24, 0x02	; 2
    3d16:	90 e0       	ldi	r25, 0x00	; 0
    3d18:	e0 91 d6 04 	lds	r30, 0x04D6	; 0x8004d6 <__flp>
    3d1c:	f0 91 d7 04 	lds	r31, 0x04D7	; 0x8004d7 <__flp+0x1>
    3d20:	20 e0       	ldi	r18, 0x00	; 0
    3d22:	30 e0       	ldi	r19, 0x00	; 0
    3d24:	a0 e0       	ldi	r26, 0x00	; 0
    3d26:	b0 e0       	ldi	r27, 0x00	; 0
    3d28:	30 97       	sbiw	r30, 0x00	; 0
    3d2a:	19 f1       	breq	.+70     	; 0x3d72 <malloc+0x6c>
    3d2c:	40 81       	ld	r20, Z
    3d2e:	51 81       	ldd	r21, Z+1	; 0x01
    3d30:	02 81       	ldd	r16, Z+2	; 0x02
    3d32:	13 81       	ldd	r17, Z+3	; 0x03
    3d34:	48 17       	cp	r20, r24
    3d36:	59 07       	cpc	r21, r25
    3d38:	c8 f0       	brcs	.+50     	; 0x3d6c <malloc+0x66>
    3d3a:	84 17       	cp	r24, r20
    3d3c:	95 07       	cpc	r25, r21
    3d3e:	69 f4       	brne	.+26     	; 0x3d5a <malloc+0x54>
    3d40:	10 97       	sbiw	r26, 0x00	; 0
    3d42:	31 f0       	breq	.+12     	; 0x3d50 <malloc+0x4a>
    3d44:	12 96       	adiw	r26, 0x02	; 2
    3d46:	0c 93       	st	X, r16
    3d48:	12 97       	sbiw	r26, 0x02	; 2
    3d4a:	13 96       	adiw	r26, 0x03	; 3
    3d4c:	1c 93       	st	X, r17
    3d4e:	27 c0       	rjmp	.+78     	; 0x3d9e <malloc+0x98>
    3d50:	00 93 d6 04 	sts	0x04D6, r16	; 0x8004d6 <__flp>
    3d54:	10 93 d7 04 	sts	0x04D7, r17	; 0x8004d7 <__flp+0x1>
    3d58:	22 c0       	rjmp	.+68     	; 0x3d9e <malloc+0x98>
    3d5a:	21 15       	cp	r18, r1
    3d5c:	31 05       	cpc	r19, r1
    3d5e:	19 f0       	breq	.+6      	; 0x3d66 <malloc+0x60>
    3d60:	42 17       	cp	r20, r18
    3d62:	53 07       	cpc	r21, r19
    3d64:	18 f4       	brcc	.+6      	; 0x3d6c <malloc+0x66>
    3d66:	9a 01       	movw	r18, r20
    3d68:	bd 01       	movw	r22, r26
    3d6a:	ef 01       	movw	r28, r30
    3d6c:	df 01       	movw	r26, r30
    3d6e:	f8 01       	movw	r30, r16
    3d70:	db cf       	rjmp	.-74     	; 0x3d28 <malloc+0x22>
    3d72:	21 15       	cp	r18, r1
    3d74:	31 05       	cpc	r19, r1
    3d76:	f9 f0       	breq	.+62     	; 0x3db6 <malloc+0xb0>
    3d78:	28 1b       	sub	r18, r24
    3d7a:	39 0b       	sbc	r19, r25
    3d7c:	24 30       	cpi	r18, 0x04	; 4
    3d7e:	31 05       	cpc	r19, r1
    3d80:	80 f4       	brcc	.+32     	; 0x3da2 <malloc+0x9c>
    3d82:	8a 81       	ldd	r24, Y+2	; 0x02
    3d84:	9b 81       	ldd	r25, Y+3	; 0x03
    3d86:	61 15       	cp	r22, r1
    3d88:	71 05       	cpc	r23, r1
    3d8a:	21 f0       	breq	.+8      	; 0x3d94 <malloc+0x8e>
    3d8c:	fb 01       	movw	r30, r22
    3d8e:	93 83       	std	Z+3, r25	; 0x03
    3d90:	82 83       	std	Z+2, r24	; 0x02
    3d92:	04 c0       	rjmp	.+8      	; 0x3d9c <malloc+0x96>
    3d94:	90 93 d7 04 	sts	0x04D7, r25	; 0x8004d7 <__flp+0x1>
    3d98:	80 93 d6 04 	sts	0x04D6, r24	; 0x8004d6 <__flp>
    3d9c:	fe 01       	movw	r30, r28
    3d9e:	32 96       	adiw	r30, 0x02	; 2
    3da0:	44 c0       	rjmp	.+136    	; 0x3e2a <malloc+0x124>
    3da2:	fe 01       	movw	r30, r28
    3da4:	e2 0f       	add	r30, r18
    3da6:	f3 1f       	adc	r31, r19
    3da8:	81 93       	st	Z+, r24
    3daa:	91 93       	st	Z+, r25
    3dac:	22 50       	subi	r18, 0x02	; 2
    3dae:	31 09       	sbc	r19, r1
    3db0:	39 83       	std	Y+1, r19	; 0x01
    3db2:	28 83       	st	Y, r18
    3db4:	3a c0       	rjmp	.+116    	; 0x3e2a <malloc+0x124>
    3db6:	20 91 d4 04 	lds	r18, 0x04D4	; 0x8004d4 <__brkval>
    3dba:	30 91 d5 04 	lds	r19, 0x04D5	; 0x8004d5 <__brkval+0x1>
    3dbe:	23 2b       	or	r18, r19
    3dc0:	41 f4       	brne	.+16     	; 0x3dd2 <malloc+0xcc>
    3dc2:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    3dc6:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    3dca:	30 93 d5 04 	sts	0x04D5, r19	; 0x8004d5 <__brkval+0x1>
    3dce:	20 93 d4 04 	sts	0x04D4, r18	; 0x8004d4 <__brkval>
    3dd2:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    3dd6:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    3dda:	21 15       	cp	r18, r1
    3ddc:	31 05       	cpc	r19, r1
    3dde:	41 f4       	brne	.+16     	; 0x3df0 <malloc+0xea>
    3de0:	2d b7       	in	r18, 0x3d	; 61
    3de2:	3e b7       	in	r19, 0x3e	; 62
    3de4:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    3de8:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    3dec:	24 1b       	sub	r18, r20
    3dee:	35 0b       	sbc	r19, r21
    3df0:	e0 91 d4 04 	lds	r30, 0x04D4	; 0x8004d4 <__brkval>
    3df4:	f0 91 d5 04 	lds	r31, 0x04D5	; 0x8004d5 <__brkval+0x1>
    3df8:	e2 17       	cp	r30, r18
    3dfa:	f3 07       	cpc	r31, r19
    3dfc:	a0 f4       	brcc	.+40     	; 0x3e26 <malloc+0x120>
    3dfe:	2e 1b       	sub	r18, r30
    3e00:	3f 0b       	sbc	r19, r31
    3e02:	28 17       	cp	r18, r24
    3e04:	39 07       	cpc	r19, r25
    3e06:	78 f0       	brcs	.+30     	; 0x3e26 <malloc+0x120>
    3e08:	ac 01       	movw	r20, r24
    3e0a:	4e 5f       	subi	r20, 0xFE	; 254
    3e0c:	5f 4f       	sbci	r21, 0xFF	; 255
    3e0e:	24 17       	cp	r18, r20
    3e10:	35 07       	cpc	r19, r21
    3e12:	48 f0       	brcs	.+18     	; 0x3e26 <malloc+0x120>
    3e14:	4e 0f       	add	r20, r30
    3e16:	5f 1f       	adc	r21, r31
    3e18:	50 93 d5 04 	sts	0x04D5, r21	; 0x8004d5 <__brkval+0x1>
    3e1c:	40 93 d4 04 	sts	0x04D4, r20	; 0x8004d4 <__brkval>
    3e20:	81 93       	st	Z+, r24
    3e22:	91 93       	st	Z+, r25
    3e24:	02 c0       	rjmp	.+4      	; 0x3e2a <malloc+0x124>
    3e26:	e0 e0       	ldi	r30, 0x00	; 0
    3e28:	f0 e0       	ldi	r31, 0x00	; 0
    3e2a:	cf 01       	movw	r24, r30
    3e2c:	df 91       	pop	r29
    3e2e:	cf 91       	pop	r28
    3e30:	1f 91       	pop	r17
    3e32:	0f 91       	pop	r16
    3e34:	08 95       	ret

00003e36 <free>:
    3e36:	cf 93       	push	r28
    3e38:	df 93       	push	r29
    3e3a:	00 97       	sbiw	r24, 0x00	; 0
    3e3c:	09 f4       	brne	.+2      	; 0x3e40 <free+0xa>
    3e3e:	81 c0       	rjmp	.+258    	; 0x3f42 <free+0x10c>
    3e40:	fc 01       	movw	r30, r24
    3e42:	32 97       	sbiw	r30, 0x02	; 2
    3e44:	13 82       	std	Z+3, r1	; 0x03
    3e46:	12 82       	std	Z+2, r1	; 0x02
    3e48:	a0 91 d6 04 	lds	r26, 0x04D6	; 0x8004d6 <__flp>
    3e4c:	b0 91 d7 04 	lds	r27, 0x04D7	; 0x8004d7 <__flp+0x1>
    3e50:	10 97       	sbiw	r26, 0x00	; 0
    3e52:	81 f4       	brne	.+32     	; 0x3e74 <free+0x3e>
    3e54:	20 81       	ld	r18, Z
    3e56:	31 81       	ldd	r19, Z+1	; 0x01
    3e58:	82 0f       	add	r24, r18
    3e5a:	93 1f       	adc	r25, r19
    3e5c:	20 91 d4 04 	lds	r18, 0x04D4	; 0x8004d4 <__brkval>
    3e60:	30 91 d5 04 	lds	r19, 0x04D5	; 0x8004d5 <__brkval+0x1>
    3e64:	28 17       	cp	r18, r24
    3e66:	39 07       	cpc	r19, r25
    3e68:	51 f5       	brne	.+84     	; 0x3ebe <free+0x88>
    3e6a:	f0 93 d5 04 	sts	0x04D5, r31	; 0x8004d5 <__brkval+0x1>
    3e6e:	e0 93 d4 04 	sts	0x04D4, r30	; 0x8004d4 <__brkval>
    3e72:	67 c0       	rjmp	.+206    	; 0x3f42 <free+0x10c>
    3e74:	ed 01       	movw	r28, r26
    3e76:	20 e0       	ldi	r18, 0x00	; 0
    3e78:	30 e0       	ldi	r19, 0x00	; 0
    3e7a:	ce 17       	cp	r28, r30
    3e7c:	df 07       	cpc	r29, r31
    3e7e:	40 f4       	brcc	.+16     	; 0x3e90 <free+0x5a>
    3e80:	4a 81       	ldd	r20, Y+2	; 0x02
    3e82:	5b 81       	ldd	r21, Y+3	; 0x03
    3e84:	9e 01       	movw	r18, r28
    3e86:	41 15       	cp	r20, r1
    3e88:	51 05       	cpc	r21, r1
    3e8a:	f1 f0       	breq	.+60     	; 0x3ec8 <free+0x92>
    3e8c:	ea 01       	movw	r28, r20
    3e8e:	f5 cf       	rjmp	.-22     	; 0x3e7a <free+0x44>
    3e90:	d3 83       	std	Z+3, r29	; 0x03
    3e92:	c2 83       	std	Z+2, r28	; 0x02
    3e94:	40 81       	ld	r20, Z
    3e96:	51 81       	ldd	r21, Z+1	; 0x01
    3e98:	84 0f       	add	r24, r20
    3e9a:	95 1f       	adc	r25, r21
    3e9c:	c8 17       	cp	r28, r24
    3e9e:	d9 07       	cpc	r29, r25
    3ea0:	59 f4       	brne	.+22     	; 0x3eb8 <free+0x82>
    3ea2:	88 81       	ld	r24, Y
    3ea4:	99 81       	ldd	r25, Y+1	; 0x01
    3ea6:	84 0f       	add	r24, r20
    3ea8:	95 1f       	adc	r25, r21
    3eaa:	02 96       	adiw	r24, 0x02	; 2
    3eac:	91 83       	std	Z+1, r25	; 0x01
    3eae:	80 83       	st	Z, r24
    3eb0:	8a 81       	ldd	r24, Y+2	; 0x02
    3eb2:	9b 81       	ldd	r25, Y+3	; 0x03
    3eb4:	93 83       	std	Z+3, r25	; 0x03
    3eb6:	82 83       	std	Z+2, r24	; 0x02
    3eb8:	21 15       	cp	r18, r1
    3eba:	31 05       	cpc	r19, r1
    3ebc:	29 f4       	brne	.+10     	; 0x3ec8 <free+0x92>
    3ebe:	f0 93 d7 04 	sts	0x04D7, r31	; 0x8004d7 <__flp+0x1>
    3ec2:	e0 93 d6 04 	sts	0x04D6, r30	; 0x8004d6 <__flp>
    3ec6:	3d c0       	rjmp	.+122    	; 0x3f42 <free+0x10c>
    3ec8:	e9 01       	movw	r28, r18
    3eca:	fb 83       	std	Y+3, r31	; 0x03
    3ecc:	ea 83       	std	Y+2, r30	; 0x02
    3ece:	49 91       	ld	r20, Y+
    3ed0:	59 91       	ld	r21, Y+
    3ed2:	c4 0f       	add	r28, r20
    3ed4:	d5 1f       	adc	r29, r21
    3ed6:	ec 17       	cp	r30, r28
    3ed8:	fd 07       	cpc	r31, r29
    3eda:	61 f4       	brne	.+24     	; 0x3ef4 <free+0xbe>
    3edc:	80 81       	ld	r24, Z
    3ede:	91 81       	ldd	r25, Z+1	; 0x01
    3ee0:	84 0f       	add	r24, r20
    3ee2:	95 1f       	adc	r25, r21
    3ee4:	02 96       	adiw	r24, 0x02	; 2
    3ee6:	e9 01       	movw	r28, r18
    3ee8:	99 83       	std	Y+1, r25	; 0x01
    3eea:	88 83       	st	Y, r24
    3eec:	82 81       	ldd	r24, Z+2	; 0x02
    3eee:	93 81       	ldd	r25, Z+3	; 0x03
    3ef0:	9b 83       	std	Y+3, r25	; 0x03
    3ef2:	8a 83       	std	Y+2, r24	; 0x02
    3ef4:	e0 e0       	ldi	r30, 0x00	; 0
    3ef6:	f0 e0       	ldi	r31, 0x00	; 0
    3ef8:	12 96       	adiw	r26, 0x02	; 2
    3efa:	8d 91       	ld	r24, X+
    3efc:	9c 91       	ld	r25, X
    3efe:	13 97       	sbiw	r26, 0x03	; 3
    3f00:	00 97       	sbiw	r24, 0x00	; 0
    3f02:	19 f0       	breq	.+6      	; 0x3f0a <free+0xd4>
    3f04:	fd 01       	movw	r30, r26
    3f06:	dc 01       	movw	r26, r24
    3f08:	f7 cf       	rjmp	.-18     	; 0x3ef8 <free+0xc2>
    3f0a:	8d 91       	ld	r24, X+
    3f0c:	9c 91       	ld	r25, X
    3f0e:	11 97       	sbiw	r26, 0x01	; 1
    3f10:	9d 01       	movw	r18, r26
    3f12:	2e 5f       	subi	r18, 0xFE	; 254
    3f14:	3f 4f       	sbci	r19, 0xFF	; 255
    3f16:	82 0f       	add	r24, r18
    3f18:	93 1f       	adc	r25, r19
    3f1a:	20 91 d4 04 	lds	r18, 0x04D4	; 0x8004d4 <__brkval>
    3f1e:	30 91 d5 04 	lds	r19, 0x04D5	; 0x8004d5 <__brkval+0x1>
    3f22:	28 17       	cp	r18, r24
    3f24:	39 07       	cpc	r19, r25
    3f26:	69 f4       	brne	.+26     	; 0x3f42 <free+0x10c>
    3f28:	30 97       	sbiw	r30, 0x00	; 0
    3f2a:	29 f4       	brne	.+10     	; 0x3f36 <free+0x100>
    3f2c:	10 92 d7 04 	sts	0x04D7, r1	; 0x8004d7 <__flp+0x1>
    3f30:	10 92 d6 04 	sts	0x04D6, r1	; 0x8004d6 <__flp>
    3f34:	02 c0       	rjmp	.+4      	; 0x3f3a <free+0x104>
    3f36:	13 82       	std	Z+3, r1	; 0x03
    3f38:	12 82       	std	Z+2, r1	; 0x02
    3f3a:	b0 93 d5 04 	sts	0x04D5, r27	; 0x8004d5 <__brkval+0x1>
    3f3e:	a0 93 d4 04 	sts	0x04D4, r26	; 0x8004d4 <__brkval>
    3f42:	df 91       	pop	r29
    3f44:	cf 91       	pop	r28
    3f46:	08 95       	ret

00003f48 <atof>:
    3f48:	66 27       	eor	r22, r22
    3f4a:	77 27       	eor	r23, r23
    3f4c:	0c 94 0a 20 	jmp	0x4014	; 0x4014 <strtod>

00003f50 <atoi>:
    3f50:	fc 01       	movw	r30, r24
    3f52:	88 27       	eor	r24, r24
    3f54:	99 27       	eor	r25, r25
    3f56:	e8 94       	clt
    3f58:	21 91       	ld	r18, Z+
    3f5a:	20 32       	cpi	r18, 0x20	; 32
    3f5c:	e9 f3       	breq	.-6      	; 0x3f58 <atoi+0x8>
    3f5e:	29 30       	cpi	r18, 0x09	; 9
    3f60:	10 f0       	brcs	.+4      	; 0x3f66 <atoi+0x16>
    3f62:	2e 30       	cpi	r18, 0x0E	; 14
    3f64:	c8 f3       	brcs	.-14     	; 0x3f58 <atoi+0x8>
    3f66:	2b 32       	cpi	r18, 0x2B	; 43
    3f68:	41 f0       	breq	.+16     	; 0x3f7a <atoi+0x2a>
    3f6a:	2d 32       	cpi	r18, 0x2D	; 45
    3f6c:	39 f4       	brne	.+14     	; 0x3f7c <atoi+0x2c>
    3f6e:	68 94       	set
    3f70:	04 c0       	rjmp	.+8      	; 0x3f7a <atoi+0x2a>
    3f72:	0e 94 02 20 	call	0x4004	; 0x4004 <__mulhi_const_10>
    3f76:	82 0f       	add	r24, r18
    3f78:	91 1d       	adc	r25, r1
    3f7a:	21 91       	ld	r18, Z+
    3f7c:	20 53       	subi	r18, 0x30	; 48
    3f7e:	2a 30       	cpi	r18, 0x0A	; 10
    3f80:	c0 f3       	brcs	.-16     	; 0x3f72 <atoi+0x22>
    3f82:	1e f4       	brtc	.+6      	; 0x3f8a <atoi+0x3a>
    3f84:	90 95       	com	r25
    3f86:	81 95       	neg	r24
    3f88:	9f 4f       	sbci	r25, 0xFF	; 255
    3f8a:	08 95       	ret

00003f8c <strtok>:
    3f8c:	4a e9       	ldi	r20, 0x9A	; 154
    3f8e:	52 e0       	ldi	r21, 0x02	; 2
    3f90:	0e 94 db 1f 	call	0x3fb6	; 0x3fb6 <strtok_r>
    3f94:	08 95       	ret

00003f96 <strcmp>:
    3f96:	fb 01       	movw	r30, r22
    3f98:	dc 01       	movw	r26, r24
    3f9a:	8d 91       	ld	r24, X+
    3f9c:	01 90       	ld	r0, Z+
    3f9e:	80 19       	sub	r24, r0
    3fa0:	01 10       	cpse	r0, r1
    3fa2:	d9 f3       	breq	.-10     	; 0x3f9a <strcmp+0x4>
    3fa4:	99 0b       	sbc	r25, r25
    3fa6:	08 95       	ret

00003fa8 <strcpy>:
    3fa8:	fb 01       	movw	r30, r22
    3faa:	dc 01       	movw	r26, r24
    3fac:	01 90       	ld	r0, Z+
    3fae:	0d 92       	st	X+, r0
    3fb0:	00 20       	and	r0, r0
    3fb2:	e1 f7       	brne	.-8      	; 0x3fac <strcpy+0x4>
    3fb4:	08 95       	ret

00003fb6 <strtok_r>:
    3fb6:	fa 01       	movw	r30, r20
    3fb8:	a1 91       	ld	r26, Z+
    3fba:	b0 81       	ld	r27, Z
    3fbc:	00 97       	sbiw	r24, 0x00	; 0
    3fbe:	19 f4       	brne	.+6      	; 0x3fc6 <strtok_r+0x10>
    3fc0:	10 97       	sbiw	r26, 0x00	; 0
    3fc2:	e1 f0       	breq	.+56     	; 0x3ffc <strtok_r+0x46>
    3fc4:	cd 01       	movw	r24, r26
    3fc6:	dc 01       	movw	r26, r24
    3fc8:	cd 01       	movw	r24, r26
    3fca:	0d 90       	ld	r0, X+
    3fcc:	00 20       	and	r0, r0
    3fce:	11 f4       	brne	.+4      	; 0x3fd4 <strtok_r+0x1e>
    3fd0:	c0 01       	movw	r24, r0
    3fd2:	13 c0       	rjmp	.+38     	; 0x3ffa <strtok_r+0x44>
    3fd4:	fb 01       	movw	r30, r22
    3fd6:	21 91       	ld	r18, Z+
    3fd8:	22 23       	and	r18, r18
    3fda:	19 f0       	breq	.+6      	; 0x3fe2 <strtok_r+0x2c>
    3fdc:	20 15       	cp	r18, r0
    3fde:	d9 f7       	brne	.-10     	; 0x3fd6 <strtok_r+0x20>
    3fe0:	f3 cf       	rjmp	.-26     	; 0x3fc8 <strtok_r+0x12>
    3fe2:	fb 01       	movw	r30, r22
    3fe4:	21 91       	ld	r18, Z+
    3fe6:	20 15       	cp	r18, r0
    3fe8:	19 f4       	brne	.+6      	; 0x3ff0 <strtok_r+0x3a>
    3fea:	1e 92       	st	-X, r1
    3fec:	11 96       	adiw	r26, 0x01	; 1
    3fee:	06 c0       	rjmp	.+12     	; 0x3ffc <strtok_r+0x46>
    3ff0:	22 23       	and	r18, r18
    3ff2:	c1 f7       	brne	.-16     	; 0x3fe4 <strtok_r+0x2e>
    3ff4:	0d 90       	ld	r0, X+
    3ff6:	00 20       	and	r0, r0
    3ff8:	a1 f7       	brne	.-24     	; 0x3fe2 <strtok_r+0x2c>
    3ffa:	d0 01       	movw	r26, r0
    3ffc:	fa 01       	movw	r30, r20
    3ffe:	a1 93       	st	Z+, r26
    4000:	b0 83       	st	Z, r27
    4002:	08 95       	ret

00004004 <__mulhi_const_10>:
    4004:	7a e0       	ldi	r23, 0x0A	; 10
    4006:	97 9f       	mul	r25, r23
    4008:	90 2d       	mov	r25, r0
    400a:	87 9f       	mul	r24, r23
    400c:	80 2d       	mov	r24, r0
    400e:	91 0d       	add	r25, r1
    4010:	11 24       	eor	r1, r1
    4012:	08 95       	ret

00004014 <strtod>:
    4014:	a0 e0       	ldi	r26, 0x00	; 0
    4016:	b0 e0       	ldi	r27, 0x00	; 0
    4018:	e0 e1       	ldi	r30, 0x10	; 16
    401a:	f0 e2       	ldi	r31, 0x20	; 32
    401c:	0c 94 82 21 	jmp	0x4304	; 0x4304 <__prologue_saves__+0xc>
    4020:	ec 01       	movw	r28, r24
    4022:	6b 01       	movw	r12, r22
    4024:	61 15       	cp	r22, r1
    4026:	71 05       	cpc	r23, r1
    4028:	19 f0       	breq	.+6      	; 0x4030 <strtod+0x1c>
    402a:	fb 01       	movw	r30, r22
    402c:	91 83       	std	Z+1, r25	; 0x01
    402e:	80 83       	st	Z, r24
    4030:	7e 01       	movw	r14, r28
    4032:	ff ef       	ldi	r31, 0xFF	; 255
    4034:	ef 1a       	sub	r14, r31
    4036:	ff 0a       	sbc	r15, r31
    4038:	08 81       	ld	r16, Y
    403a:	80 2f       	mov	r24, r16
    403c:	90 e0       	ldi	r25, 0x00	; 0
    403e:	0e 94 58 21 	call	0x42b0	; 0x42b0 <isspace>
    4042:	89 2b       	or	r24, r25
    4044:	11 f0       	breq	.+4      	; 0x404a <strtod+0x36>
    4046:	e7 01       	movw	r28, r14
    4048:	f3 cf       	rjmp	.-26     	; 0x4030 <strtod+0x1c>
    404a:	0d 32       	cpi	r16, 0x2D	; 45
    404c:	39 f4       	brne	.+14     	; 0x405c <strtod+0x48>
    404e:	7e 01       	movw	r14, r28
    4050:	82 e0       	ldi	r24, 0x02	; 2
    4052:	e8 0e       	add	r14, r24
    4054:	f1 1c       	adc	r15, r1
    4056:	09 81       	ldd	r16, Y+1	; 0x01
    4058:	11 e0       	ldi	r17, 0x01	; 1
    405a:	08 c0       	rjmp	.+16     	; 0x406c <strtod+0x58>
    405c:	0b 32       	cpi	r16, 0x2B	; 43
    405e:	29 f4       	brne	.+10     	; 0x406a <strtod+0x56>
    4060:	7e 01       	movw	r14, r28
    4062:	92 e0       	ldi	r25, 0x02	; 2
    4064:	e9 0e       	add	r14, r25
    4066:	f1 1c       	adc	r15, r1
    4068:	09 81       	ldd	r16, Y+1	; 0x01
    406a:	10 e0       	ldi	r17, 0x00	; 0
    406c:	e7 01       	movw	r28, r14
    406e:	21 97       	sbiw	r28, 0x01	; 1
    4070:	43 e0       	ldi	r20, 0x03	; 3
    4072:	50 e0       	ldi	r21, 0x00	; 0
    4074:	66 ed       	ldi	r22, 0xD6	; 214
    4076:	70 e0       	ldi	r23, 0x00	; 0
    4078:	ce 01       	movw	r24, r28
    407a:	0e 94 61 21 	call	0x42c2	; 0x42c2 <strncasecmp_P>
    407e:	89 2b       	or	r24, r25
    4080:	c1 f4       	brne	.+48     	; 0x40b2 <strtod+0x9e>
    4082:	23 96       	adiw	r28, 0x03	; 3
    4084:	45 e0       	ldi	r20, 0x05	; 5
    4086:	50 e0       	ldi	r21, 0x00	; 0
    4088:	61 ed       	ldi	r22, 0xD1	; 209
    408a:	70 e0       	ldi	r23, 0x00	; 0
    408c:	ce 01       	movw	r24, r28
    408e:	0e 94 61 21 	call	0x42c2	; 0x42c2 <strncasecmp_P>
    4092:	89 2b       	or	r24, r25
    4094:	09 f4       	brne	.+2      	; 0x4098 <strtod+0x84>
    4096:	25 96       	adiw	r28, 0x05	; 5
    4098:	c1 14       	cp	r12, r1
    409a:	d1 04       	cpc	r13, r1
    409c:	19 f0       	breq	.+6      	; 0x40a4 <strtod+0x90>
    409e:	f6 01       	movw	r30, r12
    40a0:	d1 83       	std	Z+1, r29	; 0x01
    40a2:	c0 83       	st	Z, r28
    40a4:	11 11       	cpse	r17, r1
    40a6:	f6 c0       	rjmp	.+492    	; 0x4294 <strtod+0x280>
    40a8:	60 e0       	ldi	r22, 0x00	; 0
    40aa:	70 e0       	ldi	r23, 0x00	; 0
    40ac:	80 e8       	ldi	r24, 0x80	; 128
    40ae:	9f e7       	ldi	r25, 0x7F	; 127
    40b0:	fa c0       	rjmp	.+500    	; 0x42a6 <strtod+0x292>
    40b2:	43 e0       	ldi	r20, 0x03	; 3
    40b4:	50 e0       	ldi	r21, 0x00	; 0
    40b6:	6e ec       	ldi	r22, 0xCE	; 206
    40b8:	70 e0       	ldi	r23, 0x00	; 0
    40ba:	ce 01       	movw	r24, r28
    40bc:	0e 94 61 21 	call	0x42c2	; 0x42c2 <strncasecmp_P>
    40c0:	89 2b       	or	r24, r25
    40c2:	59 f4       	brne	.+22     	; 0x40da <strtod+0xc6>
    40c4:	c1 14       	cp	r12, r1
    40c6:	d1 04       	cpc	r13, r1
    40c8:	09 f4       	brne	.+2      	; 0x40cc <strtod+0xb8>
    40ca:	e9 c0       	rjmp	.+466    	; 0x429e <strtod+0x28a>
    40cc:	f2 e0       	ldi	r31, 0x02	; 2
    40ce:	ef 0e       	add	r14, r31
    40d0:	f1 1c       	adc	r15, r1
    40d2:	f6 01       	movw	r30, r12
    40d4:	f1 82       	std	Z+1, r15	; 0x01
    40d6:	e0 82       	st	Z, r14
    40d8:	e2 c0       	rjmp	.+452    	; 0x429e <strtod+0x28a>
    40da:	20 e0       	ldi	r18, 0x00	; 0
    40dc:	30 e0       	ldi	r19, 0x00	; 0
    40de:	a9 01       	movw	r20, r18
    40e0:	c0 e0       	ldi	r28, 0x00	; 0
    40e2:	d0 e0       	ldi	r29, 0x00	; 0
    40e4:	f7 01       	movw	r30, r14
    40e6:	80 ed       	ldi	r24, 0xD0	; 208
    40e8:	a8 2e       	mov	r10, r24
    40ea:	a0 0e       	add	r10, r16
    40ec:	89 e0       	ldi	r24, 0x09	; 9
    40ee:	8a 15       	cp	r24, r10
    40f0:	30 f1       	brcs	.+76     	; 0x413e <strtod+0x12a>
    40f2:	91 2f       	mov	r25, r17
    40f4:	92 60       	ori	r25, 0x02	; 2
    40f6:	b9 2e       	mov	r11, r25
    40f8:	81 2f       	mov	r24, r17
    40fa:	88 70       	andi	r24, 0x08	; 8
    40fc:	12 ff       	sbrs	r17, 2
    40fe:	04 c0       	rjmp	.+8      	; 0x4108 <strtod+0xf4>
    4100:	81 11       	cpse	r24, r1
    4102:	24 c0       	rjmp	.+72     	; 0x414c <strtod+0x138>
    4104:	21 96       	adiw	r28, 0x01	; 1
    4106:	22 c0       	rjmp	.+68     	; 0x414c <strtod+0x138>
    4108:	81 11       	cpse	r24, r1
    410a:	21 97       	sbiw	r28, 0x01	; 1
    410c:	a5 e0       	ldi	r26, 0x05	; 5
    410e:	b0 e0       	ldi	r27, 0x00	; 0
    4110:	0e 94 69 1e 	call	0x3cd2	; 0x3cd2 <__muluhisi3>
    4114:	dc 01       	movw	r26, r24
    4116:	cb 01       	movw	r24, r22
    4118:	88 0f       	add	r24, r24
    411a:	99 1f       	adc	r25, r25
    411c:	aa 1f       	adc	r26, r26
    411e:	bb 1f       	adc	r27, r27
    4120:	9c 01       	movw	r18, r24
    4122:	ad 01       	movw	r20, r26
    4124:	2a 0d       	add	r18, r10
    4126:	31 1d       	adc	r19, r1
    4128:	41 1d       	adc	r20, r1
    412a:	51 1d       	adc	r21, r1
    412c:	28 39       	cpi	r18, 0x98	; 152
    412e:	89 e9       	ldi	r24, 0x99	; 153
    4130:	38 07       	cpc	r19, r24
    4132:	48 07       	cpc	r20, r24
    4134:	89 e1       	ldi	r24, 0x19	; 25
    4136:	58 07       	cpc	r21, r24
    4138:	48 f0       	brcs	.+18     	; 0x414c <strtod+0x138>
    413a:	16 60       	ori	r17, 0x06	; 6
    413c:	06 c0       	rjmp	.+12     	; 0x414a <strtod+0x136>
    413e:	9e ef       	ldi	r25, 0xFE	; 254
    4140:	a9 12       	cpse	r10, r25
    4142:	0a c0       	rjmp	.+20     	; 0x4158 <strtod+0x144>
    4144:	13 fd       	sbrc	r17, 3
    4146:	40 c0       	rjmp	.+128    	; 0x41c8 <strtod+0x1b4>
    4148:	18 60       	ori	r17, 0x08	; 8
    414a:	b1 2e       	mov	r11, r17
    414c:	8f ef       	ldi	r24, 0xFF	; 255
    414e:	e8 1a       	sub	r14, r24
    4150:	f8 0a       	sbc	r15, r24
    4152:	00 81       	ld	r16, Z
    4154:	1b 2d       	mov	r17, r11
    4156:	c6 cf       	rjmp	.-116    	; 0x40e4 <strtod+0xd0>
    4158:	80 2f       	mov	r24, r16
    415a:	8f 7d       	andi	r24, 0xDF	; 223
    415c:	85 34       	cpi	r24, 0x45	; 69
    415e:	a1 f5       	brne	.+104    	; 0x41c8 <strtod+0x1b4>
    4160:	80 81       	ld	r24, Z
    4162:	8d 32       	cpi	r24, 0x2D	; 45
    4164:	11 f4       	brne	.+4      	; 0x416a <strtod+0x156>
    4166:	10 61       	ori	r17, 0x10	; 16
    4168:	06 c0       	rjmp	.+12     	; 0x4176 <strtod+0x162>
    416a:	8b 32       	cpi	r24, 0x2B	; 43
    416c:	21 f0       	breq	.+8      	; 0x4176 <strtod+0x162>
    416e:	31 96       	adiw	r30, 0x01	; 1
    4170:	61 e0       	ldi	r22, 0x01	; 1
    4172:	70 e0       	ldi	r23, 0x00	; 0
    4174:	04 c0       	rjmp	.+8      	; 0x417e <strtod+0x16a>
    4176:	81 81       	ldd	r24, Z+1	; 0x01
    4178:	32 96       	adiw	r30, 0x02	; 2
    417a:	62 e0       	ldi	r22, 0x02	; 2
    417c:	70 e0       	ldi	r23, 0x00	; 0
    417e:	80 53       	subi	r24, 0x30	; 48
    4180:	8a 30       	cpi	r24, 0x0A	; 10
    4182:	18 f0       	brcs	.+6      	; 0x418a <strtod+0x176>
    4184:	e6 1b       	sub	r30, r22
    4186:	f7 0b       	sbc	r31, r23
    4188:	1f c0       	rjmp	.+62     	; 0x41c8 <strtod+0x1b4>
    418a:	60 e0       	ldi	r22, 0x00	; 0
    418c:	70 e0       	ldi	r23, 0x00	; 0
    418e:	60 38       	cpi	r22, 0x80	; 128
    4190:	9c e0       	ldi	r25, 0x0C	; 12
    4192:	79 07       	cpc	r23, r25
    4194:	5c f4       	brge	.+22     	; 0x41ac <strtod+0x198>
    4196:	db 01       	movw	r26, r22
    4198:	aa 0f       	add	r26, r26
    419a:	bb 1f       	adc	r27, r27
    419c:	aa 0f       	add	r26, r26
    419e:	bb 1f       	adc	r27, r27
    41a0:	6a 0f       	add	r22, r26
    41a2:	7b 1f       	adc	r23, r27
    41a4:	66 0f       	add	r22, r22
    41a6:	77 1f       	adc	r23, r23
    41a8:	68 0f       	add	r22, r24
    41aa:	71 1d       	adc	r23, r1
    41ac:	31 96       	adiw	r30, 0x01	; 1
    41ae:	df 01       	movw	r26, r30
    41b0:	11 97       	sbiw	r26, 0x01	; 1
    41b2:	8c 91       	ld	r24, X
    41b4:	80 53       	subi	r24, 0x30	; 48
    41b6:	8a 30       	cpi	r24, 0x0A	; 10
    41b8:	50 f3       	brcs	.-44     	; 0x418e <strtod+0x17a>
    41ba:	14 ff       	sbrs	r17, 4
    41bc:	03 c0       	rjmp	.+6      	; 0x41c4 <strtod+0x1b0>
    41be:	71 95       	neg	r23
    41c0:	61 95       	neg	r22
    41c2:	71 09       	sbc	r23, r1
    41c4:	c6 0f       	add	r28, r22
    41c6:	d7 1f       	adc	r29, r23
    41c8:	11 ff       	sbrs	r17, 1
    41ca:	08 c0       	rjmp	.+16     	; 0x41dc <strtod+0x1c8>
    41cc:	c1 14       	cp	r12, r1
    41ce:	d1 04       	cpc	r13, r1
    41d0:	29 f0       	breq	.+10     	; 0x41dc <strtod+0x1c8>
    41d2:	cf 01       	movw	r24, r30
    41d4:	01 97       	sbiw	r24, 0x01	; 1
    41d6:	f6 01       	movw	r30, r12
    41d8:	91 83       	std	Z+1, r25	; 0x01
    41da:	80 83       	st	Z, r24
    41dc:	ca 01       	movw	r24, r20
    41de:	b9 01       	movw	r22, r18
    41e0:	0e 94 c9 17 	call	0x2f92	; 0x2f92 <__floatunsisf>
    41e4:	21 2f       	mov	r18, r17
    41e6:	23 70       	andi	r18, 0x03	; 3
    41e8:	23 30       	cpi	r18, 0x03	; 3
    41ea:	19 f0       	breq	.+6      	; 0x41f2 <strtod+0x1de>
    41ec:	4b 01       	movw	r8, r22
    41ee:	5c 01       	movw	r10, r24
    41f0:	06 c0       	rjmp	.+12     	; 0x41fe <strtod+0x1ea>
    41f2:	4b 01       	movw	r8, r22
    41f4:	5c 01       	movw	r10, r24
    41f6:	b7 fa       	bst	r11, 7
    41f8:	b0 94       	com	r11
    41fa:	b7 f8       	bld	r11, 7
    41fc:	b0 94       	com	r11
    41fe:	20 e0       	ldi	r18, 0x00	; 0
    4200:	30 e0       	ldi	r19, 0x00	; 0
    4202:	a9 01       	movw	r20, r18
    4204:	c5 01       	movw	r24, r10
    4206:	b4 01       	movw	r22, r8
    4208:	0e 94 1c 17 	call	0x2e38	; 0x2e38 <__cmpsf2>
    420c:	88 23       	and	r24, r24
    420e:	09 f4       	brne	.+2      	; 0x4212 <strtod+0x1fe>
    4210:	3e c0       	rjmp	.+124    	; 0x428e <strtod+0x27a>
    4212:	d7 ff       	sbrs	r29, 7
    4214:	06 c0       	rjmp	.+12     	; 0x4222 <strtod+0x20e>
    4216:	d1 95       	neg	r29
    4218:	c1 95       	neg	r28
    421a:	d1 09       	sbc	r29, r1
    421c:	0d ee       	ldi	r16, 0xED	; 237
    421e:	10 e0       	ldi	r17, 0x00	; 0
    4220:	02 c0       	rjmp	.+4      	; 0x4226 <strtod+0x212>
    4222:	05 e0       	ldi	r16, 0x05	; 5
    4224:	11 e0       	ldi	r17, 0x01	; 1
    4226:	68 01       	movw	r12, r16
    4228:	f8 e1       	ldi	r31, 0x18	; 24
    422a:	cf 1a       	sub	r12, r31
    422c:	d1 08       	sbc	r13, r1
    422e:	90 e2       	ldi	r25, 0x20	; 32
    4230:	e9 2e       	mov	r14, r25
    4232:	f1 2c       	mov	r15, r1
    4234:	ce 15       	cp	r28, r14
    4236:	df 05       	cpc	r29, r15
    4238:	74 f0       	brlt	.+28     	; 0x4256 <strtod+0x242>
    423a:	f8 01       	movw	r30, r16
    423c:	25 91       	lpm	r18, Z+
    423e:	35 91       	lpm	r19, Z+
    4240:	45 91       	lpm	r20, Z+
    4242:	54 91       	lpm	r21, Z
    4244:	c5 01       	movw	r24, r10
    4246:	b4 01       	movw	r22, r8
    4248:	0e 94 af 18 	call	0x315e	; 0x315e <__mulsf3>
    424c:	4b 01       	movw	r8, r22
    424e:	5c 01       	movw	r10, r24
    4250:	ce 19       	sub	r28, r14
    4252:	df 09       	sbc	r29, r15
    4254:	ef cf       	rjmp	.-34     	; 0x4234 <strtod+0x220>
    4256:	04 50       	subi	r16, 0x04	; 4
    4258:	11 09       	sbc	r17, r1
    425a:	f5 94       	asr	r15
    425c:	e7 94       	ror	r14
    425e:	0c 15       	cp	r16, r12
    4260:	1d 05       	cpc	r17, r13
    4262:	41 f7       	brne	.-48     	; 0x4234 <strtod+0x220>
    4264:	8a 2d       	mov	r24, r10
    4266:	88 0f       	add	r24, r24
    4268:	8b 2d       	mov	r24, r11
    426a:	88 1f       	adc	r24, r24
    426c:	8f 3f       	cpi	r24, 0xFF	; 255
    426e:	49 f0       	breq	.+18     	; 0x4282 <strtod+0x26e>
    4270:	20 e0       	ldi	r18, 0x00	; 0
    4272:	30 e0       	ldi	r19, 0x00	; 0
    4274:	a9 01       	movw	r20, r18
    4276:	c5 01       	movw	r24, r10
    4278:	b4 01       	movw	r22, r8
    427a:	0e 94 1c 17 	call	0x2e38	; 0x2e38 <__cmpsf2>
    427e:	81 11       	cpse	r24, r1
    4280:	06 c0       	rjmp	.+12     	; 0x428e <strtod+0x27a>
    4282:	82 e2       	ldi	r24, 0x22	; 34
    4284:	90 e0       	ldi	r25, 0x00	; 0
    4286:	90 93 d9 04 	sts	0x04D9, r25	; 0x8004d9 <errno+0x1>
    428a:	80 93 d8 04 	sts	0x04D8, r24	; 0x8004d8 <errno>
    428e:	c5 01       	movw	r24, r10
    4290:	b4 01       	movw	r22, r8
    4292:	09 c0       	rjmp	.+18     	; 0x42a6 <strtod+0x292>
    4294:	60 e0       	ldi	r22, 0x00	; 0
    4296:	70 e0       	ldi	r23, 0x00	; 0
    4298:	80 e8       	ldi	r24, 0x80	; 128
    429a:	9f ef       	ldi	r25, 0xFF	; 255
    429c:	04 c0       	rjmp	.+8      	; 0x42a6 <strtod+0x292>
    429e:	60 e0       	ldi	r22, 0x00	; 0
    42a0:	70 e0       	ldi	r23, 0x00	; 0
    42a2:	80 ec       	ldi	r24, 0xC0	; 192
    42a4:	9f e7       	ldi	r25, 0x7F	; 127
    42a6:	cd b7       	in	r28, 0x3d	; 61
    42a8:	de b7       	in	r29, 0x3e	; 62
    42aa:	ec e0       	ldi	r30, 0x0C	; 12
    42ac:	0c 94 9e 21 	jmp	0x433c	; 0x433c <__epilogue_restores__+0xc>

000042b0 <isspace>:
    42b0:	91 11       	cpse	r25, r1
    42b2:	0c 94 79 21 	jmp	0x42f2	; 0x42f2 <__ctype_isfalse>
    42b6:	80 32       	cpi	r24, 0x20	; 32
    42b8:	19 f0       	breq	.+6      	; 0x42c0 <isspace+0x10>
    42ba:	89 50       	subi	r24, 0x09	; 9
    42bc:	85 50       	subi	r24, 0x05	; 5
    42be:	c8 f7       	brcc	.-14     	; 0x42b2 <isspace+0x2>
    42c0:	08 95       	ret

000042c2 <strncasecmp_P>:
    42c2:	fb 01       	movw	r30, r22
    42c4:	dc 01       	movw	r26, r24
    42c6:	41 50       	subi	r20, 0x01	; 1
    42c8:	50 40       	sbci	r21, 0x00	; 0
    42ca:	88 f0       	brcs	.+34     	; 0x42ee <strncasecmp_P+0x2c>
    42cc:	8d 91       	ld	r24, X+
    42ce:	81 34       	cpi	r24, 0x41	; 65
    42d0:	1c f0       	brlt	.+6      	; 0x42d8 <strncasecmp_P+0x16>
    42d2:	8b 35       	cpi	r24, 0x5B	; 91
    42d4:	0c f4       	brge	.+2      	; 0x42d8 <strncasecmp_P+0x16>
    42d6:	80 5e       	subi	r24, 0xE0	; 224
    42d8:	65 91       	lpm	r22, Z+
    42da:	61 34       	cpi	r22, 0x41	; 65
    42dc:	1c f0       	brlt	.+6      	; 0x42e4 <strncasecmp_P+0x22>
    42de:	6b 35       	cpi	r22, 0x5B	; 91
    42e0:	0c f4       	brge	.+2      	; 0x42e4 <strncasecmp_P+0x22>
    42e2:	60 5e       	subi	r22, 0xE0	; 224
    42e4:	86 1b       	sub	r24, r22
    42e6:	61 11       	cpse	r22, r1
    42e8:	71 f3       	breq	.-36     	; 0x42c6 <strncasecmp_P+0x4>
    42ea:	99 0b       	sbc	r25, r25
    42ec:	08 95       	ret
    42ee:	88 1b       	sub	r24, r24
    42f0:	fc cf       	rjmp	.-8      	; 0x42ea <strncasecmp_P+0x28>

000042f2 <__ctype_isfalse>:
    42f2:	99 27       	eor	r25, r25
    42f4:	88 27       	eor	r24, r24

000042f6 <__ctype_istrue>:
    42f6:	08 95       	ret

000042f8 <__prologue_saves__>:
    42f8:	2f 92       	push	r2
    42fa:	3f 92       	push	r3
    42fc:	4f 92       	push	r4
    42fe:	5f 92       	push	r5
    4300:	6f 92       	push	r6
    4302:	7f 92       	push	r7
    4304:	8f 92       	push	r8
    4306:	9f 92       	push	r9
    4308:	af 92       	push	r10
    430a:	bf 92       	push	r11
    430c:	cf 92       	push	r12
    430e:	df 92       	push	r13
    4310:	ef 92       	push	r14
    4312:	ff 92       	push	r15
    4314:	0f 93       	push	r16
    4316:	1f 93       	push	r17
    4318:	cf 93       	push	r28
    431a:	df 93       	push	r29
    431c:	cd b7       	in	r28, 0x3d	; 61
    431e:	de b7       	in	r29, 0x3e	; 62
    4320:	ca 1b       	sub	r28, r26
    4322:	db 0b       	sbc	r29, r27
    4324:	0f b6       	in	r0, 0x3f	; 63
    4326:	f8 94       	cli
    4328:	de bf       	out	0x3e, r29	; 62
    432a:	0f be       	out	0x3f, r0	; 63
    432c:	cd bf       	out	0x3d, r28	; 61
    432e:	09 94       	ijmp

00004330 <__epilogue_restores__>:
    4330:	2a 88       	ldd	r2, Y+18	; 0x12
    4332:	39 88       	ldd	r3, Y+17	; 0x11
    4334:	48 88       	ldd	r4, Y+16	; 0x10
    4336:	5f 84       	ldd	r5, Y+15	; 0x0f
    4338:	6e 84       	ldd	r6, Y+14	; 0x0e
    433a:	7d 84       	ldd	r7, Y+13	; 0x0d
    433c:	8c 84       	ldd	r8, Y+12	; 0x0c
    433e:	9b 84       	ldd	r9, Y+11	; 0x0b
    4340:	aa 84       	ldd	r10, Y+10	; 0x0a
    4342:	b9 84       	ldd	r11, Y+9	; 0x09
    4344:	c8 84       	ldd	r12, Y+8	; 0x08
    4346:	df 80       	ldd	r13, Y+7	; 0x07
    4348:	ee 80       	ldd	r14, Y+6	; 0x06
    434a:	fd 80       	ldd	r15, Y+5	; 0x05
    434c:	0c 81       	ldd	r16, Y+4	; 0x04
    434e:	1b 81       	ldd	r17, Y+3	; 0x03
    4350:	aa 81       	ldd	r26, Y+2	; 0x02
    4352:	b9 81       	ldd	r27, Y+1	; 0x01
    4354:	ce 0f       	add	r28, r30
    4356:	d1 1d       	adc	r29, r1
    4358:	0f b6       	in	r0, 0x3f	; 63
    435a:	f8 94       	cli
    435c:	de bf       	out	0x3e, r29	; 62
    435e:	0f be       	out	0x3f, r0	; 63
    4360:	cd bf       	out	0x3d, r28	; 61
    4362:	ed 01       	movw	r28, r26
    4364:	08 95       	ret

00004366 <_exit>:
    4366:	f8 94       	cli

00004368 <__stop_program>:
    4368:	ff cf       	rjmp	.-2      	; 0x4368 <__stop_program>
