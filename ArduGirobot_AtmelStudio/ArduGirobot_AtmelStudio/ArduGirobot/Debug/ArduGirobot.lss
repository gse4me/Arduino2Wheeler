
ArduGirobot.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000fa  00800100  0000438c  00004420  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000438c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000237  008001fa  008001fa  0000451a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000451a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004578  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000010d8  00000000  00000000  000045b8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0001e61d  00000000  00000000  00005690  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000038fc  00000000  00000000  00023cad  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00006f94  00000000  00000000  000275a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00003acc  00000000  00000000  0002e540  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000077d1  00000000  00000000  0003200c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00011713  00000000  00000000  000397dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001038  00000000  00000000  0004aef0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__ctors_end>
       4:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
       8:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
       c:	0c 94 01 15 	jmp	0x2a02	; 0x2a02 <__vector_3>
      10:	0c 94 7e 15 	jmp	0x2afc	; 0x2afc <__vector_4>
      14:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      18:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      1c:	0c 94 8a 11 	jmp	0x2314	; 0x2314 <__vector_7>
      20:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      24:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      28:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      2c:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      30:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      34:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      38:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      3c:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      40:	0c 94 3e 1d 	jmp	0x3a7c	; 0x3a7c <__vector_16>
      44:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      48:	0c 94 f6 1a 	jmp	0x35ec	; 0x35ec <__vector_18>
      4c:	0c 94 28 1b 	jmp	0x3650	; 0x3650 <__vector_19>
      50:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      54:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      58:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      5c:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      60:	0c 94 87 12 	jmp	0x250e	; 0x250e <__vector_24>
      64:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      68:	39 03       	fmul	r19, r17
      6a:	4a 03       	fmul	r20, r18
      6c:	65 03       	mulsu	r22, r21
      6e:	78 03       	fmul	r23, r16
      70:	89 03       	fmulsu	r16, r17
      72:	a2 03       	fmuls	r18, r18
      74:	b5 03       	fmuls	r19, r21
      76:	c6 03       	fmuls	r20, r22
      78:	d9 03       	fmulsu	r21, r17
      7a:	27 04       	cpc	r2, r7
      7c:	f2 03       	fmuls	r23, r18
      7e:	f7 03       	fmuls	r23, r23
      80:	00 04       	cpc	r0, r0
      82:	27 04       	cpc	r2, r7
      84:	27 04       	cpc	r2, r7
      86:	27 04       	cpc	r2, r7
      88:	27 04       	cpc	r2, r7
      8a:	27 04       	cpc	r2, r7
      8c:	27 04       	cpc	r2, r7
      8e:	05 04       	cpc	r0, r5
      90:	09 04       	cpc	r0, r9
      92:	0c 04       	cpc	r0, r12
      94:	10 04       	cpc	r1, r0
      96:	13 04       	cpc	r1, r3
      98:	17 04       	cpc	r1, r7
      9a:	1a 04       	cpc	r1, r10
      9c:	1e 04       	cpc	r1, r14
      9e:	21 04       	cpc	r2, r1
      a0:	27 04       	cpc	r2, r7
      a2:	25 04       	cpc	r2, r5
      a4:	aa 06       	cpc	r10, r26
      a6:	b7 06       	cpc	r11, r23
      a8:	ce 06       	cpc	r12, r30
      aa:	db 06       	cpc	r13, r27
      ac:	e8 06       	cpc	r14, r24
      ae:	f5 06       	cpc	r15, r21
      b0:	06 07       	cpc	r16, r22
      b2:	17 07       	cpc	r17, r23
      b4:	24 07       	cpc	r18, r20
      b6:	3b 15       	cp	r19, r11
      b8:	47 15       	cp	r20, r7
      ba:	53 15       	cp	r21, r3
      bc:	47 15       	cp	r20, r7
      be:	72 15       	cp	r23, r2
      c0:	5f 15       	cp	r21, r15
      c2:	3b 15       	cp	r19, r11
      c4:	3b 15       	cp	r19, r11
      c6:	5f 15       	cp	r21, r15
      c8:	72 15       	cp	r23, r2
      ca:	47 15       	cp	r20, r7
      cc:	53 15       	cp	r21, r3
      ce:	47 15       	cp	r20, r7
      d0:	3b 15       	cp	r19, r11
      d2:	b6 15       	cp	r27, r6
      d4:	c2 15       	cp	r28, r2
      d6:	ce 15       	cp	r28, r14
      d8:	c2 15       	cp	r28, r2
      da:	ed 15       	cp	r30, r13
      dc:	da 15       	cp	r29, r10
      de:	b6 15       	cp	r27, r6
      e0:	b6 15       	cp	r27, r6
      e2:	da 15       	cp	r29, r10
      e4:	ed 15       	cp	r30, r13
      e6:	c2 15       	cp	r28, r2
      e8:	ce 15       	cp	r28, r14
      ea:	c2 15       	cp	r28, r2
      ec:	b6 15       	cp	r27, r6
      ee:	08 4a       	sbci	r16, 0xA8	; 168
      f0:	d7 3b       	cpi	r29, 0xB7	; 183
      f2:	3b ce       	rjmp	.-906    	; 0xfffffd6a <__eeprom_end+0xff7efd6a>
      f4:	01 6e       	ori	r16, 0xE1	; 225
      f6:	84 bc       	out	0x24, r8	; 36
      f8:	bf fd       	.word	0xfdbf	; ????
      fa:	c1 2f       	mov	r28, r17
      fc:	3d 6c       	ori	r19, 0xCD	; 205
      fe:	74 31       	cpi	r23, 0x14	; 20
     100:	9a bd       	out	0x2a, r25	; 42
     102:	56 83       	std	Z+6, r21	; 0x06
     104:	3d da       	rcall	.-2950   	; 0xfffff580 <__eeprom_end+0xff7ef580>
     106:	3d 00       	.word	0x003d	; ????
     108:	c7 7f       	andi	r28, 0xF7	; 247
     10a:	11 be       	out	0x31, r1	; 49
     10c:	d9 e4       	ldi	r29, 0x49	; 73
     10e:	bb 4c       	sbci	r27, 0xCB	; 203
     110:	3e 91       	ld	r19, -X
     112:	6b aa       	std	Y+51, r6	; 0x33
     114:	aa be       	out	0x3a, r10	; 58
     116:	00 00       	nop
     118:	00 80       	ld	r0, Z
     11a:	3f 00       	.word	0x003f	; ????

0000011c <__trampolines_end>:
     11c:	4e 41       	sbci	r20, 0x1E	; 30
     11e:	4e 49       	Address 0x0000011e is out of bounds.
.word	0xffff	; ????

0000011f <pstr_inity>:
     11f:	49 4e 49 54 59                                      INITY

00000124 <pstr_inf>:
     124:	49 4e 46                                            INF

00000127 <pwr_m10>:
     127:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
     137:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

0000013f <pwr_p10>:
     13f:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
     14f:	ca 1b 0e 5a ae c5 9d 74                             ...Z...t

00000157 <digital_pin_to_bit_mask_PGM>:
     157:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     167:	04 08 10 20                                         ... 

0000016b <digital_pin_to_port_PGM>:
     16b:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     17b:	03 03 03 03                                         ....

0000017f <port_to_input_PGM>:
     17f:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

00000189 <port_to_output_PGM>:
     189:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

00000193 <port_to_mode_PGM>:
     193:	00 00 00 00 24 00 27 00 2a 00 00                    ....$.'.*..

0000019e <__ctors_start>:
     19e:	95 05       	cpc	r25, r5
     1a0:	d6 14       	cp	r13, r6
     1a2:	da 14       	cp	r13, r10
     1a4:	58 1b       	sub	r21, r24

000001a6 <__ctors_end>:
     1a6:	11 24       	eor	r1, r1
     1a8:	1f be       	out	0x3f, r1	; 63
     1aa:	cf ef       	ldi	r28, 0xFF	; 255
     1ac:	d8 e0       	ldi	r29, 0x08	; 8
     1ae:	de bf       	out	0x3e, r29	; 62
     1b0:	cd bf       	out	0x3d, r28	; 61

000001b2 <__do_copy_data>:
     1b2:	11 e0       	ldi	r17, 0x01	; 1
     1b4:	a0 e0       	ldi	r26, 0x00	; 0
     1b6:	b1 e0       	ldi	r27, 0x01	; 1
     1b8:	ec e8       	ldi	r30, 0x8C	; 140
     1ba:	f3 e4       	ldi	r31, 0x43	; 67
     1bc:	02 c0       	rjmp	.+4      	; 0x1c2 <__do_copy_data+0x10>
     1be:	05 90       	lpm	r0, Z+
     1c0:	0d 92       	st	X+, r0
     1c2:	aa 3f       	cpi	r26, 0xFA	; 250
     1c4:	b1 07       	cpc	r27, r17
     1c6:	d9 f7       	brne	.-10     	; 0x1be <__do_copy_data+0xc>

000001c8 <__do_clear_bss>:
     1c8:	24 e0       	ldi	r18, 0x04	; 4
     1ca:	aa ef       	ldi	r26, 0xFA	; 250
     1cc:	b1 e0       	ldi	r27, 0x01	; 1
     1ce:	01 c0       	rjmp	.+2      	; 0x1d2 <.do_clear_bss_start>

000001d0 <.do_clear_bss_loop>:
     1d0:	1d 92       	st	X+, r1

000001d2 <.do_clear_bss_start>:
     1d2:	a1 33       	cpi	r26, 0x31	; 49
     1d4:	b2 07       	cpc	r27, r18
     1d6:	e1 f7       	brne	.-8      	; 0x1d0 <.do_clear_bss_loop>

000001d8 <__do_global_ctors>:
     1d8:	10 e0       	ldi	r17, 0x00	; 0
     1da:	c3 ed       	ldi	r28, 0xD3	; 211
     1dc:	d0 e0       	ldi	r29, 0x00	; 0
     1de:	04 c0       	rjmp	.+8      	; 0x1e8 <__do_global_ctors+0x10>
     1e0:	21 97       	sbiw	r28, 0x01	; 1
     1e2:	fe 01       	movw	r30, r28
     1e4:	0e 94 c0 1e 	call	0x3d80	; 0x3d80 <__tablejump2__>
     1e8:	cf 3c       	cpi	r28, 0xCF	; 207
     1ea:	d1 07       	cpc	r29, r17
     1ec:	c9 f7       	brne	.-14     	; 0x1e0 <__do_global_ctors+0x8>
     1ee:	0e 94 86 1b 	call	0x370c	; 0x370c <main>
     1f2:	0c 94 c4 21 	jmp	0x4388	; 0x4388 <_exit>

000001f6 <__bad_interrupt>:
     1f6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001fa <_ZN11EEPROMClass3putIdEERKT_iS3_.isra.0>:
        uint8_t *ptr = (uint8_t*) &t;
        for( int count = sizeof(T) ; count ; --count, ++e )  *ptr++ = *e;
        return t;
    }
    
    template< typename T > const T &put( int idx, const T &t ){
     1fa:	af 92       	push	r10
     1fc:	bf 92       	push	r11
     1fe:	df 92       	push	r13
     200:	ef 92       	push	r14
     202:	ff 92       	push	r15
     204:	0f 93       	push	r16
     206:	1f 93       	push	r17
     208:	cf 93       	push	r28
     20a:	df 93       	push	r29
     20c:	ec 01       	movw	r28, r24
     20e:	7b 01       	movw	r14, r22
     210:	8b 01       	movw	r16, r22
     212:	5c 01       	movw	r10, r24
     214:	84 e0       	ldi	r24, 0x04	; 4
     216:	a8 0e       	add	r10, r24
     218:	b1 1c       	adc	r11, r1
        EEPtr e = idx;
        const uint8_t *ptr = (const uint8_t*) &t;
        for( int count = sizeof(T) ; count ; --count, ++e )  (*e).update( *ptr++ );
     21a:	f8 01       	movw	r30, r16
     21c:	d1 90       	ld	r13, Z+
     21e:	8f 01       	movw	r16, r30

    EERef( const int index )
        : index( index )                 {}
    
    //Access/read members.
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
     220:	ce 01       	movw	r24, r28
     222:	0e 94 77 21 	call	0x42ee	; 0x42ee <eeprom_read_byte>
    EERef &operator &=( uint8_t in )     { return *this = **this & in; }
    EERef &operator |=( uint8_t in )     { return *this = **this | in; }
    EERef &operator <<=( uint8_t in )    { return *this = **this << in; }
    EERef &operator >>=( uint8_t in )    { return *this = **this >> in; }
    
    EERef &update( uint8_t in )          { return  in != *this ? *this = in : *this; }
     226:	d8 16       	cp	r13, r24
     228:	21 f0       	breq	.+8      	; 0x232 <_ZN11EEPROMClass3putIdEERKT_iS3_.isra.0+0x38>
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    operator const uint8_t() const       { return **this; }
    
    //Assignment/write members.
    EERef &operator=( const EERef &ref ) { return *this = *ref; }
    EERef &operator=( uint8_t in )       { return eeprom_write_byte( (uint8_t*) index, in ), *this;  }
     22a:	6d 2d       	mov	r22, r13
     22c:	ce 01       	movw	r24, r28
     22e:	0e 94 7f 21 	call	0x42fe	; 0x42fe <eeprom_write_byte>
    //Iterator functionality.
    bool operator!=( const EEPtr &ptr ) { return index != ptr.index; }
    EERef operator*()                   { return index; }
    
    /** Prefix & Postfix increment/decrement **/
    EEPtr& operator++()                 { return ++index, *this; }
     232:	21 96       	adiw	r28, 0x01	; 1
    }
    
    template< typename T > const T &put( int idx, const T &t ){
        EEPtr e = idx;
        const uint8_t *ptr = (const uint8_t*) &t;
        for( int count = sizeof(T) ; count ; --count, ++e )  (*e).update( *ptr++ );
     234:	ca 15       	cp	r28, r10
     236:	db 05       	cpc	r29, r11
     238:	81 f7       	brne	.-32     	; 0x21a <_ZN11EEPROMClass3putIdEERKT_iS3_.isra.0+0x20>
        return t;
    }
     23a:	c7 01       	movw	r24, r14
     23c:	df 91       	pop	r29
     23e:	cf 91       	pop	r28
     240:	1f 91       	pop	r17
     242:	0f 91       	pop	r16
     244:	ff 90       	pop	r15
     246:	ef 90       	pop	r14
     248:	df 90       	pop	r13
     24a:	bf 90       	pop	r11
     24c:	af 90       	pop	r10
     24e:	08 95       	ret

00000250 <_ZN11EEPROMClass3getIdEERT_iS2_.isra.1>:
    EEPtr begin()                        { return 0x00; }
    EEPtr end()                          { return length(); } //Standards requires this to be the item after the last valid entry. The returned pointer is invalid.
    uint16_t length()                    { return E2END + 1; }
    
    //Functionality to 'get' and 'put' objects to and from EEPROM.
    template< typename T > T &get( int idx, T &t ){
     250:	cf 92       	push	r12
     252:	df 92       	push	r13
     254:	ef 92       	push	r14
     256:	ff 92       	push	r15
     258:	0f 93       	push	r16
     25a:	1f 93       	push	r17
     25c:	cf 93       	push	r28
     25e:	df 93       	push	r29
     260:	eb 01       	movw	r28, r22
     262:	7b 01       	movw	r14, r22
     264:	24 e0       	ldi	r18, 0x04	; 4
     266:	e2 0e       	add	r14, r18
     268:	f1 1c       	adc	r15, r1
     26a:	8b 01       	movw	r16, r22

    EERef( const int index )
        : index( index )                 {}
    
    //Access/read members.
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
     26c:	6c 01       	movw	r12, r24
     26e:	c6 1a       	sub	r12, r22
     270:	d7 0a       	sbc	r13, r23
     272:	c6 01       	movw	r24, r12
     274:	80 0f       	add	r24, r16
     276:	91 1f       	adc	r25, r17
     278:	0e 94 77 21 	call	0x42ee	; 0x42ee <eeprom_read_byte>
    
    //Functionality to 'get' and 'put' objects to and from EEPROM.
    template< typename T > T &get( int idx, T &t ){
        EEPtr e = idx;
        uint8_t *ptr = (uint8_t*) &t;
        for( int count = sizeof(T) ; count ; --count, ++e )  *ptr++ = *e;
     27c:	f8 01       	movw	r30, r16
     27e:	81 93       	st	Z+, r24
     280:	8f 01       	movw	r16, r30
     282:	ee 15       	cp	r30, r14
     284:	ff 05       	cpc	r31, r15
     286:	a9 f7       	brne	.-22     	; 0x272 <_ZN11EEPROMClass3getIdEERT_iS2_.isra.1+0x22>
        return t;
    }
     288:	ce 01       	movw	r24, r28
     28a:	df 91       	pop	r29
     28c:	cf 91       	pop	r28
     28e:	1f 91       	pop	r17
     290:	0f 91       	pop	r16
     292:	ff 90       	pop	r15
     294:	ef 90       	pop	r14
     296:	df 90       	pop	r13
     298:	cf 90       	pop	r12
     29a:	08 95       	ret

0000029c <_Z19WritePidCfgToEEPROMjP11PIDConfig_e>:
inline void LOG(const char* x) {
    Serial.write(255);
    Serial.println(x);
}

void WritePidCfgToEEPROM(uint16_t addr,PIDConfig_e *cfg) {
     29c:	0f 93       	push	r16
     29e:	1f 93       	push	r17
     2a0:	cf 93       	push	r28
     2a2:	df 93       	push	r29
     2a4:	8c 01       	movw	r16, r24
     2a6:	eb 01       	movw	r28, r22
    EEPROM.put(addr, cfg->Kp);
     2a8:	0e 94 fd 00 	call	0x1fa	; 0x1fa <_ZN11EEPROMClass3putIdEERKT_iS3_.isra.0>
    addr+=sizeof(double);
    EEPROM.put(addr, cfg->Ki);
     2ac:	be 01       	movw	r22, r28
     2ae:	6c 5f       	subi	r22, 0xFC	; 252
     2b0:	7f 4f       	sbci	r23, 0xFF	; 255
     2b2:	c8 01       	movw	r24, r16
     2b4:	04 96       	adiw	r24, 0x04	; 4
     2b6:	0e 94 fd 00 	call	0x1fa	; 0x1fa <_ZN11EEPROMClass3putIdEERKT_iS3_.isra.0>
    addr+=sizeof(double);
    EEPROM.put(addr,cfg->Kd);
     2ba:	be 01       	movw	r22, r28
     2bc:	68 5f       	subi	r22, 0xF8	; 248
     2be:	7f 4f       	sbci	r23, 0xFF	; 255
     2c0:	c8 01       	movw	r24, r16
     2c2:	08 96       	adiw	r24, 0x08	; 8
}
     2c4:	df 91       	pop	r29
     2c6:	cf 91       	pop	r28
     2c8:	1f 91       	pop	r17
     2ca:	0f 91       	pop	r16
void WritePidCfgToEEPROM(uint16_t addr,PIDConfig_e *cfg) {
    EEPROM.put(addr, cfg->Kp);
    addr+=sizeof(double);
    EEPROM.put(addr, cfg->Ki);
    addr+=sizeof(double);
    EEPROM.put(addr,cfg->Kd);
     2cc:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <_ZN11EEPROMClass3putIdEERKT_iS3_.isra.0>

000002d0 <_Z20ReadPidCfgFromEEPROMjP11PIDConfig_e>:
}

void ReadPidCfgFromEEPROM(uint16_t addr,PIDConfig_e *cfg) {
     2d0:	0f 93       	push	r16
     2d2:	1f 93       	push	r17
     2d4:	cf 93       	push	r28
     2d6:	df 93       	push	r29
     2d8:	8c 01       	movw	r16, r24
     2da:	eb 01       	movw	r28, r22
    EEPROM.get(addr, cfg->Kp);
     2dc:	0e 94 28 01 	call	0x250	; 0x250 <_ZN11EEPROMClass3getIdEERT_iS2_.isra.1>
    addr+=sizeof(double);
    EEPROM.get(addr, cfg->Ki);
     2e0:	be 01       	movw	r22, r28
     2e2:	6c 5f       	subi	r22, 0xFC	; 252
     2e4:	7f 4f       	sbci	r23, 0xFF	; 255
     2e6:	c8 01       	movw	r24, r16
     2e8:	04 96       	adiw	r24, 0x04	; 4
     2ea:	0e 94 28 01 	call	0x250	; 0x250 <_ZN11EEPROMClass3getIdEERT_iS2_.isra.1>
    addr+=sizeof(double);
    EEPROM.get(addr,cfg->Kd);
     2ee:	be 01       	movw	r22, r28
     2f0:	68 5f       	subi	r22, 0xF8	; 248
     2f2:	7f 4f       	sbci	r23, 0xFF	; 255
     2f4:	c8 01       	movw	r24, r16
     2f6:	08 96       	adiw	r24, 0x08	; 8
}
     2f8:	df 91       	pop	r29
     2fa:	cf 91       	pop	r28
     2fc:	1f 91       	pop	r17
     2fe:	0f 91       	pop	r16
void ReadPidCfgFromEEPROM(uint16_t addr,PIDConfig_e *cfg) {
    EEPROM.get(addr, cfg->Kp);
    addr+=sizeof(double);
    EEPROM.get(addr, cfg->Ki);
    addr+=sizeof(double);
    EEPROM.get(addr,cfg->Kd);
     300:	0c 94 28 01 	jmp	0x250	; 0x250 <_ZN11EEPROMClass3getIdEERT_iS2_.isra.1>

00000304 <_Z23getPidConfigsFromEEPROMv>:


void getPidConfigsFromEEPROM() {
    uint16_t addr=EEPROM_PID_CONFIGS_ADDR;

    ReadPidCfgFromEEPROM(addr,Mot0_PidCtl);
     304:	60 91 60 02 	lds	r22, 0x0260	; 0x800260 <Mot0_PidCtl>
     308:	70 91 61 02 	lds	r23, 0x0261	; 0x800261 <Mot0_PidCtl+0x1>
     30c:	80 e0       	ldi	r24, 0x00	; 0
     30e:	90 e0       	ldi	r25, 0x00	; 0
     310:	0e 94 68 01 	call	0x2d0	; 0x2d0 <_Z20ReadPidCfgFromEEPROMjP11PIDConfig_e>
    addr+=3*sizeof(double);
    ReadPidCfgFromEEPROM(addr,Mot1_PidCtl);
     314:	60 91 5e 02 	lds	r22, 0x025E	; 0x80025e <Mot1_PidCtl>
     318:	70 91 5f 02 	lds	r23, 0x025F	; 0x80025f <Mot1_PidCtl+0x1>
     31c:	8c e0       	ldi	r24, 0x0C	; 12
     31e:	90 e0       	ldi	r25, 0x00	; 0
     320:	0e 94 68 01 	call	0x2d0	; 0x2d0 <_Z20ReadPidCfgFromEEPROMjP11PIDConfig_e>
    addr+=3*sizeof(double);
    ReadPidCfgFromEEPROM(addr,Giro_PidCtl);
     324:	60 91 5c 02 	lds	r22, 0x025C	; 0x80025c <Giro_PidCtl>
     328:	70 91 5d 02 	lds	r23, 0x025D	; 0x80025d <Giro_PidCtl+0x1>
     32c:	88 e1       	ldi	r24, 0x18	; 24
     32e:	90 e0       	ldi	r25, 0x00	; 0
     330:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <_Z20ReadPidCfgFromEEPROMjP11PIDConfig_e>

00000334 <_Z20putPidConfigToEEPROMv>:

void putPidConfigToEEPROM() {

    uint16_t addr=EEPROM_PID_CONFIGS_ADDR;

    WritePidCfgToEEPROM(addr,Mot0_PidCtl);
     334:	60 91 60 02 	lds	r22, 0x0260	; 0x800260 <Mot0_PidCtl>
     338:	70 91 61 02 	lds	r23, 0x0261	; 0x800261 <Mot0_PidCtl+0x1>
     33c:	80 e0       	ldi	r24, 0x00	; 0
     33e:	90 e0       	ldi	r25, 0x00	; 0
     340:	0e 94 4e 01 	call	0x29c	; 0x29c <_Z19WritePidCfgToEEPROMjP11PIDConfig_e>
    addr+=3*sizeof(double);
    WritePidCfgToEEPROM(addr,Mot1_PidCtl);
     344:	60 91 5e 02 	lds	r22, 0x025E	; 0x80025e <Mot1_PidCtl>
     348:	70 91 5f 02 	lds	r23, 0x025F	; 0x80025f <Mot1_PidCtl+0x1>
     34c:	8c e0       	ldi	r24, 0x0C	; 12
     34e:	90 e0       	ldi	r25, 0x00	; 0
     350:	0e 94 4e 01 	call	0x29c	; 0x29c <_Z19WritePidCfgToEEPROMjP11PIDConfig_e>
    addr+=3*sizeof(double);
    WritePidCfgToEEPROM(addr,Giro_PidCtl);
     354:	60 91 5c 02 	lds	r22, 0x025C	; 0x80025c <Giro_PidCtl>
     358:	70 91 5d 02 	lds	r23, 0x025D	; 0x80025d <Giro_PidCtl+0x1>
     35c:	88 e1       	ldi	r24, 0x18	; 24
     35e:	90 e0       	ldi	r25, 0x00	; 0
     360:	0c 94 4e 01 	jmp	0x29c	; 0x29c <_Z19WritePidCfgToEEPROMjP11PIDConfig_e>

00000364 <_Z15initPidControlsv>:
}


// Init the pids for the 2 motors and the giro
void initPidControls() {
     364:	8f 92       	push	r8
     366:	9f 92       	push	r9
     368:	af 92       	push	r10
     36a:	bf 92       	push	r11
     36c:	cf 92       	push	r12
     36e:	df 92       	push	r13
     370:	ef 92       	push	r14
     372:	ff 92       	push	r15
     374:	0f 93       	push	r16
     376:	1f 93       	push	r17
     378:	cf 93       	push	r28
    Mot0_PidCtl= new PIDConfig_e(MOT0__KP,MOT0__KI,MOT0__KD,0);
     37a:	88 e1       	ldi	r24, 0x18	; 24
     37c:	90 e0       	ldi	r25, 0x00	; 0
     37e:	0e 94 95 1b 	call	0x372a	; 0x372a <_Znwj>
     382:	fc 01       	movw	r30, r24
    double Setpoint;
    double Input;
    double Output;

    PIDConfig_e(double kp, double ki, double kd, double setpoint) {
        Kp=kp;
     384:	c1 2c       	mov	r12, r1
     386:	d1 2c       	mov	r13, r1
     388:	80 e2       	ldi	r24, 0x20	; 32
     38a:	e8 2e       	mov	r14, r24
     38c:	82 e4       	ldi	r24, 0x42	; 66
     38e:	f8 2e       	mov	r15, r24
     390:	c0 82       	st	Z, r12
     392:	d1 82       	std	Z+1, r13	; 0x01
     394:	e2 82       	std	Z+2, r14	; 0x02
     396:	f3 82       	std	Z+3, r15	; 0x03
        Kd=kd;
     398:	10 86       	std	Z+8, r1	; 0x08
     39a:	11 86       	std	Z+9, r1	; 0x09
     39c:	12 86       	std	Z+10, r1	; 0x0a
     39e:	13 86       	std	Z+11, r1	; 0x0b
        Ki=ki;
     3a0:	81 2c       	mov	r8, r1
     3a2:	91 2c       	mov	r9, r1
     3a4:	98 ec       	ldi	r25, 0xC8	; 200
     3a6:	a9 2e       	mov	r10, r25
     3a8:	92 e4       	ldi	r25, 0x42	; 66
     3aa:	b9 2e       	mov	r11, r25
     3ac:	84 82       	std	Z+4, r8	; 0x04
     3ae:	95 82       	std	Z+5, r9	; 0x05
     3b0:	a6 82       	std	Z+6, r10	; 0x06
     3b2:	b7 82       	std	Z+7, r11	; 0x07
        Setpoint=setpoint;
     3b4:	14 86       	std	Z+12, r1	; 0x0c
     3b6:	15 86       	std	Z+13, r1	; 0x0d
     3b8:	16 86       	std	Z+14, r1	; 0x0e
     3ba:	17 86       	std	Z+15, r1	; 0x0f
     3bc:	f0 93 61 02 	sts	0x0261, r31	; 0x800261 <Mot0_PidCtl+0x1>
     3c0:	e0 93 60 02 	sts	0x0260, r30	; 0x800260 <Mot0_PidCtl>
    Mot1_PidCtl= new PIDConfig_e(MOT1__KP,MOT1__KI,MOT1__KD,0);
     3c4:	88 e1       	ldi	r24, 0x18	; 24
     3c6:	90 e0       	ldi	r25, 0x00	; 0
     3c8:	0e 94 95 1b 	call	0x372a	; 0x372a <_Znwj>
     3cc:	fc 01       	movw	r30, r24
    double Setpoint;
    double Input;
    double Output;

    PIDConfig_e(double kp, double ki, double kd, double setpoint) {
        Kp=kp;
     3ce:	c0 82       	st	Z, r12
     3d0:	d1 82       	std	Z+1, r13	; 0x01
     3d2:	e2 82       	std	Z+2, r14	; 0x02
     3d4:	f3 82       	std	Z+3, r15	; 0x03
        Kd=kd;
     3d6:	10 86       	std	Z+8, r1	; 0x08
     3d8:	11 86       	std	Z+9, r1	; 0x09
     3da:	12 86       	std	Z+10, r1	; 0x0a
     3dc:	13 86       	std	Z+11, r1	; 0x0b
        Ki=ki;
     3de:	84 82       	std	Z+4, r8	; 0x04
     3e0:	95 82       	std	Z+5, r9	; 0x05
     3e2:	a6 82       	std	Z+6, r10	; 0x06
     3e4:	b7 82       	std	Z+7, r11	; 0x07
        Setpoint=setpoint;
     3e6:	14 86       	std	Z+12, r1	; 0x0c
     3e8:	15 86       	std	Z+13, r1	; 0x0d
     3ea:	16 86       	std	Z+14, r1	; 0x0e
     3ec:	17 86       	std	Z+15, r1	; 0x0f
     3ee:	90 93 5f 02 	sts	0x025F, r25	; 0x80025f <Mot1_PidCtl+0x1>
     3f2:	80 93 5e 02 	sts	0x025E, r24	; 0x80025e <Mot1_PidCtl>
    Giro_PidCtl= new PIDConfig_e(GIRO__KP,GIRO__KI,GIRO__KD,GIRO__TARGET_ANGLE);
     3f6:	88 e1       	ldi	r24, 0x18	; 24
     3f8:	90 e0       	ldi	r25, 0x00	; 0
     3fa:	0e 94 95 1b 	call	0x372a	; 0x372a <_Znwj>
     3fe:	fc 01       	movw	r30, r24
    double Setpoint;
    double Input;
    double Output;

    PIDConfig_e(double kp, double ki, double kd, double setpoint) {
        Kp=kp;
     400:	8d ec       	ldi	r24, 0xCD	; 205
     402:	9c ec       	ldi	r25, 0xCC	; 204
     404:	ac e4       	ldi	r26, 0x4C	; 76
     406:	bf e3       	ldi	r27, 0x3F	; 63
     408:	80 83       	st	Z, r24
     40a:	91 83       	std	Z+1, r25	; 0x01
     40c:	a2 83       	std	Z+2, r26	; 0x02
     40e:	b3 83       	std	Z+3, r27	; 0x03
        Kd=kd;
     410:	10 86       	std	Z+8, r1	; 0x08
     412:	11 86       	std	Z+9, r1	; 0x09
     414:	12 86       	std	Z+10, r1	; 0x0a
     416:	13 86       	std	Z+11, r1	; 0x0b
        Ki=ki;
     418:	84 83       	std	Z+4, r24	; 0x04
     41a:	95 83       	std	Z+5, r25	; 0x05
     41c:	a6 83       	std	Z+6, r26	; 0x06
     41e:	b7 83       	std	Z+7, r27	; 0x07
        Setpoint=setpoint;
     420:	80 e0       	ldi	r24, 0x00	; 0
     422:	90 e0       	ldi	r25, 0x00	; 0
     424:	a0 e4       	ldi	r26, 0x40	; 64
     426:	b0 ec       	ldi	r27, 0xC0	; 192
     428:	84 87       	std	Z+12, r24	; 0x0c
     42a:	95 87       	std	Z+13, r25	; 0x0d
     42c:	a6 87       	std	Z+14, r26	; 0x0e
     42e:	b7 87       	std	Z+15, r27	; 0x0f
     430:	f0 93 5d 02 	sts	0x025D, r31	; 0x80025d <Giro_PidCtl+0x1>
     434:	e0 93 5c 02 	sts	0x025C, r30	; 0x80025c <Giro_PidCtl>

#ifdef LOAD_PIDS_FROM_EEPROM
    getPidConfigsFromEEPROM();
     438:	0e 94 82 01 	call	0x304	; 0x304 <_Z23getPidConfigsFromEEPROMv>
#endif

    Mot0_Pid= new PID(&Mot0_PidCtl->Input, &Mot0_PidCtl->Output, &Mot0_PidCtl->Setpoint, Mot0_PidCtl->Kp, Mot0_PidCtl->Ki, Mot0_PidCtl->Kd, P_ON_E, DIRECT);
     43c:	8c e3       	ldi	r24, 0x3C	; 60
     43e:	90 e0       	ldi	r25, 0x00	; 0
     440:	0e 94 95 1b 	call	0x372a	; 0x372a <_Znwj>
     444:	4c 01       	movw	r8, r24
     446:	e0 91 60 02 	lds	r30, 0x0260	; 0x800260 <Mot0_PidCtl>
     44a:	f0 91 61 02 	lds	r31, 0x0261	; 0x800261 <Mot0_PidCtl+0x1>
     44e:	a4 80       	ldd	r10, Z+4	; 0x04
     450:	b5 80       	ldd	r11, Z+5	; 0x05
     452:	c6 80       	ldd	r12, Z+6	; 0x06
     454:	d7 80       	ldd	r13, Z+7	; 0x07
     456:	e0 80       	ld	r14, Z
     458:	f1 80       	ldd	r15, Z+1	; 0x01
     45a:	02 81       	ldd	r16, Z+2	; 0x02
     45c:	13 81       	ldd	r17, Z+3	; 0x03
     45e:	9f 01       	movw	r18, r30
     460:	24 5f       	subi	r18, 0xF4	; 244
     462:	3f 4f       	sbci	r19, 0xFF	; 255
     464:	af 01       	movw	r20, r30
     466:	4c 5e       	subi	r20, 0xEC	; 236
     468:	5f 4f       	sbci	r21, 0xFF	; 255
     46a:	bf 01       	movw	r22, r30
     46c:	60 5f       	subi	r22, 0xF0	; 240
     46e:	7f 4f       	sbci	r23, 0xFF	; 255
     470:	1f 92       	push	r1
     472:	1f 92       	push	r1
     474:	1f 92       	push	r1
     476:	c1 e0       	ldi	r28, 0x01	; 1
     478:	cf 93       	push	r28
     47a:	83 85       	ldd	r24, Z+11	; 0x0b
     47c:	8f 93       	push	r24
     47e:	82 85       	ldd	r24, Z+10	; 0x0a
     480:	8f 93       	push	r24
     482:	81 85       	ldd	r24, Z+9	; 0x09
     484:	8f 93       	push	r24
     486:	80 85       	ldd	r24, Z+8	; 0x08
     488:	8f 93       	push	r24
     48a:	c4 01       	movw	r24, r8
     48c:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <_ZN3PIDC1EPdS0_S0_dddii>
     490:	90 92 5b 02 	sts	0x025B, r9	; 0x80025b <Mot0_Pid+0x1>
     494:	80 92 5a 02 	sts	0x025A, r8	; 0x80025a <Mot0_Pid>
    Mot1_Pid= new PID(&Mot1_PidCtl->Input, &Mot1_PidCtl->Output, &Mot1_PidCtl->Setpoint, Mot1_PidCtl->Kp, Mot1_PidCtl->Ki, Mot1_PidCtl->Kd, P_ON_E, DIRECT);
     498:	8c e3       	ldi	r24, 0x3C	; 60
     49a:	90 e0       	ldi	r25, 0x00	; 0
     49c:	0e 94 95 1b 	call	0x372a	; 0x372a <_Znwj>
     4a0:	4c 01       	movw	r8, r24
     4a2:	e0 91 5e 02 	lds	r30, 0x025E	; 0x80025e <Mot1_PidCtl>
     4a6:	f0 91 5f 02 	lds	r31, 0x025F	; 0x80025f <Mot1_PidCtl+0x1>
     4aa:	a4 80       	ldd	r10, Z+4	; 0x04
     4ac:	b5 80       	ldd	r11, Z+5	; 0x05
     4ae:	c6 80       	ldd	r12, Z+6	; 0x06
     4b0:	d7 80       	ldd	r13, Z+7	; 0x07
     4b2:	e0 80       	ld	r14, Z
     4b4:	f1 80       	ldd	r15, Z+1	; 0x01
     4b6:	02 81       	ldd	r16, Z+2	; 0x02
     4b8:	13 81       	ldd	r17, Z+3	; 0x03
     4ba:	9f 01       	movw	r18, r30
     4bc:	24 5f       	subi	r18, 0xF4	; 244
     4be:	3f 4f       	sbci	r19, 0xFF	; 255
     4c0:	af 01       	movw	r20, r30
     4c2:	4c 5e       	subi	r20, 0xEC	; 236
     4c4:	5f 4f       	sbci	r21, 0xFF	; 255
     4c6:	bf 01       	movw	r22, r30
     4c8:	60 5f       	subi	r22, 0xF0	; 240
     4ca:	7f 4f       	sbci	r23, 0xFF	; 255
     4cc:	1f 92       	push	r1
     4ce:	1f 92       	push	r1
     4d0:	1f 92       	push	r1
     4d2:	cf 93       	push	r28
     4d4:	83 85       	ldd	r24, Z+11	; 0x0b
     4d6:	8f 93       	push	r24
     4d8:	82 85       	ldd	r24, Z+10	; 0x0a
     4da:	8f 93       	push	r24
     4dc:	81 85       	ldd	r24, Z+9	; 0x09
     4de:	8f 93       	push	r24
     4e0:	80 85       	ldd	r24, Z+8	; 0x08
     4e2:	8f 93       	push	r24
     4e4:	c4 01       	movw	r24, r8
     4e6:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <_ZN3PIDC1EPdS0_S0_dddii>
     4ea:	90 92 59 02 	sts	0x0259, r9	; 0x800259 <Mot1_Pid+0x1>
     4ee:	80 92 58 02 	sts	0x0258, r8	; 0x800258 <Mot1_Pid>
    Giro_Pid= new PID(&Giro_PidCtl->Input, &Giro_PidCtl->Output, &Giro_PidCtl->Setpoint, Giro_PidCtl->Kp, Giro_PidCtl->Ki, Giro_PidCtl->Kd, P_ON_E, DIRECT);
     4f2:	8c e3       	ldi	r24, 0x3C	; 60
     4f4:	90 e0       	ldi	r25, 0x00	; 0
     4f6:	0e 94 95 1b 	call	0x372a	; 0x372a <_Znwj>
     4fa:	4c 01       	movw	r8, r24
     4fc:	e0 91 5c 02 	lds	r30, 0x025C	; 0x80025c <Giro_PidCtl>
     500:	f0 91 5d 02 	lds	r31, 0x025D	; 0x80025d <Giro_PidCtl+0x1>
     504:	a4 80       	ldd	r10, Z+4	; 0x04
     506:	b5 80       	ldd	r11, Z+5	; 0x05
     508:	c6 80       	ldd	r12, Z+6	; 0x06
     50a:	d7 80       	ldd	r13, Z+7	; 0x07
     50c:	e0 80       	ld	r14, Z
     50e:	f1 80       	ldd	r15, Z+1	; 0x01
     510:	02 81       	ldd	r16, Z+2	; 0x02
     512:	13 81       	ldd	r17, Z+3	; 0x03
     514:	9f 01       	movw	r18, r30
     516:	24 5f       	subi	r18, 0xF4	; 244
     518:	3f 4f       	sbci	r19, 0xFF	; 255
     51a:	af 01       	movw	r20, r30
     51c:	4c 5e       	subi	r20, 0xEC	; 236
     51e:	5f 4f       	sbci	r21, 0xFF	; 255
     520:	bf 01       	movw	r22, r30
     522:	60 5f       	subi	r22, 0xF0	; 240
     524:	7f 4f       	sbci	r23, 0xFF	; 255
     526:	1f 92       	push	r1
     528:	1f 92       	push	r1
     52a:	1f 92       	push	r1
     52c:	cf 93       	push	r28
     52e:	83 85       	ldd	r24, Z+11	; 0x0b
     530:	8f 93       	push	r24
     532:	82 85       	ldd	r24, Z+10	; 0x0a
     534:	8f 93       	push	r24
     536:	81 85       	ldd	r24, Z+9	; 0x09
     538:	8f 93       	push	r24
     53a:	80 85       	ldd	r24, Z+8	; 0x08
     53c:	8f 93       	push	r24
     53e:	c4 01       	movw	r24, r8
     540:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <_ZN3PIDC1EPdS0_S0_dddii>
     544:	90 92 57 02 	sts	0x0257, r9	; 0x800257 <Giro_Pid+0x1>
     548:	80 92 56 02 	sts	0x0256, r8	; 0x800256 <Giro_Pid>

    Mot0_Pid->SetSampleTime(MOT0__SAMPLE_TIME);
     54c:	65 e0       	ldi	r22, 0x05	; 5
     54e:	70 e0       	ldi	r23, 0x00	; 0
     550:	80 91 5a 02 	lds	r24, 0x025A	; 0x80025a <Mot0_Pid>
     554:	90 91 5b 02 	lds	r25, 0x025B	; 0x80025b <Mot0_Pid+0x1>
     558:	0e 94 dd 0c 	call	0x19ba	; 0x19ba <_ZN3PID13SetSampleTimeEi>
    Mot1_Pid->SetSampleTime(MOT1__SAMPLE_TIME);
     55c:	65 e0       	ldi	r22, 0x05	; 5
     55e:	70 e0       	ldi	r23, 0x00	; 0
     560:	80 91 58 02 	lds	r24, 0x0258	; 0x800258 <Mot1_Pid>
     564:	90 91 59 02 	lds	r25, 0x0259	; 0x800259 <Mot1_Pid+0x1>
     568:	0e 94 dd 0c 	call	0x19ba	; 0x19ba <_ZN3PID13SetSampleTimeEi>
    Giro_Pid->SetSampleTime(GIRO__SAMPLE_TIME);
     56c:	65 e0       	ldi	r22, 0x05	; 5
     56e:	70 e0       	ldi	r23, 0x00	; 0
     570:	80 91 56 02 	lds	r24, 0x0256	; 0x800256 <Giro_Pid>
     574:	90 91 57 02 	lds	r25, 0x0257	; 0x800257 <Giro_Pid+0x1>
     578:	0e 94 dd 0c 	call	0x19ba	; 0x19ba <_ZN3PID13SetSampleTimeEi>

    Mot0_Pid->SetOutputLimits(MOT0__OUT_MIN,MOT0__OUT_MAX);
     57c:	00 e0       	ldi	r16, 0x00	; 0
     57e:	10 e0       	ldi	r17, 0x00	; 0
     580:	2f e7       	ldi	r18, 0x7F	; 127
     582:	33 e4       	ldi	r19, 0x43	; 67
     584:	40 e0       	ldi	r20, 0x00	; 0
     586:	50 e0       	ldi	r21, 0x00	; 0
     588:	6f e7       	ldi	r22, 0x7F	; 127
     58a:	73 ec       	ldi	r23, 0xC3	; 195
     58c:	80 91 5a 02 	lds	r24, 0x025A	; 0x80025a <Mot0_Pid>
     590:	90 91 5b 02 	lds	r25, 0x025B	; 0x80025b <Mot0_Pid+0x1>
     594:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <_ZN3PID15SetOutputLimitsEdd>
    Mot1_Pid->SetOutputLimits(MOT1__OUT_MIN,MOT1__OUT_MAX);
     598:	00 e0       	ldi	r16, 0x00	; 0
     59a:	10 e0       	ldi	r17, 0x00	; 0
     59c:	2f e7       	ldi	r18, 0x7F	; 127
     59e:	33 e4       	ldi	r19, 0x43	; 67
     5a0:	40 e0       	ldi	r20, 0x00	; 0
     5a2:	50 e0       	ldi	r21, 0x00	; 0
     5a4:	6f e7       	ldi	r22, 0x7F	; 127
     5a6:	73 ec       	ldi	r23, 0xC3	; 195
     5a8:	80 91 58 02 	lds	r24, 0x0258	; 0x800258 <Mot1_Pid>
     5ac:	90 91 59 02 	lds	r25, 0x0259	; 0x800259 <Mot1_Pid+0x1>
     5b0:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <_ZN3PID15SetOutputLimitsEdd>
    Giro_Pid->SetOutputLimits(GIRO__OUT_MIN,GIRO__OUT_MAX); //min and max enc speed for a sample time of 10 ms
     5b4:	00 e0       	ldi	r16, 0x00	; 0
     5b6:	10 e0       	ldi	r17, 0x00	; 0
     5b8:	2c e0       	ldi	r18, 0x0C	; 12
     5ba:	32 e4       	ldi	r19, 0x42	; 66
     5bc:	40 e0       	ldi	r20, 0x00	; 0
     5be:	50 e0       	ldi	r21, 0x00	; 0
     5c0:	6c e0       	ldi	r22, 0x0C	; 12
     5c2:	72 ec       	ldi	r23, 0xC2	; 194
     5c4:	80 91 56 02 	lds	r24, 0x0256	; 0x800256 <Giro_Pid>
     5c8:	90 91 57 02 	lds	r25, 0x0257	; 0x800257 <Giro_Pid+0x1>
     5cc:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <_ZN3PID15SetOutputLimitsEdd>

    Mot0_Pid->SetMode(AUTOMATIC);
     5d0:	61 e0       	ldi	r22, 0x01	; 1
     5d2:	70 e0       	ldi	r23, 0x00	; 0
     5d4:	80 91 5a 02 	lds	r24, 0x025A	; 0x80025a <Mot0_Pid>
     5d8:	90 91 5b 02 	lds	r25, 0x025B	; 0x80025b <Mot0_Pid+0x1>
     5dc:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <_ZN3PID7SetModeEi>
    Mot1_Pid->SetMode(AUTOMATIC);
     5e0:	61 e0       	ldi	r22, 0x01	; 1
     5e2:	70 e0       	ldi	r23, 0x00	; 0
     5e4:	80 91 58 02 	lds	r24, 0x0258	; 0x800258 <Mot1_Pid>
     5e8:	90 91 59 02 	lds	r25, 0x0259	; 0x800259 <Mot1_Pid+0x1>
     5ec:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <_ZN3PID7SetModeEi>
    Giro_Pid->SetMode(AUTOMATIC);
     5f0:	8d b7       	in	r24, 0x3d	; 61
     5f2:	9e b7       	in	r25, 0x3e	; 62
     5f4:	48 96       	adiw	r24, 0x18	; 24
     5f6:	0f b6       	in	r0, 0x3f	; 63
     5f8:	f8 94       	cli
     5fa:	9e bf       	out	0x3e, r25	; 62
     5fc:	0f be       	out	0x3f, r0	; 63
     5fe:	8d bf       	out	0x3d, r24	; 61
     600:	61 e0       	ldi	r22, 0x01	; 1
     602:	70 e0       	ldi	r23, 0x00	; 0
     604:	80 91 56 02 	lds	r24, 0x0256	; 0x800256 <Giro_Pid>
     608:	90 91 57 02 	lds	r25, 0x0257	; 0x800257 <Giro_Pid+0x1>

}
     60c:	cf 91       	pop	r28
     60e:	1f 91       	pop	r17
     610:	0f 91       	pop	r16
     612:	ff 90       	pop	r15
     614:	ef 90       	pop	r14
     616:	df 90       	pop	r13
     618:	cf 90       	pop	r12
     61a:	bf 90       	pop	r11
     61c:	af 90       	pop	r10
     61e:	9f 90       	pop	r9
     620:	8f 90       	pop	r8
    Mot1_Pid->SetOutputLimits(MOT1__OUT_MIN,MOT1__OUT_MAX);
    Giro_Pid->SetOutputLimits(GIRO__OUT_MIN,GIRO__OUT_MAX); //min and max enc speed for a sample time of 10 ms

    Mot0_Pid->SetMode(AUTOMATIC);
    Mot1_Pid->SetMode(AUTOMATIC);
    Giro_Pid->SetMode(AUTOMATIC);
     622:	0c 94 f1 0d 	jmp	0x1be2	; 0x1be2 <_ZN3PID7SetModeEi>

00000626 <_Z16Serial_ParseDatav>:
bool DirLeft=false;

uint16_t RemoteCmd=0;
unsigned long RemoteCmdRecTime=0;

void Serial_ParseData() {
     626:	8f 92       	push	r8
     628:	9f 92       	push	r9
     62a:	af 92       	push	r10
     62c:	bf 92       	push	r11
     62e:	cf 92       	push	r12
     630:	df 92       	push	r13
     632:	ef 92       	push	r14
     634:	ff 92       	push	r15
     636:	0f 93       	push	r16
     638:	1f 93       	push	r17
    if (Ser_NewData==false) return;
     63a:	20 91 15 02 	lds	r18, 0x0215	; 0x800215 <Ser_NewData>
     63e:	22 23       	and	r18, r18
     640:	09 f4       	brne	.+2      	; 0x644 <_Z16Serial_ParseDatav+0x1e>
     642:	07 c1       	rjmp	.+526    	; 0x852 <_Z16Serial_ParseDatav+0x22c>

    uint8_t target=Ser_Buffer[0];
     644:	00 91 16 02 	lds	r16, 0x0216	; 0x800216 <Ser_Buffer>
    char *val=Ser_Buffer+1;
    double dval;
    if (val[0]!='\n') {
     648:	20 91 17 02 	lds	r18, 0x0217	; 0x800217 <Ser_Buffer+0x1>
     64c:	2a 30       	cpi	r18, 0x0A	; 10
     64e:	31 f0       	breq	.+12     	; 0x65c <_Z16Serial_ParseDatav+0x36>
        dval=atof(val);
     650:	87 e1       	ldi	r24, 0x17	; 23
     652:	92 e0       	ldi	r25, 0x02	; 2
     654:	0e 94 01 20 	call	0x4002	; 0x4002 <atof>
     658:	ab 01       	movw	r20, r22
     65a:	bc 01       	movw	r22, r24
    }

    switch(target) {
     65c:	10 e0       	ldi	r17, 0x00	; 0
     65e:	f8 01       	movw	r30, r16
     660:	31 97       	sbiw	r30, 0x01	; 1
     662:	ee 31       	cpi	r30, 0x1E	; 30
     664:	f1 05       	cpc	r31, r1
     666:	08 f0       	brcs	.+2      	; 0x66a <_Z16Serial_ParseDatav+0x44>
     668:	f2 c0       	rjmp	.+484    	; 0x84e <_Z16Serial_ParseDatav+0x228>
     66a:	ec 5c       	subi	r30, 0xCC	; 204
     66c:	ff 4f       	sbci	r31, 0xFF	; 255
     66e:	0c 94 c0 1e 	jmp	0x3d80	; 0x3d80 <__tablejump2__>
    case CUTE_PID1_KP:
        Mot0_PidCtl->Kp=dval;
     672:	e0 91 60 02 	lds	r30, 0x0260	; 0x800260 <Mot0_PidCtl>
     676:	f0 91 61 02 	lds	r31, 0x0261	; 0x800261 <Mot0_PidCtl+0x1>
     67a:	40 83       	st	Z, r20
     67c:	51 83       	std	Z+1, r21	; 0x01
     67e:	62 83       	std	Z+2, r22	; 0x02
     680:	73 83       	std	Z+3, r23	; 0x03
        Mot0_Pid->SetTunings(Mot0_PidCtl->Kp,Mot0_PidCtl->Ki,Mot0_PidCtl->Kd);
     682:	c0 84       	ldd	r12, Z+8	; 0x08
     684:	d1 84       	ldd	r13, Z+9	; 0x09
     686:	e2 84       	ldd	r14, Z+10	; 0x0a
     688:	f3 84       	ldd	r15, Z+11	; 0x0b
     68a:	04 81       	ldd	r16, Z+4	; 0x04
     68c:	15 81       	ldd	r17, Z+5	; 0x05
     68e:	26 81       	ldd	r18, Z+6	; 0x06
     690:	37 81       	ldd	r19, Z+7	; 0x07
     692:	14 c0       	rjmp	.+40     	; 0x6bc <_Z16Serial_ParseDatav+0x96>
        break;
    case CUTE_PID1_KI:
        Mot0_PidCtl->Ki=dval;
     694:	e0 91 60 02 	lds	r30, 0x0260	; 0x800260 <Mot0_PidCtl>
     698:	f0 91 61 02 	lds	r31, 0x0261	; 0x800261 <Mot0_PidCtl+0x1>
     69c:	44 83       	std	Z+4, r20	; 0x04
     69e:	55 83       	std	Z+5, r21	; 0x05
     6a0:	66 83       	std	Z+6, r22	; 0x06
     6a2:	77 83       	std	Z+7, r23	; 0x07
        Mot0_Pid->SetTunings(Mot0_PidCtl->Kp,Mot0_PidCtl->Ki,Mot0_PidCtl->Kd);
     6a4:	c0 84       	ldd	r12, Z+8	; 0x08
     6a6:	d1 84       	ldd	r13, Z+9	; 0x09
     6a8:	e2 84       	ldd	r14, Z+10	; 0x0a
     6aa:	f3 84       	ldd	r15, Z+11	; 0x0b
     6ac:	80 80       	ld	r8, Z
     6ae:	91 80       	ldd	r9, Z+1	; 0x01
     6b0:	a2 80       	ldd	r10, Z+2	; 0x02
     6b2:	b3 80       	ldd	r11, Z+3	; 0x03
     6b4:	8a 01       	movw	r16, r20
     6b6:	9b 01       	movw	r18, r22
     6b8:	b5 01       	movw	r22, r10
     6ba:	a4 01       	movw	r20, r8
     6bc:	80 91 5a 02 	lds	r24, 0x025A	; 0x80025a <Mot0_Pid>
     6c0:	90 91 5b 02 	lds	r25, 0x025B	; 0x80025b <Mot0_Pid+0x1>
     6c4:	0e 94 c7 0c 	call	0x198e	; 0x198e <_ZN3PID10SetTuningsEddd>
        break;
     6c8:	c2 c0       	rjmp	.+388    	; 0x84e <_Z16Serial_ParseDatav+0x228>
    case CUTE_PID1_KD:
        Mot0_PidCtl->Kd=dval;
     6ca:	e0 91 60 02 	lds	r30, 0x0260	; 0x800260 <Mot0_PidCtl>
     6ce:	f0 91 61 02 	lds	r31, 0x0261	; 0x800261 <Mot0_PidCtl+0x1>
     6d2:	40 87       	std	Z+8, r20	; 0x08
     6d4:	51 87       	std	Z+9, r21	; 0x09
     6d6:	62 87       	std	Z+10, r22	; 0x0a
     6d8:	73 87       	std	Z+11, r23	; 0x0b
        Mot0_Pid->SetTunings(Mot0_PidCtl->Kp,Mot0_PidCtl->Ki,Mot0_PidCtl->Kd);
     6da:	04 81       	ldd	r16, Z+4	; 0x04
     6dc:	15 81       	ldd	r17, Z+5	; 0x05
     6de:	26 81       	ldd	r18, Z+6	; 0x06
     6e0:	37 81       	ldd	r19, Z+7	; 0x07
     6e2:	80 80       	ld	r8, Z
     6e4:	91 80       	ldd	r9, Z+1	; 0x01
     6e6:	a2 80       	ldd	r10, Z+2	; 0x02
     6e8:	b3 80       	ldd	r11, Z+3	; 0x03
     6ea:	6a 01       	movw	r12, r20
     6ec:	7b 01       	movw	r14, r22
     6ee:	e4 cf       	rjmp	.-56     	; 0x6b8 <_Z16Serial_ParseDatav+0x92>
        break;
    case CUTE_PID2_KP:
        Mot1_PidCtl->Kp=dval;
     6f0:	e0 91 5e 02 	lds	r30, 0x025E	; 0x80025e <Mot1_PidCtl>
     6f4:	f0 91 5f 02 	lds	r31, 0x025F	; 0x80025f <Mot1_PidCtl+0x1>
     6f8:	40 83       	st	Z, r20
     6fa:	51 83       	std	Z+1, r21	; 0x01
     6fc:	62 83       	std	Z+2, r22	; 0x02
     6fe:	73 83       	std	Z+3, r23	; 0x03
        Mot1_Pid->SetTunings(Mot1_PidCtl->Kp,Mot1_PidCtl->Ki,Mot1_PidCtl->Kd);
     700:	c0 84       	ldd	r12, Z+8	; 0x08
     702:	d1 84       	ldd	r13, Z+9	; 0x09
     704:	e2 84       	ldd	r14, Z+10	; 0x0a
     706:	f3 84       	ldd	r15, Z+11	; 0x0b
     708:	04 81       	ldd	r16, Z+4	; 0x04
     70a:	15 81       	ldd	r17, Z+5	; 0x05
     70c:	26 81       	ldd	r18, Z+6	; 0x06
     70e:	37 81       	ldd	r19, Z+7	; 0x07
     710:	14 c0       	rjmp	.+40     	; 0x73a <_Z16Serial_ParseDatav+0x114>
        break;
    case CUTE_PID2_KI:
        Mot1_PidCtl->Ki=dval;
     712:	e0 91 5e 02 	lds	r30, 0x025E	; 0x80025e <Mot1_PidCtl>
     716:	f0 91 5f 02 	lds	r31, 0x025F	; 0x80025f <Mot1_PidCtl+0x1>
     71a:	44 83       	std	Z+4, r20	; 0x04
     71c:	55 83       	std	Z+5, r21	; 0x05
     71e:	66 83       	std	Z+6, r22	; 0x06
     720:	77 83       	std	Z+7, r23	; 0x07
        Mot1_Pid->SetTunings(Mot1_PidCtl->Kp,Mot1_PidCtl->Ki,Mot1_PidCtl->Kd);
     722:	c0 84       	ldd	r12, Z+8	; 0x08
     724:	d1 84       	ldd	r13, Z+9	; 0x09
     726:	e2 84       	ldd	r14, Z+10	; 0x0a
     728:	f3 84       	ldd	r15, Z+11	; 0x0b
     72a:	80 80       	ld	r8, Z
     72c:	91 80       	ldd	r9, Z+1	; 0x01
     72e:	a2 80       	ldd	r10, Z+2	; 0x02
     730:	b3 80       	ldd	r11, Z+3	; 0x03
     732:	8a 01       	movw	r16, r20
     734:	9b 01       	movw	r18, r22
     736:	b5 01       	movw	r22, r10
     738:	a4 01       	movw	r20, r8
     73a:	80 91 58 02 	lds	r24, 0x0258	; 0x800258 <Mot1_Pid>
     73e:	90 91 59 02 	lds	r25, 0x0259	; 0x800259 <Mot1_Pid+0x1>
     742:	c0 cf       	rjmp	.-128    	; 0x6c4 <_Z16Serial_ParseDatav+0x9e>
        break;
    case CUTE_PID2_KD:
        Mot1_PidCtl->Kd=dval;
     744:	e0 91 5e 02 	lds	r30, 0x025E	; 0x80025e <Mot1_PidCtl>
     748:	f0 91 5f 02 	lds	r31, 0x025F	; 0x80025f <Mot1_PidCtl+0x1>
     74c:	40 87       	std	Z+8, r20	; 0x08
     74e:	51 87       	std	Z+9, r21	; 0x09
     750:	62 87       	std	Z+10, r22	; 0x0a
     752:	73 87       	std	Z+11, r23	; 0x0b
        Mot1_Pid->SetTunings(Mot1_PidCtl->Kp,Mot1_PidCtl->Ki,Mot1_PidCtl->Kd);
     754:	04 81       	ldd	r16, Z+4	; 0x04
     756:	15 81       	ldd	r17, Z+5	; 0x05
     758:	26 81       	ldd	r18, Z+6	; 0x06
     75a:	37 81       	ldd	r19, Z+7	; 0x07
     75c:	80 80       	ld	r8, Z
     75e:	91 80       	ldd	r9, Z+1	; 0x01
     760:	a2 80       	ldd	r10, Z+2	; 0x02
     762:	b3 80       	ldd	r11, Z+3	; 0x03
     764:	6a 01       	movw	r12, r20
     766:	7b 01       	movw	r14, r22
     768:	e6 cf       	rjmp	.-52     	; 0x736 <_Z16Serial_ParseDatav+0x110>
        break;
    case CUTE_PID3_KP:
        Giro_PidCtl->Kp=dval;
     76a:	e0 91 5c 02 	lds	r30, 0x025C	; 0x80025c <Giro_PidCtl>
     76e:	f0 91 5d 02 	lds	r31, 0x025D	; 0x80025d <Giro_PidCtl+0x1>
     772:	40 83       	st	Z, r20
     774:	51 83       	std	Z+1, r21	; 0x01
     776:	62 83       	std	Z+2, r22	; 0x02
     778:	73 83       	std	Z+3, r23	; 0x03
        Giro_Pid->SetTunings(Giro_PidCtl->Kp,Giro_PidCtl->Ki,Giro_PidCtl->Kd);
     77a:	c0 84       	ldd	r12, Z+8	; 0x08
     77c:	d1 84       	ldd	r13, Z+9	; 0x09
     77e:	e2 84       	ldd	r14, Z+10	; 0x0a
     780:	f3 84       	ldd	r15, Z+11	; 0x0b
     782:	04 81       	ldd	r16, Z+4	; 0x04
     784:	15 81       	ldd	r17, Z+5	; 0x05
     786:	26 81       	ldd	r18, Z+6	; 0x06
     788:	37 81       	ldd	r19, Z+7	; 0x07
     78a:	27 c0       	rjmp	.+78     	; 0x7da <_Z16Serial_ParseDatav+0x1b4>
        break;
    case CUTE_PID3_KI:
        Giro_PidCtl->Ki=dval;
     78c:	e0 91 5c 02 	lds	r30, 0x025C	; 0x80025c <Giro_PidCtl>
     790:	f0 91 5d 02 	lds	r31, 0x025D	; 0x80025d <Giro_PidCtl+0x1>
     794:	44 83       	std	Z+4, r20	; 0x04
     796:	55 83       	std	Z+5, r21	; 0x05
     798:	66 83       	std	Z+6, r22	; 0x06
     79a:	77 83       	std	Z+7, r23	; 0x07
        Giro_Pid->SetTunings(Giro_PidCtl->Kp,Giro_PidCtl->Ki,Giro_PidCtl->Kd);
     79c:	c0 84       	ldd	r12, Z+8	; 0x08
     79e:	d1 84       	ldd	r13, Z+9	; 0x09
     7a0:	e2 84       	ldd	r14, Z+10	; 0x0a
     7a2:	f3 84       	ldd	r15, Z+11	; 0x0b
     7a4:	80 80       	ld	r8, Z
     7a6:	91 80       	ldd	r9, Z+1	; 0x01
     7a8:	a2 80       	ldd	r10, Z+2	; 0x02
     7aa:	b3 80       	ldd	r11, Z+3	; 0x03
     7ac:	8a 01       	movw	r16, r20
     7ae:	9b 01       	movw	r18, r22
     7b0:	12 c0       	rjmp	.+36     	; 0x7d6 <_Z16Serial_ParseDatav+0x1b0>
        break;
    case CUTE_PID3_KD:
        Giro_PidCtl->Kd=dval;
     7b2:	e0 91 5c 02 	lds	r30, 0x025C	; 0x80025c <Giro_PidCtl>
     7b6:	f0 91 5d 02 	lds	r31, 0x025D	; 0x80025d <Giro_PidCtl+0x1>
     7ba:	40 87       	std	Z+8, r20	; 0x08
     7bc:	51 87       	std	Z+9, r21	; 0x09
     7be:	62 87       	std	Z+10, r22	; 0x0a
     7c0:	73 87       	std	Z+11, r23	; 0x0b
        Giro_Pid->SetTunings(Giro_PidCtl->Kp,Giro_PidCtl->Ki,Giro_PidCtl->Kd);
     7c2:	04 81       	ldd	r16, Z+4	; 0x04
     7c4:	15 81       	ldd	r17, Z+5	; 0x05
     7c6:	26 81       	ldd	r18, Z+6	; 0x06
     7c8:	37 81       	ldd	r19, Z+7	; 0x07
     7ca:	80 80       	ld	r8, Z
     7cc:	91 80       	ldd	r9, Z+1	; 0x01
     7ce:	a2 80       	ldd	r10, Z+2	; 0x02
     7d0:	b3 80       	ldd	r11, Z+3	; 0x03
     7d2:	6a 01       	movw	r12, r20
     7d4:	7b 01       	movw	r14, r22
     7d6:	b5 01       	movw	r22, r10
     7d8:	a4 01       	movw	r20, r8
     7da:	80 91 56 02 	lds	r24, 0x0256	; 0x800256 <Giro_Pid>
     7de:	90 91 57 02 	lds	r25, 0x0257	; 0x800257 <Giro_Pid+0x1>
     7e2:	70 cf       	rjmp	.-288    	; 0x6c4 <_Z16Serial_ParseDatav+0x9e>
        break;
    case CUTE_PID1_SETP:
        Mot0_PidCtl->Setpoint=dval;
     7e4:	e0 91 60 02 	lds	r30, 0x0260	; 0x800260 <Mot0_PidCtl>
     7e8:	f0 91 61 02 	lds	r31, 0x0261	; 0x800261 <Mot0_PidCtl+0x1>
     7ec:	04 c0       	rjmp	.+8      	; 0x7f6 <_Z16Serial_ParseDatav+0x1d0>
        break;
    case CUTE_PID2_SETP:
        Mot1_PidCtl->Setpoint=dval;
     7ee:	e0 91 5e 02 	lds	r30, 0x025E	; 0x80025e <Mot1_PidCtl>
     7f2:	f0 91 5f 02 	lds	r31, 0x025F	; 0x80025f <Mot1_PidCtl+0x1>
     7f6:	44 87       	std	Z+12, r20	; 0x0c
     7f8:	55 87       	std	Z+13, r21	; 0x0d
     7fa:	66 87       	std	Z+14, r22	; 0x0e
     7fc:	77 87       	std	Z+15, r23	; 0x0f
        break;
     7fe:	27 c0       	rjmp	.+78     	; 0x84e <_Z16Serial_ParseDatav+0x228>
    case CUTE_PID3_SETP:
        Giro_PidCtl->Setpoint=dval;
     800:	e0 91 5c 02 	lds	r30, 0x025C	; 0x80025c <Giro_PidCtl>
     804:	f0 91 5d 02 	lds	r31, 0x025D	; 0x80025d <Giro_PidCtl+0x1>
     808:	f6 cf       	rjmp	.-20     	; 0x7f6 <_Z16Serial_ParseDatav+0x1d0>
        break;
    case CUTE_P1_PRNT_ON:
        PrintP1CfgValues=true;
     80a:	81 e0       	ldi	r24, 0x01	; 1
     80c:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <PrintP1CfgValues>
        break;
     810:	1e c0       	rjmp	.+60     	; 0x84e <_Z16Serial_ParseDatav+0x228>
    case CUTE_P1_PRNT_OFF:
        PrintP1CfgValues=false;
     812:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <PrintP1CfgValues>
        break;
     816:	1b c0       	rjmp	.+54     	; 0x84e <_Z16Serial_ParseDatav+0x228>
    case CUTE_P2_PRNT_ON:
        PrintP2CfgValues=true;
     818:	81 e0       	ldi	r24, 0x01	; 1
     81a:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <PrintP2CfgValues>
        break;
     81e:	17 c0       	rjmp	.+46     	; 0x84e <_Z16Serial_ParseDatav+0x228>
    case CUTE_P2_PRNT_OFF:
        PrintP2CfgValues=false;
     820:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <PrintP2CfgValues>
        break;
     824:	14 c0       	rjmp	.+40     	; 0x84e <_Z16Serial_ParseDatav+0x228>
    case CUTE_P3_PRNT_ON:
        PrintP3CfgValues=true;
     826:	81 e0       	ldi	r24, 0x01	; 1
     828:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <PrintP3CfgValues>
        break;
     82c:	10 c0       	rjmp	.+32     	; 0x84e <_Z16Serial_ParseDatav+0x228>
    case CUTE_P3_PRNT_OFF:
        PrintP3CfgValues=false;
     82e:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <PrintP3CfgValues>
        break;
     832:	0d c0       	rjmp	.+26     	; 0x84e <_Z16Serial_ParseDatav+0x228>
    case CUTE_GIRO_TO_MOT_ON:
        ConnectGiroToMot=true;
     834:	81 e0       	ldi	r24, 0x01	; 1
     836:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <ConnectGiroToMot>
        break;
     83a:	09 c0       	rjmp	.+18     	; 0x84e <_Z16Serial_ParseDatav+0x228>
    case CUTE_GIRO_TO_MOT_OFF:
        ConnectGiroToMot=false;
     83c:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <ConnectGiroToMot>
        break;
     840:	06 c0       	rjmp	.+12     	; 0x84e <_Z16Serial_ParseDatav+0x228>
    case CUTE_GET_ALL_PID_CFGS:
        PrintPidCfgValues=true;
     842:	81 e0       	ldi	r24, 0x01	; 1
     844:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <PrintPidCfgValues>
        break;
     848:	02 c0       	rjmp	.+4      	; 0x84e <_Z16Serial_ParseDatav+0x228>
    case CUTE_SAVE_TO_EEPROM:
        putPidConfigToEEPROM();
     84a:	0e 94 9a 01 	call	0x334	; 0x334 <_Z20putPidConfigToEEPROMv>
    default:
        break;

    }

    Ser_NewData=false;
     84e:	10 92 15 02 	sts	0x0215, r1	; 0x800215 <Ser_NewData>
}
     852:	1f 91       	pop	r17
     854:	0f 91       	pop	r16
     856:	ff 90       	pop	r15
     858:	ef 90       	pop	r14
     85a:	df 90       	pop	r13
     85c:	cf 90       	pop	r12
     85e:	bf 90       	pop	r11
     860:	af 90       	pop	r10
     862:	9f 90       	pop	r9
     864:	8f 90       	pop	r8
     866:	08 95       	ret

00000868 <_Z19UpdateEncoderValuesv>:


void UpdateEncoderValues() {
     868:	cf 93       	push	r28
     86a:	df 93       	push	r29
    Mot0_PidCtl->Input=Mot0_Enc;
     86c:	c0 91 60 02 	lds	r28, 0x0260	; 0x800260 <Mot0_PidCtl>
     870:	d0 91 61 02 	lds	r29, 0x0261	; 0x800261 <Mot0_PidCtl+0x1>
     874:	60 91 81 03 	lds	r22, 0x0381	; 0x800381 <Mot0_Enc>
     878:	70 91 82 03 	lds	r23, 0x0382	; 0x800382 <Mot0_Enc+0x1>
     87c:	80 91 83 03 	lds	r24, 0x0383	; 0x800383 <Mot0_Enc+0x2>
     880:	90 91 84 03 	lds	r25, 0x0384	; 0x800384 <Mot0_Enc+0x3>
     884:	0e 94 67 18 	call	0x30ce	; 0x30ce <__floatsisf>
     888:	68 8b       	std	Y+16, r22	; 0x10
     88a:	79 8b       	std	Y+17, r23	; 0x11
     88c:	8a 8b       	std	Y+18, r24	; 0x12
     88e:	9b 8b       	std	Y+19, r25	; 0x13
    Mot1_PidCtl->Input=Mot1_Enc;
     890:	c0 91 5e 02 	lds	r28, 0x025E	; 0x80025e <Mot1_PidCtl>
     894:	d0 91 5f 02 	lds	r29, 0x025F	; 0x80025f <Mot1_PidCtl+0x1>
     898:	60 91 7d 03 	lds	r22, 0x037D	; 0x80037d <Mot1_Enc>
     89c:	70 91 7e 03 	lds	r23, 0x037E	; 0x80037e <Mot1_Enc+0x1>
     8a0:	80 91 7f 03 	lds	r24, 0x037F	; 0x80037f <Mot1_Enc+0x2>
     8a4:	90 91 80 03 	lds	r25, 0x0380	; 0x800380 <Mot1_Enc+0x3>
     8a8:	0e 94 67 18 	call	0x30ce	; 0x30ce <__floatsisf>
     8ac:	68 8b       	std	Y+16, r22	; 0x10
     8ae:	79 8b       	std	Y+17, r23	; 0x11
     8b0:	8a 8b       	std	Y+18, r24	; 0x12
     8b2:	9b 8b       	std	Y+19, r25	; 0x13

    Mot0_Enc=0;
     8b4:	10 92 81 03 	sts	0x0381, r1	; 0x800381 <Mot0_Enc>
     8b8:	10 92 82 03 	sts	0x0382, r1	; 0x800382 <Mot0_Enc+0x1>
     8bc:	10 92 83 03 	sts	0x0383, r1	; 0x800383 <Mot0_Enc+0x2>
     8c0:	10 92 84 03 	sts	0x0384, r1	; 0x800384 <Mot0_Enc+0x3>
    Mot1_Enc=0;
     8c4:	10 92 7d 03 	sts	0x037D, r1	; 0x80037d <Mot1_Enc>
     8c8:	10 92 7e 03 	sts	0x037E, r1	; 0x80037e <Mot1_Enc+0x1>
     8cc:	10 92 7f 03 	sts	0x037F, r1	; 0x80037f <Mot1_Enc+0x2>
     8d0:	10 92 80 03 	sts	0x0380, r1	; 0x800380 <Mot1_Enc+0x3>
}
     8d4:	df 91       	pop	r29
     8d6:	cf 91       	pop	r28
     8d8:	08 95       	ret

000008da <_Z13Giro_ReadDatav>:

unsigned long Giro_currTime;
unsigned long Giro_loopTime;
unsigned long Giro_prevTime;

void Giro_ReadData() {
     8da:	8f 92       	push	r8
     8dc:	9f 92       	push	r9
     8de:	af 92       	push	r10
     8e0:	bf 92       	push	r11
     8e2:	cf 92       	push	r12
     8e4:	df 92       	push	r13
     8e6:	ef 92       	push	r14
     8e8:	ff 92       	push	r15
     8ea:	0f 93       	push	r16
     8ec:	1f 93       	push	r17
     8ee:	cf 93       	push	r28
     8f0:	df 93       	push	r29

    Giro_currTime = millis();
     8f2:	0e 94 84 1d 	call	0x3b08	; 0x3b08 <millis>
     8f6:	60 93 0b 02 	sts	0x020B, r22	; 0x80020b <Giro_currTime>
     8fa:	70 93 0c 02 	sts	0x020C, r23	; 0x80020c <Giro_currTime+0x1>
     8fe:	80 93 0d 02 	sts	0x020D, r24	; 0x80020d <Giro_currTime+0x2>
     902:	90 93 0e 02 	sts	0x020E, r25	; 0x80020e <Giro_currTime+0x3>
    Giro_loopTime = Giro_currTime - Giro_prevTime;
     906:	c0 90 03 02 	lds	r12, 0x0203	; 0x800203 <Giro_prevTime>
     90a:	d0 90 04 02 	lds	r13, 0x0204	; 0x800204 <Giro_prevTime+0x1>
     90e:	e0 90 05 02 	lds	r14, 0x0205	; 0x800205 <Giro_prevTime+0x2>
     912:	f0 90 06 02 	lds	r15, 0x0206	; 0x800206 <Giro_prevTime+0x3>
     916:	9b 01       	movw	r18, r22
     918:	ac 01       	movw	r20, r24
     91a:	2c 19       	sub	r18, r12
     91c:	3d 09       	sbc	r19, r13
     91e:	4e 09       	sbc	r20, r14
     920:	5f 09       	sbc	r21, r15
     922:	20 93 07 02 	sts	0x0207, r18	; 0x800207 <Giro_loopTime>
     926:	30 93 08 02 	sts	0x0208, r19	; 0x800208 <Giro_loopTime+0x1>
     92a:	40 93 09 02 	sts	0x0209, r20	; 0x800209 <Giro_loopTime+0x2>
     92e:	50 93 0a 02 	sts	0x020A, r21	; 0x80020a <Giro_loopTime+0x3>
    Giro_prevTime = Giro_currTime;
     932:	60 93 03 02 	sts	0x0203, r22	; 0x800203 <Giro_prevTime>
     936:	70 93 04 02 	sts	0x0204, r23	; 0x800204 <Giro_prevTime+0x1>
     93a:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <Giro_prevTime+0x2>
     93e:	90 93 06 02 	sts	0x0206, r25	; 0x800206 <Giro_prevTime+0x3>

    // read acceleration and gyroscope values
    Giro_AccY = mpu.getAccelerationY();
     942:	83 e8       	ldi	r24, 0x83	; 131
     944:	92 e0       	ldi	r25, 0x02	; 2
     946:	0e 94 9b 10 	call	0x2136	; 0x2136 <_ZN7MPU605016getAccelerationYEv>
     94a:	90 93 82 02 	sts	0x0282, r25	; 0x800282 <Giro_AccY+0x1>
     94e:	80 93 81 02 	sts	0x0281, r24	; 0x800281 <Giro_AccY>
    Giro_AccZ = mpu.getAccelerationZ();
     952:	83 e8       	ldi	r24, 0x83	; 131
     954:	92 e0       	ldi	r25, 0x02	; 2
     956:	0e 94 b6 10 	call	0x216c	; 0x216c <_ZN7MPU605016getAccelerationZEv>
     95a:	90 93 80 02 	sts	0x0280, r25	; 0x800280 <Giro_AccZ+0x1>
     95e:	80 93 7f 02 	sts	0x027F, r24	; 0x80027f <Giro_AccZ>
    Giro_RotX = mpu.getRotationX();
     962:	83 e8       	ldi	r24, 0x83	; 131
     964:	92 e0       	ldi	r25, 0x02	; 2
     966:	0e 94 d1 10 	call	0x21a2	; 0x21a2 <_ZN7MPU605012getRotationXEv>
     96a:	ec 01       	movw	r28, r24
     96c:	90 93 7e 02 	sts	0x027E, r25	; 0x80027e <Giro_RotX+0x1>
     970:	80 93 7d 02 	sts	0x027D, r24	; 0x80027d <Giro_RotX>


    Giro_AccAngle = atan2(Giro_AccY, Giro_AccZ)*RAD_TO_DEG;
     974:	60 91 7f 02 	lds	r22, 0x027F	; 0x80027f <Giro_AccZ>
     978:	70 91 80 02 	lds	r23, 0x0280	; 0x800280 <Giro_AccZ+0x1>
     97c:	07 2e       	mov	r0, r23
     97e:	00 0c       	add	r0, r0
     980:	88 0b       	sbc	r24, r24
     982:	99 0b       	sbc	r25, r25
     984:	0e 94 67 18 	call	0x30ce	; 0x30ce <__floatsisf>
     988:	6b 01       	movw	r12, r22
     98a:	7c 01       	movw	r14, r24
     98c:	60 91 81 02 	lds	r22, 0x0281	; 0x800281 <Giro_AccY>
     990:	70 91 82 02 	lds	r23, 0x0282	; 0x800282 <Giro_AccY+0x1>
     994:	07 2e       	mov	r0, r23
     996:	00 0c       	add	r0, r0
     998:	88 0b       	sbc	r24, r24
     99a:	99 0b       	sbc	r25, r25
     99c:	0e 94 67 18 	call	0x30ce	; 0x30ce <__floatsisf>
     9a0:	a7 01       	movw	r20, r14
     9a2:	96 01       	movw	r18, r12
     9a4:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <atan2>
     9a8:	21 ee       	ldi	r18, 0xE1	; 225
     9aa:	3e e2       	ldi	r19, 0x2E	; 46
     9ac:	45 e6       	ldi	r20, 0x65	; 101
     9ae:	52 e4       	ldi	r21, 0x42	; 66
     9b0:	0e 94 4b 19 	call	0x3296	; 0x3296 <__mulsf3>
     9b4:	60 93 77 02 	sts	0x0277, r22	; 0x800277 <Giro_AccAngle>
     9b8:	70 93 78 02 	sts	0x0278, r23	; 0x800278 <Giro_AccAngle+0x1>
     9bc:	80 93 79 02 	sts	0x0279, r24	; 0x800279 <Giro_AccAngle+0x2>
     9c0:	90 93 7a 02 	sts	0x027A, r25	; 0x80027a <Giro_AccAngle+0x3>

    Giro_Rate = map(Giro_RotX, -32768, 32767, -250, 250);
     9c4:	be 01       	movw	r22, r28
     9c6:	dd 0f       	add	r29, r29
     9c8:	88 0b       	sbc	r24, r24
     9ca:	99 0b       	sbc	r25, r25
     9cc:	1f 92       	push	r1
     9ce:	1f 92       	push	r1
     9d0:	1f 92       	push	r1
     9d2:	2a ef       	ldi	r18, 0xFA	; 250
     9d4:	2f 93       	push	r18
     9d6:	26 e0       	ldi	r18, 0x06	; 6
     9d8:	a2 2e       	mov	r10, r18
     9da:	bb 24       	eor	r11, r11
     9dc:	ba 94       	dec	r11
     9de:	cb 2c       	mov	r12, r11
     9e0:	db 2c       	mov	r13, r11
     9e2:	ee 24       	eor	r14, r14
     9e4:	ea 94       	dec	r14
     9e6:	1f e7       	ldi	r17, 0x7F	; 127
     9e8:	f1 2e       	mov	r15, r17
     9ea:	00 e0       	ldi	r16, 0x00	; 0
     9ec:	10 e0       	ldi	r17, 0x00	; 0
     9ee:	20 e0       	ldi	r18, 0x00	; 0
     9f0:	30 e8       	ldi	r19, 0x80	; 128
     9f2:	4f ef       	ldi	r20, 0xFF	; 255
     9f4:	5f ef       	ldi	r21, 0xFF	; 255
     9f6:	0e 94 29 1e 	call	0x3c52	; 0x3c52 <_Z3maplllll>
     9fa:	70 93 7c 02 	sts	0x027C, r23	; 0x80027c <Giro_Rate+0x1>
     9fe:	60 93 7b 02 	sts	0x027B, r22	; 0x80027b <Giro_Rate>
    Giro_Angle = (float)Giro_Rate*Giro_loopTime/1000;
     a02:	c0 91 7b 02 	lds	r28, 0x027B	; 0x80027b <Giro_Rate>
     a06:	d0 91 7c 02 	lds	r29, 0x027C	; 0x80027c <Giro_Rate+0x1>
     a0a:	60 91 07 02 	lds	r22, 0x0207	; 0x800207 <Giro_loopTime>
     a0e:	70 91 08 02 	lds	r23, 0x0208	; 0x800208 <Giro_loopTime+0x1>
     a12:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <Giro_loopTime+0x2>
     a16:	90 91 0a 02 	lds	r25, 0x020A	; 0x80020a <Giro_loopTime+0x3>
     a1a:	0e 94 65 18 	call	0x30ca	; 0x30ca <__floatunsisf>
     a1e:	6b 01       	movw	r12, r22
     a20:	7c 01       	movw	r14, r24
     a22:	be 01       	movw	r22, r28
     a24:	dd 0f       	add	r29, r29
     a26:	88 0b       	sbc	r24, r24
     a28:	99 0b       	sbc	r25, r25
     a2a:	0e 94 67 18 	call	0x30ce	; 0x30ce <__floatsisf>
     a2e:	9b 01       	movw	r18, r22
     a30:	ac 01       	movw	r20, r24
     a32:	c7 01       	movw	r24, r14
     a34:	b6 01       	movw	r22, r12
     a36:	0e 94 4b 19 	call	0x3296	; 0x3296 <__mulsf3>
     a3a:	20 e0       	ldi	r18, 0x00	; 0
     a3c:	30 e0       	ldi	r19, 0x00	; 0
     a3e:	4a e7       	ldi	r20, 0x7A	; 122
     a40:	54 e4       	ldi	r21, 0x44	; 68
     a42:	0e 94 bd 17 	call	0x2f7a	; 0x2f7a <__divsf3>
     a46:	60 93 73 02 	sts	0x0273, r22	; 0x800273 <Giro_Angle>
     a4a:	70 93 74 02 	sts	0x0274, r23	; 0x800274 <Giro_Angle+0x1>
     a4e:	80 93 75 02 	sts	0x0275, r24	; 0x800275 <Giro_Angle+0x2>
     a52:	90 93 76 02 	sts	0x0276, r25	; 0x800276 <Giro_Angle+0x3>

    Giro_FilteredAngle = 0.9934*(Giro_PrevAngle + Giro_Angle) + 0.0066*(Giro_AccAngle);
     a56:	60 91 6b 02 	lds	r22, 0x026B	; 0x80026b <Giro_PrevAngle>
     a5a:	70 91 6c 02 	lds	r23, 0x026C	; 0x80026c <Giro_PrevAngle+0x1>
     a5e:	80 91 6d 02 	lds	r24, 0x026D	; 0x80026d <Giro_PrevAngle+0x2>
     a62:	90 91 6e 02 	lds	r25, 0x026E	; 0x80026e <Giro_PrevAngle+0x3>
     a66:	20 91 73 02 	lds	r18, 0x0273	; 0x800273 <Giro_Angle>
     a6a:	30 91 74 02 	lds	r19, 0x0274	; 0x800274 <Giro_Angle+0x1>
     a6e:	40 91 75 02 	lds	r20, 0x0275	; 0x800275 <Giro_Angle+0x2>
     a72:	50 91 76 02 	lds	r21, 0x0276	; 0x800276 <Giro_Angle+0x3>
     a76:	80 90 77 02 	lds	r8, 0x0277	; 0x800277 <Giro_AccAngle>
     a7a:	90 90 78 02 	lds	r9, 0x0278	; 0x800278 <Giro_AccAngle+0x1>
     a7e:	a0 90 79 02 	lds	r10, 0x0279	; 0x800279 <Giro_AccAngle+0x2>
     a82:	b0 90 7a 02 	lds	r11, 0x027A	; 0x80027a <Giro_AccAngle+0x3>
     a86:	0e 94 da 16 	call	0x2db4	; 0x2db4 <__addsf3>
     a8a:	26 e7       	ldi	r18, 0x76	; 118
     a8c:	3f e4       	ldi	r19, 0x4F	; 79
     a8e:	4e e7       	ldi	r20, 0x7E	; 126
     a90:	5f e3       	ldi	r21, 0x3F	; 63
     a92:	0e 94 4b 19 	call	0x3296	; 0x3296 <__mulsf3>
     a96:	6b 01       	movw	r12, r22
     a98:	7c 01       	movw	r14, r24
     a9a:	20 ed       	ldi	r18, 0xD0	; 208
     a9c:	34 e4       	ldi	r19, 0x44	; 68
     a9e:	48 ed       	ldi	r20, 0xD8	; 216
     aa0:	5b e3       	ldi	r21, 0x3B	; 59
     aa2:	c5 01       	movw	r24, r10
     aa4:	b4 01       	movw	r22, r8
     aa6:	0e 94 4b 19 	call	0x3296	; 0x3296 <__mulsf3>
     aaa:	9b 01       	movw	r18, r22
     aac:	ac 01       	movw	r20, r24
     aae:	c7 01       	movw	r24, r14
     ab0:	b6 01       	movw	r22, r12
     ab2:	0e 94 da 16 	call	0x2db4	; 0x2db4 <__addsf3>
     ab6:	60 93 6f 02 	sts	0x026F, r22	; 0x80026f <Giro_FilteredAngle>
     aba:	70 93 70 02 	sts	0x0270, r23	; 0x800270 <Giro_FilteredAngle+0x1>
     abe:	80 93 71 02 	sts	0x0271, r24	; 0x800271 <Giro_FilteredAngle+0x2>
     ac2:	90 93 72 02 	sts	0x0272, r25	; 0x800272 <Giro_FilteredAngle+0x3>

    Giro_PrevAngle = Giro_FilteredAngle;
     ac6:	80 91 6f 02 	lds	r24, 0x026F	; 0x80026f <Giro_FilteredAngle>
     aca:	90 91 70 02 	lds	r25, 0x0270	; 0x800270 <Giro_FilteredAngle+0x1>
     ace:	a0 91 71 02 	lds	r26, 0x0271	; 0x800271 <Giro_FilteredAngle+0x2>
     ad2:	b0 91 72 02 	lds	r27, 0x0272	; 0x800272 <Giro_FilteredAngle+0x3>
     ad6:	80 93 6b 02 	sts	0x026B, r24	; 0x80026b <Giro_PrevAngle>
     ada:	90 93 6c 02 	sts	0x026C, r25	; 0x80026c <Giro_PrevAngle+0x1>
     ade:	a0 93 6d 02 	sts	0x026D, r26	; 0x80026d <Giro_PrevAngle+0x2>
     ae2:	b0 93 6e 02 	sts	0x026E, r27	; 0x80026e <Giro_PrevAngle+0x3>

    Giro_PidCtl->Input=-Giro_FilteredAngle;
     ae6:	80 91 6f 02 	lds	r24, 0x026F	; 0x80026f <Giro_FilteredAngle>
     aea:	90 91 70 02 	lds	r25, 0x0270	; 0x800270 <Giro_FilteredAngle+0x1>
     aee:	a0 91 71 02 	lds	r26, 0x0271	; 0x800271 <Giro_FilteredAngle+0x2>
     af2:	b0 91 72 02 	lds	r27, 0x0272	; 0x800272 <Giro_FilteredAngle+0x3>
     af6:	e0 91 5c 02 	lds	r30, 0x025C	; 0x80025c <Giro_PidCtl>
     afa:	f0 91 5d 02 	lds	r31, 0x025D	; 0x80025d <Giro_PidCtl+0x1>
     afe:	b0 58       	subi	r27, 0x80	; 128
     b00:	80 8b       	std	Z+16, r24	; 0x10
     b02:	91 8b       	std	Z+17, r25	; 0x11
     b04:	a2 8b       	std	Z+18, r26	; 0x12
     b06:	b3 8b       	std	Z+19, r27	; 0x13

}
     b08:	0f 90       	pop	r0
     b0a:	0f 90       	pop	r0
     b0c:	0f 90       	pop	r0
     b0e:	0f 90       	pop	r0
     b10:	df 91       	pop	r29
     b12:	cf 91       	pop	r28
     b14:	1f 91       	pop	r17
     b16:	0f 91       	pop	r16
     b18:	ff 90       	pop	r15
     b1a:	ef 90       	pop	r14
     b1c:	df 90       	pop	r13
     b1e:	cf 90       	pop	r12
     b20:	bf 90       	pop	r11
     b22:	af 90       	pop	r10
     b24:	9f 90       	pop	r9
     b26:	8f 90       	pop	r8
     b28:	08 95       	ret

00000b2a <_GLOBAL__sub_I__Z19WritePidCfgToEEPROMjP11PIDConfig_e>:
#include "PID_v1.h"
#include "Configs.h"
#include "Utils.h"


NewPing sonar(TRIGGER_PIN, ECHO_PIN, MAX_DISTANCE);
     b2a:	2b e4       	ldi	r18, 0x4B	; 75
     b2c:	30 e0       	ldi	r19, 0x00	; 0
     b2e:	48 e0       	ldi	r20, 0x08	; 8
     b30:	69 e0       	ldi	r22, 0x09	; 9
     b32:	82 e9       	ldi	r24, 0x92	; 146
     b34:	92 e0       	ldi	r25, 0x02	; 2
     b36:	0e 94 48 11 	call	0x2290	; 0x2290 <_ZN7NewPingC1Ehhj>
MPU6050 mpu;
     b3a:	83 e8       	ldi	r24, 0x83	; 131
     b3c:	92 e0       	ldi	r25, 0x02	; 2
     b3e:	0c 94 7e 10 	jmp	0x20fc	; 0x20fc <_ZN7MPU6050C1Ev>

00000b42 <_Z9printDatav>:
void printData() {
    static uint8_t i=ARD_START_PRINT_IDX;
    static uint8_t old_i=ARD_START_PRINT_IDX;


    if (Serial.availableForWrite()<6) {
     b42:	85 e8       	ldi	r24, 0x85	; 133
     b44:	93 e0       	ldi	r25, 0x03	; 3
     b46:	0e 94 ea 19 	call	0x33d4	; 0x33d4 <_ZN14HardwareSerial17availableForWriteEv>
     b4a:	06 97       	sbiw	r24, 0x06	; 6
     b4c:	0c f4       	brge	.+2      	; 0xb50 <_Z9printDatav+0xe>
     b4e:	9d c1       	rjmp	.+826    	; 0xe8a <_Z9printDatav+0x348>
        return;
    }

    old_i=i;
     b50:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <_ZZ9printDatavE1i>
     b54:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <_ZZ9printDatavE5old_i>
    //////////////////////////////////
    if (PrintP1CfgValues==true) {
     b58:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <PrintP1CfgValues>
     b5c:	99 23       	and	r25, r25
     b5e:	09 f4       	brne	.+2      	; 0xb62 <_Z9printDatav+0x20>
     b60:	44 c0       	rjmp	.+136    	; 0xbea <_Z9printDatav+0xa8>
        switch(i) {
     b62:	82 30       	cpi	r24, 0x02	; 2
     b64:	a9 f0       	breq	.+42     	; 0xb90 <_Z9printDatav+0x4e>
     b66:	83 30       	cpi	r24, 0x03	; 3
     b68:	51 f1       	breq	.+84     	; 0xbbe <_Z9printDatav+0x7c>
     b6a:	81 30       	cpi	r24, 0x01	; 1
     b6c:	f1 f5       	brne	.+124    	; 0xbea <_Z9printDatav+0xa8>
        case ARD_PID1_INPUT:
            Serial.write(i++);
     b6e:	82 e0       	ldi	r24, 0x02	; 2
     b70:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <_ZZ9printDatavE1i>
     b74:	61 e0       	ldi	r22, 0x01	; 1
     b76:	85 e8       	ldi	r24, 0x85	; 133
     b78:	93 e0       	ldi	r25, 0x03	; 3
     b7a:	0e 94 28 1a 	call	0x3450	; 0x3450 <_ZN14HardwareSerial5writeEh>
            Serial.println(Mot0_PidCtl->Input);
     b7e:	e0 91 60 02 	lds	r30, 0x0260	; 0x800260 <Mot0_PidCtl>
     b82:	f0 91 61 02 	lds	r31, 0x0261	; 0x800261 <Mot0_PidCtl+0x1>
     b86:	40 89       	ldd	r20, Z+16	; 0x10
     b88:	51 89       	ldd	r21, Z+17	; 0x11
     b8a:	62 89       	ldd	r22, Z+18	; 0x12
     b8c:	73 89       	ldd	r23, Z+19	; 0x13
     b8e:	10 c0       	rjmp	.+32     	; 0xbb0 <_Z9printDatav+0x6e>
            break;
        case ARD_PID1_OUTPUT:
            Serial.write(i++);
     b90:	83 e0       	ldi	r24, 0x03	; 3
     b92:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <_ZZ9printDatavE1i>
     b96:	62 e0       	ldi	r22, 0x02	; 2
     b98:	85 e8       	ldi	r24, 0x85	; 133
     b9a:	93 e0       	ldi	r25, 0x03	; 3
     b9c:	0e 94 28 1a 	call	0x3450	; 0x3450 <_ZN14HardwareSerial5writeEh>
            Serial.println(Mot0_PidCtl->Output);
     ba0:	e0 91 60 02 	lds	r30, 0x0260	; 0x800260 <Mot0_PidCtl>
     ba4:	f0 91 61 02 	lds	r31, 0x0261	; 0x800261 <Mot0_PidCtl+0x1>
     ba8:	44 89       	ldd	r20, Z+20	; 0x14
     baa:	55 89       	ldd	r21, Z+21	; 0x15
     bac:	66 89       	ldd	r22, Z+22	; 0x16
     bae:	77 89       	ldd	r23, Z+23	; 0x17
     bb0:	22 e0       	ldi	r18, 0x02	; 2
     bb2:	30 e0       	ldi	r19, 0x00	; 0
     bb4:	85 e8       	ldi	r24, 0x85	; 133
     bb6:	93 e0       	ldi	r25, 0x03	; 3
     bb8:	0e 94 2c 1d 	call	0x3a58	; 0x3a58 <_ZN5Print7printlnEdi>
     bbc:	16 c0       	rjmp	.+44     	; 0xbea <_Z9printDatav+0xa8>
            break;
        case ARD_PID1_SETPOINT:
            Serial.write(i);
     bbe:	63 e0       	ldi	r22, 0x03	; 3
     bc0:	85 e8       	ldi	r24, 0x85	; 133
     bc2:	93 e0       	ldi	r25, 0x03	; 3
     bc4:	0e 94 28 1a 	call	0x3450	; 0x3450 <_ZN14HardwareSerial5writeEh>
            Serial.println(Mot0_PidCtl->Setpoint);
     bc8:	e0 91 60 02 	lds	r30, 0x0260	; 0x800260 <Mot0_PidCtl>
     bcc:	f0 91 61 02 	lds	r31, 0x0261	; 0x800261 <Mot0_PidCtl+0x1>
     bd0:	44 85       	ldd	r20, Z+12	; 0x0c
     bd2:	55 85       	ldd	r21, Z+13	; 0x0d
     bd4:	66 85       	ldd	r22, Z+14	; 0x0e
     bd6:	77 85       	ldd	r23, Z+15	; 0x0f
     bd8:	22 e0       	ldi	r18, 0x02	; 2
     bda:	30 e0       	ldi	r19, 0x00	; 0
     bdc:	85 e8       	ldi	r24, 0x85	; 133
     bde:	93 e0       	ldi	r25, 0x03	; 3
     be0:	0e 94 2c 1d 	call	0x3a58	; 0x3a58 <_ZN5Print7printlnEdi>
            i=ARD_START_PRINT_IDX;
     be4:	81 e0       	ldi	r24, 0x01	; 1
     be6:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <_ZZ9printDatavE1i>
            break;
        }
    }

    if (PrintP2CfgValues==true) {
     bea:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <PrintP2CfgValues>
     bee:	88 23       	and	r24, r24
     bf0:	09 f4       	brne	.+2      	; 0xbf4 <_Z9printDatav+0xb2>
     bf2:	4a c0       	rjmp	.+148    	; 0xc88 <_Z9printDatav+0x146>
        if (i==ARD_START_PRINT_IDX) {
     bf4:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <_ZZ9printDatavE1i>
     bf8:	81 30       	cpi	r24, 0x01	; 1
     bfa:	11 f4       	brne	.+4      	; 0xc00 <_Z9printDatav+0xbe>
            i=ARD_PID2_INPUT;
     bfc:	84 e0       	ldi	r24, 0x04	; 4
     bfe:	43 c1       	rjmp	.+646    	; 0xe86 <_Z9printDatav+0x344>
            return;
        }

        switch(i) {
     c00:	85 30       	cpi	r24, 0x05	; 5
     c02:	a9 f0       	breq	.+42     	; 0xc2e <_Z9printDatav+0xec>
     c04:	86 30       	cpi	r24, 0x06	; 6
     c06:	51 f1       	breq	.+84     	; 0xc5c <_Z9printDatav+0x11a>
     c08:	84 30       	cpi	r24, 0x04	; 4
     c0a:	f1 f5       	brne	.+124    	; 0xc88 <_Z9printDatav+0x146>
        case ARD_PID2_INPUT:
            Serial.write(i++);
     c0c:	85 e0       	ldi	r24, 0x05	; 5
     c0e:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <_ZZ9printDatavE1i>
     c12:	64 e0       	ldi	r22, 0x04	; 4
     c14:	85 e8       	ldi	r24, 0x85	; 133
     c16:	93 e0       	ldi	r25, 0x03	; 3
     c18:	0e 94 28 1a 	call	0x3450	; 0x3450 <_ZN14HardwareSerial5writeEh>
            Serial.println(Mot1_PidCtl->Input);
     c1c:	e0 91 5e 02 	lds	r30, 0x025E	; 0x80025e <Mot1_PidCtl>
     c20:	f0 91 5f 02 	lds	r31, 0x025F	; 0x80025f <Mot1_PidCtl+0x1>
     c24:	40 89       	ldd	r20, Z+16	; 0x10
     c26:	51 89       	ldd	r21, Z+17	; 0x11
     c28:	62 89       	ldd	r22, Z+18	; 0x12
     c2a:	73 89       	ldd	r23, Z+19	; 0x13
     c2c:	10 c0       	rjmp	.+32     	; 0xc4e <_Z9printDatav+0x10c>
            break;
        case ARD_PID2_OUTPUT:
            Serial.write(i++);
     c2e:	86 e0       	ldi	r24, 0x06	; 6
     c30:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <_ZZ9printDatavE1i>
     c34:	65 e0       	ldi	r22, 0x05	; 5
     c36:	85 e8       	ldi	r24, 0x85	; 133
     c38:	93 e0       	ldi	r25, 0x03	; 3
     c3a:	0e 94 28 1a 	call	0x3450	; 0x3450 <_ZN14HardwareSerial5writeEh>
            Serial.println(Mot1_PidCtl->Output);
     c3e:	e0 91 5e 02 	lds	r30, 0x025E	; 0x80025e <Mot1_PidCtl>
     c42:	f0 91 5f 02 	lds	r31, 0x025F	; 0x80025f <Mot1_PidCtl+0x1>
     c46:	44 89       	ldd	r20, Z+20	; 0x14
     c48:	55 89       	ldd	r21, Z+21	; 0x15
     c4a:	66 89       	ldd	r22, Z+22	; 0x16
     c4c:	77 89       	ldd	r23, Z+23	; 0x17
     c4e:	22 e0       	ldi	r18, 0x02	; 2
     c50:	30 e0       	ldi	r19, 0x00	; 0
     c52:	85 e8       	ldi	r24, 0x85	; 133
     c54:	93 e0       	ldi	r25, 0x03	; 3
     c56:	0e 94 2c 1d 	call	0x3a58	; 0x3a58 <_ZN5Print7printlnEdi>
     c5a:	16 c0       	rjmp	.+44     	; 0xc88 <_Z9printDatav+0x146>
            break;
        case ARD_PID2_SETPOINT:
            Serial.write(i);
     c5c:	66 e0       	ldi	r22, 0x06	; 6
     c5e:	85 e8       	ldi	r24, 0x85	; 133
     c60:	93 e0       	ldi	r25, 0x03	; 3
     c62:	0e 94 28 1a 	call	0x3450	; 0x3450 <_ZN14HardwareSerial5writeEh>
            Serial.println(Mot1_PidCtl->Setpoint);
     c66:	e0 91 5e 02 	lds	r30, 0x025E	; 0x80025e <Mot1_PidCtl>
     c6a:	f0 91 5f 02 	lds	r31, 0x025F	; 0x80025f <Mot1_PidCtl+0x1>
     c6e:	44 85       	ldd	r20, Z+12	; 0x0c
     c70:	55 85       	ldd	r21, Z+13	; 0x0d
     c72:	66 85       	ldd	r22, Z+14	; 0x0e
     c74:	77 85       	ldd	r23, Z+15	; 0x0f
     c76:	22 e0       	ldi	r18, 0x02	; 2
     c78:	30 e0       	ldi	r19, 0x00	; 0
     c7a:	85 e8       	ldi	r24, 0x85	; 133
     c7c:	93 e0       	ldi	r25, 0x03	; 3
     c7e:	0e 94 2c 1d 	call	0x3a58	; 0x3a58 <_ZN5Print7printlnEdi>
            i=ARD_START_PRINT_IDX;
     c82:	81 e0       	ldi	r24, 0x01	; 1
     c84:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <_ZZ9printDatavE1i>
            break;
        }
    }

    if (PrintP3CfgValues==true) {
     c88:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <PrintP3CfgValues>
     c8c:	88 23       	and	r24, r24
     c8e:	09 f4       	brne	.+2      	; 0xc92 <_Z9printDatav+0x150>
     c90:	4a c0       	rjmp	.+148    	; 0xd26 <_Z9printDatav+0x1e4>

        if (i==ARD_START_PRINT_IDX) {
     c92:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <_ZZ9printDatavE1i>
     c96:	81 30       	cpi	r24, 0x01	; 1
     c98:	11 f4       	brne	.+4      	; 0xc9e <_Z9printDatav+0x15c>
            i=ARD_PID3_INPUT;
     c9a:	87 e0       	ldi	r24, 0x07	; 7
     c9c:	f4 c0       	rjmp	.+488    	; 0xe86 <_Z9printDatav+0x344>
            return;
        }

        switch(i) {
     c9e:	88 30       	cpi	r24, 0x08	; 8
     ca0:	a9 f0       	breq	.+42     	; 0xccc <_Z9printDatav+0x18a>
     ca2:	89 30       	cpi	r24, 0x09	; 9
     ca4:	51 f1       	breq	.+84     	; 0xcfa <_Z9printDatav+0x1b8>
     ca6:	87 30       	cpi	r24, 0x07	; 7
     ca8:	f1 f5       	brne	.+124    	; 0xd26 <_Z9printDatav+0x1e4>
        case ARD_PID3_INPUT:
            Serial.write(i++);
     caa:	88 e0       	ldi	r24, 0x08	; 8
     cac:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <_ZZ9printDatavE1i>
     cb0:	67 e0       	ldi	r22, 0x07	; 7
     cb2:	85 e8       	ldi	r24, 0x85	; 133
     cb4:	93 e0       	ldi	r25, 0x03	; 3
     cb6:	0e 94 28 1a 	call	0x3450	; 0x3450 <_ZN14HardwareSerial5writeEh>
            Serial.println(Giro_PidCtl->Input);
     cba:	e0 91 5c 02 	lds	r30, 0x025C	; 0x80025c <Giro_PidCtl>
     cbe:	f0 91 5d 02 	lds	r31, 0x025D	; 0x80025d <Giro_PidCtl+0x1>
     cc2:	40 89       	ldd	r20, Z+16	; 0x10
     cc4:	51 89       	ldd	r21, Z+17	; 0x11
     cc6:	62 89       	ldd	r22, Z+18	; 0x12
     cc8:	73 89       	ldd	r23, Z+19	; 0x13
     cca:	10 c0       	rjmp	.+32     	; 0xcec <_Z9printDatav+0x1aa>
            break;
        case ARD_PID3_OUTPUT:
            Serial.write(i++);
     ccc:	89 e0       	ldi	r24, 0x09	; 9
     cce:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <_ZZ9printDatavE1i>
     cd2:	68 e0       	ldi	r22, 0x08	; 8
     cd4:	85 e8       	ldi	r24, 0x85	; 133
     cd6:	93 e0       	ldi	r25, 0x03	; 3
     cd8:	0e 94 28 1a 	call	0x3450	; 0x3450 <_ZN14HardwareSerial5writeEh>
            Serial.println(Giro_PidCtl->Output);
     cdc:	e0 91 5c 02 	lds	r30, 0x025C	; 0x80025c <Giro_PidCtl>
     ce0:	f0 91 5d 02 	lds	r31, 0x025D	; 0x80025d <Giro_PidCtl+0x1>
     ce4:	44 89       	ldd	r20, Z+20	; 0x14
     ce6:	55 89       	ldd	r21, Z+21	; 0x15
     ce8:	66 89       	ldd	r22, Z+22	; 0x16
     cea:	77 89       	ldd	r23, Z+23	; 0x17
     cec:	22 e0       	ldi	r18, 0x02	; 2
     cee:	30 e0       	ldi	r19, 0x00	; 0
     cf0:	85 e8       	ldi	r24, 0x85	; 133
     cf2:	93 e0       	ldi	r25, 0x03	; 3
     cf4:	0e 94 2c 1d 	call	0x3a58	; 0x3a58 <_ZN5Print7printlnEdi>
     cf8:	16 c0       	rjmp	.+44     	; 0xd26 <_Z9printDatav+0x1e4>
            break;
        case ARD_PID3_SETPOINT:
            Serial.write(i);
     cfa:	69 e0       	ldi	r22, 0x09	; 9
     cfc:	85 e8       	ldi	r24, 0x85	; 133
     cfe:	93 e0       	ldi	r25, 0x03	; 3
     d00:	0e 94 28 1a 	call	0x3450	; 0x3450 <_ZN14HardwareSerial5writeEh>
            Serial.println(Giro_PidCtl->Setpoint);
     d04:	e0 91 5c 02 	lds	r30, 0x025C	; 0x80025c <Giro_PidCtl>
     d08:	f0 91 5d 02 	lds	r31, 0x025D	; 0x80025d <Giro_PidCtl+0x1>
     d0c:	44 85       	ldd	r20, Z+12	; 0x0c
     d0e:	55 85       	ldd	r21, Z+13	; 0x0d
     d10:	66 85       	ldd	r22, Z+14	; 0x0e
     d12:	77 85       	ldd	r23, Z+15	; 0x0f
     d14:	22 e0       	ldi	r18, 0x02	; 2
     d16:	30 e0       	ldi	r19, 0x00	; 0
     d18:	85 e8       	ldi	r24, 0x85	; 133
     d1a:	93 e0       	ldi	r25, 0x03	; 3
     d1c:	0e 94 2c 1d 	call	0x3a58	; 0x3a58 <_ZN5Print7printlnEdi>
            i=ARD_START_PRINT_IDX; //go to pid cfg
     d20:	81 e0       	ldi	r24, 0x01	; 1
     d22:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <_ZZ9printDatavE1i>
            break;
        }
    }

    if (PrintPidCfgValues==true) {
     d26:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <PrintPidCfgValues>
     d2a:	88 23       	and	r24, r24
     d2c:	09 f4       	brne	.+2      	; 0xd30 <_Z9printDatav+0x1ee>
     d2e:	a4 c0       	rjmp	.+328    	; 0xe78 <_Z9printDatav+0x336>
        if (i==ARD_START_PRINT_IDX) {
     d30:	e0 91 07 01 	lds	r30, 0x0107	; 0x800107 <_ZZ9printDatavE1i>
     d34:	e1 30       	cpi	r30, 0x01	; 1
     d36:	11 f4       	brne	.+4      	; 0xd3c <_Z9printDatav+0x1fa>
            i=ARD_PID1_KP;
     d38:	8b e0       	ldi	r24, 0x0B	; 11
     d3a:	a5 c0       	rjmp	.+330    	; 0xe86 <_Z9printDatav+0x344>
            return;
        }

        switch(i) {
     d3c:	8e 2f       	mov	r24, r30
     d3e:	90 e0       	ldi	r25, 0x00	; 0
     d40:	fc 01       	movw	r30, r24
     d42:	3b 97       	sbiw	r30, 0x0b	; 11
     d44:	e9 30       	cpi	r30, 0x09	; 9
     d46:	f1 05       	cpc	r31, r1
     d48:	08 f0       	brcs	.+2      	; 0xd4c <_Z9printDatav+0x20a>
     d4a:	96 c0       	rjmp	.+300    	; 0xe78 <_Z9printDatav+0x336>
     d4c:	ee 5a       	subi	r30, 0xAE	; 174
     d4e:	ff 4f       	sbci	r31, 0xFF	; 255
     d50:	0c 94 c0 1e 	jmp	0x3d80	; 0x3d80 <__tablejump2__>
        case ARD_PID1_KP:
            Serial.write(i++);
     d54:	8c e0       	ldi	r24, 0x0C	; 12
     d56:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <_ZZ9printDatavE1i>
     d5a:	6b e0       	ldi	r22, 0x0B	; 11
     d5c:	85 e8       	ldi	r24, 0x85	; 133
     d5e:	93 e0       	ldi	r25, 0x03	; 3
     d60:	0e 94 28 1a 	call	0x3450	; 0x3450 <_ZN14HardwareSerial5writeEh>
            Serial.println(Mot0_PidCtl->Kp);
     d64:	e0 91 60 02 	lds	r30, 0x0260	; 0x800260 <Mot0_PidCtl>
     d68:	f0 91 61 02 	lds	r31, 0x0261	; 0x800261 <Mot0_PidCtl+0x1>
     d6c:	5b c0       	rjmp	.+182    	; 0xe24 <_Z9printDatav+0x2e2>
            break;
        case ARD_PID1_KI:
            Serial.write(i++);
     d6e:	8d e0       	ldi	r24, 0x0D	; 13
     d70:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <_ZZ9printDatavE1i>
     d74:	6c e0       	ldi	r22, 0x0C	; 12
     d76:	85 e8       	ldi	r24, 0x85	; 133
     d78:	93 e0       	ldi	r25, 0x03	; 3
     d7a:	0e 94 28 1a 	call	0x3450	; 0x3450 <_ZN14HardwareSerial5writeEh>
            Serial.println(Mot0_PidCtl->Ki);
     d7e:	e0 91 60 02 	lds	r30, 0x0260	; 0x800260 <Mot0_PidCtl>
     d82:	f0 91 61 02 	lds	r31, 0x0261	; 0x800261 <Mot0_PidCtl+0x1>
     d86:	44 81       	ldd	r20, Z+4	; 0x04
     d88:	55 81       	ldd	r21, Z+5	; 0x05
     d8a:	66 81       	ldd	r22, Z+6	; 0x06
     d8c:	77 81       	ldd	r23, Z+7	; 0x07
     d8e:	22 e0       	ldi	r18, 0x02	; 2
     d90:	30 e0       	ldi	r19, 0x00	; 0
     d92:	85 e8       	ldi	r24, 0x85	; 133
     d94:	93 e0       	ldi	r25, 0x03	; 3
     d96:	0e 94 2c 1d 	call	0x3a58	; 0x3a58 <_ZN5Print7printlnEdi>
     d9a:	6e c0       	rjmp	.+220    	; 0xe78 <_Z9printDatav+0x336>
            break;
        case ARD_PID1_KD:
            Serial.write(i++);
     d9c:	8e e0       	ldi	r24, 0x0E	; 14
     d9e:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <_ZZ9printDatavE1i>
     da2:	6d e0       	ldi	r22, 0x0D	; 13
     da4:	85 e8       	ldi	r24, 0x85	; 133
     da6:	93 e0       	ldi	r25, 0x03	; 3
     da8:	0e 94 28 1a 	call	0x3450	; 0x3450 <_ZN14HardwareSerial5writeEh>
            Serial.println(Mot0_PidCtl->Kd);
     dac:	e0 91 60 02 	lds	r30, 0x0260	; 0x800260 <Mot0_PidCtl>
     db0:	f0 91 61 02 	lds	r31, 0x0261	; 0x800261 <Mot0_PidCtl+0x1>
     db4:	26 c0       	rjmp	.+76     	; 0xe02 <_Z9printDatav+0x2c0>
            break;
        case ARD_PID2_KP:
            Serial.write(i++);
     db6:	8f e0       	ldi	r24, 0x0F	; 15
     db8:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <_ZZ9printDatavE1i>
     dbc:	6e e0       	ldi	r22, 0x0E	; 14
     dbe:	85 e8       	ldi	r24, 0x85	; 133
     dc0:	93 e0       	ldi	r25, 0x03	; 3
     dc2:	0e 94 28 1a 	call	0x3450	; 0x3450 <_ZN14HardwareSerial5writeEh>
            Serial.println(Mot1_PidCtl->Kp);
     dc6:	e0 91 5e 02 	lds	r30, 0x025E	; 0x80025e <Mot1_PidCtl>
     dca:	f0 91 5f 02 	lds	r31, 0x025F	; 0x80025f <Mot1_PidCtl+0x1>
     dce:	2a c0       	rjmp	.+84     	; 0xe24 <_Z9printDatav+0x2e2>
            break;
        case ARD_PID2_KI:
            Serial.write(i++);
     dd0:	80 e1       	ldi	r24, 0x10	; 16
     dd2:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <_ZZ9printDatavE1i>
     dd6:	6f e0       	ldi	r22, 0x0F	; 15
     dd8:	85 e8       	ldi	r24, 0x85	; 133
     dda:	93 e0       	ldi	r25, 0x03	; 3
     ddc:	0e 94 28 1a 	call	0x3450	; 0x3450 <_ZN14HardwareSerial5writeEh>
            Serial.println(Mot1_PidCtl->Ki);
     de0:	e0 91 5e 02 	lds	r30, 0x025E	; 0x80025e <Mot1_PidCtl>
     de4:	f0 91 5f 02 	lds	r31, 0x025F	; 0x80025f <Mot1_PidCtl+0x1>
     de8:	ce cf       	rjmp	.-100    	; 0xd86 <_Z9printDatav+0x244>
            break;
        case ARD_PID2_KD:
            Serial.write(i++);
     dea:	81 e1       	ldi	r24, 0x11	; 17
     dec:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <_ZZ9printDatavE1i>
     df0:	60 e1       	ldi	r22, 0x10	; 16
     df2:	85 e8       	ldi	r24, 0x85	; 133
     df4:	93 e0       	ldi	r25, 0x03	; 3
     df6:	0e 94 28 1a 	call	0x3450	; 0x3450 <_ZN14HardwareSerial5writeEh>
            Serial.println(Mot1_PidCtl->Kd);
     dfa:	e0 91 5e 02 	lds	r30, 0x025E	; 0x80025e <Mot1_PidCtl>
     dfe:	f0 91 5f 02 	lds	r31, 0x025F	; 0x80025f <Mot1_PidCtl+0x1>
     e02:	40 85       	ldd	r20, Z+8	; 0x08
     e04:	51 85       	ldd	r21, Z+9	; 0x09
     e06:	62 85       	ldd	r22, Z+10	; 0x0a
     e08:	73 85       	ldd	r23, Z+11	; 0x0b
     e0a:	c1 cf       	rjmp	.-126    	; 0xd8e <_Z9printDatav+0x24c>
            break;
        case ARD_PID3_KP:
            Serial.write(i++);
     e0c:	82 e1       	ldi	r24, 0x12	; 18
     e0e:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <_ZZ9printDatavE1i>
     e12:	61 e1       	ldi	r22, 0x11	; 17
     e14:	85 e8       	ldi	r24, 0x85	; 133
     e16:	93 e0       	ldi	r25, 0x03	; 3
     e18:	0e 94 28 1a 	call	0x3450	; 0x3450 <_ZN14HardwareSerial5writeEh>
            Serial.println(Giro_PidCtl->Kp);
     e1c:	e0 91 5c 02 	lds	r30, 0x025C	; 0x80025c <Giro_PidCtl>
     e20:	f0 91 5d 02 	lds	r31, 0x025D	; 0x80025d <Giro_PidCtl+0x1>
     e24:	40 81       	ld	r20, Z
     e26:	51 81       	ldd	r21, Z+1	; 0x01
     e28:	62 81       	ldd	r22, Z+2	; 0x02
     e2a:	73 81       	ldd	r23, Z+3	; 0x03
     e2c:	b0 cf       	rjmp	.-160    	; 0xd8e <_Z9printDatav+0x24c>
            break;
        case ARD_PID3_KI:
            Serial.write(i++);
     e2e:	83 e1       	ldi	r24, 0x13	; 19
     e30:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <_ZZ9printDatavE1i>
     e34:	62 e1       	ldi	r22, 0x12	; 18
     e36:	85 e8       	ldi	r24, 0x85	; 133
     e38:	93 e0       	ldi	r25, 0x03	; 3
     e3a:	0e 94 28 1a 	call	0x3450	; 0x3450 <_ZN14HardwareSerial5writeEh>
            Serial.println(Giro_PidCtl->Ki);
     e3e:	e0 91 5c 02 	lds	r30, 0x025C	; 0x80025c <Giro_PidCtl>
     e42:	f0 91 5d 02 	lds	r31, 0x025D	; 0x80025d <Giro_PidCtl+0x1>
     e46:	9f cf       	rjmp	.-194    	; 0xd86 <_Z9printDatav+0x244>
            break;
        case ARD_PID3_KD:
            Serial.write(i);
     e48:	63 e1       	ldi	r22, 0x13	; 19
     e4a:	85 e8       	ldi	r24, 0x85	; 133
     e4c:	93 e0       	ldi	r25, 0x03	; 3
     e4e:	0e 94 28 1a 	call	0x3450	; 0x3450 <_ZN14HardwareSerial5writeEh>
            Serial.println(Giro_PidCtl->Kd);
     e52:	e0 91 5c 02 	lds	r30, 0x025C	; 0x80025c <Giro_PidCtl>
     e56:	f0 91 5d 02 	lds	r31, 0x025D	; 0x80025d <Giro_PidCtl+0x1>
     e5a:	40 85       	ldd	r20, Z+8	; 0x08
     e5c:	51 85       	ldd	r21, Z+9	; 0x09
     e5e:	62 85       	ldd	r22, Z+10	; 0x0a
     e60:	73 85       	ldd	r23, Z+11	; 0x0b
     e62:	22 e0       	ldi	r18, 0x02	; 2
     e64:	30 e0       	ldi	r19, 0x00	; 0
     e66:	85 e8       	ldi	r24, 0x85	; 133
     e68:	93 e0       	ldi	r25, 0x03	; 3
     e6a:	0e 94 2c 1d 	call	0x3a58	; 0x3a58 <_ZN5Print7printlnEdi>
            i=ARD_START_PRINT_IDX; //go to start
     e6e:	81 e0       	ldi	r24, 0x01	; 1
     e70:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <_ZZ9printDatavE1i>
            PrintPidCfgValues=false; // don't print them again unless requested
     e74:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <PrintPidCfgValues>
            break;
        }
    }
    if (old_i==i) { // if we get stuck (something gets set to false
     e78:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <_ZZ9printDatavE5old_i>
     e7c:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <_ZZ9printDatavE1i>
     e80:	98 13       	cpse	r25, r24
     e82:	03 c0       	rjmp	.+6      	; 0xe8a <_Z9printDatav+0x348>
        i=ARD_START_PRINT_IDX;
     e84:	81 e0       	ldi	r24, 0x01	; 1
     e86:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <_ZZ9printDatavE1i>
     e8a:	08 95       	ret

00000e8c <_Z3LOGPKc>:
    }
} ;

inline void LOG(const char* x) {
     e8c:	cf 93       	push	r28
     e8e:	df 93       	push	r29
     e90:	ec 01       	movw	r28, r24
    virtual void flush(void);
    virtual size_t write(uint8_t);
    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
     e92:	6f ef       	ldi	r22, 0xFF	; 255
     e94:	85 e8       	ldi	r24, 0x85	; 133
     e96:	93 e0       	ldi	r25, 0x03	; 3
     e98:	0e 94 28 1a 	call	0x3450	; 0x3450 <_ZN14HardwareSerial5writeEh>
    Serial.write(255);
    Serial.println(x);
     e9c:	be 01       	movw	r22, r28
     e9e:	85 e8       	ldi	r24, 0x85	; 133
     ea0:	93 e0       	ldi	r25, 0x03	; 3
}
     ea2:	df 91       	pop	r29
     ea4:	cf 91       	pop	r28
    }
} ;

inline void LOG(const char* x) {
    Serial.write(255);
    Serial.println(x);
     ea6:	0c 94 e1 1b 	jmp	0x37c2	; 0x37c2 <_ZN5Print7printlnEPKc>

00000eaa <setup>:
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     eaa:	26 e0       	ldi	r18, 0x06	; 6
     eac:	40 e0       	ldi	r20, 0x00	; 0
     eae:	52 ec       	ldi	r21, 0xC2	; 194
     eb0:	61 e0       	ldi	r22, 0x01	; 1
     eb2:	70 e0       	ldi	r23, 0x00	; 0
     eb4:	85 e8       	ldi	r24, 0x85	; 133
     eb6:	93 e0       	ldi	r25, 0x03	; 3
     eb8:	0e 94 91 1a 	call	0x3522	; 0x3522 <_ZN14HardwareSerial5beginEmh>



void setup() {
    Serial.begin(SERIAL__BAUD_RATE);
    LOG("Setup:Serial Initialized");
     ebc:	80 e1       	ldi	r24, 0x10	; 16
     ebe:	91 e0       	ldi	r25, 0x01	; 1
     ec0:	0e 94 46 07 	call	0xe8c	; 0xe8c <_Z3LOGPKc>

    //CalibSetup();
    //Sensor readings with offsets:	-3	-5	16388	0	2	-1
    //Your offsets:	501	1553	1320	150	-6	19
    //Data is printed as: acelX acelY acelZ giroX giroY giroZ
    mpu.initialize();
     ec4:	83 e8       	ldi	r24, 0x83	; 131
     ec6:	92 e0       	ldi	r25, 0x02	; 2
     ec8:	0e 94 fe 10 	call	0x21fc	; 0x21fc <_ZN7MPU605010initializeEv>
    mpu.setXAccelOffset(501);
     ecc:	65 ef       	ldi	r22, 0xF5	; 245
     ece:	71 e0       	ldi	r23, 0x01	; 1
     ed0:	83 e8       	ldi	r24, 0x83	; 131
     ed2:	92 e0       	ldi	r25, 0x02	; 2
     ed4:	0e 94 12 11 	call	0x2224	; 0x2224 <_ZN7MPU605015setXAccelOffsetEi>
    mpu.setYAccelOffset(1553);
     ed8:	61 e1       	ldi	r22, 0x11	; 17
     eda:	76 e0       	ldi	r23, 0x06	; 6
     edc:	83 e8       	ldi	r24, 0x83	; 131
     ede:	92 e0       	ldi	r25, 0x02	; 2
     ee0:	0e 94 18 11 	call	0x2230	; 0x2230 <_ZN7MPU605015setYAccelOffsetEi>
    mpu.setZAccelOffset(1320);
     ee4:	68 e2       	ldi	r22, 0x28	; 40
     ee6:	75 e0       	ldi	r23, 0x05	; 5
     ee8:	83 e8       	ldi	r24, 0x83	; 131
     eea:	92 e0       	ldi	r25, 0x02	; 2
     eec:	0e 94 1e 11 	call	0x223c	; 0x223c <_ZN7MPU605015setZAccelOffsetEi>
    mpu.setXGyroOffset(150);
     ef0:	66 e9       	ldi	r22, 0x96	; 150
     ef2:	70 e0       	ldi	r23, 0x00	; 0
     ef4:	83 e8       	ldi	r24, 0x83	; 131
     ef6:	92 e0       	ldi	r25, 0x02	; 2
     ef8:	0e 94 24 11 	call	0x2248	; 0x2248 <_ZN7MPU605014setXGyroOffsetEi>
    mpu.setYGyroOffset(-6);
     efc:	6a ef       	ldi	r22, 0xFA	; 250
     efe:	7f ef       	ldi	r23, 0xFF	; 255
     f00:	83 e8       	ldi	r24, 0x83	; 131
     f02:	92 e0       	ldi	r25, 0x02	; 2
     f04:	0e 94 2a 11 	call	0x2254	; 0x2254 <_ZN7MPU605014setYGyroOffsetEi>
    mpu.setZGyroOffset(19);
     f08:	63 e1       	ldi	r22, 0x13	; 19
     f0a:	70 e0       	ldi	r23, 0x00	; 0
     f0c:	83 e8       	ldi	r24, 0x83	; 131
     f0e:	92 e0       	ldi	r25, 0x02	; 2
     f10:	0e 94 30 11 	call	0x2260	; 0x2260 <_ZN7MPU605014setZGyroOffsetEi>
    LOG("Setup: Mpu6050 Initialized");
     f14:	89 e2       	ldi	r24, 0x29	; 41
     f16:	91 e0       	ldi	r25, 0x01	; 1
     f18:	0e 94 46 07 	call	0xe8c	; 0xe8c <_Z3LOGPKc>

    Mot0_Init();
     f1c:	0e 94 1a 16 	call	0x2c34	; 0x2c34 <_Z9Mot0_Initv>
    Mot1_Init();
     f20:	0e 94 2d 16 	call	0x2c5a	; 0x2c5a <_Z9Mot1_Initv>
    Motors_SetSpeed(0,0);
     f24:	60 e0       	ldi	r22, 0x00	; 0
     f26:	70 e0       	ldi	r23, 0x00	; 0
     f28:	80 e0       	ldi	r24, 0x00	; 0
     f2a:	90 e0       	ldi	r25, 0x00	; 0
     f2c:	0e 94 65 16 	call	0x2cca	; 0x2cca <_Z15Motors_SetSpeedii>
    LOG("Setup: Motors Initialized");
     f30:	84 e4       	ldi	r24, 0x44	; 68
     f32:	91 e0       	ldi	r25, 0x01	; 1
     f34:	0e 94 46 07 	call	0xe8c	; 0xe8c <_Z3LOGPKc>

    Enc_Init();
     f38:	0e 94 df 14 	call	0x29be	; 0x29be <_Z8Enc_Initv>
    LOG("Setup: Encoders Initialized");
     f3c:	8e e5       	ldi	r24, 0x5E	; 94
     f3e:	91 e0       	ldi	r25, 0x01	; 1
     f40:	0e 94 46 07 	call	0xe8c	; 0xe8c <_Z3LOGPKc>

    initPidControls();
     f44:	0e 94 b2 01 	call	0x364	; 0x364 <_Z15initPidControlsv>
    LOG("Setup: PID initialized");
     f48:	8a e7       	ldi	r24, 0x7A	; 122
     f4a:	91 e0       	ldi	r25, 0x01	; 1
     f4c:	0e 94 46 07 	call	0xe8c	; 0xe8c <_Z3LOGPKc>

    LOG("Setup: Done");
     f50:	81 e9       	ldi	r24, 0x91	; 145
     f52:	91 e0       	ldi	r25, 0x01	; 1
     f54:	0e 94 46 07 	call	0xe8c	; 0xe8c <_Z3LOGPKc>


    Serial.println("Pid config for P1: ");
     f58:	6d e9       	ldi	r22, 0x9D	; 157
     f5a:	71 e0       	ldi	r23, 0x01	; 1
     f5c:	85 e8       	ldi	r24, 0x85	; 133
     f5e:	93 e0       	ldi	r25, 0x03	; 3
     f60:	0e 94 e1 1b 	call	0x37c2	; 0x37c2 <_ZN5Print7printlnEPKc>
    Serial.println("Ki: ");
     f64:	61 eb       	ldi	r22, 0xB1	; 177
     f66:	71 e0       	ldi	r23, 0x01	; 1
     f68:	85 e8       	ldi	r24, 0x85	; 133
     f6a:	93 e0       	ldi	r25, 0x03	; 3
     f6c:	0e 94 e1 1b 	call	0x37c2	; 0x37c2 <_ZN5Print7printlnEPKc>
    Serial.print(Mot1_PidCtl->Ki);
     f70:	e0 91 5e 02 	lds	r30, 0x025E	; 0x80025e <Mot1_PidCtl>
     f74:	f0 91 5f 02 	lds	r31, 0x025F	; 0x80025f <Mot1_PidCtl+0x1>
     f78:	44 81       	ldd	r20, Z+4	; 0x04
     f7a:	55 81       	ldd	r21, Z+5	; 0x05
     f7c:	66 81       	ldd	r22, Z+6	; 0x06
     f7e:	77 81       	ldd	r23, Z+7	; 0x07
     f80:	22 e0       	ldi	r18, 0x02	; 2
     f82:	30 e0       	ldi	r19, 0x00	; 0
     f84:	85 e8       	ldi	r24, 0x85	; 133
     f86:	93 e0       	ldi	r25, 0x03	; 3
     f88:	0e 94 2a 1d 	call	0x3a54	; 0x3a54 <_ZN5Print5printEdi>
    Serial.println("Kp: ");
     f8c:	66 eb       	ldi	r22, 0xB6	; 182
     f8e:	71 e0       	ldi	r23, 0x01	; 1
     f90:	85 e8       	ldi	r24, 0x85	; 133
     f92:	93 e0       	ldi	r25, 0x03	; 3
     f94:	0e 94 e1 1b 	call	0x37c2	; 0x37c2 <_ZN5Print7printlnEPKc>
    Serial.print(Mot1_PidCtl->Kp);
     f98:	e0 91 5e 02 	lds	r30, 0x025E	; 0x80025e <Mot1_PidCtl>
     f9c:	f0 91 5f 02 	lds	r31, 0x025F	; 0x80025f <Mot1_PidCtl+0x1>
     fa0:	40 81       	ld	r20, Z
     fa2:	51 81       	ldd	r21, Z+1	; 0x01
     fa4:	62 81       	ldd	r22, Z+2	; 0x02
     fa6:	73 81       	ldd	r23, Z+3	; 0x03
     fa8:	22 e0       	ldi	r18, 0x02	; 2
     faa:	30 e0       	ldi	r19, 0x00	; 0
     fac:	85 e8       	ldi	r24, 0x85	; 133
     fae:	93 e0       	ldi	r25, 0x03	; 3
     fb0:	0e 94 2a 1d 	call	0x3a54	; 0x3a54 <_ZN5Print5printEdi>
    Serial.println("Kd: ");
     fb4:	6b eb       	ldi	r22, 0xBB	; 187
     fb6:	71 e0       	ldi	r23, 0x01	; 1
     fb8:	85 e8       	ldi	r24, 0x85	; 133
     fba:	93 e0       	ldi	r25, 0x03	; 3
     fbc:	0e 94 e1 1b 	call	0x37c2	; 0x37c2 <_ZN5Print7printlnEPKc>
    Serial.print(Mot1_PidCtl->Kd);
     fc0:	e0 91 5e 02 	lds	r30, 0x025E	; 0x80025e <Mot1_PidCtl>
     fc4:	f0 91 5f 02 	lds	r31, 0x025F	; 0x80025f <Mot1_PidCtl+0x1>
     fc8:	40 85       	ldd	r20, Z+8	; 0x08
     fca:	51 85       	ldd	r21, Z+9	; 0x09
     fcc:	62 85       	ldd	r22, Z+10	; 0x0a
     fce:	73 85       	ldd	r23, Z+11	; 0x0b
     fd0:	22 e0       	ldi	r18, 0x02	; 2
     fd2:	30 e0       	ldi	r19, 0x00	; 0
     fd4:	85 e8       	ldi	r24, 0x85	; 133
     fd6:	93 e0       	ldi	r25, 0x03	; 3
     fd8:	0e 94 2a 1d 	call	0x3a54	; 0x3a54 <_ZN5Print5printEdi>
    Serial.println("Done!");
     fdc:	60 ec       	ldi	r22, 0xC0	; 192
     fde:	71 e0       	ldi	r23, 0x01	; 1
     fe0:	85 e8       	ldi	r24, 0x85	; 133
     fe2:	93 e0       	ldi	r25, 0x03	; 3
     fe4:	0c 94 e1 1b 	jmp	0x37c2	; 0x37c2 <_ZN5Print7printlnEPKc>

00000fe8 <_Z15Ser_ReceiveDatav>:


const char Ser_EndMarker = '\n';
char Ser_Buffer[SERIAL__MY_BUF_SIZE]; // an array to store the received data
boolean Ser_NewData = false;
void Ser_ReceiveData() {
     fe8:	cf 93       	push	r28
     fea:	df 93       	push	r29
                ndx = SERIAL__MY_BUF_SIZE - 1;
            }
        } else {
            Ser_Buffer[ndx] = '\0'; // terminate the string
            ndx = 0;
            Ser_NewData = true;
     fec:	c1 e0       	ldi	r28, 0x01	; 1

        if (rc != Ser_EndMarker) {
            Ser_Buffer[ndx] = rc;
            ndx++;
            if (ndx >= SERIAL__MY_BUF_SIZE) {
                ndx = SERIAL__MY_BUF_SIZE - 1;
     fee:	df e3       	ldi	r29, 0x3F	; 63
void Ser_ReceiveData() {
    static byte ndx = 0;
    char rc;

    // if (Serial.available() > 0) {
    while (Serial.available() > 0 && Ser_NewData == false) {
     ff0:	85 e8       	ldi	r24, 0x85	; 133
     ff2:	93 e0       	ldi	r25, 0x03	; 3
     ff4:	0e 94 bc 19 	call	0x3378	; 0x3378 <_ZN14HardwareSerial9availableEv>
     ff8:	18 16       	cp	r1, r24
     ffa:	19 06       	cpc	r1, r25
     ffc:	1c f5       	brge	.+70     	; 0x1044 <_Z15Ser_ReceiveDatav+0x5c>
     ffe:	80 91 15 02 	lds	r24, 0x0215	; 0x800215 <Ser_NewData>
    1002:	81 11       	cpse	r24, r1
    1004:	1f c0       	rjmp	.+62     	; 0x1044 <_Z15Ser_ReceiveDatav+0x5c>
        rc = Serial.read();
    1006:	85 e8       	ldi	r24, 0x85	; 133
    1008:	93 e0       	ldi	r25, 0x03	; 3
    100a:	0e 94 d6 19 	call	0x33ac	; 0x33ac <_ZN14HardwareSerial4readEv>
    100e:	e0 91 fa 01 	lds	r30, 0x01FA	; 0x8001fa <__data_end>

        if (rc != Ser_EndMarker) {
    1012:	8a 30       	cpi	r24, 0x0A	; 10
    1014:	71 f0       	breq	.+28     	; 0x1032 <_Z15Ser_ReceiveDatav+0x4a>
            Ser_Buffer[ndx] = rc;
    1016:	ae 2f       	mov	r26, r30
    1018:	b0 e0       	ldi	r27, 0x00	; 0
    101a:	aa 5e       	subi	r26, 0xEA	; 234
    101c:	bd 4f       	sbci	r27, 0xFD	; 253
    101e:	8c 93       	st	X, r24
            ndx++;
    1020:	ef 5f       	subi	r30, 0xFF	; 255
            if (ndx >= SERIAL__MY_BUF_SIZE) {
    1022:	e0 34       	cpi	r30, 0x40	; 64
    1024:	18 f4       	brcc	.+6      	; 0x102c <_Z15Ser_ReceiveDatav+0x44>
    while (Serial.available() > 0 && Ser_NewData == false) {
        rc = Serial.read();

        if (rc != Ser_EndMarker) {
            Ser_Buffer[ndx] = rc;
            ndx++;
    1026:	e0 93 fa 01 	sts	0x01FA, r30	; 0x8001fa <__data_end>
    102a:	e2 cf       	rjmp	.-60     	; 0xff0 <_Z15Ser_ReceiveDatav+0x8>
            if (ndx >= SERIAL__MY_BUF_SIZE) {
                ndx = SERIAL__MY_BUF_SIZE - 1;
    102c:	d0 93 fa 01 	sts	0x01FA, r29	; 0x8001fa <__data_end>
    1030:	df cf       	rjmp	.-66     	; 0xff0 <_Z15Ser_ReceiveDatav+0x8>
            }
        } else {
            Ser_Buffer[ndx] = '\0'; // terminate the string
    1032:	f0 e0       	ldi	r31, 0x00	; 0
    1034:	ea 5e       	subi	r30, 0xEA	; 234
    1036:	fd 4f       	sbci	r31, 0xFD	; 253
    1038:	10 82       	st	Z, r1
            ndx = 0;
    103a:	10 92 fa 01 	sts	0x01FA, r1	; 0x8001fa <__data_end>
            Ser_NewData = true;
    103e:	c0 93 15 02 	sts	0x0215, r28	; 0x800215 <Ser_NewData>
    1042:	d6 cf       	rjmp	.-84     	; 0xff0 <_Z15Ser_ReceiveDatav+0x8>
        }
    }
}
    1044:	df 91       	pop	r29
    1046:	cf 91       	pop	r28
    1048:	08 95       	ret

0000104a <loop>:
float self_balance_pid_setpoint=0;


uint8_t turning_speed=3;

void loop() {
    104a:	8f 92       	push	r8
    104c:	9f 92       	push	r9
    104e:	af 92       	push	r10
    1050:	bf 92       	push	r11
    1052:	cf 92       	push	r12
    1054:	df 92       	push	r13
    1056:	ef 92       	push	r14
    1058:	ff 92       	push	r15
    105a:	0f 93       	push	r16
    105c:	1f 93       	push	r17
    105e:	cf 93       	push	r28
    1060:	df 93       	push	r29
    loopTime=micros();
    1062:	0e 94 90 1d 	call	0x3b20	; 0x3b20 <micros>
    1066:	60 93 ff 01 	sts	0x01FF, r22	; 0x8001ff <loopTime>
    106a:	70 93 00 02 	sts	0x0200, r23	; 0x800200 <loopTime+0x1>
    106e:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <loopTime+0x2>
    1072:	90 93 02 02 	sts	0x0202, r25	; 0x800202 <loopTime+0x3>


    unsigned long currentMillis = millis();
    1076:	0e 94 84 1d 	call	0x3b08	; 0x3b08 <millis>
    107a:	6b 01       	movw	r12, r22
    107c:	7c 01       	movw	r14, r24
    if (currentMillis - previousMilliEnc >= intervalEnc) {
    107e:	80 91 67 02 	lds	r24, 0x0267	; 0x800267 <previousMilliEnc>
    1082:	90 91 68 02 	lds	r25, 0x0268	; 0x800268 <previousMilliEnc+0x1>
    1086:	a0 91 69 02 	lds	r26, 0x0269	; 0x800269 <previousMilliEnc+0x2>
    108a:	b0 91 6a 02 	lds	r27, 0x026A	; 0x80026a <previousMilliEnc+0x3>
    108e:	a7 01       	movw	r20, r14
    1090:	96 01       	movw	r18, r12
    1092:	28 1b       	sub	r18, r24
    1094:	39 0b       	sbc	r19, r25
    1096:	4a 0b       	sbc	r20, r26
    1098:	5b 0b       	sbc	r21, r27
    109a:	25 30       	cpi	r18, 0x05	; 5
    109c:	31 05       	cpc	r19, r1
    109e:	41 05       	cpc	r20, r1
    10a0:	51 05       	cpc	r21, r1
    10a2:	50 f0       	brcs	.+20     	; 0x10b8 <loop+0x6e>
        previousMilliEnc=currentMillis;
    10a4:	c0 92 67 02 	sts	0x0267, r12	; 0x800267 <previousMilliEnc>
    10a8:	d0 92 68 02 	sts	0x0268, r13	; 0x800268 <previousMilliEnc+0x1>
    10ac:	e0 92 69 02 	sts	0x0269, r14	; 0x800269 <previousMilliEnc+0x2>
    10b0:	f0 92 6a 02 	sts	0x026A, r15	; 0x80026a <previousMilliEnc+0x3>
        UpdateEncoderValues();
    10b4:	0e 94 34 04 	call	0x868	; 0x868 <_Z19UpdateEncoderValuesv>
    }

    //---------------------------- GIRO---------------------------------------------

    Giro_ReadData();
    10b8:	0e 94 6d 04 	call	0x8da	; 0x8da <_Z13Giro_ReadDatav>
    // Giro_PidCtl->Input+=self_balance_pid_setpoint;


    if(RemoteCmd & B00000100) {                                           //If the third bit of the receive byte is set change the left and right variable to turn the robot to the right
    10bc:	c0 91 13 02 	lds	r28, 0x0213	; 0x800213 <RemoteCmd>
    10c0:	d0 91 14 02 	lds	r29, 0x0214	; 0x800214 <RemoteCmd+0x1>
    10c4:	c2 ff       	sbrs	r28, 2
    10c6:	3d c0       	rjmp	.+122    	; 0x1142 <loop+0xf8>
        if(Giro_PidCtl->Setpoint > GIRO__TARGET_ANGLE - 7) Giro_PidCtl->Setpoint -= 0.1;                            //Slowly change the setpoint angle so the robot starts leaning forewards
    10c8:	00 91 5c 02 	lds	r16, 0x025C	; 0x80025c <Giro_PidCtl>
    10cc:	10 91 5d 02 	lds	r17, 0x025D	; 0x80025d <Giro_PidCtl+0x1>
    10d0:	f8 01       	movw	r30, r16
    10d2:	84 84       	ldd	r8, Z+12	; 0x0c
    10d4:	95 84       	ldd	r9, Z+13	; 0x0d
    10d6:	a6 84       	ldd	r10, Z+14	; 0x0e
    10d8:	b7 84       	ldd	r11, Z+15	; 0x0f
    10da:	20 e0       	ldi	r18, 0x00	; 0
    10dc:	30 e0       	ldi	r19, 0x00	; 0
    10de:	40 e2       	ldi	r20, 0x20	; 32
    10e0:	51 ec       	ldi	r21, 0xC1	; 193
    10e2:	c5 01       	movw	r24, r10
    10e4:	b4 01       	movw	r22, r8
    10e6:	0e 94 3e 19 	call	0x327c	; 0x327c <__gesf2>
    10ea:	18 16       	cp	r1, r24
    10ec:	6c f4       	brge	.+26     	; 0x1108 <loop+0xbe>
    10ee:	2d ec       	ldi	r18, 0xCD	; 205
    10f0:	3c ec       	ldi	r19, 0xCC	; 204
    10f2:	4c ec       	ldi	r20, 0xCC	; 204
    10f4:	5d e3       	ldi	r21, 0x3D	; 61
    10f6:	c5 01       	movw	r24, r10
    10f8:	b4 01       	movw	r22, r8
    10fa:	0e 94 d9 16 	call	0x2db2	; 0x2db2 <__subsf3>
    10fe:	f8 01       	movw	r30, r16
    1100:	64 87       	std	Z+12, r22	; 0x0c
    1102:	75 87       	std	Z+13, r23	; 0x0d
    1104:	86 87       	std	Z+14, r24	; 0x0e
    1106:	97 87       	std	Z+15, r25	; 0x0f
        if(Giro_PidCtl->Output > 20 * -1)Giro_PidCtl->Setpoint -= 0.05;            //Slowly change the setpoint angle so the robot starts leaning forewards
    1108:	20 e0       	ldi	r18, 0x00	; 0
    110a:	30 e0       	ldi	r19, 0x00	; 0
    110c:	40 ea       	ldi	r20, 0xA0	; 160
    110e:	51 ec       	ldi	r21, 0xC1	; 193
    1110:	f8 01       	movw	r30, r16
    1112:	64 89       	ldd	r22, Z+20	; 0x14
    1114:	75 89       	ldd	r23, Z+21	; 0x15
    1116:	86 89       	ldd	r24, Z+22	; 0x16
    1118:	97 89       	ldd	r25, Z+23	; 0x17
    111a:	0e 94 3e 19 	call	0x327c	; 0x327c <__gesf2>
    111e:	18 16       	cp	r1, r24
    1120:	84 f4       	brge	.+32     	; 0x1142 <loop+0xf8>
    1122:	2d ec       	ldi	r18, 0xCD	; 205
    1124:	3c ec       	ldi	r19, 0xCC	; 204
    1126:	4c e4       	ldi	r20, 0x4C	; 76
    1128:	5d e3       	ldi	r21, 0x3D	; 61
    112a:	f8 01       	movw	r30, r16
    112c:	64 85       	ldd	r22, Z+12	; 0x0c
    112e:	75 85       	ldd	r23, Z+13	; 0x0d
    1130:	86 85       	ldd	r24, Z+14	; 0x0e
    1132:	97 85       	ldd	r25, Z+15	; 0x0f
    1134:	0e 94 d9 16 	call	0x2db2	; 0x2db2 <__subsf3>
    1138:	f8 01       	movw	r30, r16
    113a:	64 87       	std	Z+12, r22	; 0x0c
    113c:	75 87       	std	Z+13, r23	; 0x0d
    113e:	86 87       	std	Z+14, r24	; 0x0e
    1140:	97 87       	std	Z+15, r25	; 0x0f
    }
    if(RemoteCmd & B00001000) {                                           //If the forth bit of the receive byte is set change the left and right variable to turn the robot to the right
    1142:	c3 ff       	sbrs	r28, 3
    1144:	3d c0       	rjmp	.+122    	; 0x11c0 <loop+0x176>
        if(Giro_PidCtl->Setpoint < GIRO__TARGET_ANGLE + 7) Giro_PidCtl->Setpoint += 0.1;                             //Slowly change the setpoint angle so the robot starts leaning backwards
    1146:	00 91 5c 02 	lds	r16, 0x025C	; 0x80025c <Giro_PidCtl>
    114a:	10 91 5d 02 	lds	r17, 0x025D	; 0x80025d <Giro_PidCtl+0x1>
    114e:	f8 01       	movw	r30, r16
    1150:	84 84       	ldd	r8, Z+12	; 0x0c
    1152:	95 84       	ldd	r9, Z+13	; 0x0d
    1154:	a6 84       	ldd	r10, Z+14	; 0x0e
    1156:	b7 84       	ldd	r11, Z+15	; 0x0f
    1158:	20 e0       	ldi	r18, 0x00	; 0
    115a:	30 e0       	ldi	r19, 0x00	; 0
    115c:	40 e8       	ldi	r20, 0x80	; 128
    115e:	50 e4       	ldi	r21, 0x40	; 64
    1160:	c5 01       	movw	r24, r10
    1162:	b4 01       	movw	r22, r8
    1164:	0e 94 b8 17 	call	0x2f70	; 0x2f70 <__cmpsf2>
    1168:	87 ff       	sbrs	r24, 7
    116a:	0d c0       	rjmp	.+26     	; 0x1186 <loop+0x13c>
    116c:	2d ec       	ldi	r18, 0xCD	; 205
    116e:	3c ec       	ldi	r19, 0xCC	; 204
    1170:	4c ec       	ldi	r20, 0xCC	; 204
    1172:	5d e3       	ldi	r21, 0x3D	; 61
    1174:	c5 01       	movw	r24, r10
    1176:	b4 01       	movw	r22, r8
    1178:	0e 94 da 16 	call	0x2db4	; 0x2db4 <__addsf3>
    117c:	f8 01       	movw	r30, r16
    117e:	64 87       	std	Z+12, r22	; 0x0c
    1180:	75 87       	std	Z+13, r23	; 0x0d
    1182:	86 87       	std	Z+14, r24	; 0x0e
    1184:	97 87       	std	Z+15, r25	; 0x0f
        if(Giro_PidCtl->Output < 20) Giro_PidCtl->Setpoint += 0.05;                 //Slowly change the setpoint angle so the robot starts leaning backwards
    1186:	20 e0       	ldi	r18, 0x00	; 0
    1188:	30 e0       	ldi	r19, 0x00	; 0
    118a:	40 ea       	ldi	r20, 0xA0	; 160
    118c:	51 e4       	ldi	r21, 0x41	; 65
    118e:	f8 01       	movw	r30, r16
    1190:	64 89       	ldd	r22, Z+20	; 0x14
    1192:	75 89       	ldd	r23, Z+21	; 0x15
    1194:	86 89       	ldd	r24, Z+22	; 0x16
    1196:	97 89       	ldd	r25, Z+23	; 0x17
    1198:	0e 94 b8 17 	call	0x2f70	; 0x2f70 <__cmpsf2>
    119c:	87 ff       	sbrs	r24, 7
    119e:	10 c0       	rjmp	.+32     	; 0x11c0 <loop+0x176>
    11a0:	2d ec       	ldi	r18, 0xCD	; 205
    11a2:	3c ec       	ldi	r19, 0xCC	; 204
    11a4:	4c e4       	ldi	r20, 0x4C	; 76
    11a6:	5d e3       	ldi	r21, 0x3D	; 61
    11a8:	f8 01       	movw	r30, r16
    11aa:	64 85       	ldd	r22, Z+12	; 0x0c
    11ac:	75 85       	ldd	r23, Z+13	; 0x0d
    11ae:	86 85       	ldd	r24, Z+14	; 0x0e
    11b0:	97 85       	ldd	r25, Z+15	; 0x0f
    11b2:	0e 94 da 16 	call	0x2db4	; 0x2db4 <__addsf3>
    11b6:	f8 01       	movw	r30, r16
    11b8:	64 87       	std	Z+12, r22	; 0x0c
    11ba:	75 87       	std	Z+13, r23	; 0x0d
    11bc:	86 87       	std	Z+14, r24	; 0x0e
    11be:	97 87       	std	Z+15, r25	; 0x0f
    }

    if(!(RemoteCmd & B00001100)) {                                        //Slowly reduce the setpoint to zero if no foreward or backward command is given
    11c0:	cc 70       	andi	r28, 0x0C	; 12
    11c2:	dd 27       	eor	r29, r29
    11c4:	cd 2b       	or	r28, r29
    11c6:	d1 f5       	brne	.+116    	; 0x123c <loop+0x1f2>
        if(Giro_PidCtl->Setpoint > 0.5)Giro_PidCtl->Setpoint -=0.05;                              //If the PID setpoint is larger then 0.5 reduce the setpoint with 0.05 every loop
    11c8:	c0 91 5c 02 	lds	r28, 0x025C	; 0x80025c <Giro_PidCtl>
    11cc:	d0 91 5d 02 	lds	r29, 0x025D	; 0x80025d <Giro_PidCtl+0x1>
    11d0:	8c 84       	ldd	r8, Y+12	; 0x0c
    11d2:	9d 84       	ldd	r9, Y+13	; 0x0d
    11d4:	ae 84       	ldd	r10, Y+14	; 0x0e
    11d6:	bf 84       	ldd	r11, Y+15	; 0x0f
    11d8:	20 e0       	ldi	r18, 0x00	; 0
    11da:	30 e0       	ldi	r19, 0x00	; 0
    11dc:	40 e0       	ldi	r20, 0x00	; 0
    11de:	5f e3       	ldi	r21, 0x3F	; 63
    11e0:	c5 01       	movw	r24, r10
    11e2:	b4 01       	movw	r22, r8
    11e4:	0e 94 3e 19 	call	0x327c	; 0x327c <__gesf2>
    11e8:	18 16       	cp	r1, r24
    11ea:	4c f4       	brge	.+18     	; 0x11fe <loop+0x1b4>
    11ec:	2d ec       	ldi	r18, 0xCD	; 205
    11ee:	3c ec       	ldi	r19, 0xCC	; 204
    11f0:	4c e4       	ldi	r20, 0x4C	; 76
    11f2:	5d e3       	ldi	r21, 0x3D	; 61
    11f4:	c5 01       	movw	r24, r10
    11f6:	b4 01       	movw	r22, r8
    11f8:	0e 94 d9 16 	call	0x2db2	; 0x2db2 <__subsf3>
    11fc:	12 c0       	rjmp	.+36     	; 0x1222 <loop+0x1d8>
        else if(Giro_PidCtl->Setpoint < -0.5)Giro_PidCtl->Setpoint +=0.05;                        //If the PID setpoint is smaller then -0.5 increase the setpoint with 0.05 every loop
    11fe:	20 e0       	ldi	r18, 0x00	; 0
    1200:	30 e0       	ldi	r19, 0x00	; 0
    1202:	40 e0       	ldi	r20, 0x00	; 0
    1204:	5f eb       	ldi	r21, 0xBF	; 191
    1206:	c5 01       	movw	r24, r10
    1208:	b4 01       	movw	r22, r8
    120a:	0e 94 b8 17 	call	0x2f70	; 0x2f70 <__cmpsf2>
    120e:	87 ff       	sbrs	r24, 7
    1210:	0d c0       	rjmp	.+26     	; 0x122c <loop+0x1e2>
    1212:	2d ec       	ldi	r18, 0xCD	; 205
    1214:	3c ec       	ldi	r19, 0xCC	; 204
    1216:	4c e4       	ldi	r20, 0x4C	; 76
    1218:	5d e3       	ldi	r21, 0x3D	; 61
    121a:	c5 01       	movw	r24, r10
    121c:	b4 01       	movw	r22, r8
    121e:	0e 94 da 16 	call	0x2db4	; 0x2db4 <__addsf3>
    1222:	6c 87       	std	Y+12, r22	; 0x0c
    1224:	7d 87       	std	Y+13, r23	; 0x0d
    1226:	8e 87       	std	Y+14, r24	; 0x0e
    1228:	9f 87       	std	Y+15, r25	; 0x0f
    122a:	08 c0       	rjmp	.+16     	; 0x123c <loop+0x1f2>
        else Giro_PidCtl->Setpoint = GIRO__TARGET_ANGLE;                                                  //If the PID setpoint is smaller then 0.5 or larger then -0.5 set the setpoint to 0
    122c:	80 e0       	ldi	r24, 0x00	; 0
    122e:	90 e0       	ldi	r25, 0x00	; 0
    1230:	a0 e4       	ldi	r26, 0x40	; 64
    1232:	b0 ec       	ldi	r27, 0xC0	; 192
    1234:	8c 87       	std	Y+12, r24	; 0x0c
    1236:	9d 87       	std	Y+13, r25	; 0x0d
    1238:	ae 87       	std	Y+14, r26	; 0x0e
    123a:	bf 87       	std	Y+15, r27	; 0x0f
    }

    Giro_Pid->Compute();
    123c:	80 91 56 02 	lds	r24, 0x0256	; 0x800256 <Giro_Pid>
    1240:	90 91 57 02 	lds	r25, 0x0257	; 0x800257 <Giro_Pid+0x1>
    1244:	0e 94 8a 0a 	call	0x1514	; 0x1514 <_ZN3PID7ComputeEv>

    // Remote go fwd/bck
    if(RemoteCmd & B00000001) {                                           //If the first bit of the receive byte is set change the left and right variable to turn the robot to the left
    1248:	c0 91 13 02 	lds	r28, 0x0213	; 0x800213 <RemoteCmd>
    124c:	d0 91 14 02 	lds	r29, 0x0214	; 0x800214 <RemoteCmd+0x1>
    1250:	c0 ff       	sbrs	r28, 0
    1252:	2d c0       	rjmp	.+90     	; 0x12ae <loop+0x264>
        Mot0_PidCtl->Input += turning_speed;                                       //Increase the left motor speed
    1254:	00 91 60 02 	lds	r16, 0x0260	; 0x800260 <Mot0_PidCtl>
    1258:	10 91 61 02 	lds	r17, 0x0261	; 0x800261 <Mot0_PidCtl+0x1>
    125c:	60 91 08 01 	lds	r22, 0x0108	; 0x800108 <turning_speed>
    1260:	70 e0       	ldi	r23, 0x00	; 0
    1262:	80 e0       	ldi	r24, 0x00	; 0
    1264:	90 e0       	ldi	r25, 0x00	; 0
    1266:	0e 94 67 18 	call	0x30ce	; 0x30ce <__floatsisf>
    126a:	4b 01       	movw	r8, r22
    126c:	5c 01       	movw	r10, r24
    126e:	9b 01       	movw	r18, r22
    1270:	ac 01       	movw	r20, r24
    1272:	f8 01       	movw	r30, r16
    1274:	60 89       	ldd	r22, Z+16	; 0x10
    1276:	71 89       	ldd	r23, Z+17	; 0x11
    1278:	82 89       	ldd	r24, Z+18	; 0x12
    127a:	93 89       	ldd	r25, Z+19	; 0x13
    127c:	0e 94 da 16 	call	0x2db4	; 0x2db4 <__addsf3>
    1280:	f8 01       	movw	r30, r16
    1282:	60 8b       	std	Z+16, r22	; 0x10
    1284:	71 8b       	std	Z+17, r23	; 0x11
    1286:	82 8b       	std	Z+18, r24	; 0x12
    1288:	93 8b       	std	Z+19, r25	; 0x13
        Mot1_PidCtl->Input -= turning_speed;                                      //Decrease the right motor speed
    128a:	00 91 5e 02 	lds	r16, 0x025E	; 0x80025e <Mot1_PidCtl>
    128e:	10 91 5f 02 	lds	r17, 0x025F	; 0x80025f <Mot1_PidCtl+0x1>
    1292:	a5 01       	movw	r20, r10
    1294:	94 01       	movw	r18, r8
    1296:	f8 01       	movw	r30, r16
    1298:	60 89       	ldd	r22, Z+16	; 0x10
    129a:	71 89       	ldd	r23, Z+17	; 0x11
    129c:	82 89       	ldd	r24, Z+18	; 0x12
    129e:	93 89       	ldd	r25, Z+19	; 0x13
    12a0:	0e 94 d9 16 	call	0x2db2	; 0x2db2 <__subsf3>
    12a4:	f8 01       	movw	r30, r16
    12a6:	60 8b       	std	Z+16, r22	; 0x10
    12a8:	71 8b       	std	Z+17, r23	; 0x11
    12aa:	82 8b       	std	Z+18, r24	; 0x12
    12ac:	93 8b       	std	Z+19, r25	; 0x13
    }
    if(RemoteCmd & B00000010) {                                           //If the second bit of the receive byte is set change the left and right variable to turn the robot to the right
    12ae:	c1 ff       	sbrs	r28, 1
    12b0:	2a c0       	rjmp	.+84     	; 0x1306 <loop+0x2bc>
        Mot0_PidCtl->Input -= turning_speed;                                       //Decrease the left motor speed
    12b2:	c0 91 60 02 	lds	r28, 0x0260	; 0x800260 <Mot0_PidCtl>
    12b6:	d0 91 61 02 	lds	r29, 0x0261	; 0x800261 <Mot0_PidCtl+0x1>
    12ba:	60 91 08 01 	lds	r22, 0x0108	; 0x800108 <turning_speed>
    12be:	70 e0       	ldi	r23, 0x00	; 0
    12c0:	80 e0       	ldi	r24, 0x00	; 0
    12c2:	90 e0       	ldi	r25, 0x00	; 0
    12c4:	0e 94 67 18 	call	0x30ce	; 0x30ce <__floatsisf>
    12c8:	4b 01       	movw	r8, r22
    12ca:	5c 01       	movw	r10, r24
    12cc:	9b 01       	movw	r18, r22
    12ce:	ac 01       	movw	r20, r24
    12d0:	68 89       	ldd	r22, Y+16	; 0x10
    12d2:	79 89       	ldd	r23, Y+17	; 0x11
    12d4:	8a 89       	ldd	r24, Y+18	; 0x12
    12d6:	9b 89       	ldd	r25, Y+19	; 0x13
    12d8:	0e 94 d9 16 	call	0x2db2	; 0x2db2 <__subsf3>
    12dc:	68 8b       	std	Y+16, r22	; 0x10
    12de:	79 8b       	std	Y+17, r23	; 0x11
    12e0:	8a 8b       	std	Y+18, r24	; 0x12
    12e2:	9b 8b       	std	Y+19, r25	; 0x13
        Mot1_PidCtl->Input += turning_speed;                                      //Increase the right motor speed
    12e4:	c0 91 5e 02 	lds	r28, 0x025E	; 0x80025e <Mot1_PidCtl>
    12e8:	d0 91 5f 02 	lds	r29, 0x025F	; 0x80025f <Mot1_PidCtl+0x1>
    12ec:	a5 01       	movw	r20, r10
    12ee:	94 01       	movw	r18, r8
    12f0:	68 89       	ldd	r22, Y+16	; 0x10
    12f2:	79 89       	ldd	r23, Y+17	; 0x11
    12f4:	8a 89       	ldd	r24, Y+18	; 0x12
    12f6:	9b 89       	ldd	r25, Y+19	; 0x13
    12f8:	0e 94 da 16 	call	0x2db4	; 0x2db4 <__addsf3>
    12fc:	68 8b       	std	Y+16, r22	; 0x10
    12fe:	79 8b       	std	Y+17, r23	; 0x11
    1300:	8a 8b       	std	Y+18, r24	; 0x12
    1302:	9b 8b       	std	Y+19, r25	; 0x13
    1304:	02 c0       	rjmp	.+4      	; 0x130a <loop+0x2c0>
    }


    if (RemoteCmd ) {
    1306:	cd 2b       	or	r28, r29
    1308:	c1 f0       	breq	.+48     	; 0x133a <loop+0x2f0>
        if(millis()-RemoteCmdRecTime >=40) {
    130a:	0e 94 84 1d 	call	0x3b08	; 0x3b08 <millis>
    130e:	00 91 0f 02 	lds	r16, 0x020F	; 0x80020f <RemoteCmdRecTime>
    1312:	10 91 10 02 	lds	r17, 0x0210	; 0x800210 <RemoteCmdRecTime+0x1>
    1316:	20 91 11 02 	lds	r18, 0x0211	; 0x800211 <RemoteCmdRecTime+0x2>
    131a:	30 91 12 02 	lds	r19, 0x0212	; 0x800212 <RemoteCmdRecTime+0x3>
    131e:	dc 01       	movw	r26, r24
    1320:	cb 01       	movw	r24, r22
    1322:	80 1b       	sub	r24, r16
    1324:	91 0b       	sbc	r25, r17
    1326:	a2 0b       	sbc	r26, r18
    1328:	b3 0b       	sbc	r27, r19
    132a:	88 97       	sbiw	r24, 0x28	; 40
    132c:	a1 05       	cpc	r26, r1
    132e:	b1 05       	cpc	r27, r1
    1330:	20 f0       	brcs	.+8      	; 0x133a <loop+0x2f0>
            RemoteCmd=0;
    1332:	10 92 14 02 	sts	0x0214, r1	; 0x800214 <RemoteCmd+0x1>
    1336:	10 92 13 02 	sts	0x0213, r1	; 0x800213 <RemoteCmd>
        }
    }

    if (ConnectGiroToMot==true) {
    133a:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <ConnectGiroToMot>
    133e:	88 23       	and	r24, r24
    1340:	c1 f0       	breq	.+48     	; 0x1372 <loop+0x328>
        Mot0_PidCtl->Setpoint=Giro_PidCtl->Output;
    1342:	e0 91 5c 02 	lds	r30, 0x025C	; 0x80025c <Giro_PidCtl>
    1346:	f0 91 5d 02 	lds	r31, 0x025D	; 0x80025d <Giro_PidCtl+0x1>
    134a:	84 89       	ldd	r24, Z+20	; 0x14
    134c:	95 89       	ldd	r25, Z+21	; 0x15
    134e:	a6 89       	ldd	r26, Z+22	; 0x16
    1350:	b7 89       	ldd	r27, Z+23	; 0x17
    1352:	e0 91 60 02 	lds	r30, 0x0260	; 0x800260 <Mot0_PidCtl>
    1356:	f0 91 61 02 	lds	r31, 0x0261	; 0x800261 <Mot0_PidCtl+0x1>
    135a:	84 87       	std	Z+12, r24	; 0x0c
    135c:	95 87       	std	Z+13, r25	; 0x0d
    135e:	a6 87       	std	Z+14, r26	; 0x0e
    1360:	b7 87       	std	Z+15, r27	; 0x0f
        Mot1_PidCtl->Setpoint=Giro_PidCtl->Output;
    1362:	e0 91 5e 02 	lds	r30, 0x025E	; 0x80025e <Mot1_PidCtl>
    1366:	f0 91 5f 02 	lds	r31, 0x025F	; 0x80025f <Mot1_PidCtl+0x1>
    136a:	84 87       	std	Z+12, r24	; 0x0c
    136c:	95 87       	std	Z+13, r25	; 0x0d
    136e:	a6 87       	std	Z+14, r26	; 0x0e
    1370:	b7 87       	std	Z+15, r27	; 0x0f
    }

    //--------------------------- MOTORS --------------------------------------
    Mot0_Pid->Compute();
    1372:	80 91 5a 02 	lds	r24, 0x025A	; 0x80025a <Mot0_Pid>
    1376:	90 91 5b 02 	lds	r25, 0x025B	; 0x80025b <Mot0_Pid+0x1>
    137a:	0e 94 8a 0a 	call	0x1514	; 0x1514 <_ZN3PID7ComputeEv>
    Mot1_Pid->Compute();
    137e:	80 91 58 02 	lds	r24, 0x0258	; 0x800258 <Mot1_Pid>
    1382:	90 91 59 02 	lds	r25, 0x0259	; 0x800259 <Mot1_Pid+0x1>
    1386:	0e 94 8a 0a 	call	0x1514	; 0x1514 <_ZN3PID7ComputeEv>

    if  ( (running==false) &&
    138a:	80 91 62 02 	lds	r24, 0x0262	; 0x800262 <running>
    138e:	81 11       	cpse	r24, r1
    1390:	1e c0       	rjmp	.+60     	; 0x13ce <loop+0x384>
            (Giro_PidCtl->Input > GIRO__TARGET_ANGLE-3 ) &&
    1392:	e0 91 5c 02 	lds	r30, 0x025C	; 0x80025c <Giro_PidCtl>
    1396:	f0 91 5d 02 	lds	r31, 0x025D	; 0x80025d <Giro_PidCtl+0x1>
    139a:	80 88       	ldd	r8, Z+16	; 0x10
    139c:	91 88       	ldd	r9, Z+17	; 0x11
    139e:	a2 88       	ldd	r10, Z+18	; 0x12
    13a0:	b3 88       	ldd	r11, Z+19	; 0x13

    //--------------------------- MOTORS --------------------------------------
    Mot0_Pid->Compute();
    Mot1_Pid->Compute();

    if  ( (running==false) &&
    13a2:	20 e0       	ldi	r18, 0x00	; 0
    13a4:	30 e0       	ldi	r19, 0x00	; 0
    13a6:	40 ec       	ldi	r20, 0xC0	; 192
    13a8:	50 ec       	ldi	r21, 0xC0	; 192
    13aa:	c5 01       	movw	r24, r10
    13ac:	b4 01       	movw	r22, r8
    13ae:	0e 94 3e 19 	call	0x327c	; 0x327c <__gesf2>
    13b2:	18 16       	cp	r1, r24
    13b4:	64 f4       	brge	.+24     	; 0x13ce <loop+0x384>
            (Giro_PidCtl->Input > GIRO__TARGET_ANGLE-3 ) &&
    13b6:	20 e0       	ldi	r18, 0x00	; 0
    13b8:	30 e0       	ldi	r19, 0x00	; 0
    13ba:	a9 01       	movw	r20, r18
    13bc:	c5 01       	movw	r24, r10
    13be:	b4 01       	movw	r22, r8
    13c0:	0e 94 b8 17 	call	0x2f70	; 0x2f70 <__cmpsf2>
    13c4:	87 ff       	sbrs	r24, 7
    13c6:	03 c0       	rjmp	.+6      	; 0x13ce <loop+0x384>
            (Giro_PidCtl->Input < GIRO__TARGET_ANGLE+3 )
        ) {
        running = true;
    13c8:	81 e0       	ldi	r24, 0x01	; 1
    13ca:	80 93 62 02 	sts	0x0262, r24	; 0x800262 <running>





    if((ConnectGiroToMot==true) &&
    13ce:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <ConnectGiroToMot>
    13d2:	88 23       	and	r24, r24
    13d4:	09 f4       	brne	.+2      	; 0x13d8 <loop+0x38e>
    13d6:	49 c0       	rjmp	.+146    	; 0x146a <loop+0x420>
    13d8:	80 91 62 02 	lds	r24, 0x0262	; 0x800262 <running>
    13dc:	88 23       	and	r24, r24
    13de:	a1 f1       	breq	.+104    	; 0x1448 <loop+0x3fe>
            ((running==false) ||
             (Giro_PidCtl->Input > 50 || Giro_PidCtl->Input < -50) || //we fell
    13e0:	c0 91 5c 02 	lds	r28, 0x025C	; 0x80025c <Giro_PidCtl>
    13e4:	d0 91 5d 02 	lds	r29, 0x025D	; 0x80025d <Giro_PidCtl+0x1>
    13e8:	88 88       	ldd	r8, Y+16	; 0x10
    13ea:	99 88       	ldd	r9, Y+17	; 0x11
    13ec:	aa 88       	ldd	r10, Y+18	; 0x12
    13ee:	bb 88       	ldd	r11, Y+19	; 0x13




    if((ConnectGiroToMot==true) &&
            ((running==false) ||
    13f0:	20 e0       	ldi	r18, 0x00	; 0
    13f2:	30 e0       	ldi	r19, 0x00	; 0
    13f4:	48 e4       	ldi	r20, 0x48	; 72
    13f6:	52 e4       	ldi	r21, 0x42	; 66
    13f8:	c5 01       	movw	r24, r10
    13fa:	b4 01       	movw	r22, r8
    13fc:	0e 94 3e 19 	call	0x327c	; 0x327c <__gesf2>
    1400:	18 16       	cp	r1, r24
    1402:	14 f1       	brlt	.+68     	; 0x1448 <loop+0x3fe>
             (Giro_PidCtl->Input > 50 || Giro_PidCtl->Input < -50) || //we fell
    1404:	20 e0       	ldi	r18, 0x00	; 0
    1406:	30 e0       	ldi	r19, 0x00	; 0
    1408:	48 e4       	ldi	r20, 0x48	; 72
    140a:	52 ec       	ldi	r21, 0xC2	; 194
    140c:	c5 01       	movw	r24, r10
    140e:	b4 01       	movw	r22, r8
    1410:	0e 94 b8 17 	call	0x2f70	; 0x2f70 <__cmpsf2>
    1414:	87 fd       	sbrc	r24, 7
    1416:	18 c0       	rjmp	.+48     	; 0x1448 <loop+0x3fe>
             ((Giro_PidCtl->Output >1) && (Giro_PidCtl->Output < 1))) //somewhat equilibrium
    1418:	8c 88       	ldd	r8, Y+20	; 0x14
    141a:	9d 88       	ldd	r9, Y+21	; 0x15
    141c:	ae 88       	ldd	r10, Y+22	; 0x16
    141e:	bf 88       	ldd	r11, Y+23	; 0x17



    if((ConnectGiroToMot==true) &&
            ((running==false) ||
             (Giro_PidCtl->Input > 50 || Giro_PidCtl->Input < -50) || //we fell
    1420:	20 e0       	ldi	r18, 0x00	; 0
    1422:	30 e0       	ldi	r19, 0x00	; 0
    1424:	40 e8       	ldi	r20, 0x80	; 128
    1426:	5f e3       	ldi	r21, 0x3F	; 63
    1428:	c5 01       	movw	r24, r10
    142a:	b4 01       	movw	r22, r8
    142c:	0e 94 3e 19 	call	0x327c	; 0x327c <__gesf2>
    1430:	18 16       	cp	r1, r24
    1432:	dc f4       	brge	.+54     	; 0x146a <loop+0x420>
             ((Giro_PidCtl->Output >1) && (Giro_PidCtl->Output < 1))) //somewhat equilibrium
    1434:	20 e0       	ldi	r18, 0x00	; 0
    1436:	30 e0       	ldi	r19, 0x00	; 0
    1438:	40 e8       	ldi	r20, 0x80	; 128
    143a:	5f e3       	ldi	r21, 0x3F	; 63
    143c:	c5 01       	movw	r24, r10
    143e:	b4 01       	movw	r22, r8
    1440:	0e 94 b8 17 	call	0x2f70	; 0x2f70 <__cmpsf2>
    1444:	87 ff       	sbrs	r24, 7
    1446:	11 c0       	rjmp	.+34     	; 0x146a <loop+0x420>
      ) {
        Motors_SetSpeed(0,0);
    1448:	60 e0       	ldi	r22, 0x00	; 0
    144a:	70 e0       	ldi	r23, 0x00	; 0
    144c:	80 e0       	ldi	r24, 0x00	; 0
    144e:	90 e0       	ldi	r25, 0x00	; 0
    1450:	0e 94 65 16 	call	0x2cca	; 0x2cca <_Z15Motors_SetSpeedii>
        running=false;
    1454:	10 92 62 02 	sts	0x0262, r1	; 0x800262 <running>
        self_balance_pid_setpoint = 0;
    1458:	10 92 fb 01 	sts	0x01FB, r1	; 0x8001fb <self_balance_pid_setpoint>
    145c:	10 92 fc 01 	sts	0x01FC, r1	; 0x8001fc <self_balance_pid_setpoint+0x1>
    1460:	10 92 fd 01 	sts	0x01FD, r1	; 0x8001fd <self_balance_pid_setpoint+0x2>
    1464:	10 92 fe 01 	sts	0x01FE, r1	; 0x8001fe <self_balance_pid_setpoint+0x3>
    1468:	1b c0       	rjmp	.+54     	; 0x14a0 <loop+0x456>
    } else {
        Motors_SetSpeed(Mot0_PidCtl->Output,Mot1_PidCtl->Output);
    146a:	e0 91 5e 02 	lds	r30, 0x025E	; 0x80025e <Mot1_PidCtl>
    146e:	f0 91 5f 02 	lds	r31, 0x025F	; 0x80025f <Mot1_PidCtl+0x1>
    1472:	64 89       	ldd	r22, Z+20	; 0x14
    1474:	75 89       	ldd	r23, Z+21	; 0x15
    1476:	86 89       	ldd	r24, Z+22	; 0x16
    1478:	97 89       	ldd	r25, Z+23	; 0x17
    147a:	0e 94 2f 18 	call	0x305e	; 0x305e <__fixsfsi>
    147e:	4b 01       	movw	r8, r22
    1480:	5c 01       	movw	r10, r24
    1482:	e0 91 60 02 	lds	r30, 0x0260	; 0x800260 <Mot0_PidCtl>
    1486:	f0 91 61 02 	lds	r31, 0x0261	; 0x800261 <Mot0_PidCtl+0x1>
    148a:	64 89       	ldd	r22, Z+20	; 0x14
    148c:	75 89       	ldd	r23, Z+21	; 0x15
    148e:	86 89       	ldd	r24, Z+22	; 0x16
    1490:	97 89       	ldd	r25, Z+23	; 0x17
    1492:	0e 94 2f 18 	call	0x305e	; 0x305e <__fixsfsi>
    1496:	dc 01       	movw	r26, r24
    1498:	cb 01       	movw	r24, r22
    149a:	b4 01       	movw	r22, r8
    149c:	0e 94 65 16 	call	0x2cca	; 0x2cca <_Z15Motors_SetSpeedii>
    }




    if (currentMillis - previousMilliSerialLog >= SERIAL_LOG_INTERVAL) {
    14a0:	80 91 63 02 	lds	r24, 0x0263	; 0x800263 <previousMilliSerialLog>
    14a4:	90 91 64 02 	lds	r25, 0x0264	; 0x800264 <previousMilliSerialLog+0x1>
    14a8:	a0 91 65 02 	lds	r26, 0x0265	; 0x800265 <previousMilliSerialLog+0x2>
    14ac:	b0 91 66 02 	lds	r27, 0x0266	; 0x800266 <previousMilliSerialLog+0x3>
    14b0:	a7 01       	movw	r20, r14
    14b2:	96 01       	movw	r18, r12
    14b4:	28 1b       	sub	r18, r24
    14b6:	39 0b       	sbc	r19, r25
    14b8:	4a 0b       	sbc	r20, r26
    14ba:	5b 0b       	sbc	r21, r27
    14bc:	25 30       	cpi	r18, 0x05	; 5
    14be:	31 05       	cpc	r19, r1
    14c0:	41 05       	cpc	r20, r1
    14c2:	51 05       	cpc	r21, r1
    14c4:	d0 f0       	brcs	.+52     	; 0x14fa <loop+0x4b0>
        previousMilliSerialLog=currentMillis;
    14c6:	c0 92 63 02 	sts	0x0263, r12	; 0x800263 <previousMilliSerialLog>
    14ca:	d0 92 64 02 	sts	0x0264, r13	; 0x800264 <previousMilliSerialLog+0x1>
    14ce:	e0 92 65 02 	sts	0x0265, r14	; 0x800265 <previousMilliSerialLog+0x2>
    14d2:	f0 92 66 02 	sts	0x0266, r15	; 0x800266 <previousMilliSerialLog+0x3>


        Ser_ReceiveData();
    14d6:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <_Z15Ser_ReceiveDatav>
        Serial_ParseData();
    14da:	0e 94 13 03 	call	0x626	; 0x626 <_Z16Serial_ParseDatav>
        printData();

    }


}
    14de:	df 91       	pop	r29
    14e0:	cf 91       	pop	r28
    14e2:	1f 91       	pop	r17
    14e4:	0f 91       	pop	r16
    14e6:	ff 90       	pop	r15
    14e8:	ef 90       	pop	r14
    14ea:	df 90       	pop	r13
    14ec:	cf 90       	pop	r12
    14ee:	bf 90       	pop	r11
    14f0:	af 90       	pop	r10
    14f2:	9f 90       	pop	r9
    14f4:	8f 90       	pop	r8
        /*   loopTime=micros()-loopTime;
        Serial.print("MC: ");
        Serial.println(loopTime);
        */

        printData();
    14f6:	0c 94 a1 05 	jmp	0xb42	; 0xb42 <_Z9printDatav>

    }


}
    14fa:	df 91       	pop	r29
    14fc:	cf 91       	pop	r28
    14fe:	1f 91       	pop	r17
    1500:	0f 91       	pop	r16
    1502:	ff 90       	pop	r15
    1504:	ef 90       	pop	r14
    1506:	df 90       	pop	r13
    1508:	cf 90       	pop	r12
    150a:	bf 90       	pop	r11
    150c:	af 90       	pop	r10
    150e:	9f 90       	pop	r9
    1510:	8f 90       	pop	r8
    1512:	08 95       	ret

00001514 <_ZN3PID7ComputeEv>:
 *   every time "void loop()" executes.  the function will decide for itself whether a new
 *   pid Output needs to be computed.  returns true when the output is computed,
 *   false when nothing has been done.
 **********************************************************************************/
bool PID::Compute()
{
    1514:	2f 92       	push	r2
    1516:	3f 92       	push	r3
    1518:	4f 92       	push	r4
    151a:	5f 92       	push	r5
    151c:	6f 92       	push	r6
    151e:	7f 92       	push	r7
    1520:	8f 92       	push	r8
    1522:	9f 92       	push	r9
    1524:	af 92       	push	r10
    1526:	bf 92       	push	r11
    1528:	cf 92       	push	r12
    152a:	df 92       	push	r13
    152c:	ef 92       	push	r14
    152e:	ff 92       	push	r15
    1530:	0f 93       	push	r16
    1532:	1f 93       	push	r17
    1534:	cf 93       	push	r28
    1536:	df 93       	push	r29
    1538:	cd b7       	in	r28, 0x3d	; 61
    153a:	de b7       	in	r29, 0x3e	; 62
    153c:	60 97       	sbiw	r28, 0x10	; 16
    153e:	0f b6       	in	r0, 0x3f	; 63
    1540:	f8 94       	cli
    1542:	de bf       	out	0x3e, r29	; 62
    1544:	0f be       	out	0x3f, r0	; 63
    1546:	cd bf       	out	0x3d, r28	; 61
   if(!inAuto) return false;
    1548:	dc 01       	movw	r26, r24
    154a:	da 96       	adiw	r26, 0x3a	; 58
    154c:	bc 91       	ld	r27, X
    154e:	b9 83       	std	Y+1, r27	; 0x01
    1550:	b1 11       	cpse	r27, r1
    1552:	02 c0       	rjmp	.+4      	; 0x1558 <_ZN3PID7ComputeEv+0x44>
    1554:	19 82       	std	Y+1, r1	; 0x01
    1556:	2b c1       	rjmp	.+598    	; 0x17ae <_ZN3PID7ComputeEv+0x29a>
    1558:	98 8b       	std	Y+16, r25	; 0x10
    155a:	8f 87       	std	Y+15, r24	; 0x0f
   unsigned long now = millis();
    155c:	0e 94 84 1d 	call	0x3b08	; 0x3b08 <millis>
    1560:	6e 83       	std	Y+6, r22	; 0x06
    1562:	7f 83       	std	Y+7, r23	; 0x07
    1564:	88 87       	std	Y+8, r24	; 0x08
    1566:	99 87       	std	Y+9, r25	; 0x09
   unsigned long timeChange = (now - lastTime);
   if(timeChange>=SampleTime)
    1568:	ef 85       	ldd	r30, Y+15	; 0x0f
    156a:	f8 89       	ldd	r31, Y+16	; 0x10
    156c:	82 a1       	ldd	r24, Z+34	; 0x22
    156e:	93 a1       	ldd	r25, Z+35	; 0x23
    1570:	a4 a1       	ldd	r26, Z+36	; 0x24
    1572:	b5 a1       	ldd	r27, Z+37	; 0x25
    1574:	4e 81       	ldd	r20, Y+6	; 0x06
    1576:	5f 81       	ldd	r21, Y+7	; 0x07
    1578:	68 85       	ldd	r22, Y+8	; 0x08
    157a:	79 85       	ldd	r23, Y+9	; 0x09
    157c:	48 1b       	sub	r20, r24
    157e:	59 0b       	sbc	r21, r25
    1580:	6a 0b       	sbc	r22, r26
    1582:	7b 0b       	sbc	r23, r27
    1584:	86 a5       	ldd	r24, Z+46	; 0x2e
    1586:	97 a5       	ldd	r25, Z+47	; 0x2f
    1588:	a0 a9       	ldd	r26, Z+48	; 0x30
    158a:	b1 a9       	ldd	r27, Z+49	; 0x31
    158c:	48 17       	cp	r20, r24
    158e:	59 07       	cpc	r21, r25
    1590:	6a 07       	cpc	r22, r26
    1592:	7b 07       	cpc	r23, r27
    1594:	f8 f2       	brcs	.-66     	; 0x1554 <_ZN3PID7ComputeEv+0x40>
   {
      /*Compute all the working error variables*/
      double input = *myInput;
    1596:	04 8c       	ldd	r0, Z+28	; 0x1c
    1598:	f5 8d       	ldd	r31, Z+29	; 0x1d
    159a:	e0 2d       	mov	r30, r0
    159c:	80 81       	ld	r24, Z
    159e:	91 81       	ldd	r25, Z+1	; 0x01
    15a0:	a2 81       	ldd	r26, Z+2	; 0x02
    15a2:	b3 81       	ldd	r27, Z+3	; 0x03
    15a4:	8a 83       	std	Y+2, r24	; 0x02
    15a6:	9b 83       	std	Y+3, r25	; 0x03
    15a8:	ac 83       	std	Y+4, r26	; 0x04
    15aa:	bd 83       	std	Y+5, r27	; 0x05
      double error = *mySetpoint - input;
    15ac:	af 85       	ldd	r26, Y+15	; 0x0f
    15ae:	b8 89       	ldd	r27, Y+16	; 0x10
    15b0:	90 96       	adiw	r26, 0x20	; 32
    15b2:	ed 91       	ld	r30, X+
    15b4:	fc 91       	ld	r31, X
    15b6:	91 97       	sbiw	r26, 0x21	; 33
    15b8:	2a 81       	ldd	r18, Y+2	; 0x02
    15ba:	3b 81       	ldd	r19, Y+3	; 0x03
    15bc:	4c 81       	ldd	r20, Y+4	; 0x04
    15be:	5d 81       	ldd	r21, Y+5	; 0x05
    15c0:	60 81       	ld	r22, Z
    15c2:	71 81       	ldd	r23, Z+1	; 0x01
    15c4:	82 81       	ldd	r24, Z+2	; 0x02
    15c6:	93 81       	ldd	r25, Z+3	; 0x03
    15c8:	0e 94 d9 16 	call	0x2db2	; 0x2db2 <__subsf3>
    15cc:	4b 01       	movw	r8, r22
    15ce:	5c 01       	movw	r10, r24
      double dInput = (input - lastInput);
    15d0:	ef 85       	ldd	r30, Y+15	; 0x0f
    15d2:	f8 89       	ldd	r31, Y+16	; 0x10
    15d4:	22 a5       	ldd	r18, Z+42	; 0x2a
    15d6:	33 a5       	ldd	r19, Z+43	; 0x2b
    15d8:	44 a5       	ldd	r20, Z+44	; 0x2c
    15da:	55 a5       	ldd	r21, Z+45	; 0x2d
    15dc:	6a 81       	ldd	r22, Y+2	; 0x02
    15de:	7b 81       	ldd	r23, Y+3	; 0x03
    15e0:	8c 81       	ldd	r24, Y+4	; 0x04
    15e2:	9d 81       	ldd	r25, Y+5	; 0x05
    15e4:	0e 94 d9 16 	call	0x2db2	; 0x2db2 <__subsf3>
    15e8:	6b 01       	movw	r12, r22
    15ea:	7c 01       	movw	r14, r24
      outputSum+= (ki * error);
    15ec:	af 85       	ldd	r26, Y+15	; 0x0f
    15ee:	b8 89       	ldd	r27, Y+16	; 0x10
    15f0:	50 96       	adiw	r26, 0x10	; 16
    15f2:	2d 91       	ld	r18, X+
    15f4:	3d 91       	ld	r19, X+
    15f6:	4d 91       	ld	r20, X+
    15f8:	5c 91       	ld	r21, X
    15fa:	53 97       	sbiw	r26, 0x13	; 19
    15fc:	c5 01       	movw	r24, r10
    15fe:	b4 01       	movw	r22, r8
    1600:	0e 94 4b 19 	call	0x3296	; 0x3296 <__mulsf3>
    1604:	ef 85       	ldd	r30, Y+15	; 0x0f
    1606:	f8 89       	ldd	r31, Y+16	; 0x10
    1608:	26 a1       	ldd	r18, Z+38	; 0x26
    160a:	37 a1       	ldd	r19, Z+39	; 0x27
    160c:	40 a5       	ldd	r20, Z+40	; 0x28
    160e:	51 a5       	ldd	r21, Z+41	; 0x29
    1610:	0e 94 da 16 	call	0x2db4	; 0x2db4 <__addsf3>
    1614:	2b 01       	movw	r4, r22
    1616:	3c 01       	movw	r6, r24
    1618:	af 85       	ldd	r26, Y+15	; 0x0f
    161a:	b8 89       	ldd	r27, Y+16	; 0x10
    161c:	96 96       	adiw	r26, 0x26	; 38
    161e:	6d 93       	st	X+, r22
    1620:	7d 93       	st	X+, r23
    1622:	8d 93       	st	X+, r24
    1624:	9c 93       	st	X, r25
    1626:	99 97       	sbiw	r26, 0x29	; 41

      /*Add Proportional on Measurement, if P_ON_M is specified*/
      if(!pOnE) outputSum-= kp * dInput;
    1628:	db 96       	adiw	r26, 0x3b	; 59
    162a:	bc 91       	ld	r27, X
    162c:	ba 87       	std	Y+10, r27	; 0x0a
    162e:	b1 11       	cpse	r27, r1
    1630:	18 c0       	rjmp	.+48     	; 0x1662 <_ZN3PID7ComputeEv+0x14e>
    1632:	ef 85       	ldd	r30, Y+15	; 0x0f
    1634:	f8 89       	ldd	r31, Y+16	; 0x10
    1636:	24 85       	ldd	r18, Z+12	; 0x0c
    1638:	35 85       	ldd	r19, Z+13	; 0x0d
    163a:	46 85       	ldd	r20, Z+14	; 0x0e
    163c:	57 85       	ldd	r21, Z+15	; 0x0f
    163e:	c7 01       	movw	r24, r14
    1640:	b6 01       	movw	r22, r12
    1642:	0e 94 4b 19 	call	0x3296	; 0x3296 <__mulsf3>
    1646:	9b 01       	movw	r18, r22
    1648:	ac 01       	movw	r20, r24
    164a:	c3 01       	movw	r24, r6
    164c:	b2 01       	movw	r22, r4
    164e:	0e 94 d9 16 	call	0x2db2	; 0x2db2 <__subsf3>
    1652:	af 85       	ldd	r26, Y+15	; 0x0f
    1654:	b8 89       	ldd	r27, Y+16	; 0x10
    1656:	96 96       	adiw	r26, 0x26	; 38
    1658:	6d 93       	st	X+, r22
    165a:	7d 93       	st	X+, r23
    165c:	8d 93       	st	X+, r24
    165e:	9c 93       	st	X, r25
    1660:	99 97       	sbiw	r26, 0x29	; 41

      if(outputSum > outMax) outputSum= outMax;
    1662:	ef 85       	ldd	r30, Y+15	; 0x0f
    1664:	f8 89       	ldd	r31, Y+16	; 0x10
    1666:	46 a0       	ldd	r4, Z+38	; 0x26
    1668:	57 a0       	ldd	r5, Z+39	; 0x27
    166a:	60 a4       	ldd	r6, Z+40	; 0x28
    166c:	71 a4       	ldd	r7, Z+41	; 0x29
    166e:	16 a9       	ldd	r17, Z+54	; 0x36
    1670:	07 a9       	ldd	r16, Z+55	; 0x37
    1672:	30 ac       	ldd	r3, Z+56	; 0x38
    1674:	21 ac       	ldd	r2, Z+57	; 0x39
    1676:	21 2f       	mov	r18, r17
    1678:	30 2f       	mov	r19, r16
    167a:	43 2d       	mov	r20, r3
    167c:	52 2d       	mov	r21, r2
    167e:	c3 01       	movw	r24, r6
    1680:	b2 01       	movw	r22, r4
    1682:	0e 94 3e 19 	call	0x327c	; 0x327c <__gesf2>
    1686:	18 16       	cp	r1, r24
    1688:	2c f4       	brge	.+10     	; 0x1694 <_ZN3PID7ComputeEv+0x180>
    168a:	81 2f       	mov	r24, r17
    168c:	90 2f       	mov	r25, r16
    168e:	a3 2d       	mov	r26, r3
    1690:	b2 2d       	mov	r27, r2
    1692:	18 c0       	rjmp	.+48     	; 0x16c4 <_ZN3PID7ComputeEv+0x1b0>
      else if(outputSum < outMin) outputSum= outMin;
    1694:	af 85       	ldd	r26, Y+15	; 0x0f
    1696:	b8 89       	ldd	r27, Y+16	; 0x10
    1698:	d2 96       	adiw	r26, 0x32	; 50
    169a:	8d 91       	ld	r24, X+
    169c:	9d 91       	ld	r25, X+
    169e:	0d 90       	ld	r0, X+
    16a0:	bc 91       	ld	r27, X
    16a2:	a0 2d       	mov	r26, r0
    16a4:	8b 87       	std	Y+11, r24	; 0x0b
    16a6:	9c 87       	std	Y+12, r25	; 0x0c
    16a8:	ad 87       	std	Y+13, r26	; 0x0d
    16aa:	be 87       	std	Y+14, r27	; 0x0e
    16ac:	9c 01       	movw	r18, r24
    16ae:	ad 01       	movw	r20, r26
    16b0:	c3 01       	movw	r24, r6
    16b2:	b2 01       	movw	r22, r4
    16b4:	0e 94 b8 17 	call	0x2f70	; 0x2f70 <__cmpsf2>
    16b8:	87 ff       	sbrs	r24, 7
    16ba:	0a c0       	rjmp	.+20     	; 0x16d0 <_ZN3PID7ComputeEv+0x1bc>
    16bc:	8b 85       	ldd	r24, Y+11	; 0x0b
    16be:	9c 85       	ldd	r25, Y+12	; 0x0c
    16c0:	ad 85       	ldd	r26, Y+13	; 0x0d
    16c2:	be 85       	ldd	r27, Y+14	; 0x0e
    16c4:	ef 85       	ldd	r30, Y+15	; 0x0f
    16c6:	f8 89       	ldd	r31, Y+16	; 0x10
    16c8:	86 a3       	std	Z+38, r24	; 0x26
    16ca:	97 a3       	std	Z+39, r25	; 0x27
    16cc:	a0 a7       	std	Z+40, r26	; 0x28
    16ce:	b1 a7       	std	Z+41, r27	; 0x29

      /*Add Proportional on Error, if P_ON_E is specified*/
	   double output;
      if(pOnE) output = kp * error;
    16d0:	fa 85       	ldd	r31, Y+10	; 0x0a
    16d2:	ff 23       	and	r31, r31
    16d4:	79 f0       	breq	.+30     	; 0x16f4 <_ZN3PID7ComputeEv+0x1e0>
    16d6:	af 85       	ldd	r26, Y+15	; 0x0f
    16d8:	b8 89       	ldd	r27, Y+16	; 0x10
    16da:	1c 96       	adiw	r26, 0x0c	; 12
    16dc:	2d 91       	ld	r18, X+
    16de:	3d 91       	ld	r19, X+
    16e0:	4d 91       	ld	r20, X+
    16e2:	5c 91       	ld	r21, X
    16e4:	1f 97       	sbiw	r26, 0x0f	; 15
    16e6:	c5 01       	movw	r24, r10
    16e8:	b4 01       	movw	r22, r8
    16ea:	0e 94 4b 19 	call	0x3296	; 0x3296 <__mulsf3>
    16ee:	4b 01       	movw	r8, r22
    16f0:	5c 01       	movw	r10, r24
    16f2:	03 c0       	rjmp	.+6      	; 0x16fa <_ZN3PID7ComputeEv+0x1e6>
      else output = 0;
    16f4:	81 2c       	mov	r8, r1
    16f6:	91 2c       	mov	r9, r1
    16f8:	54 01       	movw	r10, r8

      /*Compute Rest of PID Output*/
      output += outputSum - kd * dInput;
    16fa:	ef 85       	ldd	r30, Y+15	; 0x0f
    16fc:	f8 89       	ldd	r31, Y+16	; 0x10
    16fe:	24 89       	ldd	r18, Z+20	; 0x14
    1700:	35 89       	ldd	r19, Z+21	; 0x15
    1702:	46 89       	ldd	r20, Z+22	; 0x16
    1704:	57 89       	ldd	r21, Z+23	; 0x17
    1706:	c7 01       	movw	r24, r14
    1708:	b6 01       	movw	r22, r12
    170a:	0e 94 4b 19 	call	0x3296	; 0x3296 <__mulsf3>
    170e:	9b 01       	movw	r18, r22
    1710:	ac 01       	movw	r20, r24
    1712:	af 85       	ldd	r26, Y+15	; 0x0f
    1714:	b8 89       	ldd	r27, Y+16	; 0x10
    1716:	96 96       	adiw	r26, 0x26	; 38
    1718:	6d 91       	ld	r22, X+
    171a:	7d 91       	ld	r23, X+
    171c:	8d 91       	ld	r24, X+
    171e:	9c 91       	ld	r25, X
    1720:	99 97       	sbiw	r26, 0x29	; 41
    1722:	0e 94 d9 16 	call	0x2db2	; 0x2db2 <__subsf3>
    1726:	a5 01       	movw	r20, r10
    1728:	94 01       	movw	r18, r8
    172a:	0e 94 da 16 	call	0x2db4	; 0x2db4 <__addsf3>
    172e:	6b 01       	movw	r12, r22
    1730:	7c 01       	movw	r14, r24

	    if(output > outMax) output = outMax;
    1732:	9b 01       	movw	r18, r22
    1734:	ac 01       	movw	r20, r24
    1736:	61 2f       	mov	r22, r17
    1738:	70 2f       	mov	r23, r16
    173a:	83 2d       	mov	r24, r3
    173c:	92 2d       	mov	r25, r2
    173e:	0e 94 b8 17 	call	0x2f70	; 0x2f70 <__cmpsf2>
    1742:	87 fd       	sbrc	r24, 7
    1744:	14 c0       	rjmp	.+40     	; 0x176e <_ZN3PID7ComputeEv+0x25a>
      else if(output < outMin) output = outMin;
    1746:	ef 85       	ldd	r30, Y+15	; 0x0f
    1748:	f8 89       	ldd	r31, Y+16	; 0x10
    174a:	12 a9       	ldd	r17, Z+50	; 0x32
    174c:	03 a9       	ldd	r16, Z+51	; 0x33
    174e:	34 a8       	ldd	r3, Z+52	; 0x34
    1750:	25 a8       	ldd	r2, Z+53	; 0x35
    1752:	21 2f       	mov	r18, r17
    1754:	30 2f       	mov	r19, r16
    1756:	43 2d       	mov	r20, r3
    1758:	52 2d       	mov	r21, r2
    175a:	b6 01       	movw	r22, r12
    175c:	c7 01       	movw	r24, r14
    175e:	0e 94 b8 17 	call	0x2f70	; 0x2f70 <__cmpsf2>
    1762:	87 fd       	sbrc	r24, 7
    1764:	04 c0       	rjmp	.+8      	; 0x176e <_ZN3PID7ComputeEv+0x25a>
	   double output;
      if(pOnE) output = kp * error;
      else output = 0;

      /*Compute Rest of PID Output*/
      output += outputSum - kd * dInput;
    1766:	1c 2d       	mov	r17, r12
    1768:	0d 2d       	mov	r16, r13
    176a:	3e 2c       	mov	r3, r14
    176c:	2f 2c       	mov	r2, r15

	    if(output > outMax) output = outMax;
      else if(output < outMin) output = outMin;
	    *myOutput = output;
    176e:	af 85       	ldd	r26, Y+15	; 0x0f
    1770:	b8 89       	ldd	r27, Y+16	; 0x10
    1772:	5e 96       	adiw	r26, 0x1e	; 30
    1774:	ed 91       	ld	r30, X+
    1776:	fc 91       	ld	r31, X
    1778:	5f 97       	sbiw	r26, 0x1f	; 31
    177a:	81 2f       	mov	r24, r17
    177c:	90 2f       	mov	r25, r16
    177e:	a3 2d       	mov	r26, r3
    1780:	b2 2d       	mov	r27, r2
    1782:	80 83       	st	Z, r24
    1784:	91 83       	std	Z+1, r25	; 0x01
    1786:	a2 83       	std	Z+2, r26	; 0x02
    1788:	b3 83       	std	Z+3, r27	; 0x03

      /*Remember some variables for next time*/
      lastInput = input;
    178a:	8a 81       	ldd	r24, Y+2	; 0x02
    178c:	9b 81       	ldd	r25, Y+3	; 0x03
    178e:	ac 81       	ldd	r26, Y+4	; 0x04
    1790:	bd 81       	ldd	r27, Y+5	; 0x05
    1792:	ef 85       	ldd	r30, Y+15	; 0x0f
    1794:	f8 89       	ldd	r31, Y+16	; 0x10
    1796:	82 a7       	std	Z+42, r24	; 0x2a
    1798:	93 a7       	std	Z+43, r25	; 0x2b
    179a:	a4 a7       	std	Z+44, r26	; 0x2c
    179c:	b5 a7       	std	Z+45, r27	; 0x2d
      lastTime = now;
    179e:	8e 81       	ldd	r24, Y+6	; 0x06
    17a0:	9f 81       	ldd	r25, Y+7	; 0x07
    17a2:	a8 85       	ldd	r26, Y+8	; 0x08
    17a4:	b9 85       	ldd	r27, Y+9	; 0x09
    17a6:	82 a3       	std	Z+34, r24	; 0x22
    17a8:	93 a3       	std	Z+35, r25	; 0x23
    17aa:	a4 a3       	std	Z+36, r26	; 0x24
    17ac:	b5 a3       	std	Z+37, r27	; 0x25
	    return true;
   }
   else return false;
}
    17ae:	89 81       	ldd	r24, Y+1	; 0x01
    17b0:	60 96       	adiw	r28, 0x10	; 16
    17b2:	0f b6       	in	r0, 0x3f	; 63
    17b4:	f8 94       	cli
    17b6:	de bf       	out	0x3e, r29	; 62
    17b8:	0f be       	out	0x3f, r0	; 63
    17ba:	cd bf       	out	0x3d, r28	; 61
    17bc:	df 91       	pop	r29
    17be:	cf 91       	pop	r28
    17c0:	1f 91       	pop	r17
    17c2:	0f 91       	pop	r16
    17c4:	ff 90       	pop	r15
    17c6:	ef 90       	pop	r14
    17c8:	df 90       	pop	r13
    17ca:	cf 90       	pop	r12
    17cc:	bf 90       	pop	r11
    17ce:	af 90       	pop	r10
    17d0:	9f 90       	pop	r9
    17d2:	8f 90       	pop	r8
    17d4:	7f 90       	pop	r7
    17d6:	6f 90       	pop	r6
    17d8:	5f 90       	pop	r5
    17da:	4f 90       	pop	r4
    17dc:	3f 90       	pop	r3
    17de:	2f 90       	pop	r2
    17e0:	08 95       	ret

000017e2 <_ZN3PID10SetTuningsEdddi>:
 * This function allows the controller's dynamic performance to be adjusted.
 * it's called automatically from the constructor, but tunings can also
 * be adjusted on the fly during normal operation
 ******************************************************************************/
void PID::SetTunings(double Kp, double Ki, double Kd, int POn)
{
    17e2:	4f 92       	push	r4
    17e4:	5f 92       	push	r5
    17e6:	6f 92       	push	r6
    17e8:	7f 92       	push	r7
    17ea:	8f 92       	push	r8
    17ec:	9f 92       	push	r9
    17ee:	af 92       	push	r10
    17f0:	bf 92       	push	r11
    17f2:	cf 92       	push	r12
    17f4:	df 92       	push	r13
    17f6:	ef 92       	push	r14
    17f8:	ff 92       	push	r15
    17fa:	0f 93       	push	r16
    17fc:	1f 93       	push	r17
    17fe:	cf 93       	push	r28
    1800:	df 93       	push	r29
    1802:	00 d0       	rcall	.+0      	; 0x1804 <_ZN3PID10SetTuningsEdddi+0x22>
    1804:	00 d0       	rcall	.+0      	; 0x1806 <_ZN3PID10SetTuningsEdddi+0x24>
    1806:	00 d0       	rcall	.+0      	; 0x1808 <_ZN3PID10SetTuningsEdddi+0x26>
    1808:	cd b7       	in	r28, 0x3d	; 61
    180a:	de b7       	in	r29, 0x3e	; 62
    180c:	9e 83       	std	Y+6, r25	; 0x06
    180e:	8d 83       	std	Y+5, r24	; 0x05
    1810:	49 83       	std	Y+1, r20	; 0x01
    1812:	5a 83       	std	Y+2, r21	; 0x02
    1814:	6b 83       	std	Y+3, r22	; 0x03
    1816:	7c 83       	std	Y+4, r23	; 0x04
    1818:	28 01       	movw	r4, r16
    181a:	39 01       	movw	r6, r18
   if (Kp<0 || Ki<0 || Kd<0) return;
    181c:	20 e0       	ldi	r18, 0x00	; 0
    181e:	30 e0       	ldi	r19, 0x00	; 0
    1820:	a9 01       	movw	r20, r18
    1822:	69 81       	ldd	r22, Y+1	; 0x01
    1824:	7a 81       	ldd	r23, Y+2	; 0x02
    1826:	8b 81       	ldd	r24, Y+3	; 0x03
    1828:	9c 81       	ldd	r25, Y+4	; 0x04
    182a:	0e 94 b8 17 	call	0x2f70	; 0x2f70 <__cmpsf2>
    182e:	87 fd       	sbrc	r24, 7
    1830:	97 c0       	rjmp	.+302    	; 0x1960 <_ZN3PID10SetTuningsEdddi+0x17e>
    1832:	20 e0       	ldi	r18, 0x00	; 0
    1834:	30 e0       	ldi	r19, 0x00	; 0
    1836:	a9 01       	movw	r20, r18
    1838:	c3 01       	movw	r24, r6
    183a:	b2 01       	movw	r22, r4
    183c:	0e 94 b8 17 	call	0x2f70	; 0x2f70 <__cmpsf2>
    1840:	87 fd       	sbrc	r24, 7
    1842:	8e c0       	rjmp	.+284    	; 0x1960 <_ZN3PID10SetTuningsEdddi+0x17e>
    1844:	20 e0       	ldi	r18, 0x00	; 0
    1846:	30 e0       	ldi	r19, 0x00	; 0
    1848:	a9 01       	movw	r20, r18
    184a:	c7 01       	movw	r24, r14
    184c:	b6 01       	movw	r22, r12
    184e:	0e 94 b8 17 	call	0x2f70	; 0x2f70 <__cmpsf2>
    1852:	87 fd       	sbrc	r24, 7
    1854:	85 c0       	rjmp	.+266    	; 0x1960 <_ZN3PID10SetTuningsEdddi+0x17e>

   pOn = POn;
    1856:	ad 81       	ldd	r26, Y+5	; 0x05
    1858:	be 81       	ldd	r27, Y+6	; 0x06
    185a:	5b 96       	adiw	r26, 0x1b	; 27
    185c:	bc 92       	st	X, r11
    185e:	ae 92       	st	-X, r10
    1860:	5a 97       	sbiw	r26, 0x1a	; 26
   pOnE = POn == P_ON_E;
    1862:	81 e0       	ldi	r24, 0x01	; 1
    1864:	aa 94       	dec	r10
    1866:	ab 28       	or	r10, r11
    1868:	09 f0       	breq	.+2      	; 0x186c <_ZN3PID10SetTuningsEdddi+0x8a>
    186a:	80 e0       	ldi	r24, 0x00	; 0
    186c:	ed 81       	ldd	r30, Y+5	; 0x05
    186e:	fe 81       	ldd	r31, Y+6	; 0x06
    1870:	83 af       	std	Z+59, r24	; 0x3b

   dispKp = Kp; dispKi = Ki; dispKd = Kd;
    1872:	89 81       	ldd	r24, Y+1	; 0x01
    1874:	9a 81       	ldd	r25, Y+2	; 0x02
    1876:	ab 81       	ldd	r26, Y+3	; 0x03
    1878:	bc 81       	ldd	r27, Y+4	; 0x04
    187a:	80 83       	st	Z, r24
    187c:	91 83       	std	Z+1, r25	; 0x01
    187e:	a2 83       	std	Z+2, r26	; 0x02
    1880:	b3 83       	std	Z+3, r27	; 0x03
    1882:	44 82       	std	Z+4, r4	; 0x04
    1884:	55 82       	std	Z+5, r5	; 0x05
    1886:	66 82       	std	Z+6, r6	; 0x06
    1888:	77 82       	std	Z+7, r7	; 0x07
    188a:	c0 86       	std	Z+8, r12	; 0x08
    188c:	d1 86       	std	Z+9, r13	; 0x09
    188e:	e2 86       	std	Z+10, r14	; 0x0a
    1890:	f3 86       	std	Z+11, r15	; 0x0b

   double SampleTimeInSec = ((double)SampleTime)/1000;
    1892:	66 a5       	ldd	r22, Z+46	; 0x2e
    1894:	77 a5       	ldd	r23, Z+47	; 0x2f
    1896:	80 a9       	ldd	r24, Z+48	; 0x30
    1898:	91 a9       	ldd	r25, Z+49	; 0x31
    189a:	0e 94 65 18 	call	0x30ca	; 0x30ca <__floatunsisf>
    189e:	20 e0       	ldi	r18, 0x00	; 0
    18a0:	30 e0       	ldi	r19, 0x00	; 0
    18a2:	4a e7       	ldi	r20, 0x7A	; 122
    18a4:	54 e4       	ldi	r21, 0x44	; 68
    18a6:	0e 94 bd 17 	call	0x2f7a	; 0x2f7a <__divsf3>
    18aa:	4b 01       	movw	r8, r22
    18ac:	5c 01       	movw	r10, r24
   kp = Kp;
    18ae:	89 81       	ldd	r24, Y+1	; 0x01
    18b0:	9a 81       	ldd	r25, Y+2	; 0x02
    18b2:	ab 81       	ldd	r26, Y+3	; 0x03
    18b4:	bc 81       	ldd	r27, Y+4	; 0x04
    18b6:	ed 81       	ldd	r30, Y+5	; 0x05
    18b8:	fe 81       	ldd	r31, Y+6	; 0x06
    18ba:	84 87       	std	Z+12, r24	; 0x0c
    18bc:	95 87       	std	Z+13, r25	; 0x0d
    18be:	a6 87       	std	Z+14, r26	; 0x0e
    18c0:	b7 87       	std	Z+15, r27	; 0x0f
   ki = Ki * SampleTimeInSec;
    18c2:	a5 01       	movw	r20, r10
    18c4:	94 01       	movw	r18, r8
    18c6:	c3 01       	movw	r24, r6
    18c8:	b2 01       	movw	r22, r4
    18ca:	0e 94 4b 19 	call	0x3296	; 0x3296 <__mulsf3>
    18ce:	2b 01       	movw	r4, r22
    18d0:	3c 01       	movw	r6, r24
    18d2:	ad 81       	ldd	r26, Y+5	; 0x05
    18d4:	be 81       	ldd	r27, Y+6	; 0x06
    18d6:	50 96       	adiw	r26, 0x10	; 16
    18d8:	6d 93       	st	X+, r22
    18da:	7d 93       	st	X+, r23
    18dc:	8d 93       	st	X+, r24
    18de:	9c 93       	st	X, r25
    18e0:	53 97       	sbiw	r26, 0x13	; 19
   kd = Kd / SampleTimeInSec;
    18e2:	a5 01       	movw	r20, r10
    18e4:	94 01       	movw	r18, r8
    18e6:	c7 01       	movw	r24, r14
    18e8:	b6 01       	movw	r22, r12
    18ea:	0e 94 bd 17 	call	0x2f7a	; 0x2f7a <__divsf3>
    18ee:	6b 01       	movw	r12, r22
    18f0:	7c 01       	movw	r14, r24
    18f2:	ed 81       	ldd	r30, Y+5	; 0x05
    18f4:	fe 81       	ldd	r31, Y+6	; 0x06
    18f6:	64 8b       	std	Z+20, r22	; 0x14
    18f8:	75 8b       	std	Z+21, r23	; 0x15
    18fa:	86 8b       	std	Z+22, r24	; 0x16
    18fc:	97 8b       	std	Z+23, r25	; 0x17

  if(controllerDirection ==REVERSE)
    18fe:	80 8d       	ldd	r24, Z+24	; 0x18
    1900:	91 8d       	ldd	r25, Z+25	; 0x19
    1902:	01 97       	sbiw	r24, 0x01	; 1
    1904:	69 f5       	brne	.+90     	; 0x1960 <_ZN3PID10SetTuningsEdddi+0x17e>
   {
      kp = (0 - kp);
    1906:	29 81       	ldd	r18, Y+1	; 0x01
    1908:	3a 81       	ldd	r19, Y+2	; 0x02
    190a:	4b 81       	ldd	r20, Y+3	; 0x03
    190c:	5c 81       	ldd	r21, Y+4	; 0x04
    190e:	60 e0       	ldi	r22, 0x00	; 0
    1910:	70 e0       	ldi	r23, 0x00	; 0
    1912:	cb 01       	movw	r24, r22
    1914:	0e 94 d9 16 	call	0x2db2	; 0x2db2 <__subsf3>
    1918:	ad 81       	ldd	r26, Y+5	; 0x05
    191a:	be 81       	ldd	r27, Y+6	; 0x06
    191c:	1c 96       	adiw	r26, 0x0c	; 12
    191e:	6d 93       	st	X+, r22
    1920:	7d 93       	st	X+, r23
    1922:	8d 93       	st	X+, r24
    1924:	9c 93       	st	X, r25
    1926:	1f 97       	sbiw	r26, 0x0f	; 15
      ki = (0 - ki);
    1928:	a3 01       	movw	r20, r6
    192a:	92 01       	movw	r18, r4
    192c:	60 e0       	ldi	r22, 0x00	; 0
    192e:	70 e0       	ldi	r23, 0x00	; 0
    1930:	cb 01       	movw	r24, r22
    1932:	0e 94 d9 16 	call	0x2db2	; 0x2db2 <__subsf3>
    1936:	ed 81       	ldd	r30, Y+5	; 0x05
    1938:	fe 81       	ldd	r31, Y+6	; 0x06
    193a:	60 8b       	std	Z+16, r22	; 0x10
    193c:	71 8b       	std	Z+17, r23	; 0x11
    193e:	82 8b       	std	Z+18, r24	; 0x12
    1940:	93 8b       	std	Z+19, r25	; 0x13
      kd = (0 - kd);
    1942:	a7 01       	movw	r20, r14
    1944:	96 01       	movw	r18, r12
    1946:	60 e0       	ldi	r22, 0x00	; 0
    1948:	70 e0       	ldi	r23, 0x00	; 0
    194a:	cb 01       	movw	r24, r22
    194c:	0e 94 d9 16 	call	0x2db2	; 0x2db2 <__subsf3>
    1950:	ad 81       	ldd	r26, Y+5	; 0x05
    1952:	be 81       	ldd	r27, Y+6	; 0x06
    1954:	54 96       	adiw	r26, 0x14	; 20
    1956:	6d 93       	st	X+, r22
    1958:	7d 93       	st	X+, r23
    195a:	8d 93       	st	X+, r24
    195c:	9c 93       	st	X, r25
    195e:	57 97       	sbiw	r26, 0x17	; 23
   }
}
    1960:	26 96       	adiw	r28, 0x06	; 6
    1962:	0f b6       	in	r0, 0x3f	; 63
    1964:	f8 94       	cli
    1966:	de bf       	out	0x3e, r29	; 62
    1968:	0f be       	out	0x3f, r0	; 63
    196a:	cd bf       	out	0x3d, r28	; 61
    196c:	df 91       	pop	r29
    196e:	cf 91       	pop	r28
    1970:	1f 91       	pop	r17
    1972:	0f 91       	pop	r16
    1974:	ff 90       	pop	r15
    1976:	ef 90       	pop	r14
    1978:	df 90       	pop	r13
    197a:	cf 90       	pop	r12
    197c:	bf 90       	pop	r11
    197e:	af 90       	pop	r10
    1980:	9f 90       	pop	r9
    1982:	8f 90       	pop	r8
    1984:	7f 90       	pop	r7
    1986:	6f 90       	pop	r6
    1988:	5f 90       	pop	r5
    198a:	4f 90       	pop	r4
    198c:	08 95       	ret

0000198e <_ZN3PID10SetTuningsEddd>:

/* SetTunings(...)*************************************************************
 * Set Tunings using the last-rembered POn setting
 ******************************************************************************/
void PID::SetTunings(double Kp, double Ki, double Kd){
    198e:	af 92       	push	r10
    1990:	bf 92       	push	r11
    1992:	cf 92       	push	r12
    1994:	df 92       	push	r13
    1996:	ef 92       	push	r14
    1998:	ff 92       	push	r15
    199a:	0f 93       	push	r16
    199c:	1f 93       	push	r17
    SetTunings(Kp, Ki, Kd, pOn); 
    199e:	fc 01       	movw	r30, r24
    19a0:	a2 8c       	ldd	r10, Z+26	; 0x1a
    19a2:	b3 8c       	ldd	r11, Z+27	; 0x1b
    19a4:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <_ZN3PID10SetTuningsEdddi>
}
    19a8:	1f 91       	pop	r17
    19aa:	0f 91       	pop	r16
    19ac:	ff 90       	pop	r15
    19ae:	ef 90       	pop	r14
    19b0:	df 90       	pop	r13
    19b2:	cf 90       	pop	r12
    19b4:	bf 90       	pop	r11
    19b6:	af 90       	pop	r10
    19b8:	08 95       	ret

000019ba <_ZN3PID13SetSampleTimeEi>:

/* SetSampleTime(...) *********************************************************
 * sets the period, in Milliseconds, at which the calculation is performed
 ******************************************************************************/
void PID::SetSampleTime(int NewSampleTime)
{
    19ba:	8f 92       	push	r8
    19bc:	9f 92       	push	r9
    19be:	af 92       	push	r10
    19c0:	bf 92       	push	r11
    19c2:	cf 92       	push	r12
    19c4:	df 92       	push	r13
    19c6:	ef 92       	push	r14
    19c8:	ff 92       	push	r15
    19ca:	cf 93       	push	r28
    19cc:	df 93       	push	r29
   if (NewSampleTime > 0)
    19ce:	16 16       	cp	r1, r22
    19d0:	17 06       	cpc	r1, r23
    19d2:	b4 f5       	brge	.+108    	; 0x1a40 <_ZN3PID13SetSampleTimeEi+0x86>
    19d4:	6b 01       	movw	r12, r22
    19d6:	ec 01       	movw	r28, r24
   {
      double ratio  = (double)NewSampleTime
                      / (double)SampleTime;
    19d8:	0d 2c       	mov	r0, r13
    19da:	00 0c       	add	r0, r0
    19dc:	ee 08       	sbc	r14, r14
    19de:	ff 08       	sbc	r15, r15
    19e0:	c7 01       	movw	r24, r14
    19e2:	b6 01       	movw	r22, r12
    19e4:	0e 94 67 18 	call	0x30ce	; 0x30ce <__floatsisf>
    19e8:	4b 01       	movw	r8, r22
    19ea:	5c 01       	movw	r10, r24
    19ec:	6e a5       	ldd	r22, Y+46	; 0x2e
    19ee:	7f a5       	ldd	r23, Y+47	; 0x2f
    19f0:	88 a9       	ldd	r24, Y+48	; 0x30
    19f2:	99 a9       	ldd	r25, Y+49	; 0x31
    19f4:	0e 94 65 18 	call	0x30ca	; 0x30ca <__floatunsisf>
    19f8:	9b 01       	movw	r18, r22
    19fa:	ac 01       	movw	r20, r24
    19fc:	c5 01       	movw	r24, r10
    19fe:	b4 01       	movw	r22, r8
    1a00:	0e 94 bd 17 	call	0x2f7a	; 0x2f7a <__divsf3>
    1a04:	4b 01       	movw	r8, r22
    1a06:	5c 01       	movw	r10, r24
      ki *= ratio;
    1a08:	9b 01       	movw	r18, r22
    1a0a:	ac 01       	movw	r20, r24
    1a0c:	68 89       	ldd	r22, Y+16	; 0x10
    1a0e:	79 89       	ldd	r23, Y+17	; 0x11
    1a10:	8a 89       	ldd	r24, Y+18	; 0x12
    1a12:	9b 89       	ldd	r25, Y+19	; 0x13
    1a14:	0e 94 4b 19 	call	0x3296	; 0x3296 <__mulsf3>
    1a18:	68 8b       	std	Y+16, r22	; 0x10
    1a1a:	79 8b       	std	Y+17, r23	; 0x11
    1a1c:	8a 8b       	std	Y+18, r24	; 0x12
    1a1e:	9b 8b       	std	Y+19, r25	; 0x13
      kd /= ratio;
    1a20:	a5 01       	movw	r20, r10
    1a22:	94 01       	movw	r18, r8
    1a24:	6c 89       	ldd	r22, Y+20	; 0x14
    1a26:	7d 89       	ldd	r23, Y+21	; 0x15
    1a28:	8e 89       	ldd	r24, Y+22	; 0x16
    1a2a:	9f 89       	ldd	r25, Y+23	; 0x17
    1a2c:	0e 94 bd 17 	call	0x2f7a	; 0x2f7a <__divsf3>
    1a30:	6c 8b       	std	Y+20, r22	; 0x14
    1a32:	7d 8b       	std	Y+21, r23	; 0x15
    1a34:	8e 8b       	std	Y+22, r24	; 0x16
    1a36:	9f 8b       	std	Y+23, r25	; 0x17
      SampleTime = (unsigned long)NewSampleTime;
    1a38:	ce a6       	std	Y+46, r12	; 0x2e
    1a3a:	df a6       	std	Y+47, r13	; 0x2f
    1a3c:	e8 aa       	std	Y+48, r14	; 0x30
    1a3e:	f9 aa       	std	Y+49, r15	; 0x31
   }
}
    1a40:	df 91       	pop	r29
    1a42:	cf 91       	pop	r28
    1a44:	ff 90       	pop	r15
    1a46:	ef 90       	pop	r14
    1a48:	df 90       	pop	r13
    1a4a:	cf 90       	pop	r12
    1a4c:	bf 90       	pop	r11
    1a4e:	af 90       	pop	r10
    1a50:	9f 90       	pop	r9
    1a52:	8f 90       	pop	r8
    1a54:	08 95       	ret

00001a56 <_ZN3PID15SetOutputLimitsEdd>:
 *  be doing a time window and will need 0-8000 or something.  or maybe they'll
 *  want to clamp it from 0-125.  who knows.  at any rate, that can all be done
 *  here.
 **************************************************************************/
void PID::SetOutputLimits(double Min, double Max)
{
    1a56:	2f 92       	push	r2
    1a58:	3f 92       	push	r3
    1a5a:	4f 92       	push	r4
    1a5c:	5f 92       	push	r5
    1a5e:	6f 92       	push	r6
    1a60:	7f 92       	push	r7
    1a62:	8f 92       	push	r8
    1a64:	9f 92       	push	r9
    1a66:	af 92       	push	r10
    1a68:	bf 92       	push	r11
    1a6a:	cf 92       	push	r12
    1a6c:	df 92       	push	r13
    1a6e:	ef 92       	push	r14
    1a70:	ff 92       	push	r15
    1a72:	0f 93       	push	r16
    1a74:	1f 93       	push	r17
    1a76:	cf 93       	push	r28
    1a78:	df 93       	push	r29
    1a7a:	ec 01       	movw	r28, r24
    1a7c:	6a 01       	movw	r12, r20
    1a7e:	7b 01       	movw	r14, r22
    1a80:	48 01       	movw	r8, r16
    1a82:	59 01       	movw	r10, r18
   if(Min >= Max) return;
    1a84:	a9 01       	movw	r20, r18
    1a86:	98 01       	movw	r18, r16
    1a88:	c7 01       	movw	r24, r14
    1a8a:	b6 01       	movw	r22, r12
    1a8c:	0e 94 3e 19 	call	0x327c	; 0x327c <__gesf2>
    1a90:	87 ff       	sbrs	r24, 7
    1a92:	4e c0       	rjmp	.+156    	; 0x1b30 <_ZN3PID15SetOutputLimitsEdd+0xda>
   outMin = Min;
    1a94:	ca aa       	std	Y+50, r12	; 0x32
    1a96:	db aa       	std	Y+51, r13	; 0x33
    1a98:	ec aa       	std	Y+52, r14	; 0x34
    1a9a:	fd aa       	std	Y+53, r15	; 0x35
   outMax = Max;
    1a9c:	8e aa       	std	Y+54, r8	; 0x36
    1a9e:	9f aa       	std	Y+55, r9	; 0x37
    1aa0:	a8 ae       	std	Y+56, r10	; 0x38
    1aa2:	b9 ae       	std	Y+57, r11	; 0x39

   if(inAuto)
    1aa4:	8a ad       	ldd	r24, Y+58	; 0x3a
    1aa6:	88 23       	and	r24, r24
    1aa8:	09 f4       	brne	.+2      	; 0x1aac <_ZN3PID15SetOutputLimitsEdd+0x56>
    1aaa:	42 c0       	rjmp	.+132    	; 0x1b30 <_ZN3PID15SetOutputLimitsEdd+0xda>
   {
	   if(*myOutput > outMax) *myOutput = outMax;
    1aac:	2e 8c       	ldd	r2, Y+30	; 0x1e
    1aae:	3f 8c       	ldd	r3, Y+31	; 0x1f
    1ab0:	f1 01       	movw	r30, r2
    1ab2:	40 80       	ld	r4, Z
    1ab4:	51 80       	ldd	r5, Z+1	; 0x01
    1ab6:	62 80       	ldd	r6, Z+2	; 0x02
    1ab8:	73 80       	ldd	r7, Z+3	; 0x03
    1aba:	a3 01       	movw	r20, r6
    1abc:	92 01       	movw	r18, r4
    1abe:	c5 01       	movw	r24, r10
    1ac0:	b4 01       	movw	r22, r8
    1ac2:	0e 94 b8 17 	call	0x2f70	; 0x2f70 <__cmpsf2>
    1ac6:	87 ff       	sbrs	r24, 7
    1ac8:	06 c0       	rjmp	.+12     	; 0x1ad6 <_ZN3PID15SetOutputLimitsEdd+0x80>
    1aca:	f1 01       	movw	r30, r2
    1acc:	80 82       	st	Z, r8
    1ace:	91 82       	std	Z+1, r9	; 0x01
    1ad0:	a2 82       	std	Z+2, r10	; 0x02
    1ad2:	b3 82       	std	Z+3, r11	; 0x03
    1ad4:	0d c0       	rjmp	.+26     	; 0x1af0 <_ZN3PID15SetOutputLimitsEdd+0x9a>
	   else if(*myOutput < outMin) *myOutput = outMin;
    1ad6:	a3 01       	movw	r20, r6
    1ad8:	92 01       	movw	r18, r4
    1ada:	c7 01       	movw	r24, r14
    1adc:	b6 01       	movw	r22, r12
    1ade:	0e 94 3e 19 	call	0x327c	; 0x327c <__gesf2>
    1ae2:	18 16       	cp	r1, r24
    1ae4:	2c f4       	brge	.+10     	; 0x1af0 <_ZN3PID15SetOutputLimitsEdd+0x9a>
    1ae6:	f1 01       	movw	r30, r2
    1ae8:	c0 82       	st	Z, r12
    1aea:	d1 82       	std	Z+1, r13	; 0x01
    1aec:	e2 82       	std	Z+2, r14	; 0x02
    1aee:	f3 82       	std	Z+3, r15	; 0x03

	   if(outputSum > outMax) outputSum= outMax;
    1af0:	8e a0       	ldd	r8, Y+38	; 0x26
    1af2:	9f a0       	ldd	r9, Y+39	; 0x27
    1af4:	a8 a4       	ldd	r10, Y+40	; 0x28
    1af6:	b9 a4       	ldd	r11, Y+41	; 0x29
    1af8:	ce a8       	ldd	r12, Y+54	; 0x36
    1afa:	df a8       	ldd	r13, Y+55	; 0x37
    1afc:	e8 ac       	ldd	r14, Y+56	; 0x38
    1afe:	f9 ac       	ldd	r15, Y+57	; 0x39
    1b00:	a7 01       	movw	r20, r14
    1b02:	96 01       	movw	r18, r12
    1b04:	c5 01       	movw	r24, r10
    1b06:	b4 01       	movw	r22, r8
    1b08:	0e 94 3e 19 	call	0x327c	; 0x327c <__gesf2>
    1b0c:	18 16       	cp	r1, r24
    1b0e:	64 f0       	brlt	.+24     	; 0x1b28 <_ZN3PID15SetOutputLimitsEdd+0xd2>
	   else if(outputSum < outMin) outputSum= outMin;
    1b10:	ca a8       	ldd	r12, Y+50	; 0x32
    1b12:	db a8       	ldd	r13, Y+51	; 0x33
    1b14:	ec a8       	ldd	r14, Y+52	; 0x34
    1b16:	fd a8       	ldd	r15, Y+53	; 0x35
    1b18:	a7 01       	movw	r20, r14
    1b1a:	96 01       	movw	r18, r12
    1b1c:	c5 01       	movw	r24, r10
    1b1e:	b4 01       	movw	r22, r8
    1b20:	0e 94 b8 17 	call	0x2f70	; 0x2f70 <__cmpsf2>
    1b24:	87 ff       	sbrs	r24, 7
    1b26:	04 c0       	rjmp	.+8      	; 0x1b30 <_ZN3PID15SetOutputLimitsEdd+0xda>
    1b28:	ce a2       	std	Y+38, r12	; 0x26
    1b2a:	df a2       	std	Y+39, r13	; 0x27
    1b2c:	e8 a6       	std	Y+40, r14	; 0x28
    1b2e:	f9 a6       	std	Y+41, r15	; 0x29
   }
}
    1b30:	df 91       	pop	r29
    1b32:	cf 91       	pop	r28
    1b34:	1f 91       	pop	r17
    1b36:	0f 91       	pop	r16
    1b38:	ff 90       	pop	r15
    1b3a:	ef 90       	pop	r14
    1b3c:	df 90       	pop	r13
    1b3e:	cf 90       	pop	r12
    1b40:	bf 90       	pop	r11
    1b42:	af 90       	pop	r10
    1b44:	9f 90       	pop	r9
    1b46:	8f 90       	pop	r8
    1b48:	7f 90       	pop	r7
    1b4a:	6f 90       	pop	r6
    1b4c:	5f 90       	pop	r5
    1b4e:	4f 90       	pop	r4
    1b50:	3f 90       	pop	r3
    1b52:	2f 90       	pop	r2
    1b54:	08 95       	ret

00001b56 <_ZN3PID10InitializeEv>:
/* Initialize()****************************************************************
 *	does all the things that need to happen to ensure a bumpless transfer
 *  from manual to automatic mode.
 ******************************************************************************/
void PID::Initialize()
{
    1b56:	8f 92       	push	r8
    1b58:	9f 92       	push	r9
    1b5a:	af 92       	push	r10
    1b5c:	bf 92       	push	r11
    1b5e:	cf 92       	push	r12
    1b60:	df 92       	push	r13
    1b62:	ef 92       	push	r14
    1b64:	ff 92       	push	r15
    1b66:	cf 93       	push	r28
    1b68:	df 93       	push	r29
    1b6a:	ec 01       	movw	r28, r24
   outputSum = *myOutput;
    1b6c:	ee 8d       	ldd	r30, Y+30	; 0x1e
    1b6e:	ff 8d       	ldd	r31, Y+31	; 0x1f
    1b70:	c0 80       	ld	r12, Z
    1b72:	d1 80       	ldd	r13, Z+1	; 0x01
    1b74:	e2 80       	ldd	r14, Z+2	; 0x02
    1b76:	f3 80       	ldd	r15, Z+3	; 0x03
    1b78:	ce a2       	std	Y+38, r12	; 0x26
    1b7a:	df a2       	std	Y+39, r13	; 0x27
    1b7c:	e8 a6       	std	Y+40, r14	; 0x28
    1b7e:	f9 a6       	std	Y+41, r15	; 0x29
   lastInput = *myInput;
    1b80:	ec 8d       	ldd	r30, Y+28	; 0x1c
    1b82:	fd 8d       	ldd	r31, Y+29	; 0x1d
    1b84:	80 81       	ld	r24, Z
    1b86:	91 81       	ldd	r25, Z+1	; 0x01
    1b88:	a2 81       	ldd	r26, Z+2	; 0x02
    1b8a:	b3 81       	ldd	r27, Z+3	; 0x03
    1b8c:	8a a7       	std	Y+42, r24	; 0x2a
    1b8e:	9b a7       	std	Y+43, r25	; 0x2b
    1b90:	ac a7       	std	Y+44, r26	; 0x2c
    1b92:	bd a7       	std	Y+45, r27	; 0x2d
   if(outputSum > outMax) outputSum = outMax;
    1b94:	8e a8       	ldd	r8, Y+54	; 0x36
    1b96:	9f a8       	ldd	r9, Y+55	; 0x37
    1b98:	a8 ac       	ldd	r10, Y+56	; 0x38
    1b9a:	b9 ac       	ldd	r11, Y+57	; 0x39
    1b9c:	a5 01       	movw	r20, r10
    1b9e:	94 01       	movw	r18, r8
    1ba0:	c7 01       	movw	r24, r14
    1ba2:	b6 01       	movw	r22, r12
    1ba4:	0e 94 3e 19 	call	0x327c	; 0x327c <__gesf2>
    1ba8:	18 16       	cp	r1, r24
    1baa:	64 f0       	brlt	.+24     	; 0x1bc4 <_ZN3PID10InitializeEv+0x6e>
   else if(outputSum < outMin) outputSum = outMin;
    1bac:	8a a8       	ldd	r8, Y+50	; 0x32
    1bae:	9b a8       	ldd	r9, Y+51	; 0x33
    1bb0:	ac a8       	ldd	r10, Y+52	; 0x34
    1bb2:	bd a8       	ldd	r11, Y+53	; 0x35
    1bb4:	a5 01       	movw	r20, r10
    1bb6:	94 01       	movw	r18, r8
    1bb8:	c7 01       	movw	r24, r14
    1bba:	b6 01       	movw	r22, r12
    1bbc:	0e 94 b8 17 	call	0x2f70	; 0x2f70 <__cmpsf2>
    1bc0:	87 ff       	sbrs	r24, 7
    1bc2:	04 c0       	rjmp	.+8      	; 0x1bcc <_ZN3PID10InitializeEv+0x76>
    1bc4:	8e a2       	std	Y+38, r8	; 0x26
    1bc6:	9f a2       	std	Y+39, r9	; 0x27
    1bc8:	a8 a6       	std	Y+40, r10	; 0x28
    1bca:	b9 a6       	std	Y+41, r11	; 0x29
}
    1bcc:	df 91       	pop	r29
    1bce:	cf 91       	pop	r28
    1bd0:	ff 90       	pop	r15
    1bd2:	ef 90       	pop	r14
    1bd4:	df 90       	pop	r13
    1bd6:	cf 90       	pop	r12
    1bd8:	bf 90       	pop	r11
    1bda:	af 90       	pop	r10
    1bdc:	9f 90       	pop	r9
    1bde:	8f 90       	pop	r8
    1be0:	08 95       	ret

00001be2 <_ZN3PID7SetModeEi>:
 * Allows the controller Mode to be set to manual (0) or Automatic (non-zero)
 * when the transition from manual to auto occurs, the controller is
 * automatically initialized
 ******************************************************************************/
void PID::SetMode(int Mode)
{
    1be2:	1f 93       	push	r17
    1be4:	cf 93       	push	r28
    1be6:	df 93       	push	r29
    1be8:	ec 01       	movw	r28, r24
    bool newAuto = (Mode == AUTOMATIC);
    1bea:	11 e0       	ldi	r17, 0x01	; 1
    1bec:	61 30       	cpi	r22, 0x01	; 1
    1bee:	71 05       	cpc	r23, r1
    1bf0:	09 f0       	breq	.+2      	; 0x1bf4 <_ZN3PID7SetModeEi+0x12>
    1bf2:	10 e0       	ldi	r17, 0x00	; 0
    if(newAuto && !inAuto)
    1bf4:	61 30       	cpi	r22, 0x01	; 1
    1bf6:	71 05       	cpc	r23, r1
    1bf8:	31 f4       	brne	.+12     	; 0x1c06 <_ZN3PID7SetModeEi+0x24>
    1bfa:	8a ad       	ldd	r24, Y+58	; 0x3a
    1bfc:	81 11       	cpse	r24, r1
    1bfe:	03 c0       	rjmp	.+6      	; 0x1c06 <_ZN3PID7SetModeEi+0x24>
    {  /*we just went from manual to auto*/
        PID::Initialize();
    1c00:	ce 01       	movw	r24, r28
    1c02:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <_ZN3PID10InitializeEv>
    }
    inAuto = newAuto;
    1c06:	1a af       	std	Y+58, r17	; 0x3a
}
    1c08:	df 91       	pop	r29
    1c0a:	cf 91       	pop	r28
    1c0c:	1f 91       	pop	r17
    1c0e:	08 95       	ret

00001c10 <_ZN3PID22SetControllerDirectionEi>:
 * to +Input) or a REVERSE acting process(+Output leads to -Input.)  we need to
 * know which one, because otherwise we may increase the output when we should
 * be decreasing.  This is called from the constructor.
 ******************************************************************************/
void PID::SetControllerDirection(int Direction)
{
    1c10:	0f 93       	push	r16
    1c12:	1f 93       	push	r17
    1c14:	cf 93       	push	r28
    1c16:	df 93       	push	r29
    1c18:	ec 01       	movw	r28, r24
    1c1a:	8b 01       	movw	r16, r22
   if(inAuto && Direction !=controllerDirection)
    1c1c:	8a ad       	ldd	r24, Y+58	; 0x3a
    1c1e:	88 23       	and	r24, r24
    1c20:	61 f1       	breq	.+88     	; 0x1c7a <_ZN3PID22SetControllerDirectionEi+0x6a>
    1c22:	88 8d       	ldd	r24, Y+24	; 0x18
    1c24:	99 8d       	ldd	r25, Y+25	; 0x19
    1c26:	86 17       	cp	r24, r22
    1c28:	97 07       	cpc	r25, r23
    1c2a:	39 f1       	breq	.+78     	; 0x1c7a <_ZN3PID22SetControllerDirectionEi+0x6a>
   {
	    kp = (0 - kp);
    1c2c:	2c 85       	ldd	r18, Y+12	; 0x0c
    1c2e:	3d 85       	ldd	r19, Y+13	; 0x0d
    1c30:	4e 85       	ldd	r20, Y+14	; 0x0e
    1c32:	5f 85       	ldd	r21, Y+15	; 0x0f
    1c34:	60 e0       	ldi	r22, 0x00	; 0
    1c36:	70 e0       	ldi	r23, 0x00	; 0
    1c38:	cb 01       	movw	r24, r22
    1c3a:	0e 94 d9 16 	call	0x2db2	; 0x2db2 <__subsf3>
    1c3e:	6c 87       	std	Y+12, r22	; 0x0c
    1c40:	7d 87       	std	Y+13, r23	; 0x0d
    1c42:	8e 87       	std	Y+14, r24	; 0x0e
    1c44:	9f 87       	std	Y+15, r25	; 0x0f
      ki = (0 - ki);
    1c46:	28 89       	ldd	r18, Y+16	; 0x10
    1c48:	39 89       	ldd	r19, Y+17	; 0x11
    1c4a:	4a 89       	ldd	r20, Y+18	; 0x12
    1c4c:	5b 89       	ldd	r21, Y+19	; 0x13
    1c4e:	60 e0       	ldi	r22, 0x00	; 0
    1c50:	70 e0       	ldi	r23, 0x00	; 0
    1c52:	cb 01       	movw	r24, r22
    1c54:	0e 94 d9 16 	call	0x2db2	; 0x2db2 <__subsf3>
    1c58:	68 8b       	std	Y+16, r22	; 0x10
    1c5a:	79 8b       	std	Y+17, r23	; 0x11
    1c5c:	8a 8b       	std	Y+18, r24	; 0x12
    1c5e:	9b 8b       	std	Y+19, r25	; 0x13
      kd = (0 - kd);
    1c60:	2c 89       	ldd	r18, Y+20	; 0x14
    1c62:	3d 89       	ldd	r19, Y+21	; 0x15
    1c64:	4e 89       	ldd	r20, Y+22	; 0x16
    1c66:	5f 89       	ldd	r21, Y+23	; 0x17
    1c68:	60 e0       	ldi	r22, 0x00	; 0
    1c6a:	70 e0       	ldi	r23, 0x00	; 0
    1c6c:	cb 01       	movw	r24, r22
    1c6e:	0e 94 d9 16 	call	0x2db2	; 0x2db2 <__subsf3>
    1c72:	6c 8b       	std	Y+20, r22	; 0x14
    1c74:	7d 8b       	std	Y+21, r23	; 0x15
    1c76:	8e 8b       	std	Y+22, r24	; 0x16
    1c78:	9f 8b       	std	Y+23, r25	; 0x17
   }
   controllerDirection = Direction;
    1c7a:	19 8f       	std	Y+25, r17	; 0x19
    1c7c:	08 8f       	std	Y+24, r16	; 0x18
}
    1c7e:	df 91       	pop	r29
    1c80:	cf 91       	pop	r28
    1c82:	1f 91       	pop	r17
    1c84:	0f 91       	pop	r16
    1c86:	08 95       	ret

00001c88 <_ZN3PIDC1EPdS0_S0_dddii>:

/*Constructor (...)*********************************************************
 *    The parameters specified here are those for for which we can't set up
 *    reliable defaults, so we need to have the user set them.
 ***************************************************************************/
PID::PID(double* Input, double* Output, double* Setpoint,
    1c88:	4f 92       	push	r4
    1c8a:	5f 92       	push	r5
    1c8c:	6f 92       	push	r6
    1c8e:	7f 92       	push	r7
    1c90:	8f 92       	push	r8
    1c92:	9f 92       	push	r9
    1c94:	af 92       	push	r10
    1c96:	bf 92       	push	r11
    1c98:	cf 92       	push	r12
    1c9a:	df 92       	push	r13
    1c9c:	ef 92       	push	r14
    1c9e:	ff 92       	push	r15
    1ca0:	0f 93       	push	r16
    1ca2:	1f 93       	push	r17
    1ca4:	cf 93       	push	r28
    1ca6:	df 93       	push	r29
    1ca8:	00 d0       	rcall	.+0      	; 0x1caa <_ZN3PIDC1EPdS0_S0_dddii+0x22>
    1caa:	00 d0       	rcall	.+0      	; 0x1cac <_ZN3PIDC1EPdS0_S0_dddii+0x24>
    1cac:	cd b7       	in	r28, 0x3d	; 61
    1cae:	de b7       	in	r29, 0x3e	; 62
    1cb0:	4c 01       	movw	r8, r24
    1cb2:	27 01       	movw	r4, r14
    1cb4:	38 01       	movw	r6, r16
    1cb6:	a9 82       	std	Y+1, r10	; 0x01
    1cb8:	ba 82       	std	Y+2, r11	; 0x02
    1cba:	cb 82       	std	Y+3, r12	; 0x03
    1cbc:	dc 82       	std	Y+4, r13	; 0x04
        double Kp, double Ki, double Kd, int POn, int ControllerDirection)
{
    myOutput = Output;
    1cbe:	fc 01       	movw	r30, r24
    1cc0:	57 8f       	std	Z+31, r21	; 0x1f
    1cc2:	46 8f       	std	Z+30, r20	; 0x1e
    myInput = Input;
    1cc4:	75 8f       	std	Z+29, r23	; 0x1d
    1cc6:	64 8f       	std	Z+28, r22	; 0x1c
    mySetpoint = Setpoint;
    1cc8:	31 a3       	std	Z+33, r19	; 0x21
    1cca:	20 a3       	std	Z+32, r18	; 0x20
    inAuto = false;
    1ccc:	12 ae       	std	Z+58, r1	; 0x3a
 *  here.
 **************************************************************************/
void PID::SetOutputLimits(double Min, double Max)
{
   if(Min >= Max) return;
   outMin = Min;
    1cce:	12 aa       	std	Z+50, r1	; 0x32
    1cd0:	13 aa       	std	Z+51, r1	; 0x33
    1cd2:	14 aa       	std	Z+52, r1	; 0x34
    1cd4:	15 aa       	std	Z+53, r1	; 0x35
   outMax = Max;
    1cd6:	80 e0       	ldi	r24, 0x00	; 0
    1cd8:	90 e0       	ldi	r25, 0x00	; 0
    1cda:	af e7       	ldi	r26, 0x7F	; 127
    1cdc:	b3 e4       	ldi	r27, 0x43	; 67
    1cde:	86 ab       	std	Z+54, r24	; 0x36
    1ce0:	97 ab       	std	Z+55, r25	; 0x37
    1ce2:	a0 af       	std	Z+56, r26	; 0x38
    1ce4:	b1 af       	std	Z+57, r27	; 0x39
    inAuto = false;

    PID::SetOutputLimits(0, 255);				//default output limit corresponds to
												//the arduino pwm limits

    SampleTime = 100;							//default Controller Sample Time is 0.1 seconds
    1ce6:	84 e6       	ldi	r24, 0x64	; 100
    1ce8:	90 e0       	ldi	r25, 0x00	; 0
    1cea:	a0 e0       	ldi	r26, 0x00	; 0
    1cec:	b0 e0       	ldi	r27, 0x00	; 0
    1cee:	86 a7       	std	Z+46, r24	; 0x2e
    1cf0:	97 a7       	std	Z+47, r25	; 0x2f
    1cf2:	a0 ab       	std	Z+48, r26	; 0x30
    1cf4:	b1 ab       	std	Z+49, r27	; 0x31

    PID::SetControllerDirection(ControllerDirection);
    1cf6:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1cf8:	7e 8d       	ldd	r23, Y+30	; 0x1e
    1cfa:	c4 01       	movw	r24, r8
    1cfc:	0e 94 08 0e 	call	0x1c10	; 0x1c10 <_ZN3PID22SetControllerDirectionEi>
    PID::SetTunings(Kp, Ki, Kd, POn);
    1d00:	ab 8c       	ldd	r10, Y+27	; 0x1b
    1d02:	bc 8c       	ldd	r11, Y+28	; 0x1c
    1d04:	cf 88       	ldd	r12, Y+23	; 0x17
    1d06:	d8 8c       	ldd	r13, Y+24	; 0x18
    1d08:	e9 8c       	ldd	r14, Y+25	; 0x19
    1d0a:	fa 8c       	ldd	r15, Y+26	; 0x1a
    1d0c:	09 81       	ldd	r16, Y+1	; 0x01
    1d0e:	1a 81       	ldd	r17, Y+2	; 0x02
    1d10:	2b 81       	ldd	r18, Y+3	; 0x03
    1d12:	3c 81       	ldd	r19, Y+4	; 0x04
    1d14:	b3 01       	movw	r22, r6
    1d16:	a2 01       	movw	r20, r4
    1d18:	c4 01       	movw	r24, r8
    1d1a:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <_ZN3PID10SetTuningsEdddi>

    lastTime = millis()-SampleTime;
    1d1e:	0e 94 84 1d 	call	0x3b08	; 0x3b08 <millis>
    1d22:	f4 01       	movw	r30, r8
    1d24:	46 a4       	ldd	r4, Z+46	; 0x2e
    1d26:	57 a4       	ldd	r5, Z+47	; 0x2f
    1d28:	60 a8       	ldd	r6, Z+48	; 0x30
    1d2a:	71 a8       	ldd	r7, Z+49	; 0x31
    1d2c:	dc 01       	movw	r26, r24
    1d2e:	cb 01       	movw	r24, r22
    1d30:	84 19       	sub	r24, r4
    1d32:	95 09       	sbc	r25, r5
    1d34:	a6 09       	sbc	r26, r6
    1d36:	b7 09       	sbc	r27, r7
    1d38:	82 a3       	std	Z+34, r24	; 0x22
    1d3a:	93 a3       	std	Z+35, r25	; 0x23
    1d3c:	a4 a3       	std	Z+36, r26	; 0x24
    1d3e:	b5 a3       	std	Z+37, r27	; 0x25
}
    1d40:	0f 90       	pop	r0
    1d42:	0f 90       	pop	r0
    1d44:	0f 90       	pop	r0
    1d46:	0f 90       	pop	r0
    1d48:	df 91       	pop	r29
    1d4a:	cf 91       	pop	r28
    1d4c:	1f 91       	pop	r17
    1d4e:	0f 91       	pop	r16
    1d50:	ff 90       	pop	r15
    1d52:	ef 90       	pop	r14
    1d54:	df 90       	pop	r13
    1d56:	cf 90       	pop	r12
    1d58:	bf 90       	pop	r11
    1d5a:	af 90       	pop	r10
    1d5c:	9f 90       	pop	r9
    1d5e:	8f 90       	pop	r8
    1d60:	7f 90       	pop	r7
    1d62:	6f 90       	pop	r6
    1d64:	5f 90       	pop	r5
    1d66:	4f 90       	pop	r4
    1d68:	08 95       	ret

00001d6a <_ZN6I2Cdev10writeBytesEhhhPh>:
        b &= mask;
        b >>= (bitStart - length + 1);
        *data = b;
    }
    return count;
}
    1d6a:	ff 92       	push	r15
    1d6c:	0f 93       	push	r16
    1d6e:	1f 93       	push	r17
    1d70:	cf 93       	push	r28
    1d72:	df 93       	push	r29
    1d74:	c6 2f       	mov	r28, r22
    1d76:	14 2f       	mov	r17, r20
    1d78:	f2 2e       	mov	r15, r18
    1d7a:	03 2f       	mov	r16, r19
    1d7c:	68 2f       	mov	r22, r24
    1d7e:	84 e1       	ldi	r24, 0x14	; 20
    1d80:	93 e0       	ldi	r25, 0x03	; 3
    1d82:	0e 94 4f 14 	call	0x289e	; 0x289e <_ZN7TwoWire17beginTransmissionEh>
    1d86:	6c 2f       	mov	r22, r28
    1d88:	84 e1       	ldi	r24, 0x14	; 20
    1d8a:	93 e0       	ldi	r25, 0x03	; 3
    1d8c:	0e 94 10 14 	call	0x2820	; 0x2820 <_ZN7TwoWire5writeEh>
    1d90:	cf 2d       	mov	r28, r15
    1d92:	d0 2f       	mov	r29, r16
    1d94:	ce 01       	movw	r24, r28
    1d96:	81 0f       	add	r24, r17
    1d98:	91 1d       	adc	r25, r1
    1d9a:	8c 01       	movw	r16, r24
    1d9c:	c0 17       	cp	r28, r16
    1d9e:	d1 07       	cpc	r29, r17
    1da0:	31 f0       	breq	.+12     	; 0x1dae <_ZN6I2Cdev10writeBytesEhhhPh+0x44>
    1da2:	69 91       	ld	r22, Y+
    1da4:	84 e1       	ldi	r24, 0x14	; 20
    1da6:	93 e0       	ldi	r25, 0x03	; 3
    1da8:	0e 94 10 14 	call	0x2820	; 0x2820 <_ZN7TwoWire5writeEh>
    1dac:	f7 cf       	rjmp	.-18     	; 0x1d9c <_ZN6I2Cdev10writeBytesEhhhPh+0x32>
    1dae:	84 e1       	ldi	r24, 0x14	; 20
    1db0:	93 e0       	ldi	r25, 0x03	; 3
    1db2:	0e 94 d3 14 	call	0x29a6	; 0x29a6 <_ZN7TwoWire15endTransmissionEv>
    1db6:	91 e0       	ldi	r25, 0x01	; 1
    1db8:	81 11       	cpse	r24, r1
    1dba:	90 e0       	ldi	r25, 0x00	; 0
    1dbc:	89 2f       	mov	r24, r25
    1dbe:	df 91       	pop	r29
    1dc0:	cf 91       	pop	r28
    1dc2:	1f 91       	pop	r17
    1dc4:	0f 91       	pop	r16
    1dc6:	ff 90       	pop	r15
    1dc8:	08 95       	ret

00001dca <_ZN6I2Cdev9writeByteEhhh>:
    1dca:	cf 93       	push	r28
    1dcc:	df 93       	push	r29
    1dce:	1f 92       	push	r1
    1dd0:	cd b7       	in	r28, 0x3d	; 61
    1dd2:	de b7       	in	r29, 0x3e	; 62
    1dd4:	49 83       	std	Y+1, r20	; 0x01
    1dd6:	9e 01       	movw	r18, r28
    1dd8:	2f 5f       	subi	r18, 0xFF	; 255
    1dda:	3f 4f       	sbci	r19, 0xFF	; 255
    1ddc:	41 e0       	ldi	r20, 0x01	; 1
    1dde:	0e 94 b5 0e 	call	0x1d6a	; 0x1d6a <_ZN6I2Cdev10writeBytesEhhhPh>
    1de2:	0f 90       	pop	r0
    1de4:	df 91       	pop	r29
    1de6:	cf 91       	pop	r28
    1de8:	08 95       	ret

00001dea <_ZN6I2Cdev10writeWordsEhhhPj>:
    1dea:	cf 92       	push	r12
    1dec:	df 92       	push	r13
    1dee:	ff 92       	push	r15
    1df0:	0f 93       	push	r16
    1df2:	1f 93       	push	r17
    1df4:	cf 93       	push	r28
    1df6:	df 93       	push	r29
    1df8:	c6 2f       	mov	r28, r22
    1dfa:	04 2f       	mov	r16, r20
    1dfc:	69 01       	movw	r12, r18
    1dfe:	68 2f       	mov	r22, r24
    1e00:	84 e1       	ldi	r24, 0x14	; 20
    1e02:	93 e0       	ldi	r25, 0x03	; 3
    1e04:	0e 94 4f 14 	call	0x289e	; 0x289e <_ZN7TwoWire17beginTransmissionEh>
    1e08:	6c 2f       	mov	r22, r28
    1e0a:	84 e1       	ldi	r24, 0x14	; 20
    1e0c:	93 e0       	ldi	r25, 0x03	; 3
    1e0e:	0e 94 10 14 	call	0x2820	; 0x2820 <_ZN7TwoWire5writeEh>
    1e12:	10 e0       	ldi	r17, 0x00	; 0
    1e14:	00 0f       	add	r16, r16
    1e16:	11 1f       	adc	r17, r17
    1e18:	f1 2c       	mov	r15, r1
    1e1a:	cf 2d       	mov	r28, r15
    1e1c:	d0 e0       	ldi	r29, 0x00	; 0
    1e1e:	c0 17       	cp	r28, r16
    1e20:	d1 07       	cpc	r29, r17
    1e22:	8c f4       	brge	.+34     	; 0x1e46 <_ZN6I2Cdev10writeWordsEhhhPj+0x5c>
    1e24:	cc 0f       	add	r28, r28
    1e26:	dd 1f       	adc	r29, r29
    1e28:	cc 0d       	add	r28, r12
    1e2a:	dd 1d       	adc	r29, r13
    1e2c:	69 81       	ldd	r22, Y+1	; 0x01
    1e2e:	84 e1       	ldi	r24, 0x14	; 20
    1e30:	93 e0       	ldi	r25, 0x03	; 3
    1e32:	0e 94 10 14 	call	0x2820	; 0x2820 <_ZN7TwoWire5writeEh>
    1e36:	68 81       	ld	r22, Y
    1e38:	84 e1       	ldi	r24, 0x14	; 20
    1e3a:	93 e0       	ldi	r25, 0x03	; 3
    1e3c:	0e 94 10 14 	call	0x2820	; 0x2820 <_ZN7TwoWire5writeEh>
    1e40:	f3 94       	inc	r15
    1e42:	f3 94       	inc	r15
    1e44:	ea cf       	rjmp	.-44     	; 0x1e1a <_ZN6I2Cdev10writeWordsEhhhPj+0x30>
    1e46:	84 e1       	ldi	r24, 0x14	; 20
    1e48:	93 e0       	ldi	r25, 0x03	; 3
    1e4a:	0e 94 d3 14 	call	0x29a6	; 0x29a6 <_ZN7TwoWire15endTransmissionEv>
    1e4e:	91 e0       	ldi	r25, 0x01	; 1
    1e50:	81 11       	cpse	r24, r1
    1e52:	90 e0       	ldi	r25, 0x00	; 0
    1e54:	89 2f       	mov	r24, r25
    1e56:	df 91       	pop	r29
    1e58:	cf 91       	pop	r28
    1e5a:	1f 91       	pop	r17
    1e5c:	0f 91       	pop	r16
    1e5e:	ff 90       	pop	r15
    1e60:	df 90       	pop	r13
    1e62:	cf 90       	pop	r12
    1e64:	08 95       	ret

00001e66 <_ZN6I2Cdev9writeWordEhhj>:
    1e66:	cf 93       	push	r28
    1e68:	df 93       	push	r29
    1e6a:	00 d0       	rcall	.+0      	; 0x1e6c <_ZN6I2Cdev9writeWordEhhj+0x6>
    1e6c:	cd b7       	in	r28, 0x3d	; 61
    1e6e:	de b7       	in	r29, 0x3e	; 62
    1e70:	5a 83       	std	Y+2, r21	; 0x02
    1e72:	49 83       	std	Y+1, r20	; 0x01
    1e74:	9e 01       	movw	r18, r28
    1e76:	2f 5f       	subi	r18, 0xFF	; 255
    1e78:	3f 4f       	sbci	r19, 0xFF	; 255
    1e7a:	41 e0       	ldi	r20, 0x01	; 1
    1e7c:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <_ZN6I2Cdev10writeWordsEhhhPj>
    1e80:	0f 90       	pop	r0
    1e82:	0f 90       	pop	r0
    1e84:	df 91       	pop	r29
    1e86:	cf 91       	pop	r28
    1e88:	08 95       	ret

00001e8a <_ZN6I2Cdev9readBytesEhhhPhj>:
    1e8a:	3f 92       	push	r3
    1e8c:	4f 92       	push	r4
    1e8e:	5f 92       	push	r5
    1e90:	6f 92       	push	r6
    1e92:	7f 92       	push	r7
    1e94:	8f 92       	push	r8
    1e96:	9f 92       	push	r9
    1e98:	af 92       	push	r10
    1e9a:	bf 92       	push	r11
    1e9c:	cf 92       	push	r12
    1e9e:	df 92       	push	r13
    1ea0:	ef 92       	push	r14
    1ea2:	ff 92       	push	r15
    1ea4:	0f 93       	push	r16
    1ea6:	1f 93       	push	r17
    1ea8:	cf 93       	push	r28
    1eaa:	df 93       	push	r29
    1eac:	00 d0       	rcall	.+0      	; 0x1eae <_ZN6I2Cdev9readBytesEhhhPhj+0x24>
    1eae:	00 d0       	rcall	.+0      	; 0x1eb0 <_ZN6I2Cdev9readBytesEhhhPhj+0x26>
    1eb0:	00 d0       	rcall	.+0      	; 0x1eb2 <_ZN6I2Cdev9readBytesEhhhPhj+0x28>
    1eb2:	cd b7       	in	r28, 0x3d	; 61
    1eb4:	de b7       	in	r29, 0x3e	; 62
    1eb6:	d8 2e       	mov	r13, r24
    1eb8:	c6 2e       	mov	r12, r22
    1eba:	4d 83       	std	Y+5, r20	; 0x05
    1ebc:	79 01       	movw	r14, r18
    1ebe:	0e 94 84 1d 	call	0x3b08	; 0x3b08 <millis>
    1ec2:	4b 01       	movw	r8, r22
    1ec4:	5c 01       	movw	r10, r24
    1ec6:	31 2c       	mov	r3, r1
    1ec8:	1e 82       	std	Y+6, r1	; 0x06
    1eca:	9d 81       	ldd	r25, Y+5	; 0x05
    1ecc:	89 2f       	mov	r24, r25
    1ece:	90 e0       	ldi	r25, 0x00	; 0
    1ed0:	9c 83       	std	Y+4, r25	; 0x04
    1ed2:	8b 83       	std	Y+3, r24	; 0x03
    1ed4:	28 01       	movw	r4, r16
    1ed6:	61 2c       	mov	r6, r1
    1ed8:	71 2c       	mov	r7, r1
    1eda:	ed 81       	ldd	r30, Y+5	; 0x05
    1edc:	3e 16       	cp	r3, r30
    1ede:	c8 f5       	brcc	.+114    	; 0x1f52 <_ZN6I2Cdev9readBytesEhhhPhj+0xc8>
    1ee0:	6d 2d       	mov	r22, r13
    1ee2:	84 e1       	ldi	r24, 0x14	; 20
    1ee4:	93 e0       	ldi	r25, 0x03	; 3
    1ee6:	0e 94 4f 14 	call	0x289e	; 0x289e <_ZN7TwoWire17beginTransmissionEh>
    1eea:	6c 2d       	mov	r22, r12
    1eec:	84 e1       	ldi	r24, 0x14	; 20
    1eee:	93 e0       	ldi	r25, 0x03	; 3
    1ef0:	0e 94 10 14 	call	0x2820	; 0x2820 <_ZN7TwoWire5writeEh>
    1ef4:	84 e1       	ldi	r24, 0x14	; 20
    1ef6:	93 e0       	ldi	r25, 0x03	; 3
    1ef8:	0e 94 d3 14 	call	0x29a6	; 0x29a6 <_ZN7TwoWire15endTransmissionEv>
    1efc:	6d 2d       	mov	r22, r13
    1efe:	84 e1       	ldi	r24, 0x14	; 20
    1f00:	93 e0       	ldi	r25, 0x03	; 3
    1f02:	0e 94 4f 14 	call	0x289e	; 0x289e <_ZN7TwoWire17beginTransmissionEh>
    1f06:	4b 81       	ldd	r20, Y+3	; 0x03
    1f08:	5c 81       	ldd	r21, Y+4	; 0x04
    1f0a:	43 19       	sub	r20, r3
    1f0c:	51 09       	sbc	r21, r1
    1f0e:	41 32       	cpi	r20, 0x21	; 33
    1f10:	51 05       	cpc	r21, r1
    1f12:	14 f0       	brlt	.+4      	; 0x1f18 <_ZN6I2Cdev9readBytesEhhhPhj+0x8e>
    1f14:	40 e2       	ldi	r20, 0x20	; 32
    1f16:	50 e0       	ldi	r21, 0x00	; 0
    1f18:	6d 2d       	mov	r22, r13
    1f1a:	84 e1       	ldi	r24, 0x14	; 20
    1f1c:	93 e0       	ldi	r25, 0x03	; 3
    1f1e:	0e 94 d0 14 	call	0x29a0	; 0x29a0 <_ZN7TwoWire11requestFromEhh>
    1f22:	84 e1       	ldi	r24, 0x14	; 20
    1f24:	93 e0       	ldi	r25, 0x03	; 3
    1f26:	0e 94 b7 13 	call	0x276e	; 0x276e <_ZN7TwoWire9availableEv>
    1f2a:	89 2b       	or	r24, r25
    1f2c:	09 f4       	brne	.+2      	; 0x1f30 <_ZN6I2Cdev9readBytesEhhhPhj+0xa6>
    1f2e:	43 c0       	rjmp	.+134    	; 0x1fb6 <_ZN6I2Cdev9readBytesEhhhPhj+0x12c>
    1f30:	01 15       	cp	r16, r1
    1f32:	11 05       	cpc	r17, r1
    1f34:	69 f1       	breq	.+90     	; 0x1f90 <_ZN6I2Cdev9readBytesEhhhPhj+0x106>
    1f36:	0e 94 84 1d 	call	0x3b08	; 0x3b08 <millis>
    1f3a:	dc 01       	movw	r26, r24
    1f3c:	cb 01       	movw	r24, r22
    1f3e:	88 19       	sub	r24, r8
    1f40:	99 09       	sbc	r25, r9
    1f42:	aa 09       	sbc	r26, r10
    1f44:	bb 09       	sbc	r27, r11
    1f46:	84 15       	cp	r24, r4
    1f48:	95 05       	cpc	r25, r5
    1f4a:	a6 05       	cpc	r26, r6
    1f4c:	b7 05       	cpc	r27, r7
    1f4e:	00 f1       	brcs	.+64     	; 0x1f90 <_ZN6I2Cdev9readBytesEhhhPhj+0x106>
    1f50:	32 c0       	rjmp	.+100    	; 0x1fb6 <_ZN6I2Cdev9readBytesEhhhPhj+0x12c>
    1f52:	01 15       	cp	r16, r1
    1f54:	11 05       	cpc	r17, r1
    1f56:	a9 f1       	breq	.+106    	; 0x1fc2 <_ZN6I2Cdev9readBytesEhhhPhj+0x138>
    1f58:	0e 94 84 1d 	call	0x3b08	; 0x3b08 <millis>
    1f5c:	dc 01       	movw	r26, r24
    1f5e:	cb 01       	movw	r24, r22
    1f60:	88 19       	sub	r24, r8
    1f62:	99 09       	sbc	r25, r9
    1f64:	aa 09       	sbc	r26, r10
    1f66:	bb 09       	sbc	r27, r11
    1f68:	20 e0       	ldi	r18, 0x00	; 0
    1f6a:	30 e0       	ldi	r19, 0x00	; 0
    1f6c:	80 17       	cp	r24, r16
    1f6e:	91 07       	cpc	r25, r17
    1f70:	a2 07       	cpc	r26, r18
    1f72:	b3 07       	cpc	r27, r19
    1f74:	30 f1       	brcs	.+76     	; 0x1fc2 <_ZN6I2Cdev9readBytesEhhhPhj+0x138>
    1f76:	fd 81       	ldd	r31, Y+5	; 0x05
    1f78:	2f 2f       	mov	r18, r31
    1f7a:	30 e0       	ldi	r19, 0x00	; 0
    1f7c:	4e 81       	ldd	r20, Y+6	; 0x06
    1f7e:	84 2f       	mov	r24, r20
    1f80:	44 0f       	add	r20, r20
    1f82:	99 0b       	sbc	r25, r25
    1f84:	82 17       	cp	r24, r18
    1f86:	93 07       	cpc	r25, r19
    1f88:	e4 f4       	brge	.+56     	; 0x1fc2 <_ZN6I2Cdev9readBytesEhhhPhj+0x138>
    1f8a:	8f ef       	ldi	r24, 0xFF	; 255
    1f8c:	8e 83       	std	Y+6, r24	; 0x06
    1f8e:	19 c0       	rjmp	.+50     	; 0x1fc2 <_ZN6I2Cdev9readBytesEhhhPhj+0x138>
    1f90:	f7 01       	movw	r30, r14
    1f92:	2e 81       	ldd	r18, Y+6	; 0x06
    1f94:	e2 0f       	add	r30, r18
    1f96:	f1 1d       	adc	r31, r1
    1f98:	27 fd       	sbrc	r18, 7
    1f9a:	fa 95       	dec	r31
    1f9c:	fa 83       	std	Y+2, r31	; 0x02
    1f9e:	e9 83       	std	Y+1, r30	; 0x01
    1fa0:	84 e1       	ldi	r24, 0x14	; 20
    1fa2:	93 e0       	ldi	r25, 0x03	; 3
    1fa4:	0e 94 bf 13 	call	0x277e	; 0x277e <_ZN7TwoWire4readEv>
    1fa8:	e9 81       	ldd	r30, Y+1	; 0x01
    1faa:	fa 81       	ldd	r31, Y+2	; 0x02
    1fac:	80 83       	st	Z, r24
    1fae:	fe 81       	ldd	r31, Y+6	; 0x06
    1fb0:	ff 5f       	subi	r31, 0xFF	; 255
    1fb2:	fe 83       	std	Y+6, r31	; 0x06
    1fb4:	b6 cf       	rjmp	.-148    	; 0x1f22 <_ZN6I2Cdev9readBytesEhhhPhj+0x98>
    1fb6:	8d 81       	ldd	r24, Y+5	; 0x05
    1fb8:	81 32       	cpi	r24, 0x21	; 33
    1fba:	08 f0       	brcs	.+2      	; 0x1fbe <_ZN6I2Cdev9readBytesEhhhPhj+0x134>
    1fbc:	80 e2       	ldi	r24, 0x20	; 32
    1fbe:	38 0e       	add	r3, r24
    1fc0:	8c cf       	rjmp	.-232    	; 0x1eda <_ZN6I2Cdev9readBytesEhhhPhj+0x50>
    1fc2:	8e 81       	ldd	r24, Y+6	; 0x06
    1fc4:	26 96       	adiw	r28, 0x06	; 6
    1fc6:	0f b6       	in	r0, 0x3f	; 63
    1fc8:	f8 94       	cli
    1fca:	de bf       	out	0x3e, r29	; 62
    1fcc:	0f be       	out	0x3f, r0	; 63
    1fce:	cd bf       	out	0x3d, r28	; 61
    1fd0:	df 91       	pop	r29
    1fd2:	cf 91       	pop	r28
    1fd4:	1f 91       	pop	r17
    1fd6:	0f 91       	pop	r16
    1fd8:	ff 90       	pop	r15
    1fda:	ef 90       	pop	r14
    1fdc:	df 90       	pop	r13
    1fde:	cf 90       	pop	r12
    1fe0:	bf 90       	pop	r11
    1fe2:	af 90       	pop	r10
    1fe4:	9f 90       	pop	r9
    1fe6:	8f 90       	pop	r8
    1fe8:	7f 90       	pop	r7
    1fea:	6f 90       	pop	r6
    1fec:	5f 90       	pop	r5
    1fee:	4f 90       	pop	r4
    1ff0:	3f 90       	pop	r3
    1ff2:	08 95       	ret

00001ff4 <_ZN6I2Cdev8readByteEhhPhj>:
    1ff4:	0f 93       	push	r16
    1ff6:	1f 93       	push	r17
    1ff8:	89 01       	movw	r16, r18
    1ffa:	9a 01       	movw	r18, r20
    1ffc:	41 e0       	ldi	r20, 0x01	; 1
    1ffe:	0e 94 45 0f 	call	0x1e8a	; 0x1e8a <_ZN6I2Cdev9readBytesEhhhPhj>
    2002:	1f 91       	pop	r17
    2004:	0f 91       	pop	r16
    2006:	08 95       	ret

00002008 <_ZN6I2Cdev8writeBitEhhhh>:
 * @param regAddr Register regAddr to write to
 * @param bitNum Bit position to write (0-7)
 * @param value New bit value to write
 * @return Status of operation (true = success)
 */
bool I2Cdev::writeBit(uint8_t devAddr, uint8_t regAddr, uint8_t bitNum, uint8_t data) {
    2008:	ef 92       	push	r14
    200a:	ff 92       	push	r15
    200c:	0f 93       	push	r16
    200e:	1f 93       	push	r17
    2010:	cf 93       	push	r28
    2012:	df 93       	push	r29
    2014:	1f 92       	push	r1
    2016:	cd b7       	in	r28, 0x3d	; 61
    2018:	de b7       	in	r29, 0x3e	; 62
    201a:	18 2f       	mov	r17, r24
    201c:	06 2f       	mov	r16, r22
    201e:	f4 2e       	mov	r15, r20
    2020:	e2 2e       	mov	r14, r18
    uint8_t b;
    readByte(devAddr, regAddr, &b);
    2022:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <_ZN6I2Cdev11readTimeoutE>
    2026:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <_ZN6I2Cdev11readTimeoutE+0x1>
    202a:	ae 01       	movw	r20, r28
    202c:	4f 5f       	subi	r20, 0xFF	; 255
    202e:	5f 4f       	sbci	r21, 0xFF	; 255
    2030:	0e 94 fa 0f 	call	0x1ff4	; 0x1ff4 <_ZN6I2Cdev8readByteEhhPhj>
    2034:	89 81       	ldd	r24, Y+1	; 0x01
    b = (data != 0) ? (b | (1 << bitNum)) : (b & ~(1 << bitNum));
    2036:	41 e0       	ldi	r20, 0x01	; 1
    2038:	50 e0       	ldi	r21, 0x00	; 0
    203a:	01 c0       	rjmp	.+2      	; 0x203e <_ZN6I2Cdev8writeBitEhhhh+0x36>
    203c:	44 0f       	add	r20, r20
    203e:	fa 94       	dec	r15
    2040:	ea f7       	brpl	.-6      	; 0x203c <_ZN6I2Cdev8writeBitEhhhh+0x34>
    2042:	ee 20       	and	r14, r14
    2044:	11 f0       	breq	.+4      	; 0x204a <_ZN6I2Cdev8writeBitEhhhh+0x42>
    2046:	48 2b       	or	r20, r24
    2048:	02 c0       	rjmp	.+4      	; 0x204e <_ZN6I2Cdev8writeBitEhhhh+0x46>
    204a:	40 95       	com	r20
    204c:	48 23       	and	r20, r24
    204e:	49 83       	std	Y+1, r20	; 0x01
    return writeByte(devAddr, regAddr, b);
    2050:	60 2f       	mov	r22, r16
    2052:	81 2f       	mov	r24, r17
    2054:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <_ZN6I2Cdev9writeByteEhhh>
}
    2058:	0f 90       	pop	r0
    205a:	df 91       	pop	r29
    205c:	cf 91       	pop	r28
    205e:	1f 91       	pop	r17
    2060:	0f 91       	pop	r16
    2062:	ff 90       	pop	r15
    2064:	ef 90       	pop	r14
    2066:	08 95       	ret

00002068 <_ZN6I2Cdev9writeBitsEhhhhh>:
 * @param bitStart First bit position to write (0-7)
 * @param length Number of bits to write (not more than 8)
 * @param data Right-aligned value to write
 * @return Status of operation (true = success)
 */
bool I2Cdev::writeBits(uint8_t devAddr, uint8_t regAddr, uint8_t bitStart, uint8_t length, uint8_t data) {
    2068:	df 92       	push	r13
    206a:	ef 92       	push	r14
    206c:	ff 92       	push	r15
    206e:	0f 93       	push	r16
    2070:	1f 93       	push	r17
    2072:	cf 93       	push	r28
    2074:	df 93       	push	r29
    2076:	1f 92       	push	r1
    2078:	cd b7       	in	r28, 0x3d	; 61
    207a:	de b7       	in	r29, 0x3e	; 62
    207c:	18 2f       	mov	r17, r24
    207e:	f6 2e       	mov	r15, r22
    2080:	e4 2e       	mov	r14, r20
    2082:	d2 2e       	mov	r13, r18
    // 00011100 mask byte
    // 10101111 original value (sample)
    // 10100011 original & ~mask
    // 10101011 masked | value
    uint8_t b;
    if (readByte(devAddr, regAddr, &b) != 0) {
    2084:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <_ZN6I2Cdev11readTimeoutE>
    2088:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <_ZN6I2Cdev11readTimeoutE+0x1>
    208c:	ae 01       	movw	r20, r28
    208e:	4f 5f       	subi	r20, 0xFF	; 255
    2090:	5f 4f       	sbci	r21, 0xFF	; 255
    2092:	0e 94 fa 0f 	call	0x1ff4	; 0x1ff4 <_ZN6I2Cdev8readByteEhhPhj>
    2096:	88 23       	and	r24, r24
    2098:	39 f1       	breq	.+78     	; 0x20e8 <_ZN6I2Cdev9writeBitsEhhhhh+0x80>
        uint8_t mask = ((1 << length) - 1) << (bitStart - length + 1);
    209a:	2e 2d       	mov	r18, r14
    209c:	30 e0       	ldi	r19, 0x00	; 0
    209e:	2d 19       	sub	r18, r13
    20a0:	31 09       	sbc	r19, r1
    20a2:	2f 5f       	subi	r18, 0xFF	; 255
    20a4:	3f 4f       	sbci	r19, 0xFF	; 255
    20a6:	81 e0       	ldi	r24, 0x01	; 1
    20a8:	90 e0       	ldi	r25, 0x00	; 0
    20aa:	02 c0       	rjmp	.+4      	; 0x20b0 <_ZN6I2Cdev9writeBitsEhhhhh+0x48>
    20ac:	88 0f       	add	r24, r24
    20ae:	99 1f       	adc	r25, r25
    20b0:	da 94       	dec	r13
    20b2:	e2 f7       	brpl	.-8      	; 0x20ac <_ZN6I2Cdev9writeBitsEhhhhh+0x44>
    20b4:	01 97       	sbiw	r24, 0x01	; 1
    20b6:	02 2e       	mov	r0, r18
    20b8:	01 c0       	rjmp	.+2      	; 0x20bc <_ZN6I2Cdev9writeBitsEhhhhh+0x54>
    20ba:	88 0f       	add	r24, r24
    20bc:	0a 94       	dec	r0
    20be:	ea f7       	brpl	.-6      	; 0x20ba <_ZN6I2Cdev9writeBitsEhhhhh+0x52>
        data <<= (bitStart - length + 1); // shift data into correct position
    20c0:	40 2f       	mov	r20, r16
    20c2:	50 e0       	ldi	r21, 0x00	; 0
    20c4:	ba 01       	movw	r22, r20
    20c6:	02 c0       	rjmp	.+4      	; 0x20cc <_ZN6I2Cdev9writeBitsEhhhhh+0x64>
    20c8:	66 0f       	add	r22, r22
    20ca:	77 1f       	adc	r23, r23
    20cc:	2a 95       	dec	r18
    20ce:	e2 f7       	brpl	.-8      	; 0x20c8 <_ZN6I2Cdev9writeBitsEhhhhh+0x60>
        data &= mask; // zero all non-important bits in data
        b &= ~(mask); // zero all important bits in existing byte
        b |= data; // combine data with existing byte
    20d0:	48 2f       	mov	r20, r24
    20d2:	40 95       	com	r20
    20d4:	99 81       	ldd	r25, Y+1	; 0x01
    20d6:	49 23       	and	r20, r25
    20d8:	86 23       	and	r24, r22
    20da:	48 2b       	or	r20, r24
    20dc:	49 83       	std	Y+1, r20	; 0x01
        return writeByte(devAddr, regAddr, b);
    20de:	6f 2d       	mov	r22, r15
    20e0:	81 2f       	mov	r24, r17
    20e2:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <_ZN6I2Cdev9writeByteEhhh>
    20e6:	01 c0       	rjmp	.+2      	; 0x20ea <_ZN6I2Cdev9writeBitsEhhhhh+0x82>
    } else {
        return false;
    20e8:	80 e0       	ldi	r24, 0x00	; 0
    }
}
    20ea:	0f 90       	pop	r0
    20ec:	df 91       	pop	r29
    20ee:	cf 91       	pop	r28
    20f0:	1f 91       	pop	r17
    20f2:	0f 91       	pop	r16
    20f4:	ff 90       	pop	r15
    20f6:	ef 90       	pop	r14
    20f8:	df 90       	pop	r13
    20fa:	08 95       	ret

000020fc <_ZN7MPU6050C1Ev>:
// ZG_OFFS_USR* register

int16_t MPU6050::getZGyroOffset() {
    I2Cdev::readBytes(devAddr, MPU6050_RA_ZG_OFFS_USRH, 2, buffer);
    return (((int16_t)buffer[0]) << 8) | buffer[1];
}
    20fc:	28 e6       	ldi	r18, 0x68	; 104
    20fe:	fc 01       	movw	r30, r24
    2100:	20 83       	st	Z, r18
    2102:	08 95       	ret

00002104 <_ZN7MPU6050C1Eh>:
    2104:	fc 01       	movw	r30, r24
    2106:	60 83       	st	Z, r22
    2108:	08 95       	ret

0000210a <_ZN7MPU605021setFullScaleGyroRangeEh>:
    210a:	0f 93       	push	r16
    210c:	06 2f       	mov	r16, r22
    210e:	22 e0       	ldi	r18, 0x02	; 2
    2110:	44 e0       	ldi	r20, 0x04	; 4
    2112:	6b e1       	ldi	r22, 0x1B	; 27
    2114:	fc 01       	movw	r30, r24
    2116:	80 81       	ld	r24, Z
    2118:	0e 94 34 10 	call	0x2068	; 0x2068 <_ZN6I2Cdev9writeBitsEhhhhh>
    211c:	0f 91       	pop	r16
    211e:	08 95       	ret

00002120 <_ZN7MPU605022setFullScaleAccelRangeEh>:
    2120:	0f 93       	push	r16
    2122:	06 2f       	mov	r16, r22
    2124:	22 e0       	ldi	r18, 0x02	; 2
    2126:	44 e0       	ldi	r20, 0x04	; 4
    2128:	6c e1       	ldi	r22, 0x1C	; 28
    212a:	fc 01       	movw	r30, r24
    212c:	80 81       	ld	r24, Z
    212e:	0e 94 34 10 	call	0x2068	; 0x2068 <_ZN6I2Cdev9writeBitsEhhhhh>
    2132:	0f 91       	pop	r16
    2134:	08 95       	ret

00002136 <_ZN7MPU605016getAccelerationYEv>:
    2136:	0f 93       	push	r16
    2138:	1f 93       	push	r17
    213a:	cf 93       	push	r28
    213c:	df 93       	push	r29
    213e:	ec 01       	movw	r28, r24
    2140:	00 91 0e 01 	lds	r16, 0x010E	; 0x80010e <_ZN6I2Cdev11readTimeoutE>
    2144:	10 91 0f 01 	lds	r17, 0x010F	; 0x80010f <_ZN6I2Cdev11readTimeoutE+0x1>
    2148:	9c 01       	movw	r18, r24
    214a:	2f 5f       	subi	r18, 0xFF	; 255
    214c:	3f 4f       	sbci	r19, 0xFF	; 255
    214e:	42 e0       	ldi	r20, 0x02	; 2
    2150:	6d e3       	ldi	r22, 0x3D	; 61
    2152:	88 81       	ld	r24, Y
    2154:	0e 94 45 0f 	call	0x1e8a	; 0x1e8a <_ZN6I2Cdev9readBytesEhhhPhj>
    2158:	89 81       	ldd	r24, Y+1	; 0x01
    215a:	9a 81       	ldd	r25, Y+2	; 0x02
    215c:	98 27       	eor	r25, r24
    215e:	89 27       	eor	r24, r25
    2160:	98 27       	eor	r25, r24
    2162:	df 91       	pop	r29
    2164:	cf 91       	pop	r28
    2166:	1f 91       	pop	r17
    2168:	0f 91       	pop	r16
    216a:	08 95       	ret

0000216c <_ZN7MPU605016getAccelerationZEv>:
    216c:	0f 93       	push	r16
    216e:	1f 93       	push	r17
    2170:	cf 93       	push	r28
    2172:	df 93       	push	r29
    2174:	ec 01       	movw	r28, r24
    2176:	00 91 0e 01 	lds	r16, 0x010E	; 0x80010e <_ZN6I2Cdev11readTimeoutE>
    217a:	10 91 0f 01 	lds	r17, 0x010F	; 0x80010f <_ZN6I2Cdev11readTimeoutE+0x1>
    217e:	9c 01       	movw	r18, r24
    2180:	2f 5f       	subi	r18, 0xFF	; 255
    2182:	3f 4f       	sbci	r19, 0xFF	; 255
    2184:	42 e0       	ldi	r20, 0x02	; 2
    2186:	6f e3       	ldi	r22, 0x3F	; 63
    2188:	88 81       	ld	r24, Y
    218a:	0e 94 45 0f 	call	0x1e8a	; 0x1e8a <_ZN6I2Cdev9readBytesEhhhPhj>
    218e:	89 81       	ldd	r24, Y+1	; 0x01
    2190:	9a 81       	ldd	r25, Y+2	; 0x02
    2192:	98 27       	eor	r25, r24
    2194:	89 27       	eor	r24, r25
    2196:	98 27       	eor	r25, r24
    2198:	df 91       	pop	r29
    219a:	cf 91       	pop	r28
    219c:	1f 91       	pop	r17
    219e:	0f 91       	pop	r16
    21a0:	08 95       	ret

000021a2 <_ZN7MPU605012getRotationXEv>:
    21a2:	0f 93       	push	r16
    21a4:	1f 93       	push	r17
    21a6:	cf 93       	push	r28
    21a8:	df 93       	push	r29
    21aa:	ec 01       	movw	r28, r24
    21ac:	00 91 0e 01 	lds	r16, 0x010E	; 0x80010e <_ZN6I2Cdev11readTimeoutE>
    21b0:	10 91 0f 01 	lds	r17, 0x010F	; 0x80010f <_ZN6I2Cdev11readTimeoutE+0x1>
    21b4:	9c 01       	movw	r18, r24
    21b6:	2f 5f       	subi	r18, 0xFF	; 255
    21b8:	3f 4f       	sbci	r19, 0xFF	; 255
    21ba:	42 e0       	ldi	r20, 0x02	; 2
    21bc:	63 e4       	ldi	r22, 0x43	; 67
    21be:	88 81       	ld	r24, Y
    21c0:	0e 94 45 0f 	call	0x1e8a	; 0x1e8a <_ZN6I2Cdev9readBytesEhhhPhj>
    21c4:	89 81       	ldd	r24, Y+1	; 0x01
    21c6:	9a 81       	ldd	r25, Y+2	; 0x02
    21c8:	98 27       	eor	r25, r24
    21ca:	89 27       	eor	r24, r25
    21cc:	98 27       	eor	r25, r24
    21ce:	df 91       	pop	r29
    21d0:	cf 91       	pop	r28
    21d2:	1f 91       	pop	r17
    21d4:	0f 91       	pop	r16
    21d6:	08 95       	ret

000021d8 <_ZN7MPU605015setSleepEnabledEb>:
    21d8:	26 2f       	mov	r18, r22
    21da:	46 e0       	ldi	r20, 0x06	; 6
    21dc:	6b e6       	ldi	r22, 0x6B	; 107
    21de:	fc 01       	movw	r30, r24
    21e0:	80 81       	ld	r24, Z
    21e2:	0c 94 04 10 	jmp	0x2008	; 0x2008 <_ZN6I2Cdev8writeBitEhhhh>

000021e6 <_ZN7MPU605014setClockSourceEh>:
    21e6:	0f 93       	push	r16
    21e8:	06 2f       	mov	r16, r22
    21ea:	23 e0       	ldi	r18, 0x03	; 3
    21ec:	42 e0       	ldi	r20, 0x02	; 2
    21ee:	6b e6       	ldi	r22, 0x6B	; 107
    21f0:	fc 01       	movw	r30, r24
    21f2:	80 81       	ld	r24, Z
    21f4:	0e 94 34 10 	call	0x2068	; 0x2068 <_ZN6I2Cdev9writeBitsEhhhhh>
    21f8:	0f 91       	pop	r16
    21fa:	08 95       	ret

000021fc <_ZN7MPU605010initializeEv>:
    21fc:	cf 93       	push	r28
    21fe:	df 93       	push	r29
    2200:	ec 01       	movw	r28, r24
    2202:	61 e0       	ldi	r22, 0x01	; 1
    2204:	0e 94 f3 10 	call	0x21e6	; 0x21e6 <_ZN7MPU605014setClockSourceEh>
    2208:	60 e0       	ldi	r22, 0x00	; 0
    220a:	ce 01       	movw	r24, r28
    220c:	0e 94 85 10 	call	0x210a	; 0x210a <_ZN7MPU605021setFullScaleGyroRangeEh>
    2210:	60 e0       	ldi	r22, 0x00	; 0
    2212:	ce 01       	movw	r24, r28
    2214:	0e 94 90 10 	call	0x2120	; 0x2120 <_ZN7MPU605022setFullScaleAccelRangeEh>
    2218:	60 e0       	ldi	r22, 0x00	; 0
    221a:	ce 01       	movw	r24, r28
    221c:	df 91       	pop	r29
    221e:	cf 91       	pop	r28
    2220:	0c 94 ec 10 	jmp	0x21d8	; 0x21d8 <_ZN7MPU605015setSleepEnabledEb>

00002224 <_ZN7MPU605015setXAccelOffsetEi>:
    2224:	ab 01       	movw	r20, r22
    2226:	66 e0       	ldi	r22, 0x06	; 6
    2228:	fc 01       	movw	r30, r24
    222a:	80 81       	ld	r24, Z
    222c:	0c 94 33 0f 	jmp	0x1e66	; 0x1e66 <_ZN6I2Cdev9writeWordEhhj>

00002230 <_ZN7MPU605015setYAccelOffsetEi>:
    2230:	ab 01       	movw	r20, r22
    2232:	68 e0       	ldi	r22, 0x08	; 8
    2234:	fc 01       	movw	r30, r24
    2236:	80 81       	ld	r24, Z
    2238:	0c 94 33 0f 	jmp	0x1e66	; 0x1e66 <_ZN6I2Cdev9writeWordEhhj>

0000223c <_ZN7MPU605015setZAccelOffsetEi>:
    223c:	ab 01       	movw	r20, r22
    223e:	6a e0       	ldi	r22, 0x0A	; 10
    2240:	fc 01       	movw	r30, r24
    2242:	80 81       	ld	r24, Z
    2244:	0c 94 33 0f 	jmp	0x1e66	; 0x1e66 <_ZN6I2Cdev9writeWordEhhj>

00002248 <_ZN7MPU605014setXGyroOffsetEi>:
    2248:	ab 01       	movw	r20, r22
    224a:	63 e1       	ldi	r22, 0x13	; 19
    224c:	fc 01       	movw	r30, r24
    224e:	80 81       	ld	r24, Z
    2250:	0c 94 33 0f 	jmp	0x1e66	; 0x1e66 <_ZN6I2Cdev9writeWordEhhj>

00002254 <_ZN7MPU605014setYGyroOffsetEi>:
    2254:	ab 01       	movw	r20, r22
    2256:	65 e1       	ldi	r22, 0x15	; 21
    2258:	fc 01       	movw	r30, r24
    225a:	80 81       	ld	r24, Z
    225c:	0c 94 33 0f 	jmp	0x1e66	; 0x1e66 <_ZN6I2Cdev9writeWordEhhj>

00002260 <_ZN7MPU605014setZGyroOffsetEi>:
void MPU6050::setZGyroOffset(int16_t offset) {
    2260:	ab 01       	movw	r20, r22
    I2Cdev::writeWord(devAddr, MPU6050_RA_ZG_OFFS_USRH, offset);
    2262:	67 e1       	ldi	r22, 0x17	; 23
    2264:	fc 01       	movw	r30, r24
    2266:	80 81       	ld	r24, Z
    2268:	0c 94 33 0f 	jmp	0x1e66	; 0x1e66 <_ZN6I2Cdev9writeWordEhhj>

0000226c <_ZN7NewPing16set_max_distanceEj>:
	TIMSK4 = (1<<TOIE4);   // Enable Timer4 interrupt.
#elif defined (__arm__) && defined (TEENSYDUINO)  // Timer for Teensy 3.x
	itimer.begin(NewPing::timer_ms_cntdwn, 1000); // Set timer to 1ms (1000 uS).
#else
	OCR2A = 249;           // Every count is 4uS, so 1ms = 250 counts - 1.
	TIMSK2 |= (1<<OCIE2A); // Enable Timer2 interrupt.
    226c:	6f 5f       	subi	r22, 0xFF	; 255
    226e:	7f 4f       	sbci	r23, 0xFF	; 255
    2270:	49 e3       	ldi	r20, 0x39	; 57
    2272:	46 9f       	mul	r20, r22
    2274:	90 01       	movw	r18, r0
    2276:	47 9f       	mul	r20, r23
    2278:	30 0d       	add	r19, r0
    227a:	11 24       	eor	r1, r1
    227c:	2e 38       	cpi	r18, 0x8E	; 142
    227e:	4f e6       	ldi	r20, 0x6F	; 111
    2280:	34 07       	cpc	r19, r20
    2282:	10 f0       	brcs	.+4      	; 0x2288 <_ZN7NewPing16set_max_distanceEj+0x1c>
    2284:	2d e8       	ldi	r18, 0x8D	; 141
    2286:	3f e6       	ldi	r19, 0x6F	; 111
    2288:	fc 01       	movw	r30, r24
    228a:	35 87       	std	Z+13, r19	; 0x0d
    228c:	24 87       	std	Z+12, r18	; 0x0c
    228e:	08 95       	ret

00002290 <_ZN7NewPingC1Ehhj>:
    2290:	dc 01       	movw	r26, r24
    2292:	70 e0       	ldi	r23, 0x00	; 0
    2294:	fb 01       	movw	r30, r22
    2296:	e9 5a       	subi	r30, 0xA9	; 169
    2298:	fe 4f       	sbci	r31, 0xFE	; 254
    229a:	e4 91       	lpm	r30, Z
    229c:	14 96       	adiw	r26, 0x04	; 4
    229e:	ec 93       	st	X, r30
    22a0:	14 97       	sbiw	r26, 0x04	; 4
    22a2:	50 e0       	ldi	r21, 0x00	; 0
    22a4:	fa 01       	movw	r30, r20
    22a6:	e9 5a       	subi	r30, 0xA9	; 169
    22a8:	fe 4f       	sbci	r31, 0xFE	; 254
    22aa:	e4 91       	lpm	r30, Z
    22ac:	15 96       	adiw	r26, 0x05	; 5
    22ae:	ec 93       	st	X, r30
    22b0:	15 97       	sbiw	r26, 0x05	; 5
    22b2:	65 59       	subi	r22, 0x95	; 149
    22b4:	7e 4f       	sbci	r23, 0xFE	; 254
    22b6:	fb 01       	movw	r30, r22
    22b8:	84 91       	lpm	r24, Z
    22ba:	e8 2f       	mov	r30, r24
    22bc:	f0 e0       	ldi	r31, 0x00	; 0
    22be:	ee 0f       	add	r30, r30
    22c0:	ff 1f       	adc	r31, r31
    22c2:	e7 57       	subi	r30, 0x77	; 119
    22c4:	fe 4f       	sbci	r31, 0xFE	; 254
    22c6:	85 91       	lpm	r24, Z+
    22c8:	94 91       	lpm	r25, Z
    22ca:	17 96       	adiw	r26, 0x07	; 7
    22cc:	9c 93       	st	X, r25
    22ce:	8e 93       	st	-X, r24
    22d0:	16 97       	sbiw	r26, 0x06	; 6
    22d2:	fa 01       	movw	r30, r20
    22d4:	e5 59       	subi	r30, 0x95	; 149
    22d6:	fe 4f       	sbci	r31, 0xFE	; 254
    22d8:	e4 91       	lpm	r30, Z
    22da:	f0 e0       	ldi	r31, 0x00	; 0
    22dc:	ee 0f       	add	r30, r30
    22de:	ff 1f       	adc	r31, r31
    22e0:	e1 58       	subi	r30, 0x81	; 129
    22e2:	fe 4f       	sbci	r31, 0xFE	; 254
    22e4:	85 91       	lpm	r24, Z+
    22e6:	94 91       	lpm	r25, Z
    22e8:	19 96       	adiw	r26, 0x09	; 9
    22ea:	9c 93       	st	X, r25
    22ec:	8e 93       	st	-X, r24
    22ee:	18 97       	sbiw	r26, 0x08	; 8
    22f0:	fb 01       	movw	r30, r22
    22f2:	64 91       	lpm	r22, Z
    22f4:	e6 2f       	mov	r30, r22
    22f6:	f0 e0       	ldi	r31, 0x00	; 0
    22f8:	ee 0f       	add	r30, r30
    22fa:	ff 1f       	adc	r31, r31
    22fc:	ed 56       	subi	r30, 0x6D	; 109
    22fe:	fe 4f       	sbci	r31, 0xFE	; 254
    2300:	85 91       	lpm	r24, Z+
    2302:	94 91       	lpm	r25, Z
    2304:	1b 96       	adiw	r26, 0x0b	; 11
    2306:	9c 93       	st	X, r25
    2308:	8e 93       	st	-X, r24
    230a:	1a 97       	sbiw	r26, 0x0a	; 10
    230c:	b9 01       	movw	r22, r18
    230e:	cd 01       	movw	r24, r26
    2310:	0c 94 36 11 	jmp	0x226c	; 0x226c <_ZN7NewPing16set_max_distanceEj>

00002314 <__vector_7>:
	intFunc(); // Call wrapped function.
}
#elif defined (__arm__)
// Do nothing...
#else
ISR(TIMER2_COMPA_vect) {
    2314:	1f 92       	push	r1
    2316:	0f 92       	push	r0
    2318:	0f b6       	in	r0, 0x3f	; 63
    231a:	0f 92       	push	r0
    231c:	11 24       	eor	r1, r1
    231e:	2f 93       	push	r18
    2320:	3f 93       	push	r19
    2322:	4f 93       	push	r20
    2324:	5f 93       	push	r21
    2326:	6f 93       	push	r22
    2328:	7f 93       	push	r23
    232a:	8f 93       	push	r24
    232c:	9f 93       	push	r25
    232e:	af 93       	push	r26
    2330:	bf 93       	push	r27
    2332:	ef 93       	push	r30
    2334:	ff 93       	push	r31
	intFunc(); // Call wrapped function.
    2336:	e0 91 a4 02 	lds	r30, 0x02A4	; 0x8002a4 <intFunc>
    233a:	f0 91 a5 02 	lds	r31, 0x02A5	; 0x8002a5 <intFunc+0x1>
    233e:	09 95       	icall
}
    2340:	ff 91       	pop	r31
    2342:	ef 91       	pop	r30
    2344:	bf 91       	pop	r27
    2346:	af 91       	pop	r26
    2348:	9f 91       	pop	r25
    234a:	8f 91       	pop	r24
    234c:	7f 91       	pop	r23
    234e:	6f 91       	pop	r22
    2350:	5f 91       	pop	r21
    2352:	4f 91       	pop	r20
    2354:	3f 91       	pop	r19
    2356:	2f 91       	pop	r18
    2358:	0f 90       	pop	r0
    235a:	0f be       	out	0x3f, r0	; 63
    235c:	0f 90       	pop	r0
    235e:	1f 90       	pop	r1
    2360:	18 95       	reti

00002362 <twi_readFrom>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    2362:	41 32       	cpi	r20, 0x21	; 33
    2364:	08 f0       	brcs	.+2      	; 0x2368 <twi_readFrom+0x6>
    2366:	43 c0       	rjmp	.+134    	; 0x23ee <twi_readFrom+0x8c>
    2368:	90 91 13 03 	lds	r25, 0x0313	; 0x800313 <twi_state>
    236c:	91 11       	cpse	r25, r1
    236e:	fc cf       	rjmp	.-8      	; 0x2368 <twi_readFrom+0x6>
    2370:	91 e0       	ldi	r25, 0x01	; 1
    2372:	90 93 13 03 	sts	0x0313, r25	; 0x800313 <twi_state>
    2376:	20 93 11 03 	sts	0x0311, r18	; 0x800311 <twi_sendStop>
    237a:	2f ef       	ldi	r18, 0xFF	; 255
    237c:	20 93 a6 02 	sts	0x02A6, r18	; 0x8002a6 <twi_error>
    2380:	10 92 eb 02 	sts	0x02EB, r1	; 0x8002eb <twi_masterBufferIndex>
    2384:	24 0f       	add	r18, r20
    2386:	20 93 ea 02 	sts	0x02EA, r18	; 0x8002ea <twi_masterBufferLength>
    238a:	90 93 12 03 	sts	0x0312, r25	; 0x800312 <twi_slarw>
    238e:	90 91 12 03 	lds	r25, 0x0312	; 0x800312 <twi_slarw>
    2392:	88 0f       	add	r24, r24
    2394:	89 2b       	or	r24, r25
    2396:	80 93 12 03 	sts	0x0312, r24	; 0x800312 <twi_slarw>
    239a:	80 91 10 03 	lds	r24, 0x0310	; 0x800310 <twi_inRepStart>
    239e:	81 30       	cpi	r24, 0x01	; 1
    23a0:	61 f4       	brne	.+24     	; 0x23ba <twi_readFrom+0x58>
    23a2:	10 92 10 03 	sts	0x0310, r1	; 0x800310 <twi_inRepStart>
    23a6:	80 91 12 03 	lds	r24, 0x0312	; 0x800312 <twi_slarw>
    23aa:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    23ae:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    23b2:	83 fd       	sbrc	r24, 3
    23b4:	f8 cf       	rjmp	.-16     	; 0x23a6 <twi_readFrom+0x44>
    23b6:	85 ec       	ldi	r24, 0xC5	; 197
    23b8:	01 c0       	rjmp	.+2      	; 0x23bc <twi_readFrom+0x5a>
    23ba:	85 ee       	ldi	r24, 0xE5	; 229
    23bc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    23c0:	80 91 13 03 	lds	r24, 0x0313	; 0x800313 <twi_state>
    23c4:	81 30       	cpi	r24, 0x01	; 1
    23c6:	e1 f3       	breq	.-8      	; 0x23c0 <twi_readFrom+0x5e>
    23c8:	80 91 eb 02 	lds	r24, 0x02EB	; 0x8002eb <twi_masterBufferIndex>
    23cc:	84 17       	cp	r24, r20
    23ce:	10 f4       	brcc	.+4      	; 0x23d4 <twi_readFrom+0x72>
    23d0:	40 91 eb 02 	lds	r20, 0x02EB	; 0x8002eb <twi_masterBufferIndex>
    23d4:	ac ee       	ldi	r26, 0xEC	; 236
    23d6:	b2 e0       	ldi	r27, 0x02	; 2
    23d8:	96 2f       	mov	r25, r22
    23da:	fb 01       	movw	r30, r22
    23dc:	8e 2f       	mov	r24, r30
    23de:	89 1b       	sub	r24, r25
    23e0:	84 17       	cp	r24, r20
    23e2:	18 f4       	brcc	.+6      	; 0x23ea <twi_readFrom+0x88>
    23e4:	8d 91       	ld	r24, X+
    23e6:	81 93       	st	Z+, r24
    23e8:	f9 cf       	rjmp	.-14     	; 0x23dc <twi_readFrom+0x7a>
    23ea:	84 2f       	mov	r24, r20
    23ec:	08 95       	ret
    23ee:	80 e0       	ldi	r24, 0x00	; 0
    23f0:	08 95       	ret

000023f2 <twi_writeTo>:
    23f2:	0f 93       	push	r16
    23f4:	41 32       	cpi	r20, 0x21	; 33
    23f6:	08 f0       	brcs	.+2      	; 0x23fa <twi_writeTo+0x8>
    23f8:	4a c0       	rjmp	.+148    	; 0x248e <twi_writeTo+0x9c>
    23fa:	90 91 13 03 	lds	r25, 0x0313	; 0x800313 <twi_state>
    23fe:	91 11       	cpse	r25, r1
    2400:	fc cf       	rjmp	.-8      	; 0x23fa <twi_writeTo+0x8>
    2402:	32 e0       	ldi	r19, 0x02	; 2
    2404:	30 93 13 03 	sts	0x0313, r19	; 0x800313 <twi_state>
    2408:	00 93 11 03 	sts	0x0311, r16	; 0x800311 <twi_sendStop>
    240c:	3f ef       	ldi	r19, 0xFF	; 255
    240e:	30 93 a6 02 	sts	0x02A6, r19	; 0x8002a6 <twi_error>
    2412:	10 92 eb 02 	sts	0x02EB, r1	; 0x8002eb <twi_masterBufferIndex>
    2416:	40 93 ea 02 	sts	0x02EA, r20	; 0x8002ea <twi_masterBufferLength>
    241a:	56 2f       	mov	r21, r22
    241c:	ac ee       	ldi	r26, 0xEC	; 236
    241e:	b2 e0       	ldi	r27, 0x02	; 2
    2420:	fb 01       	movw	r30, r22
    2422:	3e 2f       	mov	r19, r30
    2424:	35 1b       	sub	r19, r21
    2426:	34 17       	cp	r19, r20
    2428:	18 f4       	brcc	.+6      	; 0x2430 <twi_writeTo+0x3e>
    242a:	31 91       	ld	r19, Z+
    242c:	3d 93       	st	X+, r19
    242e:	f9 cf       	rjmp	.-14     	; 0x2422 <twi_writeTo+0x30>
    2430:	10 92 12 03 	sts	0x0312, r1	; 0x800312 <twi_slarw>
    2434:	30 91 12 03 	lds	r19, 0x0312	; 0x800312 <twi_slarw>
    2438:	88 0f       	add	r24, r24
    243a:	83 2b       	or	r24, r19
    243c:	80 93 12 03 	sts	0x0312, r24	; 0x800312 <twi_slarw>
    2440:	80 91 10 03 	lds	r24, 0x0310	; 0x800310 <twi_inRepStart>
    2444:	81 30       	cpi	r24, 0x01	; 1
    2446:	61 f4       	brne	.+24     	; 0x2460 <twi_writeTo+0x6e>
    2448:	10 92 10 03 	sts	0x0310, r1	; 0x800310 <twi_inRepStart>
    244c:	80 91 12 03 	lds	r24, 0x0312	; 0x800312 <twi_slarw>
    2450:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    2454:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    2458:	83 fd       	sbrc	r24, 3
    245a:	f8 cf       	rjmp	.-16     	; 0x244c <twi_writeTo+0x5a>
    245c:	85 ec       	ldi	r24, 0xC5	; 197
    245e:	01 c0       	rjmp	.+2      	; 0x2462 <twi_writeTo+0x70>
    2460:	85 ee       	ldi	r24, 0xE5	; 229
    2462:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    2466:	22 23       	and	r18, r18
    2468:	21 f0       	breq	.+8      	; 0x2472 <twi_writeTo+0x80>
    246a:	80 91 13 03 	lds	r24, 0x0313	; 0x800313 <twi_state>
    246e:	82 30       	cpi	r24, 0x02	; 2
    2470:	d1 f3       	breq	.-12     	; 0x2466 <twi_writeTo+0x74>
    2472:	80 91 a6 02 	lds	r24, 0x02A6	; 0x8002a6 <twi_error>
    2476:	8f 3f       	cpi	r24, 0xFF	; 255
    2478:	79 f0       	breq	.+30     	; 0x2498 <twi_writeTo+0xa6>
    247a:	80 91 a6 02 	lds	r24, 0x02A6	; 0x8002a6 <twi_error>
    247e:	80 32       	cpi	r24, 0x20	; 32
    2480:	41 f0       	breq	.+16     	; 0x2492 <twi_writeTo+0xa0>
    2482:	80 91 a6 02 	lds	r24, 0x02A6	; 0x8002a6 <twi_error>
    2486:	80 33       	cpi	r24, 0x30	; 48
    2488:	31 f0       	breq	.+12     	; 0x2496 <twi_writeTo+0xa4>
    248a:	94 e0       	ldi	r25, 0x04	; 4
    248c:	05 c0       	rjmp	.+10     	; 0x2498 <twi_writeTo+0xa6>
    248e:	91 e0       	ldi	r25, 0x01	; 1
    2490:	03 c0       	rjmp	.+6      	; 0x2498 <twi_writeTo+0xa6>
    2492:	92 e0       	ldi	r25, 0x02	; 2
    2494:	01 c0       	rjmp	.+2      	; 0x2498 <twi_writeTo+0xa6>
    2496:	93 e0       	ldi	r25, 0x03	; 3
    2498:	89 2f       	mov	r24, r25
    249a:	0f 91       	pop	r16
    249c:	08 95       	ret

0000249e <twi_transmit>:
    249e:	40 91 c8 02 	lds	r20, 0x02C8	; 0x8002c8 <twi_txBufferLength>
    24a2:	26 2f       	mov	r18, r22
    24a4:	30 e0       	ldi	r19, 0x00	; 0
    24a6:	24 0f       	add	r18, r20
    24a8:	31 1d       	adc	r19, r1
    24aa:	21 32       	cpi	r18, 0x21	; 33
    24ac:	31 05       	cpc	r19, r1
    24ae:	dc f4       	brge	.+54     	; 0x24e6 <twi_transmit+0x48>
    24b0:	20 91 13 03 	lds	r18, 0x0313	; 0x800313 <twi_state>
    24b4:	24 30       	cpi	r18, 0x04	; 4
    24b6:	c9 f4       	brne	.+50     	; 0x24ea <twi_transmit+0x4c>
    24b8:	fc 01       	movw	r30, r24
    24ba:	80 e0       	ldi	r24, 0x00	; 0
    24bc:	90 e0       	ldi	r25, 0x00	; 0
    24be:	86 17       	cp	r24, r22
    24c0:	58 f4       	brcc	.+22     	; 0x24d8 <twi_transmit+0x3a>
    24c2:	30 91 c8 02 	lds	r19, 0x02C8	; 0x8002c8 <twi_txBufferLength>
    24c6:	21 91       	ld	r18, Z+
    24c8:	dc 01       	movw	r26, r24
    24ca:	a6 53       	subi	r26, 0x36	; 54
    24cc:	bd 4f       	sbci	r27, 0xFD	; 253
    24ce:	a3 0f       	add	r26, r19
    24d0:	b1 1d       	adc	r27, r1
    24d2:	2c 93       	st	X, r18
    24d4:	01 96       	adiw	r24, 0x01	; 1
    24d6:	f3 cf       	rjmp	.-26     	; 0x24be <twi_transmit+0x20>
    24d8:	80 91 c8 02 	lds	r24, 0x02C8	; 0x8002c8 <twi_txBufferLength>
    24dc:	68 0f       	add	r22, r24
    24de:	60 93 c8 02 	sts	0x02C8, r22	; 0x8002c8 <twi_txBufferLength>
    24e2:	80 e0       	ldi	r24, 0x00	; 0
    24e4:	08 95       	ret
    24e6:	81 e0       	ldi	r24, 0x01	; 1
    24e8:	08 95       	ret
    24ea:	82 e0       	ldi	r24, 0x02	; 2
    24ec:	08 95       	ret

000024ee <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    24ee:	85 ed       	ldi	r24, 0xD5	; 213
    24f0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    24f4:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    24f8:	84 fd       	sbrc	r24, 4
    24fa:	fc cf       	rjmp	.-8      	; 0x24f4 <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    24fc:	10 92 13 03 	sts	0x0313, r1	; 0x800313 <twi_state>
    2500:	08 95       	ret

00002502 <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    2502:	85 ec       	ldi	r24, 0xC5	; 197
    2504:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // update twi state
  twi_state = TWI_READY;
    2508:	10 92 13 03 	sts	0x0313, r1	; 0x800313 <twi_state>
    250c:	08 95       	ret

0000250e <__vector_24>:
}

ISR(TWI_vect)
{
    250e:	1f 92       	push	r1
    2510:	0f 92       	push	r0
    2512:	0f b6       	in	r0, 0x3f	; 63
    2514:	0f 92       	push	r0
    2516:	11 24       	eor	r1, r1
    2518:	2f 93       	push	r18
    251a:	3f 93       	push	r19
    251c:	4f 93       	push	r20
    251e:	5f 93       	push	r21
    2520:	6f 93       	push	r22
    2522:	7f 93       	push	r23
    2524:	8f 93       	push	r24
    2526:	9f 93       	push	r25
    2528:	af 93       	push	r26
    252a:	bf 93       	push	r27
    252c:	ef 93       	push	r30
    252e:	ff 93       	push	r31
  switch(TW_STATUS){
    2530:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    2534:	88 7f       	andi	r24, 0xF8	; 248
    2536:	80 36       	cpi	r24, 0x60	; 96
    2538:	09 f4       	brne	.+2      	; 0x253c <__vector_24+0x2e>
    253a:	9e c0       	rjmp	.+316    	; 0x2678 <__vector_24+0x16a>
    253c:	78 f5       	brcc	.+94     	; 0x259c <__vector_24+0x8e>
    253e:	88 32       	cpi	r24, 0x28	; 40
    2540:	09 f4       	brne	.+2      	; 0x2544 <__vector_24+0x36>
    2542:	5d c0       	rjmp	.+186    	; 0x25fe <__vector_24+0xf0>
    2544:	90 f4       	brcc	.+36     	; 0x256a <__vector_24+0x5c>
    2546:	80 31       	cpi	r24, 0x10	; 16
    2548:	09 f4       	brne	.+2      	; 0x254c <__vector_24+0x3e>
    254a:	56 c0       	rjmp	.+172    	; 0x25f8 <__vector_24+0xea>
    254c:	38 f4       	brcc	.+14     	; 0x255c <__vector_24+0x4e>
    254e:	88 23       	and	r24, r24
    2550:	09 f4       	brne	.+2      	; 0x2554 <__vector_24+0x46>
    2552:	f5 c0       	rjmp	.+490    	; 0x273e <__vector_24+0x230>
    2554:	88 30       	cpi	r24, 0x08	; 8
    2556:	09 f4       	brne	.+2      	; 0x255a <__vector_24+0x4c>
    2558:	4f c0       	rjmp	.+158    	; 0x25f8 <__vector_24+0xea>
    255a:	f5 c0       	rjmp	.+490    	; 0x2746 <__vector_24+0x238>
    255c:	88 31       	cpi	r24, 0x18	; 24
    255e:	09 f4       	brne	.+2      	; 0x2562 <__vector_24+0x54>
    2560:	4e c0       	rjmp	.+156    	; 0x25fe <__vector_24+0xf0>
    2562:	80 32       	cpi	r24, 0x20	; 32
    2564:	09 f4       	brne	.+2      	; 0x2568 <__vector_24+0x5a>
    2566:	5f c0       	rjmp	.+190    	; 0x2626 <__vector_24+0x118>
    2568:	ee c0       	rjmp	.+476    	; 0x2746 <__vector_24+0x238>
    256a:	80 34       	cpi	r24, 0x40	; 64
    256c:	09 f4       	brne	.+2      	; 0x2570 <__vector_24+0x62>
    256e:	6a c0       	rjmp	.+212    	; 0x2644 <__vector_24+0x136>
    2570:	58 f4       	brcc	.+22     	; 0x2588 <__vector_24+0x7a>
    2572:	80 33       	cpi	r24, 0x30	; 48
    2574:	09 f4       	brne	.+2      	; 0x2578 <__vector_24+0x6a>
    2576:	57 c0       	rjmp	.+174    	; 0x2626 <__vector_24+0x118>
    2578:	88 33       	cpi	r24, 0x38	; 56
    257a:	09 f0       	breq	.+2      	; 0x257e <__vector_24+0x70>
    257c:	e4 c0       	rjmp	.+456    	; 0x2746 <__vector_24+0x238>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    257e:	80 93 a6 02 	sts	0x02A6, r24	; 0x8002a6 <twi_error>
      twi_releaseBus();
    2582:	0e 94 81 12 	call	0x2502	; 0x2502 <twi_releaseBus>
      break;
    2586:	df c0       	rjmp	.+446    	; 0x2746 <__vector_24+0x238>
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    2588:	80 35       	cpi	r24, 0x50	; 80
    258a:	09 f4       	brne	.+2      	; 0x258e <__vector_24+0x80>
    258c:	4f c0       	rjmp	.+158    	; 0x262c <__vector_24+0x11e>
    258e:	88 35       	cpi	r24, 0x58	; 88
    2590:	09 f4       	brne	.+2      	; 0x2594 <__vector_24+0x86>
    2592:	5d c0       	rjmp	.+186    	; 0x264e <__vector_24+0x140>
    2594:	88 34       	cpi	r24, 0x48	; 72
    2596:	09 f0       	breq	.+2      	; 0x259a <__vector_24+0x8c>
    2598:	d6 c0       	rjmp	.+428    	; 0x2746 <__vector_24+0x238>
    259a:	d3 c0       	rjmp	.+422    	; 0x2742 <__vector_24+0x234>
    259c:	88 39       	cpi	r24, 0x98	; 152
    259e:	09 f4       	brne	.+2      	; 0x25a2 <__vector_24+0x94>
    25a0:	c4 c0       	rjmp	.+392    	; 0x272a <__vector_24+0x21c>
    25a2:	a8 f4       	brcc	.+42     	; 0x25ce <__vector_24+0xc0>
    25a4:	88 37       	cpi	r24, 0x78	; 120
    25a6:	09 f4       	brne	.+2      	; 0x25aa <__vector_24+0x9c>
    25a8:	67 c0       	rjmp	.+206    	; 0x2678 <__vector_24+0x16a>
    25aa:	38 f4       	brcc	.+14     	; 0x25ba <__vector_24+0xac>
    25ac:	88 36       	cpi	r24, 0x68	; 104
    25ae:	09 f4       	brne	.+2      	; 0x25b2 <__vector_24+0xa4>
    25b0:	63 c0       	rjmp	.+198    	; 0x2678 <__vector_24+0x16a>
    25b2:	80 37       	cpi	r24, 0x70	; 112
    25b4:	09 f4       	brne	.+2      	; 0x25b8 <__vector_24+0xaa>
    25b6:	60 c0       	rjmp	.+192    	; 0x2678 <__vector_24+0x16a>
    25b8:	c6 c0       	rjmp	.+396    	; 0x2746 <__vector_24+0x238>
    25ba:	88 38       	cpi	r24, 0x88	; 136
    25bc:	09 f4       	brne	.+2      	; 0x25c0 <__vector_24+0xb2>
    25be:	b5 c0       	rjmp	.+362    	; 0x272a <__vector_24+0x21c>
    25c0:	80 39       	cpi	r24, 0x90	; 144
    25c2:	09 f4       	brne	.+2      	; 0x25c6 <__vector_24+0xb8>
    25c4:	5f c0       	rjmp	.+190    	; 0x2684 <__vector_24+0x176>
    25c6:	80 38       	cpi	r24, 0x80	; 128
    25c8:	09 f0       	breq	.+2      	; 0x25cc <__vector_24+0xbe>
    25ca:	bd c0       	rjmp	.+378    	; 0x2746 <__vector_24+0x238>
    25cc:	5b c0       	rjmp	.+182    	; 0x2684 <__vector_24+0x176>
    25ce:	80 3b       	cpi	r24, 0xB0	; 176
    25d0:	09 f4       	brne	.+2      	; 0x25d4 <__vector_24+0xc6>
    25d2:	83 c0       	rjmp	.+262    	; 0x26da <__vector_24+0x1cc>
    25d4:	38 f4       	brcc	.+14     	; 0x25e4 <__vector_24+0xd6>
    25d6:	80 3a       	cpi	r24, 0xA0	; 160
    25d8:	09 f4       	brne	.+2      	; 0x25dc <__vector_24+0xce>
    25da:	66 c0       	rjmp	.+204    	; 0x26a8 <__vector_24+0x19a>
    25dc:	88 3a       	cpi	r24, 0xA8	; 168
    25de:	09 f4       	brne	.+2      	; 0x25e2 <__vector_24+0xd4>
    25e0:	7c c0       	rjmp	.+248    	; 0x26da <__vector_24+0x1cc>
    25e2:	b1 c0       	rjmp	.+354    	; 0x2746 <__vector_24+0x238>
    25e4:	80 3c       	cpi	r24, 0xC0	; 192
    25e6:	09 f4       	brne	.+2      	; 0x25ea <__vector_24+0xdc>
    25e8:	a4 c0       	rjmp	.+328    	; 0x2732 <__vector_24+0x224>
    25ea:	88 3c       	cpi	r24, 0xC8	; 200
    25ec:	09 f4       	brne	.+2      	; 0x25f0 <__vector_24+0xe2>
    25ee:	a1 c0       	rjmp	.+322    	; 0x2732 <__vector_24+0x224>
    25f0:	88 3b       	cpi	r24, 0xB8	; 184
    25f2:	09 f4       	brne	.+2      	; 0x25f6 <__vector_24+0xe8>
    25f4:	87 c0       	rjmp	.+270    	; 0x2704 <__vector_24+0x1f6>
    25f6:	a7 c0       	rjmp	.+334    	; 0x2746 <__vector_24+0x238>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    25f8:	80 91 12 03 	lds	r24, 0x0312	; 0x800312 <twi_slarw>
    25fc:	10 c0       	rjmp	.+32     	; 0x261e <__vector_24+0x110>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    25fe:	90 91 eb 02 	lds	r25, 0x02EB	; 0x8002eb <twi_masterBufferIndex>
    2602:	80 91 ea 02 	lds	r24, 0x02EA	; 0x8002ea <twi_masterBufferLength>
    2606:	98 17       	cp	r25, r24
    2608:	70 f5       	brcc	.+92     	; 0x2666 <__vector_24+0x158>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    260a:	e0 91 eb 02 	lds	r30, 0x02EB	; 0x8002eb <twi_masterBufferIndex>
    260e:	81 e0       	ldi	r24, 0x01	; 1
    2610:	8e 0f       	add	r24, r30
    2612:	80 93 eb 02 	sts	0x02EB, r24	; 0x8002eb <twi_masterBufferIndex>
    2616:	f0 e0       	ldi	r31, 0x00	; 0
    2618:	e4 51       	subi	r30, 0x14	; 20
    261a:	fd 4f       	sbci	r31, 0xFD	; 253
    261c:	80 81       	ld	r24, Z
    261e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    2622:	85 ec       	ldi	r24, 0xC5	; 197
    2624:	83 c0       	rjmp	.+262    	; 0x272c <__vector_24+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    2626:	80 93 a6 02 	sts	0x02A6, r24	; 0x8002a6 <twi_error>
    262a:	8b c0       	rjmp	.+278    	; 0x2742 <__vector_24+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    262c:	e0 91 eb 02 	lds	r30, 0x02EB	; 0x8002eb <twi_masterBufferIndex>
    2630:	81 e0       	ldi	r24, 0x01	; 1
    2632:	8e 0f       	add	r24, r30
    2634:	80 93 eb 02 	sts	0x02EB, r24	; 0x8002eb <twi_masterBufferIndex>
    2638:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    263c:	f0 e0       	ldi	r31, 0x00	; 0
    263e:	e4 51       	subi	r30, 0x14	; 20
    2640:	fd 4f       	sbci	r31, 0xFD	; 253
    2642:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    2644:	90 91 eb 02 	lds	r25, 0x02EB	; 0x8002eb <twi_masterBufferIndex>
    2648:	80 91 ea 02 	lds	r24, 0x02EA	; 0x8002ea <twi_masterBufferLength>
    264c:	6b c0       	rjmp	.+214    	; 0x2724 <__vector_24+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    264e:	e0 91 eb 02 	lds	r30, 0x02EB	; 0x8002eb <twi_masterBufferIndex>
    2652:	81 e0       	ldi	r24, 0x01	; 1
    2654:	8e 0f       	add	r24, r30
    2656:	80 93 eb 02 	sts	0x02EB, r24	; 0x8002eb <twi_masterBufferIndex>
    265a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    265e:	f0 e0       	ldi	r31, 0x00	; 0
    2660:	e4 51       	subi	r30, 0x14	; 20
    2662:	fd 4f       	sbci	r31, 0xFD	; 253
    2664:	80 83       	st	Z, r24
	if (twi_sendStop)
    2666:	80 91 11 03 	lds	r24, 0x0311	; 0x800311 <twi_sendStop>
    266a:	81 11       	cpse	r24, r1
    266c:	6a c0       	rjmp	.+212    	; 0x2742 <__vector_24+0x234>
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    266e:	81 e0       	ldi	r24, 0x01	; 1
    2670:	80 93 10 03 	sts	0x0310, r24	; 0x800310 <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    2674:	84 ea       	ldi	r24, 0xA4	; 164
    2676:	5e c0       	rjmp	.+188    	; 0x2734 <__vector_24+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    2678:	83 e0       	ldi	r24, 0x03	; 3
    267a:	80 93 13 03 	sts	0x0313, r24	; 0x800313 <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    267e:	10 92 a7 02 	sts	0x02A7, r1	; 0x8002a7 <twi_rxBufferIndex>
    2682:	cf cf       	rjmp	.-98     	; 0x2622 <__vector_24+0x114>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    2684:	80 91 a7 02 	lds	r24, 0x02A7	; 0x8002a7 <twi_rxBufferIndex>
    2688:	80 32       	cpi	r24, 0x20	; 32
    268a:	08 f0       	brcs	.+2      	; 0x268e <__vector_24+0x180>
    268c:	4e c0       	rjmp	.+156    	; 0x272a <__vector_24+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    268e:	e0 91 a7 02 	lds	r30, 0x02A7	; 0x8002a7 <twi_rxBufferIndex>
    2692:	81 e0       	ldi	r24, 0x01	; 1
    2694:	8e 0f       	add	r24, r30
    2696:	80 93 a7 02 	sts	0x02A7, r24	; 0x8002a7 <twi_rxBufferIndex>
    269a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    269e:	f0 e0       	ldi	r31, 0x00	; 0
    26a0:	e8 55       	subi	r30, 0x58	; 88
    26a2:	fd 4f       	sbci	r31, 0xFD	; 253
    26a4:	80 83       	st	Z, r24
    26a6:	bd cf       	rjmp	.-134    	; 0x2622 <__vector_24+0x114>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    26a8:	0e 94 81 12 	call	0x2502	; 0x2502 <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    26ac:	80 91 a7 02 	lds	r24, 0x02A7	; 0x8002a7 <twi_rxBufferIndex>
    26b0:	80 32       	cpi	r24, 0x20	; 32
    26b2:	30 f4       	brcc	.+12     	; 0x26c0 <__vector_24+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    26b4:	e0 91 a7 02 	lds	r30, 0x02A7	; 0x8002a7 <twi_rxBufferIndex>
    26b8:	f0 e0       	ldi	r31, 0x00	; 0
    26ba:	e8 55       	subi	r30, 0x58	; 88
    26bc:	fd 4f       	sbci	r31, 0xFD	; 253
    26be:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    26c0:	60 91 a7 02 	lds	r22, 0x02A7	; 0x8002a7 <twi_rxBufferIndex>
    26c4:	70 e0       	ldi	r23, 0x00	; 0
    26c6:	e0 91 0c 03 	lds	r30, 0x030C	; 0x80030c <twi_onSlaveReceive>
    26ca:	f0 91 0d 03 	lds	r31, 0x030D	; 0x80030d <twi_onSlaveReceive+0x1>
    26ce:	88 ea       	ldi	r24, 0xA8	; 168
    26d0:	92 e0       	ldi	r25, 0x02	; 2
    26d2:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    26d4:	10 92 a7 02 	sts	0x02A7, r1	; 0x8002a7 <twi_rxBufferIndex>
      break;
    26d8:	36 c0       	rjmp	.+108    	; 0x2746 <__vector_24+0x238>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    26da:	84 e0       	ldi	r24, 0x04	; 4
    26dc:	80 93 13 03 	sts	0x0313, r24	; 0x800313 <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    26e0:	10 92 c9 02 	sts	0x02C9, r1	; 0x8002c9 <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    26e4:	10 92 c8 02 	sts	0x02C8, r1	; 0x8002c8 <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    26e8:	e0 91 0e 03 	lds	r30, 0x030E	; 0x80030e <twi_onSlaveTransmit>
    26ec:	f0 91 0f 03 	lds	r31, 0x030F	; 0x80030f <twi_onSlaveTransmit+0x1>
    26f0:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    26f2:	80 91 c8 02 	lds	r24, 0x02C8	; 0x8002c8 <twi_txBufferLength>
    26f6:	81 11       	cpse	r24, r1
    26f8:	05 c0       	rjmp	.+10     	; 0x2704 <__vector_24+0x1f6>
        twi_txBufferLength = 1;
    26fa:	81 e0       	ldi	r24, 0x01	; 1
    26fc:	80 93 c8 02 	sts	0x02C8, r24	; 0x8002c8 <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    2700:	10 92 ca 02 	sts	0x02CA, r1	; 0x8002ca <twi_txBuffer>
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    2704:	e0 91 c9 02 	lds	r30, 0x02C9	; 0x8002c9 <twi_txBufferIndex>
    2708:	81 e0       	ldi	r24, 0x01	; 1
    270a:	8e 0f       	add	r24, r30
    270c:	80 93 c9 02 	sts	0x02C9, r24	; 0x8002c9 <twi_txBufferIndex>
    2710:	f0 e0       	ldi	r31, 0x00	; 0
    2712:	e6 53       	subi	r30, 0x36	; 54
    2714:	fd 4f       	sbci	r31, 0xFD	; 253
    2716:	80 81       	ld	r24, Z
    2718:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    271c:	90 91 c9 02 	lds	r25, 0x02C9	; 0x8002c9 <twi_txBufferIndex>
    2720:	80 91 c8 02 	lds	r24, 0x02C8	; 0x8002c8 <twi_txBufferLength>
    2724:	98 17       	cp	r25, r24
    2726:	08 f4       	brcc	.+2      	; 0x272a <__vector_24+0x21c>
    2728:	7c cf       	rjmp	.-264    	; 0x2622 <__vector_24+0x114>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    272a:	85 e8       	ldi	r24, 0x85	; 133
    272c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    2730:	0a c0       	rjmp	.+20     	; 0x2746 <__vector_24+0x238>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    2732:	85 ec       	ldi	r24, 0xC5	; 197
    2734:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    2738:	10 92 13 03 	sts	0x0313, r1	; 0x800313 <twi_state>
      break;
    273c:	04 c0       	rjmp	.+8      	; 0x2746 <__vector_24+0x238>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    273e:	10 92 a6 02 	sts	0x02A6, r1	; 0x8002a6 <twi_error>
      twi_stop();
    2742:	0e 94 77 12 	call	0x24ee	; 0x24ee <twi_stop>
      break;
  }
}
    2746:	ff 91       	pop	r31
    2748:	ef 91       	pop	r30
    274a:	bf 91       	pop	r27
    274c:	af 91       	pop	r26
    274e:	9f 91       	pop	r25
    2750:	8f 91       	pop	r24
    2752:	7f 91       	pop	r23
    2754:	6f 91       	pop	r22
    2756:	5f 91       	pop	r21
    2758:	4f 91       	pop	r20
    275a:	3f 91       	pop	r19
    275c:	2f 91       	pop	r18
    275e:	0f 90       	pop	r0
    2760:	0f be       	out	0x3f, r0	; 63
    2762:	0f 90       	pop	r0
    2764:	1f 90       	pop	r1
    2766:	18 95       	reti

00002768 <_ZN5Print17availableForWriteEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    2768:	80 e0       	ldi	r24, 0x00	; 0
    276a:	90 e0       	ldi	r25, 0x00	; 0
    276c:	08 95       	ret

0000276e <_ZN7TwoWire9availableEv>:
    276e:	80 91 44 03 	lds	r24, 0x0344	; 0x800344 <_ZN7TwoWire14rxBufferLengthE>
    2772:	90 e0       	ldi	r25, 0x00	; 0
    2774:	20 91 45 03 	lds	r18, 0x0345	; 0x800345 <_ZN7TwoWire13rxBufferIndexE>
    2778:	82 1b       	sub	r24, r18
    277a:	91 09       	sbc	r25, r1
    277c:	08 95       	ret

0000277e <_ZN7TwoWire4readEv>:
    277e:	90 91 45 03 	lds	r25, 0x0345	; 0x800345 <_ZN7TwoWire13rxBufferIndexE>
    2782:	80 91 44 03 	lds	r24, 0x0344	; 0x800344 <_ZN7TwoWire14rxBufferLengthE>
    2786:	98 17       	cp	r25, r24
    2788:	50 f4       	brcc	.+20     	; 0x279e <_ZN7TwoWire4readEv+0x20>
    278a:	e9 2f       	mov	r30, r25
    278c:	f0 e0       	ldi	r31, 0x00	; 0
    278e:	ea 5b       	subi	r30, 0xBA	; 186
    2790:	fc 4f       	sbci	r31, 0xFC	; 252
    2792:	20 81       	ld	r18, Z
    2794:	30 e0       	ldi	r19, 0x00	; 0
    2796:	9f 5f       	subi	r25, 0xFF	; 255
    2798:	90 93 45 03 	sts	0x0345, r25	; 0x800345 <_ZN7TwoWire13rxBufferIndexE>
    279c:	02 c0       	rjmp	.+4      	; 0x27a2 <_ZN7TwoWire4readEv+0x24>
    279e:	2f ef       	ldi	r18, 0xFF	; 255
    27a0:	3f ef       	ldi	r19, 0xFF	; 255
    27a2:	c9 01       	movw	r24, r18
    27a4:	08 95       	ret

000027a6 <_ZN7TwoWire4peekEv>:
    27a6:	e0 91 45 03 	lds	r30, 0x0345	; 0x800345 <_ZN7TwoWire13rxBufferIndexE>
    27aa:	80 91 44 03 	lds	r24, 0x0344	; 0x800344 <_ZN7TwoWire14rxBufferLengthE>
    27ae:	e8 17       	cp	r30, r24
    27b0:	30 f4       	brcc	.+12     	; 0x27be <_ZN7TwoWire4peekEv+0x18>
    27b2:	f0 e0       	ldi	r31, 0x00	; 0
    27b4:	ea 5b       	subi	r30, 0xBA	; 186
    27b6:	fc 4f       	sbci	r31, 0xFC	; 252
    27b8:	80 81       	ld	r24, Z
    27ba:	90 e0       	ldi	r25, 0x00	; 0
    27bc:	08 95       	ret
    27be:	8f ef       	ldi	r24, 0xFF	; 255
    27c0:	9f ef       	ldi	r25, 0xFF	; 255
    27c2:	08 95       	ret

000027c4 <_ZN7TwoWire5flushEv>:
    27c4:	08 95       	ret

000027c6 <_ZN7TwoWire5writeEPKhj>:
    27c6:	cf 92       	push	r12
    27c8:	df 92       	push	r13
    27ca:	ef 92       	push	r14
    27cc:	ff 92       	push	r15
    27ce:	0f 93       	push	r16
    27d0:	1f 93       	push	r17
    27d2:	cf 93       	push	r28
    27d4:	df 93       	push	r29
    27d6:	7c 01       	movw	r14, r24
    27d8:	cb 01       	movw	r24, r22
    27da:	8a 01       	movw	r16, r20
    27dc:	20 91 20 03 	lds	r18, 0x0320	; 0x800320 <_ZN7TwoWire12transmittingE>
    27e0:	22 23       	and	r18, r18
    27e2:	89 f0       	breq	.+34     	; 0x2806 <_ZN7TwoWire5writeEPKhj+0x40>
    27e4:	eb 01       	movw	r28, r22
    27e6:	6b 01       	movw	r12, r22
    27e8:	c4 0e       	add	r12, r20
    27ea:	d5 1e       	adc	r13, r21
    27ec:	cc 15       	cp	r28, r12
    27ee:	dd 05       	cpc	r29, r13
    27f0:	69 f0       	breq	.+26     	; 0x280c <_ZN7TwoWire5writeEPKhj+0x46>
    27f2:	69 91       	ld	r22, Y+
    27f4:	d7 01       	movw	r26, r14
    27f6:	ed 91       	ld	r30, X+
    27f8:	fc 91       	ld	r31, X
    27fa:	01 90       	ld	r0, Z+
    27fc:	f0 81       	ld	r31, Z
    27fe:	e0 2d       	mov	r30, r0
    2800:	c7 01       	movw	r24, r14
    2802:	09 95       	icall
    2804:	f3 cf       	rjmp	.-26     	; 0x27ec <_ZN7TwoWire5writeEPKhj+0x26>
    2806:	64 2f       	mov	r22, r20
    2808:	0e 94 4f 12 	call	0x249e	; 0x249e <twi_transmit>
    280c:	c8 01       	movw	r24, r16
    280e:	df 91       	pop	r29
    2810:	cf 91       	pop	r28
    2812:	1f 91       	pop	r17
    2814:	0f 91       	pop	r16
    2816:	ff 90       	pop	r15
    2818:	ef 90       	pop	r14
    281a:	df 90       	pop	r13
    281c:	cf 90       	pop	r12
    281e:	08 95       	ret

00002820 <_ZN7TwoWire5writeEh>:
    2820:	cf 93       	push	r28
    2822:	df 93       	push	r29
    2824:	1f 92       	push	r1
    2826:	cd b7       	in	r28, 0x3d	; 61
    2828:	de b7       	in	r29, 0x3e	; 62
    282a:	69 83       	std	Y+1, r22	; 0x01
    282c:	20 91 20 03 	lds	r18, 0x0320	; 0x800320 <_ZN7TwoWire12transmittingE>
    2830:	22 23       	and	r18, r18
    2832:	d1 f0       	breq	.+52     	; 0x2868 <_ZN7TwoWire5writeEh+0x48>
    2834:	20 91 21 03 	lds	r18, 0x0321	; 0x800321 <_ZN7TwoWire14txBufferLengthE>
    2838:	20 32       	cpi	r18, 0x20	; 32
    283a:	40 f0       	brcs	.+16     	; 0x284c <_ZN7TwoWire5writeEh+0x2c>
    283c:	21 e0       	ldi	r18, 0x01	; 1
    283e:	30 e0       	ldi	r19, 0x00	; 0
    2840:	fc 01       	movw	r30, r24
    2842:	33 83       	std	Z+3, r19	; 0x03
    2844:	22 83       	std	Z+2, r18	; 0x02
    2846:	80 e0       	ldi	r24, 0x00	; 0
    2848:	90 e0       	ldi	r25, 0x00	; 0
    284a:	15 c0       	rjmp	.+42     	; 0x2876 <_ZN7TwoWire5writeEh+0x56>
    284c:	80 91 22 03 	lds	r24, 0x0322	; 0x800322 <_ZN7TwoWire13txBufferIndexE>
    2850:	e8 2f       	mov	r30, r24
    2852:	f0 e0       	ldi	r31, 0x00	; 0
    2854:	ed 5d       	subi	r30, 0xDD	; 221
    2856:	fc 4f       	sbci	r31, 0xFC	; 252
    2858:	99 81       	ldd	r25, Y+1	; 0x01
    285a:	90 83       	st	Z, r25
    285c:	8f 5f       	subi	r24, 0xFF	; 255
    285e:	80 93 22 03 	sts	0x0322, r24	; 0x800322 <_ZN7TwoWire13txBufferIndexE>
    2862:	80 93 21 03 	sts	0x0321, r24	; 0x800321 <_ZN7TwoWire14txBufferLengthE>
    2866:	05 c0       	rjmp	.+10     	; 0x2872 <_ZN7TwoWire5writeEh+0x52>
    2868:	61 e0       	ldi	r22, 0x01	; 1
    286a:	ce 01       	movw	r24, r28
    286c:	01 96       	adiw	r24, 0x01	; 1
    286e:	0e 94 4f 12 	call	0x249e	; 0x249e <twi_transmit>
    2872:	81 e0       	ldi	r24, 0x01	; 1
    2874:	90 e0       	ldi	r25, 0x00	; 0
    2876:	0f 90       	pop	r0
    2878:	df 91       	pop	r29
    287a:	cf 91       	pop	r28
    287c:	08 95       	ret

0000287e <_ZN7TwoWireC1Ev>:
    287e:	fc 01       	movw	r30, r24
    2880:	13 82       	std	Z+3, r1	; 0x03
    2882:	12 82       	std	Z+2, r1	; 0x02
    2884:	88 ee       	ldi	r24, 0xE8	; 232
    2886:	93 e0       	ldi	r25, 0x03	; 3
    2888:	a0 e0       	ldi	r26, 0x00	; 0
    288a:	b0 e0       	ldi	r27, 0x00	; 0
    288c:	84 83       	std	Z+4, r24	; 0x04
    288e:	95 83       	std	Z+5, r25	; 0x05
    2890:	a6 83       	std	Z+6, r26	; 0x06
    2892:	b7 83       	std	Z+7, r27	; 0x07
    2894:	8a ec       	ldi	r24, 0xCA	; 202
    2896:	91 e0       	ldi	r25, 0x01	; 1
    2898:	91 83       	std	Z+1, r25	; 0x01
    289a:	80 83       	st	Z, r24
    289c:	08 95       	ret

0000289e <_ZN7TwoWire17beginTransmissionEh>:
    289e:	81 e0       	ldi	r24, 0x01	; 1
    28a0:	80 93 20 03 	sts	0x0320, r24	; 0x800320 <_ZN7TwoWire12transmittingE>
    28a4:	60 93 43 03 	sts	0x0343, r22	; 0x800343 <_ZN7TwoWire9txAddressE>
    28a8:	10 92 22 03 	sts	0x0322, r1	; 0x800322 <_ZN7TwoWire13txBufferIndexE>
    28ac:	10 92 21 03 	sts	0x0321, r1	; 0x800321 <_ZN7TwoWire14txBufferLengthE>
    28b0:	08 95       	ret

000028b2 <_ZN7TwoWire15endTransmissionEh>:
    28b2:	0f 93       	push	r16
    28b4:	06 2f       	mov	r16, r22
    28b6:	21 e0       	ldi	r18, 0x01	; 1
    28b8:	40 91 21 03 	lds	r20, 0x0321	; 0x800321 <_ZN7TwoWire14txBufferLengthE>
    28bc:	63 e2       	ldi	r22, 0x23	; 35
    28be:	73 e0       	ldi	r23, 0x03	; 3
    28c0:	80 91 43 03 	lds	r24, 0x0343	; 0x800343 <_ZN7TwoWire9txAddressE>
    28c4:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <twi_writeTo>
    28c8:	10 92 22 03 	sts	0x0322, r1	; 0x800322 <_ZN7TwoWire13txBufferIndexE>
    28cc:	10 92 21 03 	sts	0x0321, r1	; 0x800321 <_ZN7TwoWire14txBufferLengthE>
    28d0:	10 92 20 03 	sts	0x0320, r1	; 0x800320 <_ZN7TwoWire12transmittingE>
    28d4:	0f 91       	pop	r16
    28d6:	08 95       	ret

000028d8 <_ZN7TwoWire11requestFromEhhmhh>:
    28d8:	4f 92       	push	r4
    28da:	5f 92       	push	r5
    28dc:	6f 92       	push	r6
    28de:	7f 92       	push	r7
    28e0:	af 92       	push	r10
    28e2:	bf 92       	push	r11
    28e4:	cf 92       	push	r12
    28e6:	ef 92       	push	r14
    28e8:	ff 92       	push	r15
    28ea:	0f 93       	push	r16
    28ec:	1f 93       	push	r17
    28ee:	cf 93       	push	r28
    28f0:	df 93       	push	r29
    28f2:	5c 01       	movw	r10, r24
    28f4:	f6 2e       	mov	r15, r22
    28f6:	d4 2f       	mov	r29, r20
    28f8:	28 01       	movw	r4, r16
    28fa:	39 01       	movw	r6, r18
    28fc:	ee 20       	and	r14, r14
    28fe:	21 f1       	breq	.+72     	; 0x2948 <_ZN7TwoWire11requestFromEhhmhh+0x70>
    2900:	0e 94 4f 14 	call	0x289e	; 0x289e <_ZN7TwoWire17beginTransmissionEh>
    2904:	ce 2d       	mov	r28, r14
    2906:	c4 30       	cpi	r28, 0x04	; 4
    2908:	08 f0       	brcs	.+2      	; 0x290c <_ZN7TwoWire11requestFromEhhmhh+0x34>
    290a:	c3 e0       	ldi	r28, 0x03	; 3
    290c:	c1 50       	subi	r28, 0x01	; 1
    290e:	c0 f0       	brcs	.+48     	; 0x2940 <_ZN7TwoWire11requestFromEhhmhh+0x68>
    2910:	28 e0       	ldi	r18, 0x08	; 8
    2912:	c2 9f       	mul	r28, r18
    2914:	c0 01       	movw	r24, r0
    2916:	11 24       	eor	r1, r1
    2918:	a3 01       	movw	r20, r6
    291a:	92 01       	movw	r18, r4
    291c:	04 c0       	rjmp	.+8      	; 0x2926 <_ZN7TwoWire11requestFromEhhmhh+0x4e>
    291e:	56 95       	lsr	r21
    2920:	47 95       	ror	r20
    2922:	37 95       	ror	r19
    2924:	27 95       	ror	r18
    2926:	8a 95       	dec	r24
    2928:	d2 f7       	brpl	.-12     	; 0x291e <_ZN7TwoWire11requestFromEhhmhh+0x46>
    292a:	ca 01       	movw	r24, r20
    292c:	b9 01       	movw	r22, r18
    292e:	d5 01       	movw	r26, r10
    2930:	ed 91       	ld	r30, X+
    2932:	fc 91       	ld	r31, X
    2934:	01 90       	ld	r0, Z+
    2936:	f0 81       	ld	r31, Z
    2938:	e0 2d       	mov	r30, r0
    293a:	c5 01       	movw	r24, r10
    293c:	09 95       	icall
    293e:	e6 cf       	rjmp	.-52     	; 0x290c <_ZN7TwoWire11requestFromEhhmhh+0x34>
    2940:	60 e0       	ldi	r22, 0x00	; 0
    2942:	c5 01       	movw	r24, r10
    2944:	0e 94 59 14 	call	0x28b2	; 0x28b2 <_ZN7TwoWire15endTransmissionEh>
    2948:	4d 2f       	mov	r20, r29
    294a:	d1 32       	cpi	r29, 0x21	; 33
    294c:	08 f0       	brcs	.+2      	; 0x2950 <_ZN7TwoWire11requestFromEhhmhh+0x78>
    294e:	40 e2       	ldi	r20, 0x20	; 32
    2950:	2c 2d       	mov	r18, r12
    2952:	66 e4       	ldi	r22, 0x46	; 70
    2954:	73 e0       	ldi	r23, 0x03	; 3
    2956:	8f 2d       	mov	r24, r15
    2958:	0e 94 b1 11 	call	0x2362	; 0x2362 <twi_readFrom>
    295c:	10 92 45 03 	sts	0x0345, r1	; 0x800345 <_ZN7TwoWire13rxBufferIndexE>
    2960:	80 93 44 03 	sts	0x0344, r24	; 0x800344 <_ZN7TwoWire14rxBufferLengthE>
    2964:	df 91       	pop	r29
    2966:	cf 91       	pop	r28
    2968:	1f 91       	pop	r17
    296a:	0f 91       	pop	r16
    296c:	ff 90       	pop	r15
    296e:	ef 90       	pop	r14
    2970:	cf 90       	pop	r12
    2972:	bf 90       	pop	r11
    2974:	af 90       	pop	r10
    2976:	7f 90       	pop	r7
    2978:	6f 90       	pop	r6
    297a:	5f 90       	pop	r5
    297c:	4f 90       	pop	r4
    297e:	08 95       	ret

00002980 <_ZN7TwoWire11requestFromEhhh>:
    2980:	cf 92       	push	r12
    2982:	ef 92       	push	r14
    2984:	0f 93       	push	r16
    2986:	1f 93       	push	r17
    2988:	c2 2e       	mov	r12, r18
    298a:	e1 2c       	mov	r14, r1
    298c:	00 e0       	ldi	r16, 0x00	; 0
    298e:	10 e0       	ldi	r17, 0x00	; 0
    2990:	98 01       	movw	r18, r16
    2992:	0e 94 6c 14 	call	0x28d8	; 0x28d8 <_ZN7TwoWire11requestFromEhhmhh>
    2996:	1f 91       	pop	r17
    2998:	0f 91       	pop	r16
    299a:	ef 90       	pop	r14
    299c:	cf 90       	pop	r12
    299e:	08 95       	ret

000029a0 <_ZN7TwoWire11requestFromEhh>:
    29a0:	21 e0       	ldi	r18, 0x01	; 1
    29a2:	0c 94 c0 14 	jmp	0x2980	; 0x2980 <_ZN7TwoWire11requestFromEhhh>

000029a6 <_ZN7TwoWire15endTransmissionEv>:
    29a6:	61 e0       	ldi	r22, 0x01	; 1
    29a8:	0c 94 59 14 	jmp	0x28b2	; 0x28b2 <_ZN7TwoWire15endTransmissionEh>

000029ac <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    29ac:	84 e1       	ldi	r24, 0x14	; 20
    29ae:	93 e0       	ldi	r25, 0x03	; 3
    29b0:	0c 94 3f 14 	jmp	0x287e	; 0x287e <_ZN7TwoWireC1Ev>

000029b4 <_GLOBAL__sub_I_buffersize>:
// default I2C address is 0x68
// specific I2C addresses may be passed as a parameter here
// AD0 low = 0x68 (default for InvenSense evaluation board)
// AD0 high = 0x69
//MPU6050 accelgyro;
MPU6050 accelgyro(0x68); // <-- use for AD0 high
    29b4:	68 e6       	ldi	r22, 0x68	; 104
    29b6:	86 e6       	ldi	r24, 0x66	; 102
    29b8:	93 e0       	ldi	r25, 0x03	; 3
    29ba:	0c 94 82 10 	jmp	0x2104	; 0x2104 <_ZN7MPU6050C1Eh>

000029be <_Z8Enc_Initv>:

#include "ENC_lib.h"

void Enc_Init()
{
    pinMode(A1,INPUT_PULLUP);
    29be:	62 e0       	ldi	r22, 0x02	; 2
    29c0:	8f e0       	ldi	r24, 0x0F	; 15
    29c2:	0e 94 ed 1d 	call	0x3bda	; 0x3bda <pinMode>
    pinMode(A0,INPUT_PULLUP);
    29c6:	62 e0       	ldi	r22, 0x02	; 2
    29c8:	8e e0       	ldi	r24, 0x0E	; 14
    29ca:	0e 94 ed 1d 	call	0x3bda	; 0x3bda <pinMode>
    pinMode(13,INPUT_PULLUP);//pinMode(13,INPUT_PULLUP); //led
    29ce:	62 e0       	ldi	r22, 0x02	; 2
    29d0:	8d e0       	ldi	r24, 0x0D	; 13
    29d2:	0e 94 ed 1d 	call	0x3bda	; 0x3bda <pinMode>
    pinMode(12,INPUT_PULLUP);
    29d6:	62 e0       	ldi	r22, 0x02	; 2
    29d8:	8c e0       	ldi	r24, 0x0C	; 12
    29da:	0e 94 ed 1d 	call	0x3bda	; 0x3bda <pinMode>

    PCICR = (1 << PCIE0) | // Enable pin change interrupt 0 {PCINT[14:8]}
            (1 << PCIE1) ; // Enable pin change interrupt 1 {PCINT[7:0]}
    29de:	83 e0       	ldi	r24, 0x03	; 3
    29e0:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>


    PCMSK0 = (1 << PCINT4); // Pin change enable mask 5
    29e4:	ab e6       	ldi	r26, 0x6B	; 107
    29e6:	b0 e0       	ldi	r27, 0x00	; 0
    29e8:	80 e1       	ldi	r24, 0x10	; 16
    29ea:	8c 93       	st	X, r24
    PCMSK1 = (1 << PCINT9); // Pin change enable mask 9
    29ec:	ec e6       	ldi	r30, 0x6C	; 108
    29ee:	f0 e0       	ldi	r31, 0x00	; 0
    29f0:	82 e0       	ldi	r24, 0x02	; 2
    29f2:	80 83       	st	Z, r24
#ifdef ENC__USE_DOUBLE_INT
    PCMSK0 |= (1 << PCINT5); // Pin change enable mask 5
    29f4:	8c 91       	ld	r24, X
    29f6:	80 62       	ori	r24, 0x20	; 32
    29f8:	8c 93       	st	X, r24
    PCMSK1 |= (1 << PCINT8); // Pin change enable mask 9
    29fa:	80 81       	ld	r24, Z
    29fc:	81 60       	ori	r24, 0x01	; 1
    29fe:	80 83       	st	Z, r24
    2a00:	08 95       	ret

00002a02 <__vector_3>:
uint8_t Mot0_tmpState;



ISR(PCINT0_vect)
{
    2a02:	1f 92       	push	r1
    2a04:	0f 92       	push	r0
    2a06:	0f b6       	in	r0, 0x3f	; 63
    2a08:	0f 92       	push	r0
    2a0a:	11 24       	eor	r1, r1
    2a0c:	2f 93       	push	r18
    2a0e:	8f 93       	push	r24
    2a10:	9f 93       	push	r25
    2a12:	af 93       	push	r26
    2a14:	bf 93       	push	r27
    2a16:	ef 93       	push	r30
    2a18:	ff 93       	push	r31
    Mot1_p1Val = bitRead(PINB,5);
    2a1a:	23 b1       	in	r18, 0x03	; 3
    2a1c:	25 fb       	bst	r18, 5
    2a1e:	22 27       	eor	r18, r18
    2a20:	20 f9       	bld	r18, 0
    2a22:	20 93 7b 03 	sts	0x037B, r18	; 0x80037b <Mot1_p1Val>
    Mot1_p2Val = bitRead(PINB,4);
    2a26:	83 b1       	in	r24, 0x03	; 3
    2a28:	82 95       	swap	r24
    2a2a:	81 70       	andi	r24, 0x01	; 1
    2a2c:	80 93 7a 03 	sts	0x037A, r24	; 0x80037a <Mot1_p2Val>
    Mot1_tmpState = Mot1_state & 3;
    2a30:	90 91 7c 03 	lds	r25, 0x037C	; 0x80037c <Mot1_state>
    2a34:	93 70       	andi	r25, 0x03	; 3

    if (Mot1_p1Val) Mot1_tmpState |= 8;
    2a36:	21 11       	cpse	r18, r1
    2a38:	98 60       	ori	r25, 0x08	; 8
    2a3a:	90 93 79 03 	sts	0x0379, r25	; 0x800379 <Mot1_tmpState>
    if (Mot1_p2Val) Mot1_tmpState |= 4;
    2a3e:	88 23       	and	r24, r24
    2a40:	29 f0       	breq	.+10     	; 0x2a4c <__vector_3+0x4a>
    2a42:	80 91 79 03 	lds	r24, 0x0379	; 0x800379 <Mot1_tmpState>
    2a46:	84 60       	ori	r24, 0x04	; 4
    2a48:	80 93 79 03 	sts	0x0379, r24	; 0x800379 <Mot1_tmpState>

    Mot1_state = (Mot1_tmpState >> 2);
    2a4c:	e0 91 79 03 	lds	r30, 0x0379	; 0x800379 <Mot1_tmpState>
    2a50:	8e 2f       	mov	r24, r30
    2a52:	90 e0       	ldi	r25, 0x00	; 0
    2a54:	95 95       	asr	r25
    2a56:	87 95       	ror	r24
    2a58:	95 95       	asr	r25
    2a5a:	87 95       	ror	r24
    2a5c:	80 93 7c 03 	sts	0x037C, r24	; 0x80037c <Mot1_state>
    switch (Mot1_tmpState)
    2a60:	8e 2f       	mov	r24, r30
    2a62:	90 e0       	ldi	r25, 0x00	; 0
    2a64:	fc 01       	movw	r30, r24
    2a66:	31 97       	sbiw	r30, 0x01	; 1
    2a68:	ee 30       	cpi	r30, 0x0E	; 14
    2a6a:	f1 05       	cpc	r31, r1
    2a6c:	d8 f5       	brcc	.+118    	; 0x2ae4 <__vector_3+0xe2>
    2a6e:	e5 5a       	subi	r30, 0xA5	; 165
    2a70:	ff 4f       	sbci	r31, 0xFF	; 255
    2a72:	0c 94 c0 1e 	jmp	0x3d80	; 0x3d80 <__tablejump2__>
        {
        case 1:
        case 7:
        case 8:
        case 14:
            Mot1_Enc++;
    2a76:	80 91 7d 03 	lds	r24, 0x037D	; 0x80037d <Mot1_Enc>
    2a7a:	90 91 7e 03 	lds	r25, 0x037E	; 0x80037e <Mot1_Enc+0x1>
    2a7e:	a0 91 7f 03 	lds	r26, 0x037F	; 0x80037f <Mot1_Enc+0x2>
    2a82:	b0 91 80 03 	lds	r27, 0x0380	; 0x800380 <Mot1_Enc+0x3>
    2a86:	01 96       	adiw	r24, 0x01	; 1
    2a88:	a1 1d       	adc	r26, r1
    2a8a:	b1 1d       	adc	r27, r1
    2a8c:	23 c0       	rjmp	.+70     	; 0x2ad4 <__vector_3+0xd2>
            return;
        case 2:
        case 4:
        case 11:
        case 13:
            Mot1_Enc--;
    2a8e:	80 91 7d 03 	lds	r24, 0x037D	; 0x80037d <Mot1_Enc>
    2a92:	90 91 7e 03 	lds	r25, 0x037E	; 0x80037e <Mot1_Enc+0x1>
    2a96:	a0 91 7f 03 	lds	r26, 0x037F	; 0x80037f <Mot1_Enc+0x2>
    2a9a:	b0 91 80 03 	lds	r27, 0x0380	; 0x800380 <Mot1_Enc+0x3>
    2a9e:	01 97       	sbiw	r24, 0x01	; 1
    2aa0:	a1 09       	sbc	r26, r1
    2aa2:	b1 09       	sbc	r27, r1
    2aa4:	17 c0       	rjmp	.+46     	; 0x2ad4 <__vector_3+0xd2>
            return;
        case 3:
        case 12:
            Mot1_Enc += 2;
    2aa6:	80 91 7d 03 	lds	r24, 0x037D	; 0x80037d <Mot1_Enc>
    2aaa:	90 91 7e 03 	lds	r25, 0x037E	; 0x80037e <Mot1_Enc+0x1>
    2aae:	a0 91 7f 03 	lds	r26, 0x037F	; 0x80037f <Mot1_Enc+0x2>
    2ab2:	b0 91 80 03 	lds	r27, 0x0380	; 0x800380 <Mot1_Enc+0x3>
    2ab6:	02 96       	adiw	r24, 0x02	; 2
    2ab8:	a1 1d       	adc	r26, r1
    2aba:	b1 1d       	adc	r27, r1
    2abc:	0b c0       	rjmp	.+22     	; 0x2ad4 <__vector_3+0xd2>
            return;
        case 6:
        case 9:
            Mot1_Enc -= 2;
    2abe:	80 91 7d 03 	lds	r24, 0x037D	; 0x80037d <Mot1_Enc>
    2ac2:	90 91 7e 03 	lds	r25, 0x037E	; 0x80037e <Mot1_Enc+0x1>
    2ac6:	a0 91 7f 03 	lds	r26, 0x037F	; 0x80037f <Mot1_Enc+0x2>
    2aca:	b0 91 80 03 	lds	r27, 0x0380	; 0x800380 <Mot1_Enc+0x3>
    2ace:	02 97       	sbiw	r24, 0x02	; 2
    2ad0:	a1 09       	sbc	r26, r1
    2ad2:	b1 09       	sbc	r27, r1
    2ad4:	80 93 7d 03 	sts	0x037D, r24	; 0x80037d <Mot1_Enc>
    2ad8:	90 93 7e 03 	sts	0x037E, r25	; 0x80037e <Mot1_Enc+0x1>
    2adc:	a0 93 7f 03 	sts	0x037F, r26	; 0x80037f <Mot1_Enc+0x2>
    2ae0:	b0 93 80 03 	sts	0x0380, r27	; 0x800380 <Mot1_Enc+0x3>
            return;
        }
}
    2ae4:	ff 91       	pop	r31
    2ae6:	ef 91       	pop	r30
    2ae8:	bf 91       	pop	r27
    2aea:	af 91       	pop	r26
    2aec:	9f 91       	pop	r25
    2aee:	8f 91       	pop	r24
    2af0:	2f 91       	pop	r18
    2af2:	0f 90       	pop	r0
    2af4:	0f be       	out	0x3f, r0	; 63
    2af6:	0f 90       	pop	r0
    2af8:	1f 90       	pop	r1
    2afa:	18 95       	reti

00002afc <__vector_4>:

ISR(PCINT1_vect)
{
    2afc:	1f 92       	push	r1
    2afe:	0f 92       	push	r0
    2b00:	0f b6       	in	r0, 0x3f	; 63
    2b02:	0f 92       	push	r0
    2b04:	11 24       	eor	r1, r1
    2b06:	2f 93       	push	r18
    2b08:	8f 93       	push	r24
    2b0a:	9f 93       	push	r25
    2b0c:	af 93       	push	r26
    2b0e:	bf 93       	push	r27
    2b10:	ef 93       	push	r30
    2b12:	ff 93       	push	r31
    Mot0_p1Val = bitRead(PINC,1);
    2b14:	96 b1       	in	r25, 0x06	; 6
    2b16:	96 95       	lsr	r25
    2b18:	91 70       	andi	r25, 0x01	; 1
    2b1a:	90 93 77 03 	sts	0x0377, r25	; 0x800377 <Mot0_p1Val>
    Mot0_p2Val = bitRead(PINC,0);
    2b1e:	26 b1       	in	r18, 0x06	; 6
    2b20:	21 70       	andi	r18, 0x01	; 1
    2b22:	20 93 76 03 	sts	0x0376, r18	; 0x800376 <Mot0_p2Val>
    Mot0_tmpState = Mot0_state & 3;
    2b26:	80 91 78 03 	lds	r24, 0x0378	; 0x800378 <Mot0_state>
    2b2a:	83 70       	andi	r24, 0x03	; 3

    if (Mot0_p1Val) Mot0_tmpState |= 4;
    2b2c:	91 11       	cpse	r25, r1
    2b2e:	84 60       	ori	r24, 0x04	; 4
    2b30:	80 93 75 03 	sts	0x0375, r24	; 0x800375 <Mot0_tmpState>
    if (Mot0_p2Val) Mot0_tmpState |= 8;
    2b34:	22 23       	and	r18, r18
    2b36:	29 f0       	breq	.+10     	; 0x2b42 <__vector_4+0x46>
    2b38:	80 91 75 03 	lds	r24, 0x0375	; 0x800375 <Mot0_tmpState>
    2b3c:	88 60       	ori	r24, 0x08	; 8
    2b3e:	80 93 75 03 	sts	0x0375, r24	; 0x800375 <Mot0_tmpState>

    Mot0_state = (Mot0_tmpState >> 2);
    2b42:	e0 91 75 03 	lds	r30, 0x0375	; 0x800375 <Mot0_tmpState>
    2b46:	8e 2f       	mov	r24, r30
    2b48:	90 e0       	ldi	r25, 0x00	; 0
    2b4a:	95 95       	asr	r25
    2b4c:	87 95       	ror	r24
    2b4e:	95 95       	asr	r25
    2b50:	87 95       	ror	r24
    2b52:	80 93 78 03 	sts	0x0378, r24	; 0x800378 <Mot0_state>
    switch (Mot0_tmpState)
    2b56:	8e 2f       	mov	r24, r30
    2b58:	90 e0       	ldi	r25, 0x00	; 0
    2b5a:	fc 01       	movw	r30, r24
    2b5c:	31 97       	sbiw	r30, 0x01	; 1
    2b5e:	ee 30       	cpi	r30, 0x0E	; 14
    2b60:	f1 05       	cpc	r31, r1
    2b62:	d8 f5       	brcc	.+118    	; 0x2bda <__vector_4+0xde>
    2b64:	e7 59       	subi	r30, 0x97	; 151
    2b66:	ff 4f       	sbci	r31, 0xFF	; 255
    2b68:	0c 94 c0 1e 	jmp	0x3d80	; 0x3d80 <__tablejump2__>
        {
        case 1:
        case 7:
        case 8:
        case 14:
            Mot0_Enc++;
    2b6c:	80 91 81 03 	lds	r24, 0x0381	; 0x800381 <Mot0_Enc>
    2b70:	90 91 82 03 	lds	r25, 0x0382	; 0x800382 <Mot0_Enc+0x1>
    2b74:	a0 91 83 03 	lds	r26, 0x0383	; 0x800383 <Mot0_Enc+0x2>
    2b78:	b0 91 84 03 	lds	r27, 0x0384	; 0x800384 <Mot0_Enc+0x3>
    2b7c:	01 96       	adiw	r24, 0x01	; 1
    2b7e:	a1 1d       	adc	r26, r1
    2b80:	b1 1d       	adc	r27, r1
    2b82:	23 c0       	rjmp	.+70     	; 0x2bca <__vector_4+0xce>
            return;
        case 2:
        case 4:
        case 11:
        case 13:
            Mot0_Enc--;
    2b84:	80 91 81 03 	lds	r24, 0x0381	; 0x800381 <Mot0_Enc>
    2b88:	90 91 82 03 	lds	r25, 0x0382	; 0x800382 <Mot0_Enc+0x1>
    2b8c:	a0 91 83 03 	lds	r26, 0x0383	; 0x800383 <Mot0_Enc+0x2>
    2b90:	b0 91 84 03 	lds	r27, 0x0384	; 0x800384 <Mot0_Enc+0x3>
    2b94:	01 97       	sbiw	r24, 0x01	; 1
    2b96:	a1 09       	sbc	r26, r1
    2b98:	b1 09       	sbc	r27, r1
    2b9a:	17 c0       	rjmp	.+46     	; 0x2bca <__vector_4+0xce>
            return;
        case 3:
        case 12:
            Mot0_Enc += 2;
    2b9c:	80 91 81 03 	lds	r24, 0x0381	; 0x800381 <Mot0_Enc>
    2ba0:	90 91 82 03 	lds	r25, 0x0382	; 0x800382 <Mot0_Enc+0x1>
    2ba4:	a0 91 83 03 	lds	r26, 0x0383	; 0x800383 <Mot0_Enc+0x2>
    2ba8:	b0 91 84 03 	lds	r27, 0x0384	; 0x800384 <Mot0_Enc+0x3>
    2bac:	02 96       	adiw	r24, 0x02	; 2
    2bae:	a1 1d       	adc	r26, r1
    2bb0:	b1 1d       	adc	r27, r1
    2bb2:	0b c0       	rjmp	.+22     	; 0x2bca <__vector_4+0xce>
            return;
        case 6:
        case 9:
            Mot0_Enc -= 2;
    2bb4:	80 91 81 03 	lds	r24, 0x0381	; 0x800381 <Mot0_Enc>
    2bb8:	90 91 82 03 	lds	r25, 0x0382	; 0x800382 <Mot0_Enc+0x1>
    2bbc:	a0 91 83 03 	lds	r26, 0x0383	; 0x800383 <Mot0_Enc+0x2>
    2bc0:	b0 91 84 03 	lds	r27, 0x0384	; 0x800384 <Mot0_Enc+0x3>
    2bc4:	02 97       	sbiw	r24, 0x02	; 2
    2bc6:	a1 09       	sbc	r26, r1
    2bc8:	b1 09       	sbc	r27, r1
    2bca:	80 93 81 03 	sts	0x0381, r24	; 0x800381 <Mot0_Enc>
    2bce:	90 93 82 03 	sts	0x0382, r25	; 0x800382 <Mot0_Enc+0x1>
    2bd2:	a0 93 83 03 	sts	0x0383, r26	; 0x800383 <Mot0_Enc+0x2>
    2bd6:	b0 93 84 03 	sts	0x0384, r27	; 0x800384 <Mot0_Enc+0x3>
            return;
        }
}
    2bda:	ff 91       	pop	r31
    2bdc:	ef 91       	pop	r30
    2bde:	bf 91       	pop	r27
    2be0:	af 91       	pop	r26
    2be2:	9f 91       	pop	r25
    2be4:	8f 91       	pop	r24
    2be6:	2f 91       	pop	r18
    2be8:	0f 90       	pop	r0
    2bea:	0f be       	out	0x3f, r0	; 63
    2bec:	0f 90       	pop	r0
    2bee:	1f 90       	pop	r1
    2bf0:	18 95       	reti

00002bf2 <_Z15Motor0_SetSpeedhh.part.0>:
    PORTB &= ~(1<<PORTB3);
}


#ifdef MOT__USE_SLOW_DECAY
void Motor0_SetSpeed(uint8_t dir,uint8_t speed)
    2bf2:	cf 93       	push	r28
    2bf4:	c8 2f       	mov	r28, r24
            PWM_0_disable_output_ch0();
            PORTD |= (1<<PORTD6);
        }
    else if (dir==REV)
        {
            PWM_0_enable_output_ch0();
    2bf6:	0e 94 94 16 	call	0x2d28	; 0x2d28 <PWM_0_enable_output_ch0>
            PWM_0_load_duty_cycle_ch0(255-speed);
    2bfa:	8c 2f       	mov	r24, r28
    2bfc:	80 95       	com	r24
    2bfe:	0e 94 a4 16 	call	0x2d48	; 0x2d48 <PWM_0_load_duty_cycle_ch0>

            PWM_0_disable_output_ch1();
    2c02:	0e 94 a0 16 	call	0x2d40	; 0x2d40 <PWM_0_disable_output_ch1>
            PORTD |= (1<<PORTD5);
    2c06:	5d 9a       	sbi	0x0b, 5	; 11
        }
}
    2c08:	cf 91       	pop	r28
    2c0a:	08 95       	ret

00002c0c <_Z15Motor1_SetSpeedhh.part.1>:
        }
}
#endif

#ifdef MOT__USE_SLOW_DECAY
void Motor1_SetSpeed(uint8_t dir,uint8_t speed)
    2c0c:	cf 93       	push	r28
    2c0e:	c8 2f       	mov	r28, r24
            PWM_1_disable_output_ch0();
            PORTB |= (1<<PORTB3);
        }
    else if (dir==REV)
        {
            PWM_1_enable_output_ch0();
    2c10:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <PWM_1_enable_output_ch0>
            PWM_1_load_duty_cycle_ch0(255-speed);
    2c14:	8c 2f       	mov	r24, r28
    2c16:	80 95       	com	r24
    2c18:	0e 94 d3 16 	call	0x2da6	; 0x2da6 <PWM_1_load_duty_cycle_ch0>

            PWM_1_disable_output_ch1();
    2c1c:	0e 94 cd 16 	call	0x2d9a	; 0x2d9a <PWM_1_disable_output_ch1>
            PORTD |= (1<<PORTD3);
    2c20:	5b 9a       	sbi	0x0b, 3	; 11
        }
}
    2c22:	cf 91       	pop	r28
    2c24:	08 95       	ret

00002c26 <_Z11Motor0_Stopv>:
    Motor1_Stop();
}

void Motor0_Stop()
{
    PWM_0_disable_output_ch1();
    2c26:	0e 94 a0 16 	call	0x2d40	; 0x2d40 <PWM_0_disable_output_ch1>
    PWM_0_disable_output_ch0();
    2c2a:	0e 94 98 16 	call	0x2d30	; 0x2d30 <PWM_0_disable_output_ch0>
    PORTD &= ~(1<<PORTD5);
    2c2e:	5d 98       	cbi	0x0b, 5	; 11
    PORTD &= ~(1<<PORTD6);
    2c30:	5e 98       	cbi	0x0b, 6	; 11
    2c32:	08 95       	ret

00002c34 <_Z9Mot0_Initv>:
#include "pwm_basic.h"


void Mot0_Init(void)
{
    PWM_0_init();
    2c34:	0e 94 84 16 	call	0x2d08	; 0x2d08 <PWM_0_init>

    pinMode(PD5Pin,OUTPUT);
    2c38:	61 e0       	ldi	r22, 0x01	; 1
    2c3a:	85 e0       	ldi	r24, 0x05	; 5
    2c3c:	0e 94 ed 1d 	call	0x3bda	; 0x3bda <pinMode>
    pinMode(PD6Pin,OUTPUT);
    2c40:	61 e0       	ldi	r22, 0x01	; 1
    2c42:	86 e0       	ldi	r24, 0x06	; 6
    2c44:	0e 94 ed 1d 	call	0x3bda	; 0x3bda <pinMode>
    Motor0_Stop();
    2c48:	0c 94 13 16 	jmp	0x2c26	; 0x2c26 <_Z11Motor0_Stopv>

00002c4c <_Z11Motor1_Stopv>:
    PORTD &= ~(1<<PORTD6);
}

void Motor1_Stop()
{
    PWM_1_disable_output_ch1();
    2c4c:	0e 94 cd 16 	call	0x2d9a	; 0x2d9a <PWM_1_disable_output_ch1>
    PWM_1_disable_output_ch0();
    2c50:	0e 94 c1 16 	call	0x2d82	; 0x2d82 <PWM_1_disable_output_ch0>
    PORTD &= ~(1<<PORTD3);
    2c54:	5b 98       	cbi	0x0b, 3	; 11
    PORTB &= ~(1<<PORTB3);
    2c56:	2b 98       	cbi	0x05, 3	; 5
    2c58:	08 95       	ret

00002c5a <_Z9Mot1_Initv>:
    Motor0_Stop();
}

void Mot1_Init(void)
{
    PWM_1_init();
    2c5a:	0e 94 a8 16 	call	0x2d50	; 0x2d50 <PWM_1_init>

    pinMode(PB3Pin,OUTPUT);
    2c5e:	61 e0       	ldi	r22, 0x01	; 1
    2c60:	8b e0       	ldi	r24, 0x0B	; 11
    2c62:	0e 94 ed 1d 	call	0x3bda	; 0x3bda <pinMode>
    pinMode(PD3Pin,OUTPUT);
    2c66:	61 e0       	ldi	r22, 0x01	; 1
    2c68:	83 e0       	ldi	r24, 0x03	; 3
    2c6a:	0e 94 ed 1d 	call	0x3bda	; 0x3bda <pinMode>
    Motor1_Stop();
    2c6e:	0c 94 26 16 	jmp	0x2c4c	; 0x2c4c <_Z11Motor1_Stopv>

00002c72 <_Z15Motor0_SetSpeedhh>:
}


#ifdef MOT__USE_SLOW_DECAY
void Motor0_SetSpeed(uint8_t dir,uint8_t speed)
{
    2c72:	cf 93       	push	r28
    if (dir==FWD)
    2c74:	81 11       	cpse	r24, r1
    2c76:	0b c0       	rjmp	.+22     	; 0x2c8e <_Z15Motor0_SetSpeedhh+0x1c>
    2c78:	c6 2f       	mov	r28, r22
        {
            PWM_0_enable_output_ch1();
    2c7a:	0e 94 9c 16 	call	0x2d38	; 0x2d38 <PWM_0_enable_output_ch1>
            PWM_0_load_duty_cycle_ch1(255-speed);
    2c7e:	8c 2f       	mov	r24, r28
    2c80:	80 95       	com	r24
    2c82:	0e 94 a6 16 	call	0x2d4c	; 0x2d4c <PWM_0_load_duty_cycle_ch1>

            PWM_0_disable_output_ch0();
    2c86:	0e 94 98 16 	call	0x2d30	; 0x2d30 <PWM_0_disable_output_ch0>
            PORTD |= (1<<PORTD6);
    2c8a:	5e 9a       	sbi	0x0b, 6	; 11
    2c8c:	06 c0       	rjmp	.+12     	; 0x2c9a <_Z15Motor0_SetSpeedhh+0x28>
        }
    else if (dir==REV)
    2c8e:	81 30       	cpi	r24, 0x01	; 1
    2c90:	21 f4       	brne	.+8      	; 0x2c9a <_Z15Motor0_SetSpeedhh+0x28>
    2c92:	86 2f       	mov	r24, r22
            PWM_0_load_duty_cycle_ch0(255-speed);

            PWM_0_disable_output_ch1();
            PORTD |= (1<<PORTD5);
        }
}
    2c94:	cf 91       	pop	r28
    2c96:	0c 94 f9 15 	jmp	0x2bf2	; 0x2bf2 <_Z15Motor0_SetSpeedhh.part.0>
    2c9a:	cf 91       	pop	r28
    2c9c:	08 95       	ret

00002c9e <_Z15Motor1_SetSpeedhh>:
}
#endif

#ifdef MOT__USE_SLOW_DECAY
void Motor1_SetSpeed(uint8_t dir,uint8_t speed)
{
    2c9e:	cf 93       	push	r28
    if (dir==FWD)
    2ca0:	81 11       	cpse	r24, r1
    2ca2:	0b c0       	rjmp	.+22     	; 0x2cba <_Z15Motor1_SetSpeedhh+0x1c>
    2ca4:	c6 2f       	mov	r28, r22
        {
            PWM_1_enable_output_ch1();
    2ca6:	0e 94 c7 16 	call	0x2d8e	; 0x2d8e <PWM_1_enable_output_ch1>
            PWM_1_load_duty_cycle_ch1(255-speed);
    2caa:	8c 2f       	mov	r24, r28
    2cac:	80 95       	com	r24
    2cae:	0e 94 d6 16 	call	0x2dac	; 0x2dac <PWM_1_load_duty_cycle_ch1>

            PWM_1_disable_output_ch0();
    2cb2:	0e 94 c1 16 	call	0x2d82	; 0x2d82 <PWM_1_disable_output_ch0>
            PORTB |= (1<<PORTB3);
    2cb6:	2b 9a       	sbi	0x05, 3	; 5
    2cb8:	06 c0       	rjmp	.+12     	; 0x2cc6 <_Z15Motor1_SetSpeedhh+0x28>
        }
    else if (dir==REV)
    2cba:	81 30       	cpi	r24, 0x01	; 1
    2cbc:	21 f4       	brne	.+8      	; 0x2cc6 <_Z15Motor1_SetSpeedhh+0x28>
    2cbe:	86 2f       	mov	r24, r22
            PWM_1_load_duty_cycle_ch0(255-speed);

            PWM_1_disable_output_ch1();
            PORTD |= (1<<PORTD3);
        }
}
    2cc0:	cf 91       	pop	r28
    2cc2:	0c 94 06 16 	jmp	0x2c0c	; 0x2c0c <_Z15Motor1_SetSpeedhh.part.1>
    2cc6:	cf 91       	pop	r28
    2cc8:	08 95       	ret

00002cca <_Z15Motors_SetSpeedii>:
        }
}
#endif

void Motors_SetSpeed(int leftMotorSpeed, int rightMotorSpeed)
{
    2cca:	cf 93       	push	r28
    2ccc:	df 93       	push	r29
    2cce:	eb 01       	movw	r28, r22

    if(leftMotorSpeed >= 0)
    2cd0:	97 fd       	sbrc	r25, 7
    2cd2:	03 c0       	rjmp	.+6      	; 0x2cda <_Z15Motors_SetSpeedii+0x10>
    2cd4:	0e 94 f9 15 	call	0x2bf2	; 0x2bf2 <_Z15Motor0_SetSpeedhh.part.0>
    2cd8:	07 c0       	rjmp	.+14     	; 0x2ce8 <_Z15Motors_SetSpeedii+0x1e>
        {
            Motor0_SetSpeed(REV,leftMotorSpeed);
        }
    else
        {
            Motor0_SetSpeed(FWD, abs(leftMotorSpeed));
    2cda:	66 27       	eor	r22, r22
    2cdc:	77 27       	eor	r23, r23
    2cde:	68 1b       	sub	r22, r24
    2ce0:	79 0b       	sbc	r23, r25
    2ce2:	80 e0       	ldi	r24, 0x00	; 0
    2ce4:	0e 94 39 16 	call	0x2c72	; 0x2c72 <_Z15Motor0_SetSpeedhh>
        }

    if(rightMotorSpeed >= 0)
    2ce8:	d7 fd       	sbrc	r29, 7
    2cea:	05 c0       	rjmp	.+10     	; 0x2cf6 <_Z15Motors_SetSpeedii+0x2c>
    2cec:	8c 2f       	mov	r24, r28
        }
    else
        {
            Motor1_SetSpeed(FWD,abs(rightMotorSpeed));
        }
}
    2cee:	df 91       	pop	r29
    2cf0:	cf 91       	pop	r28
    2cf2:	0c 94 06 16 	jmp	0x2c0c	; 0x2c0c <_Z15Motor1_SetSpeedhh.part.1>
        {
            Motor1_SetSpeed(REV,rightMotorSpeed);
        }
    else
        {
            Motor1_SetSpeed(FWD,abs(rightMotorSpeed));
    2cf6:	66 27       	eor	r22, r22
    2cf8:	77 27       	eor	r23, r23
    2cfa:	6c 1b       	sub	r22, r28
    2cfc:	7d 0b       	sbc	r23, r29
    2cfe:	80 e0       	ldi	r24, 0x00	; 0
        }
}
    2d00:	df 91       	pop	r29
    2d02:	cf 91       	pop	r28
        {
            Motor1_SetSpeed(REV,rightMotorSpeed);
        }
    else
        {
            Motor1_SetSpeed(FWD,abs(rightMotorSpeed));
    2d04:	0c 94 4f 16 	jmp	0x2c9e	; 0x2c9e <_Z15Motor1_SetSpeedhh>

00002d08 <PWM_0_init>:
    TCCR2A &= ~((1 << COM2B1) | (1 << COM2B0));
}

inline void PWM_1_load_counter(PWM_1_register_t counter_value)
{
    TCNT2 = counter_value;
    2d08:	e4 e6       	ldi	r30, 0x64	; 100
    2d0a:	f0 e0       	ldi	r31, 0x00	; 0
    2d0c:	80 81       	ld	r24, Z
    2d0e:	8f 7d       	andi	r24, 0xDF	; 223
    2d10:	80 83       	st	Z, r24
    2d12:	83 ea       	ldi	r24, 0xA3	; 163
    2d14:	84 bd       	out	0x24, r24	; 36
    2d16:	82 e0       	ldi	r24, 0x02	; 2
    2d18:	85 bd       	out	0x25, r24	; 37
    2d1a:	81 e0       	ldi	r24, 0x01	; 1
    2d1c:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
    2d20:	17 bc       	out	0x27, r1	; 39
    2d22:	18 bc       	out	0x28, r1	; 40
    2d24:	80 e0       	ldi	r24, 0x00	; 0
    2d26:	08 95       	ret

00002d28 <PWM_0_enable_output_ch0>:
    2d28:	84 b5       	in	r24, 0x24	; 36
    2d2a:	80 68       	ori	r24, 0x80	; 128
    2d2c:	84 bd       	out	0x24, r24	; 36
    2d2e:	08 95       	ret

00002d30 <PWM_0_disable_output_ch0>:
    2d30:	84 b5       	in	r24, 0x24	; 36
    2d32:	8f 73       	andi	r24, 0x3F	; 63
    2d34:	84 bd       	out	0x24, r24	; 36
    2d36:	08 95       	ret

00002d38 <PWM_0_enable_output_ch1>:
    2d38:	84 b5       	in	r24, 0x24	; 36
    2d3a:	80 62       	ori	r24, 0x20	; 32
    2d3c:	84 bd       	out	0x24, r24	; 36
    2d3e:	08 95       	ret

00002d40 <PWM_0_disable_output_ch1>:
    2d40:	84 b5       	in	r24, 0x24	; 36
    2d42:	8f 7c       	andi	r24, 0xCF	; 207
    2d44:	84 bd       	out	0x24, r24	; 36
    2d46:	08 95       	ret

00002d48 <PWM_0_load_duty_cycle_ch0>:
    2d48:	87 bd       	out	0x27, r24	; 39
    2d4a:	08 95       	ret

00002d4c <PWM_0_load_duty_cycle_ch1>:
    2d4c:	88 bd       	out	0x28, r24	; 40
    2d4e:	08 95       	ret

00002d50 <PWM_1_init>:
    2d50:	e4 e6       	ldi	r30, 0x64	; 100
    2d52:	f0 e0       	ldi	r31, 0x00	; 0
    2d54:	80 81       	ld	r24, Z
    2d56:	8f 7b       	andi	r24, 0xBF	; 191
    2d58:	80 83       	st	Z, r24
    2d5a:	83 ea       	ldi	r24, 0xA3	; 163
    2d5c:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    2d60:	82 e0       	ldi	r24, 0x02	; 2
    2d62:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
    2d66:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
    2d6a:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
    2d6e:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
    2d72:	80 e0       	ldi	r24, 0x00	; 0
    2d74:	08 95       	ret

00002d76 <PWM_1_enable_output_ch0>:
    2d76:	e0 eb       	ldi	r30, 0xB0	; 176
    2d78:	f0 e0       	ldi	r31, 0x00	; 0
    2d7a:	80 81       	ld	r24, Z
    2d7c:	80 68       	ori	r24, 0x80	; 128
    2d7e:	80 83       	st	Z, r24
    2d80:	08 95       	ret

00002d82 <PWM_1_disable_output_ch0>:
    2d82:	e0 eb       	ldi	r30, 0xB0	; 176
    2d84:	f0 e0       	ldi	r31, 0x00	; 0
    2d86:	80 81       	ld	r24, Z
    2d88:	8f 73       	andi	r24, 0x3F	; 63
    2d8a:	80 83       	st	Z, r24
    2d8c:	08 95       	ret

00002d8e <PWM_1_enable_output_ch1>:
    2d8e:	e0 eb       	ldi	r30, 0xB0	; 176
    2d90:	f0 e0       	ldi	r31, 0x00	; 0
    2d92:	80 81       	ld	r24, Z
    2d94:	80 62       	ori	r24, 0x20	; 32
    2d96:	80 83       	st	Z, r24
    2d98:	08 95       	ret

00002d9a <PWM_1_disable_output_ch1>:
    2d9a:	e0 eb       	ldi	r30, 0xB0	; 176
    2d9c:	f0 e0       	ldi	r31, 0x00	; 0
    2d9e:	80 81       	ld	r24, Z
    2da0:	8f 7c       	andi	r24, 0xCF	; 207
    2da2:	80 83       	st	Z, r24
    2da4:	08 95       	ret

00002da6 <PWM_1_load_duty_cycle_ch0>:
}

inline void PWM_1_load_duty_cycle_ch0(PWM_1_register_t duty_value)
{
    OCR2A = duty_value;
    2da6:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
    2daa:	08 95       	ret

00002dac <PWM_1_load_duty_cycle_ch1>:
}

inline void PWM_1_load_duty_cycle_ch1(PWM_1_register_t duty_value)
{
    OCR2B = duty_value;
    2dac:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
    2db0:	08 95       	ret

00002db2 <__subsf3>:
    2db2:	50 58       	subi	r21, 0x80	; 128

00002db4 <__addsf3>:
    2db4:	bb 27       	eor	r27, r27
    2db6:	aa 27       	eor	r26, r26
    2db8:	0e 94 f1 16 	call	0x2de2	; 0x2de2 <__addsf3x>
    2dbc:	0c 94 04 19 	jmp	0x3208	; 0x3208 <__fp_round>
    2dc0:	0e 94 f6 18 	call	0x31ec	; 0x31ec <__fp_pscA>
    2dc4:	38 f0       	brcs	.+14     	; 0x2dd4 <__addsf3+0x20>
    2dc6:	0e 94 fd 18 	call	0x31fa	; 0x31fa <__fp_pscB>
    2dca:	20 f0       	brcs	.+8      	; 0x2dd4 <__addsf3+0x20>
    2dcc:	39 f4       	brne	.+14     	; 0x2ddc <__addsf3+0x28>
    2dce:	9f 3f       	cpi	r25, 0xFF	; 255
    2dd0:	19 f4       	brne	.+6      	; 0x2dd8 <__addsf3+0x24>
    2dd2:	26 f4       	brtc	.+8      	; 0x2ddc <__addsf3+0x28>
    2dd4:	0c 94 cc 18 	jmp	0x3198	; 0x3198 <__fp_nan>
    2dd8:	0e f4       	brtc	.+2      	; 0x2ddc <__addsf3+0x28>
    2dda:	e0 95       	com	r30
    2ddc:	e7 fb       	bst	r30, 7
    2dde:	0c 94 c6 18 	jmp	0x318c	; 0x318c <__fp_inf>

00002de2 <__addsf3x>:
    2de2:	e9 2f       	mov	r30, r25
    2de4:	0e 94 15 19 	call	0x322a	; 0x322a <__fp_split3>
    2de8:	58 f3       	brcs	.-42     	; 0x2dc0 <__addsf3+0xc>
    2dea:	ba 17       	cp	r27, r26
    2dec:	62 07       	cpc	r22, r18
    2dee:	73 07       	cpc	r23, r19
    2df0:	84 07       	cpc	r24, r20
    2df2:	95 07       	cpc	r25, r21
    2df4:	20 f0       	brcs	.+8      	; 0x2dfe <__addsf3x+0x1c>
    2df6:	79 f4       	brne	.+30     	; 0x2e16 <__addsf3x+0x34>
    2df8:	a6 f5       	brtc	.+104    	; 0x2e62 <__addsf3x+0x80>
    2dfa:	0c 94 37 19 	jmp	0x326e	; 0x326e <__fp_zero>
    2dfe:	0e f4       	brtc	.+2      	; 0x2e02 <__addsf3x+0x20>
    2e00:	e0 95       	com	r30
    2e02:	0b 2e       	mov	r0, r27
    2e04:	ba 2f       	mov	r27, r26
    2e06:	a0 2d       	mov	r26, r0
    2e08:	0b 01       	movw	r0, r22
    2e0a:	b9 01       	movw	r22, r18
    2e0c:	90 01       	movw	r18, r0
    2e0e:	0c 01       	movw	r0, r24
    2e10:	ca 01       	movw	r24, r20
    2e12:	a0 01       	movw	r20, r0
    2e14:	11 24       	eor	r1, r1
    2e16:	ff 27       	eor	r31, r31
    2e18:	59 1b       	sub	r21, r25
    2e1a:	99 f0       	breq	.+38     	; 0x2e42 <__addsf3x+0x60>
    2e1c:	59 3f       	cpi	r21, 0xF9	; 249
    2e1e:	50 f4       	brcc	.+20     	; 0x2e34 <__addsf3x+0x52>
    2e20:	50 3e       	cpi	r21, 0xE0	; 224
    2e22:	68 f1       	brcs	.+90     	; 0x2e7e <__addsf3x+0x9c>
    2e24:	1a 16       	cp	r1, r26
    2e26:	f0 40       	sbci	r31, 0x00	; 0
    2e28:	a2 2f       	mov	r26, r18
    2e2a:	23 2f       	mov	r18, r19
    2e2c:	34 2f       	mov	r19, r20
    2e2e:	44 27       	eor	r20, r20
    2e30:	58 5f       	subi	r21, 0xF8	; 248
    2e32:	f3 cf       	rjmp	.-26     	; 0x2e1a <__addsf3x+0x38>
    2e34:	46 95       	lsr	r20
    2e36:	37 95       	ror	r19
    2e38:	27 95       	ror	r18
    2e3a:	a7 95       	ror	r26
    2e3c:	f0 40       	sbci	r31, 0x00	; 0
    2e3e:	53 95       	inc	r21
    2e40:	c9 f7       	brne	.-14     	; 0x2e34 <__addsf3x+0x52>
    2e42:	7e f4       	brtc	.+30     	; 0x2e62 <__addsf3x+0x80>
    2e44:	1f 16       	cp	r1, r31
    2e46:	ba 0b       	sbc	r27, r26
    2e48:	62 0b       	sbc	r22, r18
    2e4a:	73 0b       	sbc	r23, r19
    2e4c:	84 0b       	sbc	r24, r20
    2e4e:	ba f0       	brmi	.+46     	; 0x2e7e <__addsf3x+0x9c>
    2e50:	91 50       	subi	r25, 0x01	; 1
    2e52:	a1 f0       	breq	.+40     	; 0x2e7c <__addsf3x+0x9a>
    2e54:	ff 0f       	add	r31, r31
    2e56:	bb 1f       	adc	r27, r27
    2e58:	66 1f       	adc	r22, r22
    2e5a:	77 1f       	adc	r23, r23
    2e5c:	88 1f       	adc	r24, r24
    2e5e:	c2 f7       	brpl	.-16     	; 0x2e50 <__addsf3x+0x6e>
    2e60:	0e c0       	rjmp	.+28     	; 0x2e7e <__addsf3x+0x9c>
    2e62:	ba 0f       	add	r27, r26
    2e64:	62 1f       	adc	r22, r18
    2e66:	73 1f       	adc	r23, r19
    2e68:	84 1f       	adc	r24, r20
    2e6a:	48 f4       	brcc	.+18     	; 0x2e7e <__addsf3x+0x9c>
    2e6c:	87 95       	ror	r24
    2e6e:	77 95       	ror	r23
    2e70:	67 95       	ror	r22
    2e72:	b7 95       	ror	r27
    2e74:	f7 95       	ror	r31
    2e76:	9e 3f       	cpi	r25, 0xFE	; 254
    2e78:	08 f0       	brcs	.+2      	; 0x2e7c <__addsf3x+0x9a>
    2e7a:	b0 cf       	rjmp	.-160    	; 0x2ddc <__addsf3+0x28>
    2e7c:	93 95       	inc	r25
    2e7e:	88 0f       	add	r24, r24
    2e80:	08 f0       	brcs	.+2      	; 0x2e84 <__addsf3x+0xa2>
    2e82:	99 27       	eor	r25, r25
    2e84:	ee 0f       	add	r30, r30
    2e86:	97 95       	ror	r25
    2e88:	87 95       	ror	r24
    2e8a:	08 95       	ret
    2e8c:	0e 94 f6 18 	call	0x31ec	; 0x31ec <__fp_pscA>
    2e90:	60 f0       	brcs	.+24     	; 0x2eaa <__addsf3x+0xc8>
    2e92:	80 e8       	ldi	r24, 0x80	; 128
    2e94:	91 e0       	ldi	r25, 0x01	; 1
    2e96:	09 f4       	brne	.+2      	; 0x2e9a <__addsf3x+0xb8>
    2e98:	9e ef       	ldi	r25, 0xFE	; 254
    2e9a:	0e 94 fd 18 	call	0x31fa	; 0x31fa <__fp_pscB>
    2e9e:	28 f0       	brcs	.+10     	; 0x2eaa <__addsf3x+0xc8>
    2ea0:	40 e8       	ldi	r20, 0x80	; 128
    2ea2:	51 e0       	ldi	r21, 0x01	; 1
    2ea4:	71 f4       	brne	.+28     	; 0x2ec2 <atan2+0x10>
    2ea6:	5e ef       	ldi	r21, 0xFE	; 254
    2ea8:	0c c0       	rjmp	.+24     	; 0x2ec2 <atan2+0x10>
    2eaa:	0c 94 cc 18 	jmp	0x3198	; 0x3198 <__fp_nan>
    2eae:	0c 94 37 19 	jmp	0x326e	; 0x326e <__fp_zero>

00002eb2 <atan2>:
    2eb2:	e9 2f       	mov	r30, r25
    2eb4:	e0 78       	andi	r30, 0x80	; 128
    2eb6:	0e 94 15 19 	call	0x322a	; 0x322a <__fp_split3>
    2eba:	40 f3       	brcs	.-48     	; 0x2e8c <__addsf3x+0xaa>
    2ebc:	09 2e       	mov	r0, r25
    2ebe:	05 2a       	or	r0, r21
    2ec0:	b1 f3       	breq	.-20     	; 0x2eae <__addsf3x+0xcc>
    2ec2:	26 17       	cp	r18, r22
    2ec4:	37 07       	cpc	r19, r23
    2ec6:	48 07       	cpc	r20, r24
    2ec8:	59 07       	cpc	r21, r25
    2eca:	38 f0       	brcs	.+14     	; 0x2eda <atan2+0x28>
    2ecc:	0e 2e       	mov	r0, r30
    2ece:	07 f8       	bld	r0, 7
    2ed0:	e0 25       	eor	r30, r0
    2ed2:	69 f0       	breq	.+26     	; 0x2eee <atan2+0x3c>
    2ed4:	e0 25       	eor	r30, r0
    2ed6:	e0 64       	ori	r30, 0x40	; 64
    2ed8:	0a c0       	rjmp	.+20     	; 0x2eee <atan2+0x3c>
    2eda:	ef 63       	ori	r30, 0x3F	; 63
    2edc:	07 f8       	bld	r0, 7
    2ede:	00 94       	com	r0
    2ee0:	07 fa       	bst	r0, 7
    2ee2:	db 01       	movw	r26, r22
    2ee4:	b9 01       	movw	r22, r18
    2ee6:	9d 01       	movw	r18, r26
    2ee8:	dc 01       	movw	r26, r24
    2eea:	ca 01       	movw	r24, r20
    2eec:	ad 01       	movw	r20, r26
    2eee:	ef 93       	push	r30
    2ef0:	0e 94 d4 17 	call	0x2fa8	; 0x2fa8 <__divsf3_pse>
    2ef4:	0e 94 04 19 	call	0x3208	; 0x3208 <__fp_round>
    2ef8:	0e 94 89 17 	call	0x2f12	; 0x2f12 <atan>
    2efc:	5f 91       	pop	r21
    2efe:	55 23       	and	r21, r21
    2f00:	39 f0       	breq	.+14     	; 0x2f10 <atan2+0x5e>
    2f02:	2b ed       	ldi	r18, 0xDB	; 219
    2f04:	3f e0       	ldi	r19, 0x0F	; 15
    2f06:	49 e4       	ldi	r20, 0x49	; 73
    2f08:	50 fd       	sbrc	r21, 0
    2f0a:	49 ec       	ldi	r20, 0xC9	; 201
    2f0c:	0c 94 da 16 	jmp	0x2db4	; 0x2db4 <__addsf3>
    2f10:	08 95       	ret

00002f12 <atan>:
    2f12:	df 93       	push	r29
    2f14:	dd 27       	eor	r29, r29
    2f16:	b9 2f       	mov	r27, r25
    2f18:	bf 77       	andi	r27, 0x7F	; 127
    2f1a:	40 e8       	ldi	r20, 0x80	; 128
    2f1c:	5f e3       	ldi	r21, 0x3F	; 63
    2f1e:	16 16       	cp	r1, r22
    2f20:	17 06       	cpc	r1, r23
    2f22:	48 07       	cpc	r20, r24
    2f24:	5b 07       	cpc	r21, r27
    2f26:	18 f4       	brcc	.+6      	; 0x2f2e <atan+0x1c>
    2f28:	d9 2f       	mov	r29, r25
    2f2a:	0e 94 43 19 	call	0x3286	; 0x3286 <inverse>
    2f2e:	9f 93       	push	r25
    2f30:	8f 93       	push	r24
    2f32:	7f 93       	push	r23
    2f34:	6f 93       	push	r22
    2f36:	0e 94 b8 19 	call	0x3370	; 0x3370 <square>
    2f3a:	ee ee       	ldi	r30, 0xEE	; 238
    2f3c:	f0 e0       	ldi	r31, 0x00	; 0
    2f3e:	0e 94 cf 18 	call	0x319e	; 0x319e <__fp_powser>
    2f42:	0e 94 04 19 	call	0x3208	; 0x3208 <__fp_round>
    2f46:	2f 91       	pop	r18
    2f48:	3f 91       	pop	r19
    2f4a:	4f 91       	pop	r20
    2f4c:	5f 91       	pop	r21
    2f4e:	0e 94 5e 19 	call	0x32bc	; 0x32bc <__mulsf3x>
    2f52:	dd 23       	and	r29, r29
    2f54:	51 f0       	breq	.+20     	; 0x2f6a <atan+0x58>
    2f56:	90 58       	subi	r25, 0x80	; 128
    2f58:	a2 ea       	ldi	r26, 0xA2	; 162
    2f5a:	2a ed       	ldi	r18, 0xDA	; 218
    2f5c:	3f e0       	ldi	r19, 0x0F	; 15
    2f5e:	49 ec       	ldi	r20, 0xC9	; 201
    2f60:	5f e3       	ldi	r21, 0x3F	; 63
    2f62:	d0 78       	andi	r29, 0x80	; 128
    2f64:	5d 27       	eor	r21, r29
    2f66:	0e 94 f1 16 	call	0x2de2	; 0x2de2 <__addsf3x>
    2f6a:	df 91       	pop	r29
    2f6c:	0c 94 04 19 	jmp	0x3208	; 0x3208 <__fp_round>

00002f70 <__cmpsf2>:
    2f70:	0e 94 a2 18 	call	0x3144	; 0x3144 <__fp_cmp>
    2f74:	08 f4       	brcc	.+2      	; 0x2f78 <__cmpsf2+0x8>
    2f76:	81 e0       	ldi	r24, 0x01	; 1
    2f78:	08 95       	ret

00002f7a <__divsf3>:
    2f7a:	0e 94 d1 17 	call	0x2fa2	; 0x2fa2 <__divsf3x>
    2f7e:	0c 94 04 19 	jmp	0x3208	; 0x3208 <__fp_round>
    2f82:	0e 94 fd 18 	call	0x31fa	; 0x31fa <__fp_pscB>
    2f86:	58 f0       	brcs	.+22     	; 0x2f9e <__divsf3+0x24>
    2f88:	0e 94 f6 18 	call	0x31ec	; 0x31ec <__fp_pscA>
    2f8c:	40 f0       	brcs	.+16     	; 0x2f9e <__divsf3+0x24>
    2f8e:	29 f4       	brne	.+10     	; 0x2f9a <__divsf3+0x20>
    2f90:	5f 3f       	cpi	r21, 0xFF	; 255
    2f92:	29 f0       	breq	.+10     	; 0x2f9e <__divsf3+0x24>
    2f94:	0c 94 c6 18 	jmp	0x318c	; 0x318c <__fp_inf>
    2f98:	51 11       	cpse	r21, r1
    2f9a:	0c 94 38 19 	jmp	0x3270	; 0x3270 <__fp_szero>
    2f9e:	0c 94 cc 18 	jmp	0x3198	; 0x3198 <__fp_nan>

00002fa2 <__divsf3x>:
    2fa2:	0e 94 15 19 	call	0x322a	; 0x322a <__fp_split3>
    2fa6:	68 f3       	brcs	.-38     	; 0x2f82 <__divsf3+0x8>

00002fa8 <__divsf3_pse>:
    2fa8:	99 23       	and	r25, r25
    2faa:	b1 f3       	breq	.-20     	; 0x2f98 <__divsf3+0x1e>
    2fac:	55 23       	and	r21, r21
    2fae:	91 f3       	breq	.-28     	; 0x2f94 <__divsf3+0x1a>
    2fb0:	95 1b       	sub	r25, r21
    2fb2:	55 0b       	sbc	r21, r21
    2fb4:	bb 27       	eor	r27, r27
    2fb6:	aa 27       	eor	r26, r26
    2fb8:	62 17       	cp	r22, r18
    2fba:	73 07       	cpc	r23, r19
    2fbc:	84 07       	cpc	r24, r20
    2fbe:	38 f0       	brcs	.+14     	; 0x2fce <__divsf3_pse+0x26>
    2fc0:	9f 5f       	subi	r25, 0xFF	; 255
    2fc2:	5f 4f       	sbci	r21, 0xFF	; 255
    2fc4:	22 0f       	add	r18, r18
    2fc6:	33 1f       	adc	r19, r19
    2fc8:	44 1f       	adc	r20, r20
    2fca:	aa 1f       	adc	r26, r26
    2fcc:	a9 f3       	breq	.-22     	; 0x2fb8 <__divsf3_pse+0x10>
    2fce:	35 d0       	rcall	.+106    	; 0x303a <__divsf3_pse+0x92>
    2fd0:	0e 2e       	mov	r0, r30
    2fd2:	3a f0       	brmi	.+14     	; 0x2fe2 <__divsf3_pse+0x3a>
    2fd4:	e0 e8       	ldi	r30, 0x80	; 128
    2fd6:	32 d0       	rcall	.+100    	; 0x303c <__divsf3_pse+0x94>
    2fd8:	91 50       	subi	r25, 0x01	; 1
    2fda:	50 40       	sbci	r21, 0x00	; 0
    2fdc:	e6 95       	lsr	r30
    2fde:	00 1c       	adc	r0, r0
    2fe0:	ca f7       	brpl	.-14     	; 0x2fd4 <__divsf3_pse+0x2c>
    2fe2:	2b d0       	rcall	.+86     	; 0x303a <__divsf3_pse+0x92>
    2fe4:	fe 2f       	mov	r31, r30
    2fe6:	29 d0       	rcall	.+82     	; 0x303a <__divsf3_pse+0x92>
    2fe8:	66 0f       	add	r22, r22
    2fea:	77 1f       	adc	r23, r23
    2fec:	88 1f       	adc	r24, r24
    2fee:	bb 1f       	adc	r27, r27
    2ff0:	26 17       	cp	r18, r22
    2ff2:	37 07       	cpc	r19, r23
    2ff4:	48 07       	cpc	r20, r24
    2ff6:	ab 07       	cpc	r26, r27
    2ff8:	b0 e8       	ldi	r27, 0x80	; 128
    2ffa:	09 f0       	breq	.+2      	; 0x2ffe <__divsf3_pse+0x56>
    2ffc:	bb 0b       	sbc	r27, r27
    2ffe:	80 2d       	mov	r24, r0
    3000:	bf 01       	movw	r22, r30
    3002:	ff 27       	eor	r31, r31
    3004:	93 58       	subi	r25, 0x83	; 131
    3006:	5f 4f       	sbci	r21, 0xFF	; 255
    3008:	3a f0       	brmi	.+14     	; 0x3018 <__divsf3_pse+0x70>
    300a:	9e 3f       	cpi	r25, 0xFE	; 254
    300c:	51 05       	cpc	r21, r1
    300e:	78 f0       	brcs	.+30     	; 0x302e <__divsf3_pse+0x86>
    3010:	0c 94 c6 18 	jmp	0x318c	; 0x318c <__fp_inf>
    3014:	0c 94 38 19 	jmp	0x3270	; 0x3270 <__fp_szero>
    3018:	5f 3f       	cpi	r21, 0xFF	; 255
    301a:	e4 f3       	brlt	.-8      	; 0x3014 <__divsf3_pse+0x6c>
    301c:	98 3e       	cpi	r25, 0xE8	; 232
    301e:	d4 f3       	brlt	.-12     	; 0x3014 <__divsf3_pse+0x6c>
    3020:	86 95       	lsr	r24
    3022:	77 95       	ror	r23
    3024:	67 95       	ror	r22
    3026:	b7 95       	ror	r27
    3028:	f7 95       	ror	r31
    302a:	9f 5f       	subi	r25, 0xFF	; 255
    302c:	c9 f7       	brne	.-14     	; 0x3020 <__divsf3_pse+0x78>
    302e:	88 0f       	add	r24, r24
    3030:	91 1d       	adc	r25, r1
    3032:	96 95       	lsr	r25
    3034:	87 95       	ror	r24
    3036:	97 f9       	bld	r25, 7
    3038:	08 95       	ret
    303a:	e1 e0       	ldi	r30, 0x01	; 1
    303c:	66 0f       	add	r22, r22
    303e:	77 1f       	adc	r23, r23
    3040:	88 1f       	adc	r24, r24
    3042:	bb 1f       	adc	r27, r27
    3044:	62 17       	cp	r22, r18
    3046:	73 07       	cpc	r23, r19
    3048:	84 07       	cpc	r24, r20
    304a:	ba 07       	cpc	r27, r26
    304c:	20 f0       	brcs	.+8      	; 0x3056 <__divsf3_pse+0xae>
    304e:	62 1b       	sub	r22, r18
    3050:	73 0b       	sbc	r23, r19
    3052:	84 0b       	sbc	r24, r20
    3054:	ba 0b       	sbc	r27, r26
    3056:	ee 1f       	adc	r30, r30
    3058:	88 f7       	brcc	.-30     	; 0x303c <__divsf3_pse+0x94>
    305a:	e0 95       	com	r30
    305c:	08 95       	ret

0000305e <__fixsfsi>:
    305e:	0e 94 36 18 	call	0x306c	; 0x306c <__fixunssfsi>
    3062:	68 94       	set
    3064:	b1 11       	cpse	r27, r1
    3066:	0c 94 38 19 	jmp	0x3270	; 0x3270 <__fp_szero>
    306a:	08 95       	ret

0000306c <__fixunssfsi>:
    306c:	0e 94 1d 19 	call	0x323a	; 0x323a <__fp_splitA>
    3070:	88 f0       	brcs	.+34     	; 0x3094 <__fixunssfsi+0x28>
    3072:	9f 57       	subi	r25, 0x7F	; 127
    3074:	98 f0       	brcs	.+38     	; 0x309c <__fixunssfsi+0x30>
    3076:	b9 2f       	mov	r27, r25
    3078:	99 27       	eor	r25, r25
    307a:	b7 51       	subi	r27, 0x17	; 23
    307c:	b0 f0       	brcs	.+44     	; 0x30aa <__fixunssfsi+0x3e>
    307e:	e1 f0       	breq	.+56     	; 0x30b8 <__fixunssfsi+0x4c>
    3080:	66 0f       	add	r22, r22
    3082:	77 1f       	adc	r23, r23
    3084:	88 1f       	adc	r24, r24
    3086:	99 1f       	adc	r25, r25
    3088:	1a f0       	brmi	.+6      	; 0x3090 <__fixunssfsi+0x24>
    308a:	ba 95       	dec	r27
    308c:	c9 f7       	brne	.-14     	; 0x3080 <__fixunssfsi+0x14>
    308e:	14 c0       	rjmp	.+40     	; 0x30b8 <__fixunssfsi+0x4c>
    3090:	b1 30       	cpi	r27, 0x01	; 1
    3092:	91 f0       	breq	.+36     	; 0x30b8 <__fixunssfsi+0x4c>
    3094:	0e 94 37 19 	call	0x326e	; 0x326e <__fp_zero>
    3098:	b1 e0       	ldi	r27, 0x01	; 1
    309a:	08 95       	ret
    309c:	0c 94 37 19 	jmp	0x326e	; 0x326e <__fp_zero>
    30a0:	67 2f       	mov	r22, r23
    30a2:	78 2f       	mov	r23, r24
    30a4:	88 27       	eor	r24, r24
    30a6:	b8 5f       	subi	r27, 0xF8	; 248
    30a8:	39 f0       	breq	.+14     	; 0x30b8 <__fixunssfsi+0x4c>
    30aa:	b9 3f       	cpi	r27, 0xF9	; 249
    30ac:	cc f3       	brlt	.-14     	; 0x30a0 <__fixunssfsi+0x34>
    30ae:	86 95       	lsr	r24
    30b0:	77 95       	ror	r23
    30b2:	67 95       	ror	r22
    30b4:	b3 95       	inc	r27
    30b6:	d9 f7       	brne	.-10     	; 0x30ae <__fixunssfsi+0x42>
    30b8:	3e f4       	brtc	.+14     	; 0x30c8 <__fixunssfsi+0x5c>
    30ba:	90 95       	com	r25
    30bc:	80 95       	com	r24
    30be:	70 95       	com	r23
    30c0:	61 95       	neg	r22
    30c2:	7f 4f       	sbci	r23, 0xFF	; 255
    30c4:	8f 4f       	sbci	r24, 0xFF	; 255
    30c6:	9f 4f       	sbci	r25, 0xFF	; 255
    30c8:	08 95       	ret

000030ca <__floatunsisf>:
    30ca:	e8 94       	clt
    30cc:	09 c0       	rjmp	.+18     	; 0x30e0 <__floatsisf+0x12>

000030ce <__floatsisf>:
    30ce:	97 fb       	bst	r25, 7
    30d0:	3e f4       	brtc	.+14     	; 0x30e0 <__floatsisf+0x12>
    30d2:	90 95       	com	r25
    30d4:	80 95       	com	r24
    30d6:	70 95       	com	r23
    30d8:	61 95       	neg	r22
    30da:	7f 4f       	sbci	r23, 0xFF	; 255
    30dc:	8f 4f       	sbci	r24, 0xFF	; 255
    30de:	9f 4f       	sbci	r25, 0xFF	; 255
    30e0:	99 23       	and	r25, r25
    30e2:	a9 f0       	breq	.+42     	; 0x310e <__floatsisf+0x40>
    30e4:	f9 2f       	mov	r31, r25
    30e6:	96 e9       	ldi	r25, 0x96	; 150
    30e8:	bb 27       	eor	r27, r27
    30ea:	93 95       	inc	r25
    30ec:	f6 95       	lsr	r31
    30ee:	87 95       	ror	r24
    30f0:	77 95       	ror	r23
    30f2:	67 95       	ror	r22
    30f4:	b7 95       	ror	r27
    30f6:	f1 11       	cpse	r31, r1
    30f8:	f8 cf       	rjmp	.-16     	; 0x30ea <__floatsisf+0x1c>
    30fa:	fa f4       	brpl	.+62     	; 0x313a <__floatsisf+0x6c>
    30fc:	bb 0f       	add	r27, r27
    30fe:	11 f4       	brne	.+4      	; 0x3104 <__floatsisf+0x36>
    3100:	60 ff       	sbrs	r22, 0
    3102:	1b c0       	rjmp	.+54     	; 0x313a <__floatsisf+0x6c>
    3104:	6f 5f       	subi	r22, 0xFF	; 255
    3106:	7f 4f       	sbci	r23, 0xFF	; 255
    3108:	8f 4f       	sbci	r24, 0xFF	; 255
    310a:	9f 4f       	sbci	r25, 0xFF	; 255
    310c:	16 c0       	rjmp	.+44     	; 0x313a <__floatsisf+0x6c>
    310e:	88 23       	and	r24, r24
    3110:	11 f0       	breq	.+4      	; 0x3116 <__floatsisf+0x48>
    3112:	96 e9       	ldi	r25, 0x96	; 150
    3114:	11 c0       	rjmp	.+34     	; 0x3138 <__floatsisf+0x6a>
    3116:	77 23       	and	r23, r23
    3118:	21 f0       	breq	.+8      	; 0x3122 <__floatsisf+0x54>
    311a:	9e e8       	ldi	r25, 0x8E	; 142
    311c:	87 2f       	mov	r24, r23
    311e:	76 2f       	mov	r23, r22
    3120:	05 c0       	rjmp	.+10     	; 0x312c <__floatsisf+0x5e>
    3122:	66 23       	and	r22, r22
    3124:	71 f0       	breq	.+28     	; 0x3142 <__floatsisf+0x74>
    3126:	96 e8       	ldi	r25, 0x86	; 134
    3128:	86 2f       	mov	r24, r22
    312a:	70 e0       	ldi	r23, 0x00	; 0
    312c:	60 e0       	ldi	r22, 0x00	; 0
    312e:	2a f0       	brmi	.+10     	; 0x313a <__floatsisf+0x6c>
    3130:	9a 95       	dec	r25
    3132:	66 0f       	add	r22, r22
    3134:	77 1f       	adc	r23, r23
    3136:	88 1f       	adc	r24, r24
    3138:	da f7       	brpl	.-10     	; 0x3130 <__floatsisf+0x62>
    313a:	88 0f       	add	r24, r24
    313c:	96 95       	lsr	r25
    313e:	87 95       	ror	r24
    3140:	97 f9       	bld	r25, 7
    3142:	08 95       	ret

00003144 <__fp_cmp>:
    3144:	99 0f       	add	r25, r25
    3146:	00 08       	sbc	r0, r0
    3148:	55 0f       	add	r21, r21
    314a:	aa 0b       	sbc	r26, r26
    314c:	e0 e8       	ldi	r30, 0x80	; 128
    314e:	fe ef       	ldi	r31, 0xFE	; 254
    3150:	16 16       	cp	r1, r22
    3152:	17 06       	cpc	r1, r23
    3154:	e8 07       	cpc	r30, r24
    3156:	f9 07       	cpc	r31, r25
    3158:	c0 f0       	brcs	.+48     	; 0x318a <__fp_cmp+0x46>
    315a:	12 16       	cp	r1, r18
    315c:	13 06       	cpc	r1, r19
    315e:	e4 07       	cpc	r30, r20
    3160:	f5 07       	cpc	r31, r21
    3162:	98 f0       	brcs	.+38     	; 0x318a <__fp_cmp+0x46>
    3164:	62 1b       	sub	r22, r18
    3166:	73 0b       	sbc	r23, r19
    3168:	84 0b       	sbc	r24, r20
    316a:	95 0b       	sbc	r25, r21
    316c:	39 f4       	brne	.+14     	; 0x317c <__fp_cmp+0x38>
    316e:	0a 26       	eor	r0, r26
    3170:	61 f0       	breq	.+24     	; 0x318a <__fp_cmp+0x46>
    3172:	23 2b       	or	r18, r19
    3174:	24 2b       	or	r18, r20
    3176:	25 2b       	or	r18, r21
    3178:	21 f4       	brne	.+8      	; 0x3182 <__fp_cmp+0x3e>
    317a:	08 95       	ret
    317c:	0a 26       	eor	r0, r26
    317e:	09 f4       	brne	.+2      	; 0x3182 <__fp_cmp+0x3e>
    3180:	a1 40       	sbci	r26, 0x01	; 1
    3182:	a6 95       	lsr	r26
    3184:	8f ef       	ldi	r24, 0xFF	; 255
    3186:	81 1d       	adc	r24, r1
    3188:	81 1d       	adc	r24, r1
    318a:	08 95       	ret

0000318c <__fp_inf>:
    318c:	97 f9       	bld	r25, 7
    318e:	9f 67       	ori	r25, 0x7F	; 127
    3190:	80 e8       	ldi	r24, 0x80	; 128
    3192:	70 e0       	ldi	r23, 0x00	; 0
    3194:	60 e0       	ldi	r22, 0x00	; 0
    3196:	08 95       	ret

00003198 <__fp_nan>:
    3198:	9f ef       	ldi	r25, 0xFF	; 255
    319a:	80 ec       	ldi	r24, 0xC0	; 192
    319c:	08 95       	ret

0000319e <__fp_powser>:
    319e:	df 93       	push	r29
    31a0:	cf 93       	push	r28
    31a2:	1f 93       	push	r17
    31a4:	0f 93       	push	r16
    31a6:	ff 92       	push	r15
    31a8:	ef 92       	push	r14
    31aa:	df 92       	push	r13
    31ac:	7b 01       	movw	r14, r22
    31ae:	8c 01       	movw	r16, r24
    31b0:	68 94       	set
    31b2:	06 c0       	rjmp	.+12     	; 0x31c0 <__fp_powser+0x22>
    31b4:	da 2e       	mov	r13, r26
    31b6:	ef 01       	movw	r28, r30
    31b8:	0e 94 5e 19 	call	0x32bc	; 0x32bc <__mulsf3x>
    31bc:	fe 01       	movw	r30, r28
    31be:	e8 94       	clt
    31c0:	a5 91       	lpm	r26, Z+
    31c2:	25 91       	lpm	r18, Z+
    31c4:	35 91       	lpm	r19, Z+
    31c6:	45 91       	lpm	r20, Z+
    31c8:	55 91       	lpm	r21, Z+
    31ca:	a6 f3       	brts	.-24     	; 0x31b4 <__fp_powser+0x16>
    31cc:	ef 01       	movw	r28, r30
    31ce:	0e 94 f1 16 	call	0x2de2	; 0x2de2 <__addsf3x>
    31d2:	fe 01       	movw	r30, r28
    31d4:	97 01       	movw	r18, r14
    31d6:	a8 01       	movw	r20, r16
    31d8:	da 94       	dec	r13
    31da:	69 f7       	brne	.-38     	; 0x31b6 <__fp_powser+0x18>
    31dc:	df 90       	pop	r13
    31de:	ef 90       	pop	r14
    31e0:	ff 90       	pop	r15
    31e2:	0f 91       	pop	r16
    31e4:	1f 91       	pop	r17
    31e6:	cf 91       	pop	r28
    31e8:	df 91       	pop	r29
    31ea:	08 95       	ret

000031ec <__fp_pscA>:
    31ec:	00 24       	eor	r0, r0
    31ee:	0a 94       	dec	r0
    31f0:	16 16       	cp	r1, r22
    31f2:	17 06       	cpc	r1, r23
    31f4:	18 06       	cpc	r1, r24
    31f6:	09 06       	cpc	r0, r25
    31f8:	08 95       	ret

000031fa <__fp_pscB>:
    31fa:	00 24       	eor	r0, r0
    31fc:	0a 94       	dec	r0
    31fe:	12 16       	cp	r1, r18
    3200:	13 06       	cpc	r1, r19
    3202:	14 06       	cpc	r1, r20
    3204:	05 06       	cpc	r0, r21
    3206:	08 95       	ret

00003208 <__fp_round>:
    3208:	09 2e       	mov	r0, r25
    320a:	03 94       	inc	r0
    320c:	00 0c       	add	r0, r0
    320e:	11 f4       	brne	.+4      	; 0x3214 <__fp_round+0xc>
    3210:	88 23       	and	r24, r24
    3212:	52 f0       	brmi	.+20     	; 0x3228 <__fp_round+0x20>
    3214:	bb 0f       	add	r27, r27
    3216:	40 f4       	brcc	.+16     	; 0x3228 <__fp_round+0x20>
    3218:	bf 2b       	or	r27, r31
    321a:	11 f4       	brne	.+4      	; 0x3220 <__fp_round+0x18>
    321c:	60 ff       	sbrs	r22, 0
    321e:	04 c0       	rjmp	.+8      	; 0x3228 <__fp_round+0x20>
    3220:	6f 5f       	subi	r22, 0xFF	; 255
    3222:	7f 4f       	sbci	r23, 0xFF	; 255
    3224:	8f 4f       	sbci	r24, 0xFF	; 255
    3226:	9f 4f       	sbci	r25, 0xFF	; 255
    3228:	08 95       	ret

0000322a <__fp_split3>:
    322a:	57 fd       	sbrc	r21, 7
    322c:	90 58       	subi	r25, 0x80	; 128
    322e:	44 0f       	add	r20, r20
    3230:	55 1f       	adc	r21, r21
    3232:	59 f0       	breq	.+22     	; 0x324a <__fp_splitA+0x10>
    3234:	5f 3f       	cpi	r21, 0xFF	; 255
    3236:	71 f0       	breq	.+28     	; 0x3254 <__fp_splitA+0x1a>
    3238:	47 95       	ror	r20

0000323a <__fp_splitA>:
    323a:	88 0f       	add	r24, r24
    323c:	97 fb       	bst	r25, 7
    323e:	99 1f       	adc	r25, r25
    3240:	61 f0       	breq	.+24     	; 0x325a <__fp_splitA+0x20>
    3242:	9f 3f       	cpi	r25, 0xFF	; 255
    3244:	79 f0       	breq	.+30     	; 0x3264 <__fp_splitA+0x2a>
    3246:	87 95       	ror	r24
    3248:	08 95       	ret
    324a:	12 16       	cp	r1, r18
    324c:	13 06       	cpc	r1, r19
    324e:	14 06       	cpc	r1, r20
    3250:	55 1f       	adc	r21, r21
    3252:	f2 cf       	rjmp	.-28     	; 0x3238 <__fp_split3+0xe>
    3254:	46 95       	lsr	r20
    3256:	f1 df       	rcall	.-30     	; 0x323a <__fp_splitA>
    3258:	08 c0       	rjmp	.+16     	; 0x326a <__fp_splitA+0x30>
    325a:	16 16       	cp	r1, r22
    325c:	17 06       	cpc	r1, r23
    325e:	18 06       	cpc	r1, r24
    3260:	99 1f       	adc	r25, r25
    3262:	f1 cf       	rjmp	.-30     	; 0x3246 <__fp_splitA+0xc>
    3264:	86 95       	lsr	r24
    3266:	71 05       	cpc	r23, r1
    3268:	61 05       	cpc	r22, r1
    326a:	08 94       	sec
    326c:	08 95       	ret

0000326e <__fp_zero>:
    326e:	e8 94       	clt

00003270 <__fp_szero>:
    3270:	bb 27       	eor	r27, r27
    3272:	66 27       	eor	r22, r22
    3274:	77 27       	eor	r23, r23
    3276:	cb 01       	movw	r24, r22
    3278:	97 f9       	bld	r25, 7
    327a:	08 95       	ret

0000327c <__gesf2>:
    327c:	0e 94 a2 18 	call	0x3144	; 0x3144 <__fp_cmp>
    3280:	08 f4       	brcc	.+2      	; 0x3284 <__gesf2+0x8>
    3282:	8f ef       	ldi	r24, 0xFF	; 255
    3284:	08 95       	ret

00003286 <inverse>:
    3286:	9b 01       	movw	r18, r22
    3288:	ac 01       	movw	r20, r24
    328a:	60 e0       	ldi	r22, 0x00	; 0
    328c:	70 e0       	ldi	r23, 0x00	; 0
    328e:	80 e8       	ldi	r24, 0x80	; 128
    3290:	9f e3       	ldi	r25, 0x3F	; 63
    3292:	0c 94 bd 17 	jmp	0x2f7a	; 0x2f7a <__divsf3>

00003296 <__mulsf3>:
    3296:	0e 94 5e 19 	call	0x32bc	; 0x32bc <__mulsf3x>
    329a:	0c 94 04 19 	jmp	0x3208	; 0x3208 <__fp_round>
    329e:	0e 94 f6 18 	call	0x31ec	; 0x31ec <__fp_pscA>
    32a2:	38 f0       	brcs	.+14     	; 0x32b2 <__mulsf3+0x1c>
    32a4:	0e 94 fd 18 	call	0x31fa	; 0x31fa <__fp_pscB>
    32a8:	20 f0       	brcs	.+8      	; 0x32b2 <__mulsf3+0x1c>
    32aa:	95 23       	and	r25, r21
    32ac:	11 f0       	breq	.+4      	; 0x32b2 <__mulsf3+0x1c>
    32ae:	0c 94 c6 18 	jmp	0x318c	; 0x318c <__fp_inf>
    32b2:	0c 94 cc 18 	jmp	0x3198	; 0x3198 <__fp_nan>
    32b6:	11 24       	eor	r1, r1
    32b8:	0c 94 38 19 	jmp	0x3270	; 0x3270 <__fp_szero>

000032bc <__mulsf3x>:
    32bc:	0e 94 15 19 	call	0x322a	; 0x322a <__fp_split3>
    32c0:	70 f3       	brcs	.-36     	; 0x329e <__mulsf3+0x8>

000032c2 <__mulsf3_pse>:
    32c2:	95 9f       	mul	r25, r21
    32c4:	c1 f3       	breq	.-16     	; 0x32b6 <__mulsf3+0x20>
    32c6:	95 0f       	add	r25, r21
    32c8:	50 e0       	ldi	r21, 0x00	; 0
    32ca:	55 1f       	adc	r21, r21
    32cc:	62 9f       	mul	r22, r18
    32ce:	f0 01       	movw	r30, r0
    32d0:	72 9f       	mul	r23, r18
    32d2:	bb 27       	eor	r27, r27
    32d4:	f0 0d       	add	r31, r0
    32d6:	b1 1d       	adc	r27, r1
    32d8:	63 9f       	mul	r22, r19
    32da:	aa 27       	eor	r26, r26
    32dc:	f0 0d       	add	r31, r0
    32de:	b1 1d       	adc	r27, r1
    32e0:	aa 1f       	adc	r26, r26
    32e2:	64 9f       	mul	r22, r20
    32e4:	66 27       	eor	r22, r22
    32e6:	b0 0d       	add	r27, r0
    32e8:	a1 1d       	adc	r26, r1
    32ea:	66 1f       	adc	r22, r22
    32ec:	82 9f       	mul	r24, r18
    32ee:	22 27       	eor	r18, r18
    32f0:	b0 0d       	add	r27, r0
    32f2:	a1 1d       	adc	r26, r1
    32f4:	62 1f       	adc	r22, r18
    32f6:	73 9f       	mul	r23, r19
    32f8:	b0 0d       	add	r27, r0
    32fa:	a1 1d       	adc	r26, r1
    32fc:	62 1f       	adc	r22, r18
    32fe:	83 9f       	mul	r24, r19
    3300:	a0 0d       	add	r26, r0
    3302:	61 1d       	adc	r22, r1
    3304:	22 1f       	adc	r18, r18
    3306:	74 9f       	mul	r23, r20
    3308:	33 27       	eor	r19, r19
    330a:	a0 0d       	add	r26, r0
    330c:	61 1d       	adc	r22, r1
    330e:	23 1f       	adc	r18, r19
    3310:	84 9f       	mul	r24, r20
    3312:	60 0d       	add	r22, r0
    3314:	21 1d       	adc	r18, r1
    3316:	82 2f       	mov	r24, r18
    3318:	76 2f       	mov	r23, r22
    331a:	6a 2f       	mov	r22, r26
    331c:	11 24       	eor	r1, r1
    331e:	9f 57       	subi	r25, 0x7F	; 127
    3320:	50 40       	sbci	r21, 0x00	; 0
    3322:	9a f0       	brmi	.+38     	; 0x334a <__mulsf3_pse+0x88>
    3324:	f1 f0       	breq	.+60     	; 0x3362 <__mulsf3_pse+0xa0>
    3326:	88 23       	and	r24, r24
    3328:	4a f0       	brmi	.+18     	; 0x333c <__mulsf3_pse+0x7a>
    332a:	ee 0f       	add	r30, r30
    332c:	ff 1f       	adc	r31, r31
    332e:	bb 1f       	adc	r27, r27
    3330:	66 1f       	adc	r22, r22
    3332:	77 1f       	adc	r23, r23
    3334:	88 1f       	adc	r24, r24
    3336:	91 50       	subi	r25, 0x01	; 1
    3338:	50 40       	sbci	r21, 0x00	; 0
    333a:	a9 f7       	brne	.-22     	; 0x3326 <__mulsf3_pse+0x64>
    333c:	9e 3f       	cpi	r25, 0xFE	; 254
    333e:	51 05       	cpc	r21, r1
    3340:	80 f0       	brcs	.+32     	; 0x3362 <__mulsf3_pse+0xa0>
    3342:	0c 94 c6 18 	jmp	0x318c	; 0x318c <__fp_inf>
    3346:	0c 94 38 19 	jmp	0x3270	; 0x3270 <__fp_szero>
    334a:	5f 3f       	cpi	r21, 0xFF	; 255
    334c:	e4 f3       	brlt	.-8      	; 0x3346 <__mulsf3_pse+0x84>
    334e:	98 3e       	cpi	r25, 0xE8	; 232
    3350:	d4 f3       	brlt	.-12     	; 0x3346 <__mulsf3_pse+0x84>
    3352:	86 95       	lsr	r24
    3354:	77 95       	ror	r23
    3356:	67 95       	ror	r22
    3358:	b7 95       	ror	r27
    335a:	f7 95       	ror	r31
    335c:	e7 95       	ror	r30
    335e:	9f 5f       	subi	r25, 0xFF	; 255
    3360:	c1 f7       	brne	.-16     	; 0x3352 <__mulsf3_pse+0x90>
    3362:	fe 2b       	or	r31, r30
    3364:	88 0f       	add	r24, r24
    3366:	91 1d       	adc	r25, r1
    3368:	96 95       	lsr	r25
    336a:	87 95       	ror	r24
    336c:	97 f9       	bld	r25, 7
    336e:	08 95       	ret

00003370 <square>:
    3370:	9b 01       	movw	r18, r22
    3372:	ac 01       	movw	r20, r24
    3374:	0c 94 4b 19 	jmp	0x3296	; 0x3296 <__mulsf3>

00003378 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    3378:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    337a:	91 8d       	ldd	r25, Z+25	; 0x19
    337c:	22 8d       	ldd	r18, Z+26	; 0x1a
    337e:	89 2f       	mov	r24, r25
    3380:	90 e0       	ldi	r25, 0x00	; 0
    3382:	80 5c       	subi	r24, 0xC0	; 192
    3384:	9f 4f       	sbci	r25, 0xFF	; 255
    3386:	82 1b       	sub	r24, r18
    3388:	91 09       	sbc	r25, r1
}
    338a:	8f 73       	andi	r24, 0x3F	; 63
    338c:	99 27       	eor	r25, r25
    338e:	08 95       	ret

00003390 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    3390:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    3392:	91 8d       	ldd	r25, Z+25	; 0x19
    3394:	82 8d       	ldd	r24, Z+26	; 0x1a
    3396:	98 17       	cp	r25, r24
    3398:	31 f0       	breq	.+12     	; 0x33a6 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    339a:	82 8d       	ldd	r24, Z+26	; 0x1a
    339c:	e8 0f       	add	r30, r24
    339e:	f1 1d       	adc	r31, r1
    33a0:	85 8d       	ldd	r24, Z+29	; 0x1d
    33a2:	90 e0       	ldi	r25, 0x00	; 0
    33a4:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    33a6:	8f ef       	ldi	r24, 0xFF	; 255
    33a8:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    33aa:	08 95       	ret

000033ac <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    33ac:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    33ae:	91 8d       	ldd	r25, Z+25	; 0x19
    33b0:	82 8d       	ldd	r24, Z+26	; 0x1a
    33b2:	98 17       	cp	r25, r24
    33b4:	61 f0       	breq	.+24     	; 0x33ce <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    33b6:	82 8d       	ldd	r24, Z+26	; 0x1a
    33b8:	df 01       	movw	r26, r30
    33ba:	a8 0f       	add	r26, r24
    33bc:	b1 1d       	adc	r27, r1
    33be:	5d 96       	adiw	r26, 0x1d	; 29
    33c0:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    33c2:	92 8d       	ldd	r25, Z+26	; 0x1a
    33c4:	9f 5f       	subi	r25, 0xFF	; 255
    33c6:	9f 73       	andi	r25, 0x3F	; 63
    33c8:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    33ca:	90 e0       	ldi	r25, 0x00	; 0
    33cc:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    33ce:	8f ef       	ldi	r24, 0xFF	; 255
    33d0:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    33d2:	08 95       	ret

000033d4 <_ZN14HardwareSerial17availableForWriteEv>:
{
#if (SERIAL_TX_BUFFER_SIZE>256)
  uint8_t oldSREG = SREG;
  cli();
#endif
  tx_buffer_index_t head = _tx_buffer_head;
    33d4:	fc 01       	movw	r30, r24
    33d6:	53 8d       	ldd	r21, Z+27	; 0x1b
  tx_buffer_index_t tail = _tx_buffer_tail;
    33d8:	44 8d       	ldd	r20, Z+28	; 0x1c
    33da:	25 2f       	mov	r18, r21
    33dc:	30 e0       	ldi	r19, 0x00	; 0
    33de:	84 2f       	mov	r24, r20
    33e0:	90 e0       	ldi	r25, 0x00	; 0
#if (SERIAL_TX_BUFFER_SIZE>256)
  SREG = oldSREG;
#endif
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    33e2:	82 1b       	sub	r24, r18
    33e4:	93 0b       	sbc	r25, r19
    33e6:	54 17       	cp	r21, r20
    33e8:	10 f0       	brcs	.+4      	; 0x33ee <_ZN14HardwareSerial17availableForWriteEv+0x1a>
    33ea:	cf 96       	adiw	r24, 0x3f	; 63
    33ec:	08 95       	ret
  return tail - head - 1;
    33ee:	01 97       	sbiw	r24, 0x01	; 1
}
    33f0:	08 95       	ret

000033f2 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    33f2:	8e e4       	ldi	r24, 0x4E	; 78
    33f4:	9b e1       	ldi	r25, 0x1B	; 27
    33f6:	89 2b       	or	r24, r25
    33f8:	49 f0       	breq	.+18     	; 0x340c <_Z14serialEventRunv+0x1a>
    33fa:	80 e0       	ldi	r24, 0x00	; 0
    33fc:	90 e0       	ldi	r25, 0x00	; 0
    33fe:	89 2b       	or	r24, r25
    3400:	29 f0       	breq	.+10     	; 0x340c <_Z14serialEventRunv+0x1a>
    3402:	0e 94 4e 1b 	call	0x369c	; 0x369c <_Z17Serial0_availablev>
    3406:	81 11       	cpse	r24, r1
    3408:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    340c:	08 95       	ret

0000340e <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    340e:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    3410:	84 8d       	ldd	r24, Z+28	; 0x1c
    3412:	df 01       	movw	r26, r30
    3414:	a8 0f       	add	r26, r24
    3416:	b1 1d       	adc	r27, r1
    3418:	a3 5a       	subi	r26, 0xA3	; 163
    341a:	bf 4f       	sbci	r27, 0xFF	; 255
    341c:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    341e:	84 8d       	ldd	r24, Z+28	; 0x1c
    3420:	90 e0       	ldi	r25, 0x00	; 0
    3422:	01 96       	adiw	r24, 0x01	; 1
    3424:	8f 73       	andi	r24, 0x3F	; 63
    3426:	99 27       	eor	r25, r25
    3428:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    342a:	a6 89       	ldd	r26, Z+22	; 0x16
    342c:	b7 89       	ldd	r27, Z+23	; 0x17
    342e:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
    3430:	a0 89       	ldd	r26, Z+16	; 0x10
    3432:	b1 89       	ldd	r27, Z+17	; 0x11
    3434:	8c 91       	ld	r24, X
    3436:	80 64       	ori	r24, 0x40	; 64
    3438:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
    343a:	93 8d       	ldd	r25, Z+27	; 0x1b
    343c:	84 8d       	ldd	r24, Z+28	; 0x1c
    343e:	98 13       	cpse	r25, r24
    3440:	06 c0       	rjmp	.+12     	; 0x344e <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    3442:	02 88       	ldd	r0, Z+18	; 0x12
    3444:	f3 89       	ldd	r31, Z+19	; 0x13
    3446:	e0 2d       	mov	r30, r0
    3448:	80 81       	ld	r24, Z
    344a:	8f 7d       	andi	r24, 0xDF	; 223
    344c:	80 83       	st	Z, r24
    344e:	08 95       	ret

00003450 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    3450:	ef 92       	push	r14
    3452:	ff 92       	push	r15
    3454:	0f 93       	push	r16
    3456:	1f 93       	push	r17
    3458:	cf 93       	push	r28
    345a:	df 93       	push	r29
    345c:	ec 01       	movw	r28, r24
  _written = true;
    345e:	81 e0       	ldi	r24, 0x01	; 1
    3460:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    3462:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3464:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3466:	98 13       	cpse	r25, r24
    3468:	05 c0       	rjmp	.+10     	; 0x3474 <_ZN14HardwareSerial5writeEh+0x24>
    346a:	e8 89       	ldd	r30, Y+16	; 0x10
    346c:	f9 89       	ldd	r31, Y+17	; 0x11
    346e:	80 81       	ld	r24, Z
    3470:	85 fd       	sbrc	r24, 5
    3472:	24 c0       	rjmp	.+72     	; 0x34bc <_ZN14HardwareSerial5writeEh+0x6c>
    3474:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    3476:	0b 8d       	ldd	r16, Y+27	; 0x1b
    3478:	10 e0       	ldi	r17, 0x00	; 0
    347a:	0f 5f       	subi	r16, 0xFF	; 255
    347c:	1f 4f       	sbci	r17, 0xFF	; 255
    347e:	0f 73       	andi	r16, 0x3F	; 63
    3480:	11 27       	eor	r17, r17
    3482:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    3484:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3486:	e8 12       	cpse	r14, r24
    3488:	0c c0       	rjmp	.+24     	; 0x34a2 <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
    348a:	0f b6       	in	r0, 0x3f	; 63
    348c:	07 fc       	sbrc	r0, 7
    348e:	fa cf       	rjmp	.-12     	; 0x3484 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    3490:	e8 89       	ldd	r30, Y+16	; 0x10
    3492:	f9 89       	ldd	r31, Y+17	; 0x11
    3494:	80 81       	ld	r24, Z
    3496:	85 ff       	sbrs	r24, 5
    3498:	f5 cf       	rjmp	.-22     	; 0x3484 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    349a:	ce 01       	movw	r24, r28
    349c:	0e 94 07 1a 	call	0x340e	; 0x340e <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    34a0:	f1 cf       	rjmp	.-30     	; 0x3484 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    34a2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    34a4:	fe 01       	movw	r30, r28
    34a6:	e8 0f       	add	r30, r24
    34a8:	f1 1d       	adc	r31, r1
    34aa:	e3 5a       	subi	r30, 0xA3	; 163
    34ac:	ff 4f       	sbci	r31, 0xFF	; 255
    34ae:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
    34b0:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
    34b2:	ea 89       	ldd	r30, Y+18	; 0x12
    34b4:	fb 89       	ldd	r31, Y+19	; 0x13
    34b6:	80 81       	ld	r24, Z
    34b8:	80 62       	ori	r24, 0x20	; 32
    34ba:	07 c0       	rjmp	.+14     	; 0x34ca <_ZN14HardwareSerial5writeEh+0x7a>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    34bc:	ee 89       	ldd	r30, Y+22	; 0x16
    34be:	ff 89       	ldd	r31, Y+23	; 0x17
    34c0:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
    34c2:	e8 89       	ldd	r30, Y+16	; 0x10
    34c4:	f9 89       	ldd	r31, Y+17	; 0x11
    34c6:	80 81       	ld	r24, Z
    34c8:	80 64       	ori	r24, 0x40	; 64
    34ca:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
    34cc:	81 e0       	ldi	r24, 0x01	; 1
    34ce:	90 e0       	ldi	r25, 0x00	; 0
    34d0:	df 91       	pop	r29
    34d2:	cf 91       	pop	r28
    34d4:	1f 91       	pop	r17
    34d6:	0f 91       	pop	r16
    34d8:	ff 90       	pop	r15
    34da:	ef 90       	pop	r14
    34dc:	08 95       	ret

000034de <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    34de:	cf 93       	push	r28
    34e0:	df 93       	push	r29
    34e2:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    34e4:	88 8d       	ldd	r24, Y+24	; 0x18
    34e6:	88 23       	and	r24, r24
    34e8:	c9 f0       	breq	.+50     	; 0x351c <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    34ea:	ea 89       	ldd	r30, Y+18	; 0x12
    34ec:	fb 89       	ldd	r31, Y+19	; 0x13
    34ee:	80 81       	ld	r24, Z
    34f0:	85 fd       	sbrc	r24, 5
    34f2:	05 c0       	rjmp	.+10     	; 0x34fe <_ZN14HardwareSerial5flushEv+0x20>
    34f4:	a8 89       	ldd	r26, Y+16	; 0x10
    34f6:	b9 89       	ldd	r27, Y+17	; 0x11
    34f8:	8c 91       	ld	r24, X
    34fa:	86 fd       	sbrc	r24, 6
    34fc:	0f c0       	rjmp	.+30     	; 0x351c <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    34fe:	0f b6       	in	r0, 0x3f	; 63
    3500:	07 fc       	sbrc	r0, 7
    3502:	f5 cf       	rjmp	.-22     	; 0x34ee <_ZN14HardwareSerial5flushEv+0x10>
    3504:	80 81       	ld	r24, Z
    3506:	85 ff       	sbrs	r24, 5
    3508:	f2 cf       	rjmp	.-28     	; 0x34ee <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    350a:	a8 89       	ldd	r26, Y+16	; 0x10
    350c:	b9 89       	ldd	r27, Y+17	; 0x11
    350e:	8c 91       	ld	r24, X
    3510:	85 ff       	sbrs	r24, 5
    3512:	ed cf       	rjmp	.-38     	; 0x34ee <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    3514:	ce 01       	movw	r24, r28
    3516:	0e 94 07 1a 	call	0x340e	; 0x340e <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    351a:	e7 cf       	rjmp	.-50     	; 0x34ea <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    351c:	df 91       	pop	r29
    351e:	cf 91       	pop	r28
    3520:	08 95       	ret

00003522 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    3522:	cf 92       	push	r12
    3524:	df 92       	push	r13
    3526:	ef 92       	push	r14
    3528:	ff 92       	push	r15
    352a:	1f 93       	push	r17
    352c:	cf 93       	push	r28
    352e:	df 93       	push	r29
    3530:	ec 01       	movw	r28, r24
    3532:	6a 01       	movw	r12, r20
    3534:	7b 01       	movw	r14, r22
    3536:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    3538:	e8 89       	ldd	r30, Y+16	; 0x10
    353a:	f9 89       	ldd	r31, Y+17	; 0x11
    353c:	82 e0       	ldi	r24, 0x02	; 2
    353e:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    3540:	41 15       	cp	r20, r1
    3542:	51 4e       	sbci	r21, 0xE1	; 225
    3544:	61 05       	cpc	r22, r1
    3546:	71 05       	cpc	r23, r1
    3548:	b1 f0       	breq	.+44     	; 0x3576 <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    354a:	60 e0       	ldi	r22, 0x00	; 0
    354c:	79 e0       	ldi	r23, 0x09	; 9
    354e:	8d e3       	ldi	r24, 0x3D	; 61
    3550:	90 e0       	ldi	r25, 0x00	; 0
    3552:	a7 01       	movw	r20, r14
    3554:	96 01       	movw	r18, r12
    3556:	0e 94 7f 1e 	call	0x3cfe	; 0x3cfe <__udivmodsi4>
    355a:	da 01       	movw	r26, r20
    355c:	c9 01       	movw	r24, r18
    355e:	01 97       	sbiw	r24, 0x01	; 1
    3560:	a1 09       	sbc	r26, r1
    3562:	b1 09       	sbc	r27, r1
    3564:	b6 95       	lsr	r27
    3566:	a7 95       	ror	r26
    3568:	97 95       	ror	r25
    356a:	87 95       	ror	r24
    356c:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    356e:	21 15       	cp	r18, r1
    3570:	80 e1       	ldi	r24, 0x10	; 16
    3572:	38 07       	cpc	r19, r24
    3574:	a8 f0       	brcs	.+42     	; 0x35a0 <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
    3576:	e8 89       	ldd	r30, Y+16	; 0x10
    3578:	f9 89       	ldd	r31, Y+17	; 0x11
    357a:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    357c:	60 e8       	ldi	r22, 0x80	; 128
    357e:	74 e8       	ldi	r23, 0x84	; 132
    3580:	8e e1       	ldi	r24, 0x1E	; 30
    3582:	90 e0       	ldi	r25, 0x00	; 0
    3584:	a7 01       	movw	r20, r14
    3586:	96 01       	movw	r18, r12
    3588:	0e 94 7f 1e 	call	0x3cfe	; 0x3cfe <__udivmodsi4>
    358c:	da 01       	movw	r26, r20
    358e:	c9 01       	movw	r24, r18
    3590:	01 97       	sbiw	r24, 0x01	; 1
    3592:	a1 09       	sbc	r26, r1
    3594:	b1 09       	sbc	r27, r1
    3596:	b6 95       	lsr	r27
    3598:	a7 95       	ror	r26
    359a:	97 95       	ror	r25
    359c:	87 95       	ror	r24
    359e:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    35a0:	ec 85       	ldd	r30, Y+12	; 0x0c
    35a2:	fd 85       	ldd	r31, Y+13	; 0x0d
    35a4:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    35a6:	ee 85       	ldd	r30, Y+14	; 0x0e
    35a8:	ff 85       	ldd	r31, Y+15	; 0x0f
    35aa:	20 83       	st	Z, r18

  _written = false;
    35ac:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    35ae:	ec 89       	ldd	r30, Y+20	; 0x14
    35b0:	fd 89       	ldd	r31, Y+21	; 0x15
    35b2:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    35b4:	ea 89       	ldd	r30, Y+18	; 0x12
    35b6:	fb 89       	ldd	r31, Y+19	; 0x13
    35b8:	80 81       	ld	r24, Z
    35ba:	80 61       	ori	r24, 0x10	; 16
    35bc:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    35be:	ea 89       	ldd	r30, Y+18	; 0x12
    35c0:	fb 89       	ldd	r31, Y+19	; 0x13
    35c2:	80 81       	ld	r24, Z
    35c4:	88 60       	ori	r24, 0x08	; 8
    35c6:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    35c8:	ea 89       	ldd	r30, Y+18	; 0x12
    35ca:	fb 89       	ldd	r31, Y+19	; 0x13
    35cc:	80 81       	ld	r24, Z
    35ce:	80 68       	ori	r24, 0x80	; 128
    35d0:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    35d2:	ea 89       	ldd	r30, Y+18	; 0x12
    35d4:	fb 89       	ldd	r31, Y+19	; 0x13
    35d6:	80 81       	ld	r24, Z
    35d8:	8f 7d       	andi	r24, 0xDF	; 223
    35da:	80 83       	st	Z, r24
}
    35dc:	df 91       	pop	r29
    35de:	cf 91       	pop	r28
    35e0:	1f 91       	pop	r17
    35e2:	ff 90       	pop	r15
    35e4:	ef 90       	pop	r14
    35e6:	df 90       	pop	r13
    35e8:	cf 90       	pop	r12
    35ea:	08 95       	ret

000035ec <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    35ec:	1f 92       	push	r1
    35ee:	0f 92       	push	r0
    35f0:	0f b6       	in	r0, 0x3f	; 63
    35f2:	0f 92       	push	r0
    35f4:	11 24       	eor	r1, r1
    35f6:	2f 93       	push	r18
    35f8:	8f 93       	push	r24
    35fa:	9f 93       	push	r25
    35fc:	ef 93       	push	r30
    35fe:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    3600:	e0 91 95 03 	lds	r30, 0x0395	; 0x800395 <Serial+0x10>
    3604:	f0 91 96 03 	lds	r31, 0x0396	; 0x800396 <Serial+0x11>
    3608:	80 81       	ld	r24, Z
    360a:	e0 91 9b 03 	lds	r30, 0x039B	; 0x80039b <Serial+0x16>
    360e:	f0 91 9c 03 	lds	r31, 0x039C	; 0x80039c <Serial+0x17>
    3612:	82 fd       	sbrc	r24, 2
    3614:	12 c0       	rjmp	.+36     	; 0x363a <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    3616:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    3618:	80 91 9e 03 	lds	r24, 0x039E	; 0x80039e <Serial+0x19>
    361c:	8f 5f       	subi	r24, 0xFF	; 255
    361e:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    3620:	20 91 9f 03 	lds	r18, 0x039F	; 0x80039f <Serial+0x1a>
    3624:	82 17       	cp	r24, r18
    3626:	51 f0       	breq	.+20     	; 0x363c <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
    3628:	e0 91 9e 03 	lds	r30, 0x039E	; 0x80039e <Serial+0x19>
    362c:	f0 e0       	ldi	r31, 0x00	; 0
    362e:	eb 57       	subi	r30, 0x7B	; 123
    3630:	fc 4f       	sbci	r31, 0xFC	; 252
    3632:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    3634:	80 93 9e 03 	sts	0x039E, r24	; 0x80039e <Serial+0x19>
    3638:	01 c0       	rjmp	.+2      	; 0x363c <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    363a:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    363c:	ff 91       	pop	r31
    363e:	ef 91       	pop	r30
    3640:	9f 91       	pop	r25
    3642:	8f 91       	pop	r24
    3644:	2f 91       	pop	r18
    3646:	0f 90       	pop	r0
    3648:	0f be       	out	0x3f, r0	; 63
    364a:	0f 90       	pop	r0
    364c:	1f 90       	pop	r1
    364e:	18 95       	reti

00003650 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    3650:	1f 92       	push	r1
    3652:	0f 92       	push	r0
    3654:	0f b6       	in	r0, 0x3f	; 63
    3656:	0f 92       	push	r0
    3658:	11 24       	eor	r1, r1
    365a:	2f 93       	push	r18
    365c:	3f 93       	push	r19
    365e:	4f 93       	push	r20
    3660:	5f 93       	push	r21
    3662:	6f 93       	push	r22
    3664:	7f 93       	push	r23
    3666:	8f 93       	push	r24
    3668:	9f 93       	push	r25
    366a:	af 93       	push	r26
    366c:	bf 93       	push	r27
    366e:	ef 93       	push	r30
    3670:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    3672:	85 e8       	ldi	r24, 0x85	; 133
    3674:	93 e0       	ldi	r25, 0x03	; 3
    3676:	0e 94 07 1a 	call	0x340e	; 0x340e <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    367a:	ff 91       	pop	r31
    367c:	ef 91       	pop	r30
    367e:	bf 91       	pop	r27
    3680:	af 91       	pop	r26
    3682:	9f 91       	pop	r25
    3684:	8f 91       	pop	r24
    3686:	7f 91       	pop	r23
    3688:	6f 91       	pop	r22
    368a:	5f 91       	pop	r21
    368c:	4f 91       	pop	r20
    368e:	3f 91       	pop	r19
    3690:	2f 91       	pop	r18
    3692:	0f 90       	pop	r0
    3694:	0f be       	out	0x3f, r0	; 63
    3696:	0f 90       	pop	r0
    3698:	1f 90       	pop	r1
    369a:	18 95       	reti

0000369c <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    369c:	85 e8       	ldi	r24, 0x85	; 133
    369e:	93 e0       	ldi	r25, 0x03	; 3
    36a0:	0e 94 bc 19 	call	0x3378	; 0x3378 <_ZN14HardwareSerial9availableEv>
    36a4:	21 e0       	ldi	r18, 0x01	; 1
    36a6:	89 2b       	or	r24, r25
    36a8:	09 f4       	brne	.+2      	; 0x36ac <_Z17Serial0_availablev+0x10>
    36aa:	20 e0       	ldi	r18, 0x00	; 0
}
    36ac:	82 2f       	mov	r24, r18
    36ae:	08 95       	ret

000036b0 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    36b0:	e5 e8       	ldi	r30, 0x85	; 133
    36b2:	f3 e0       	ldi	r31, 0x03	; 3
    36b4:	13 82       	std	Z+3, r1	; 0x03
    36b6:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    36b8:	88 ee       	ldi	r24, 0xE8	; 232
    36ba:	93 e0       	ldi	r25, 0x03	; 3
    36bc:	a0 e0       	ldi	r26, 0x00	; 0
    36be:	b0 e0       	ldi	r27, 0x00	; 0
    36c0:	84 83       	std	Z+4, r24	; 0x04
    36c2:	95 83       	std	Z+5, r25	; 0x05
    36c4:	a6 83       	std	Z+6, r26	; 0x06
    36c6:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    36c8:	8c ed       	ldi	r24, 0xDC	; 220
    36ca:	91 e0       	ldi	r25, 0x01	; 1
    36cc:	91 83       	std	Z+1, r25	; 0x01
    36ce:	80 83       	st	Z, r24
    36d0:	85 ec       	ldi	r24, 0xC5	; 197
    36d2:	90 e0       	ldi	r25, 0x00	; 0
    36d4:	95 87       	std	Z+13, r25	; 0x0d
    36d6:	84 87       	std	Z+12, r24	; 0x0c
    36d8:	84 ec       	ldi	r24, 0xC4	; 196
    36da:	90 e0       	ldi	r25, 0x00	; 0
    36dc:	97 87       	std	Z+15, r25	; 0x0f
    36de:	86 87       	std	Z+14, r24	; 0x0e
    36e0:	80 ec       	ldi	r24, 0xC0	; 192
    36e2:	90 e0       	ldi	r25, 0x00	; 0
    36e4:	91 8b       	std	Z+17, r25	; 0x11
    36e6:	80 8b       	std	Z+16, r24	; 0x10
    36e8:	81 ec       	ldi	r24, 0xC1	; 193
    36ea:	90 e0       	ldi	r25, 0x00	; 0
    36ec:	93 8b       	std	Z+19, r25	; 0x13
    36ee:	82 8b       	std	Z+18, r24	; 0x12
    36f0:	82 ec       	ldi	r24, 0xC2	; 194
    36f2:	90 e0       	ldi	r25, 0x00	; 0
    36f4:	95 8b       	std	Z+21, r25	; 0x15
    36f6:	84 8b       	std	Z+20, r24	; 0x14
    36f8:	86 ec       	ldi	r24, 0xC6	; 198
    36fa:	90 e0       	ldi	r25, 0x00	; 0
    36fc:	97 8b       	std	Z+23, r25	; 0x17
    36fe:	86 8b       	std	Z+22, r24	; 0x16
    3700:	11 8e       	std	Z+25, r1	; 0x19
    3702:	12 8e       	std	Z+26, r1	; 0x1a
    3704:	13 8e       	std	Z+27, r1	; 0x1b
    3706:	14 8e       	std	Z+28, r1	; 0x1c
    3708:	08 95       	ret

0000370a <initVariant>:
    370a:	08 95       	ret

0000370c <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    370c:	0e 94 b2 1d 	call	0x3b64	; 0x3b64 <init>

	initVariant();
    3710:	0e 94 85 1b 	call	0x370a	; 0x370a <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    3714:	0e 94 55 07 	call	0xeaa	; 0xeaa <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    3718:	c9 ef       	ldi	r28, 0xF9	; 249
    371a:	d9 e1       	ldi	r29, 0x19	; 25
#endif
	
	setup();
    
	for (;;) {
		loop();
    371c:	0e 94 25 08 	call	0x104a	; 0x104a <loop>
		if (serialEventRun) serialEventRun();
    3720:	20 97       	sbiw	r28, 0x00	; 0
    3722:	e1 f3       	breq	.-8      	; 0x371c <main+0x10>
    3724:	0e 94 f9 19 	call	0x33f2	; 0x33f2 <_Z14serialEventRunv>
    3728:	f9 cf       	rjmp	.-14     	; 0x371c <main+0x10>

0000372a <_Znwj>:
    372a:	0c 94 e0 1e 	jmp	0x3dc0	; 0x3dc0 <malloc>

0000372e <_ZN5Print5writeEPKhj>:
size_t Print::println(long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
    372e:	cf 92       	push	r12
    3730:	df 92       	push	r13
    3732:	ef 92       	push	r14
    3734:	ff 92       	push	r15
    3736:	0f 93       	push	r16
    3738:	1f 93       	push	r17
    373a:	cf 93       	push	r28
    373c:	df 93       	push	r29
    373e:	6c 01       	movw	r12, r24
    3740:	7a 01       	movw	r14, r20
    3742:	8b 01       	movw	r16, r22
    3744:	c0 e0       	ldi	r28, 0x00	; 0
    3746:	d0 e0       	ldi	r29, 0x00	; 0
    3748:	ce 15       	cp	r28, r14
    374a:	df 05       	cpc	r29, r15
    374c:	81 f0       	breq	.+32     	; 0x376e <_ZN5Print5writeEPKhj+0x40>
    374e:	d8 01       	movw	r26, r16
    3750:	6d 91       	ld	r22, X+
    3752:	8d 01       	movw	r16, r26
    3754:	d6 01       	movw	r26, r12
    3756:	ed 91       	ld	r30, X+
    3758:	fc 91       	ld	r31, X
    375a:	01 90       	ld	r0, Z+
    375c:	f0 81       	ld	r31, Z
    375e:	e0 2d       	mov	r30, r0
    3760:	c6 01       	movw	r24, r12
    3762:	09 95       	icall
    3764:	89 2b       	or	r24, r25
    3766:	11 f0       	breq	.+4      	; 0x376c <_ZN5Print5writeEPKhj+0x3e>
    3768:	21 96       	adiw	r28, 0x01	; 1
    376a:	ee cf       	rjmp	.-36     	; 0x3748 <_ZN5Print5writeEPKhj+0x1a>
    376c:	7e 01       	movw	r14, r28
    376e:	c7 01       	movw	r24, r14
    3770:	df 91       	pop	r29
    3772:	cf 91       	pop	r28
    3774:	1f 91       	pop	r17
    3776:	0f 91       	pop	r16
    3778:	ff 90       	pop	r15
    377a:	ef 90       	pop	r14
    377c:	df 90       	pop	r13
    377e:	cf 90       	pop	r12
    3780:	08 95       	ret

00003782 <_ZN5Print5writeEPKc>:
    3782:	61 15       	cp	r22, r1
    3784:	71 05       	cpc	r23, r1
    3786:	79 f0       	breq	.+30     	; 0x37a6 <_ZN5Print5writeEPKc+0x24>
    3788:	fb 01       	movw	r30, r22
    378a:	01 90       	ld	r0, Z+
    378c:	00 20       	and	r0, r0
    378e:	e9 f7       	brne	.-6      	; 0x378a <_ZN5Print5writeEPKc+0x8>
    3790:	31 97       	sbiw	r30, 0x01	; 1
    3792:	af 01       	movw	r20, r30
    3794:	46 1b       	sub	r20, r22
    3796:	57 0b       	sbc	r21, r23
    3798:	dc 01       	movw	r26, r24
    379a:	ed 91       	ld	r30, X+
    379c:	fc 91       	ld	r31, X
    379e:	02 80       	ldd	r0, Z+2	; 0x02
    37a0:	f3 81       	ldd	r31, Z+3	; 0x03
    37a2:	e0 2d       	mov	r30, r0
    37a4:	09 94       	ijmp
    37a6:	80 e0       	ldi	r24, 0x00	; 0
    37a8:	90 e0       	ldi	r25, 0x00	; 0
    37aa:	08 95       	ret

000037ac <_ZN5Print5printEc>:
    37ac:	dc 01       	movw	r26, r24
    37ae:	ed 91       	ld	r30, X+
    37b0:	fc 91       	ld	r31, X
    37b2:	01 90       	ld	r0, Z+
    37b4:	f0 81       	ld	r31, Z
    37b6:	e0 2d       	mov	r30, r0
    37b8:	09 94       	ijmp

000037ba <_ZN5Print7printlnEv>:
    37ba:	6a ee       	ldi	r22, 0xEA	; 234
    37bc:	71 e0       	ldi	r23, 0x01	; 1
    37be:	0c 94 c1 1b 	jmp	0x3782	; 0x3782 <_ZN5Print5writeEPKc>

000037c2 <_ZN5Print7printlnEPKc>:
    37c2:	0f 93       	push	r16
    37c4:	1f 93       	push	r17
    37c6:	cf 93       	push	r28
    37c8:	df 93       	push	r29
    37ca:	ec 01       	movw	r28, r24
    37cc:	0e 94 c1 1b 	call	0x3782	; 0x3782 <_ZN5Print5writeEPKc>
    37d0:	8c 01       	movw	r16, r24
    37d2:	ce 01       	movw	r24, r28
    37d4:	0e 94 dd 1b 	call	0x37ba	; 0x37ba <_ZN5Print7printlnEv>
    37d8:	80 0f       	add	r24, r16
    37da:	91 1f       	adc	r25, r17
    37dc:	df 91       	pop	r29
    37de:	cf 91       	pop	r28
    37e0:	1f 91       	pop	r17
    37e2:	0f 91       	pop	r16
    37e4:	08 95       	ret

000037e6 <_ZN5Print11printNumberEmh>:
    37e6:	8f 92       	push	r8
    37e8:	9f 92       	push	r9
    37ea:	af 92       	push	r10
    37ec:	bf 92       	push	r11
    37ee:	ef 92       	push	r14
    37f0:	ff 92       	push	r15
    37f2:	0f 93       	push	r16
    37f4:	1f 93       	push	r17
    37f6:	cf 93       	push	r28
    37f8:	df 93       	push	r29
    37fa:	cd b7       	in	r28, 0x3d	; 61
    37fc:	de b7       	in	r29, 0x3e	; 62
    37fe:	a1 97       	sbiw	r28, 0x21	; 33
    3800:	0f b6       	in	r0, 0x3f	; 63
    3802:	f8 94       	cli
    3804:	de bf       	out	0x3e, r29	; 62
    3806:	0f be       	out	0x3f, r0	; 63
    3808:	cd bf       	out	0x3d, r28	; 61
    380a:	7c 01       	movw	r14, r24
    380c:	fa 01       	movw	r30, r20
    380e:	cb 01       	movw	r24, r22
    3810:	19 a2       	std	Y+33, r1	; 0x21
    3812:	22 30       	cpi	r18, 0x02	; 2
    3814:	08 f4       	brcc	.+2      	; 0x3818 <_ZN5Print11printNumberEmh+0x32>
    3816:	2a e0       	ldi	r18, 0x0A	; 10
    3818:	8e 01       	movw	r16, r28
    381a:	0f 5d       	subi	r16, 0xDF	; 223
    381c:	1f 4f       	sbci	r17, 0xFF	; 255
    381e:	82 2e       	mov	r8, r18
    3820:	91 2c       	mov	r9, r1
    3822:	a1 2c       	mov	r10, r1
    3824:	b1 2c       	mov	r11, r1
    3826:	bf 01       	movw	r22, r30
    3828:	a5 01       	movw	r20, r10
    382a:	94 01       	movw	r18, r8
    382c:	0e 94 7f 1e 	call	0x3cfe	; 0x3cfe <__udivmodsi4>
    3830:	f9 01       	movw	r30, r18
    3832:	ca 01       	movw	r24, r20
    3834:	01 50       	subi	r16, 0x01	; 1
    3836:	11 09       	sbc	r17, r1
    3838:	6a 30       	cpi	r22, 0x0A	; 10
    383a:	10 f4       	brcc	.+4      	; 0x3840 <_ZN5Print11printNumberEmh+0x5a>
    383c:	60 5d       	subi	r22, 0xD0	; 208
    383e:	01 c0       	rjmp	.+2      	; 0x3842 <_ZN5Print11printNumberEmh+0x5c>
    3840:	69 5c       	subi	r22, 0xC9	; 201
    3842:	d8 01       	movw	r26, r16
    3844:	6c 93       	st	X, r22
    3846:	23 2b       	or	r18, r19
    3848:	24 2b       	or	r18, r20
    384a:	25 2b       	or	r18, r21
    384c:	61 f7       	brne	.-40     	; 0x3826 <_ZN5Print11printNumberEmh+0x40>
    384e:	b8 01       	movw	r22, r16
    3850:	c7 01       	movw	r24, r14
    3852:	0e 94 c1 1b 	call	0x3782	; 0x3782 <_ZN5Print5writeEPKc>
    3856:	a1 96       	adiw	r28, 0x21	; 33
    3858:	0f b6       	in	r0, 0x3f	; 63
    385a:	f8 94       	cli
    385c:	de bf       	out	0x3e, r29	; 62
    385e:	0f be       	out	0x3f, r0	; 63
    3860:	cd bf       	out	0x3d, r28	; 61
    3862:	df 91       	pop	r29
    3864:	cf 91       	pop	r28
    3866:	1f 91       	pop	r17
    3868:	0f 91       	pop	r16
    386a:	ff 90       	pop	r15
    386c:	ef 90       	pop	r14
    386e:	bf 90       	pop	r11
    3870:	af 90       	pop	r10
    3872:	9f 90       	pop	r9
    3874:	8f 90       	pop	r8
    3876:	08 95       	ret

00003878 <_ZN5Print5printEmi>:
    3878:	21 15       	cp	r18, r1
    387a:	31 05       	cpc	r19, r1
    387c:	41 f4       	brne	.+16     	; 0x388e <_ZN5Print5printEmi+0x16>
    387e:	dc 01       	movw	r26, r24
    3880:	ed 91       	ld	r30, X+
    3882:	fc 91       	ld	r31, X
    3884:	01 90       	ld	r0, Z+
    3886:	f0 81       	ld	r31, Z
    3888:	e0 2d       	mov	r30, r0
    388a:	64 2f       	mov	r22, r20
    388c:	09 94       	ijmp
    388e:	0c 94 f3 1b 	jmp	0x37e6	; 0x37e6 <_ZN5Print11printNumberEmh>

00003892 <_ZN5Print5printEji>:
    3892:	9a 01       	movw	r18, r20
    3894:	ab 01       	movw	r20, r22
    3896:	60 e0       	ldi	r22, 0x00	; 0
    3898:	70 e0       	ldi	r23, 0x00	; 0
    389a:	0c 94 3c 1c 	jmp	0x3878	; 0x3878 <_ZN5Print5printEmi>

0000389e <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
    389e:	7f 92       	push	r7
    38a0:	8f 92       	push	r8
    38a2:	9f 92       	push	r9
    38a4:	af 92       	push	r10
    38a6:	bf 92       	push	r11
    38a8:	cf 92       	push	r12
    38aa:	df 92       	push	r13
    38ac:	ef 92       	push	r14
    38ae:	ff 92       	push	r15
    38b0:	0f 93       	push	r16
    38b2:	1f 93       	push	r17
    38b4:	cf 93       	push	r28
    38b6:	df 93       	push	r29
    38b8:	8c 01       	movw	r16, r24
    38ba:	6a 01       	movw	r12, r20
    38bc:	7b 01       	movw	r14, r22
    38be:	72 2e       	mov	r7, r18
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
    38c0:	9a 01       	movw	r18, r20
    38c2:	ab 01       	movw	r20, r22
    38c4:	c7 01       	movw	r24, r14
    38c6:	b6 01       	movw	r22, r12
    38c8:	0e 94 6a 1e 	call	0x3cd4	; 0x3cd4 <__unordsf2>
    38cc:	88 23       	and	r24, r24
    38ce:	19 f0       	breq	.+6      	; 0x38d6 <_ZN5Print10printFloatEdh+0x38>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    38d0:	6d ee       	ldi	r22, 0xED	; 237
    38d2:	71 e0       	ldi	r23, 0x01	; 1
    38d4:	27 c0       	rjmp	.+78     	; 0x3924 <_ZN5Print10printFloatEdh+0x86>
size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
    38d6:	46 01       	movw	r8, r12
    38d8:	57 01       	movw	r10, r14
    38da:	e8 94       	clt
    38dc:	b7 f8       	bld	r11, 7
    38de:	2f ef       	ldi	r18, 0xFF	; 255
    38e0:	3f ef       	ldi	r19, 0xFF	; 255
    38e2:	4f e7       	ldi	r20, 0x7F	; 127
    38e4:	5f e7       	ldi	r21, 0x7F	; 127
    38e6:	c5 01       	movw	r24, r10
    38e8:	b4 01       	movw	r22, r8
    38ea:	0e 94 6a 1e 	call	0x3cd4	; 0x3cd4 <__unordsf2>
    38ee:	81 11       	cpse	r24, r1
    38f0:	0d c0       	rjmp	.+26     	; 0x390c <_ZN5Print10printFloatEdh+0x6e>
    38f2:	2f ef       	ldi	r18, 0xFF	; 255
    38f4:	3f ef       	ldi	r19, 0xFF	; 255
    38f6:	4f e7       	ldi	r20, 0x7F	; 127
    38f8:	5f e7       	ldi	r21, 0x7F	; 127
    38fa:	c5 01       	movw	r24, r10
    38fc:	b4 01       	movw	r22, r8
    38fe:	0e 94 b8 17 	call	0x2f70	; 0x2f70 <__cmpsf2>
    3902:	18 16       	cp	r1, r24
    3904:	1c f4       	brge	.+6      	; 0x390c <_ZN5Print10printFloatEdh+0x6e>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    3906:	61 ef       	ldi	r22, 0xF1	; 241
    3908:	71 e0       	ldi	r23, 0x01	; 1
    390a:	0c c0       	rjmp	.+24     	; 0x3924 <_ZN5Print10printFloatEdh+0x86>
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
    390c:	2f ef       	ldi	r18, 0xFF	; 255
    390e:	3f ef       	ldi	r19, 0xFF	; 255
    3910:	4f e7       	ldi	r20, 0x7F	; 127
    3912:	5f e4       	ldi	r21, 0x4F	; 79
    3914:	c7 01       	movw	r24, r14
    3916:	b6 01       	movw	r22, r12
    3918:	0e 94 3e 19 	call	0x327c	; 0x327c <__gesf2>
    391c:	18 16       	cp	r1, r24
    391e:	94 f4       	brge	.+36     	; 0x3944 <_ZN5Print10printFloatEdh+0xa6>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    3920:	65 ef       	ldi	r22, 0xF5	; 245
    3922:	71 e0       	ldi	r23, 0x01	; 1
    3924:	c8 01       	movw	r24, r16
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    3926:	df 91       	pop	r29
    3928:	cf 91       	pop	r28
    392a:	1f 91       	pop	r17
    392c:	0f 91       	pop	r16
    392e:	ff 90       	pop	r15
    3930:	ef 90       	pop	r14
    3932:	df 90       	pop	r13
    3934:	cf 90       	pop	r12
    3936:	bf 90       	pop	r11
    3938:	af 90       	pop	r10
    393a:	9f 90       	pop	r9
    393c:	8f 90       	pop	r8
    393e:	7f 90       	pop	r7
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    3940:	0c 94 c1 1b 	jmp	0x3782	; 0x3782 <_ZN5Print5writeEPKc>
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
    3944:	2f ef       	ldi	r18, 0xFF	; 255
    3946:	3f ef       	ldi	r19, 0xFF	; 255
    3948:	4f e7       	ldi	r20, 0x7F	; 127
    394a:	5f ec       	ldi	r21, 0xCF	; 207
    394c:	c7 01       	movw	r24, r14
    394e:	b6 01       	movw	r22, r12
    3950:	0e 94 b8 17 	call	0x2f70	; 0x2f70 <__cmpsf2>
    3954:	87 fd       	sbrc	r24, 7
    3956:	e4 cf       	rjmp	.-56     	; 0x3920 <_ZN5Print10printFloatEdh+0x82>
  
  // Handle negative numbers
  if (number < 0.0)
    3958:	20 e0       	ldi	r18, 0x00	; 0
    395a:	30 e0       	ldi	r19, 0x00	; 0
    395c:	a9 01       	movw	r20, r18
    395e:	c7 01       	movw	r24, r14
    3960:	b6 01       	movw	r22, r12
    3962:	0e 94 b8 17 	call	0x2f70	; 0x2f70 <__cmpsf2>
    3966:	87 ff       	sbrs	r24, 7
    3968:	0a c0       	rjmp	.+20     	; 0x397e <_ZN5Print10printFloatEdh+0xe0>
  {
     n += print('-');
    396a:	6d e2       	ldi	r22, 0x2D	; 45
    396c:	c8 01       	movw	r24, r16
    396e:	0e 94 d6 1b 	call	0x37ac	; 0x37ac <_ZN5Print5printEc>
    3972:	ec 01       	movw	r28, r24
     number = -number;
    3974:	f7 fa       	bst	r15, 7
    3976:	f0 94       	com	r15
    3978:	f7 f8       	bld	r15, 7
    397a:	f0 94       	com	r15
    397c:	02 c0       	rjmp	.+4      	; 0x3982 <_ZN5Print10printFloatEdh+0xe4>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
    397e:	c0 e0       	ldi	r28, 0x00	; 0
    3980:	d0 e0       	ldi	r29, 0x00	; 0
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    3982:	b1 2c       	mov	r11, r1
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
    3984:	60 e0       	ldi	r22, 0x00	; 0
    3986:	70 e0       	ldi	r23, 0x00	; 0
    3988:	80 e0       	ldi	r24, 0x00	; 0
    398a:	9f e3       	ldi	r25, 0x3F	; 63
  for (uint8_t i=0; i<digits; ++i)
    398c:	7b 14       	cp	r7, r11
    398e:	41 f0       	breq	.+16     	; 0x39a0 <_ZN5Print10printFloatEdh+0x102>
    rounding /= 10.0;
    3990:	20 e0       	ldi	r18, 0x00	; 0
    3992:	30 e0       	ldi	r19, 0x00	; 0
    3994:	40 e2       	ldi	r20, 0x20	; 32
    3996:	51 e4       	ldi	r21, 0x41	; 65
    3998:	0e 94 bd 17 	call	0x2f7a	; 0x2f7a <__divsf3>
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    399c:	b3 94       	inc	r11
    399e:	f6 cf       	rjmp	.-20     	; 0x398c <_ZN5Print10printFloatEdh+0xee>
    rounding /= 10.0;
  
  number += rounding;
    39a0:	a7 01       	movw	r20, r14
    39a2:	96 01       	movw	r18, r12
    39a4:	0e 94 da 16 	call	0x2db4	; 0x2db4 <__addsf3>
    39a8:	6b 01       	movw	r12, r22
    39aa:	7c 01       	movw	r14, r24

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
    39ac:	0e 94 36 18 	call	0x306c	; 0x306c <__fixunssfsi>
    39b0:	4b 01       	movw	r8, r22
    39b2:	5c 01       	movw	r10, r24
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
    39b4:	2a e0       	ldi	r18, 0x0A	; 10
    39b6:	ab 01       	movw	r20, r22
    39b8:	bc 01       	movw	r22, r24
    39ba:	c8 01       	movw	r24, r16
    39bc:	0e 94 f3 1b 	call	0x37e6	; 0x37e6 <_ZN5Print11printNumberEmh>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    39c0:	c8 0f       	add	r28, r24
    39c2:	d9 1f       	adc	r29, r25

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    39c4:	77 20       	and	r7, r7
    39c6:	b9 f1       	breq	.+110    	; 0x3a36 <_ZN5Print10printFloatEdh+0x198>
  
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
    39c8:	c5 01       	movw	r24, r10
    39ca:	b4 01       	movw	r22, r8
    39cc:	0e 94 65 18 	call	0x30ca	; 0x30ca <__floatunsisf>
    39d0:	9b 01       	movw	r18, r22
    39d2:	ac 01       	movw	r20, r24
    39d4:	c7 01       	movw	r24, r14
    39d6:	b6 01       	movw	r22, r12
    39d8:	0e 94 d9 16 	call	0x2db2	; 0x2db2 <__subsf3>
    39dc:	6b 01       	movw	r12, r22
    39de:	7c 01       	movw	r14, r24
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print('.'); 
    39e0:	6e e2       	ldi	r22, 0x2E	; 46
    39e2:	c8 01       	movw	r24, r16
    39e4:	0e 94 d6 1b 	call	0x37ac	; 0x37ac <_ZN5Print5printEc>
    39e8:	c8 0f       	add	r28, r24
    39ea:	d9 1f       	adc	r29, r25
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    39ec:	20 e0       	ldi	r18, 0x00	; 0
    39ee:	30 e0       	ldi	r19, 0x00	; 0
    39f0:	40 e2       	ldi	r20, 0x20	; 32
    39f2:	51 e4       	ldi	r21, 0x41	; 65
    39f4:	c7 01       	movw	r24, r14
    39f6:	b6 01       	movw	r22, r12
    39f8:	0e 94 4b 19 	call	0x3296	; 0x3296 <__mulsf3>
    39fc:	4b 01       	movw	r8, r22
    39fe:	5c 01       	movw	r10, r24
    unsigned int toPrint = (unsigned int)(remainder);
    3a00:	0e 94 36 18 	call	0x306c	; 0x306c <__fixunssfsi>
    3a04:	6b 01       	movw	r12, r22
    3a06:	7c 01       	movw	r14, r24
    n += print(toPrint);
    3a08:	4a e0       	ldi	r20, 0x0A	; 10
    3a0a:	50 e0       	ldi	r21, 0x00	; 0
    3a0c:	c8 01       	movw	r24, r16
    3a0e:	0e 94 49 1c 	call	0x3892	; 0x3892 <_ZN5Print5printEji>
    3a12:	c8 0f       	add	r28, r24
    3a14:	d9 1f       	adc	r29, r25
    remainder -= toPrint; 
    3a16:	b6 01       	movw	r22, r12
    3a18:	80 e0       	ldi	r24, 0x00	; 0
    3a1a:	90 e0       	ldi	r25, 0x00	; 0
    3a1c:	0e 94 65 18 	call	0x30ca	; 0x30ca <__floatunsisf>
    3a20:	9b 01       	movw	r18, r22
    3a22:	ac 01       	movw	r20, r24
    3a24:	c5 01       	movw	r24, r10
    3a26:	b4 01       	movw	r22, r8
    3a28:	0e 94 d9 16 	call	0x2db2	; 0x2db2 <__subsf3>
    3a2c:	6b 01       	movw	r12, r22
    3a2e:	7c 01       	movw	r14, r24
    3a30:	7a 94       	dec	r7
  if (digits > 0) {
    n += print('.'); 
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
    3a32:	71 10       	cpse	r7, r1
    3a34:	db cf       	rjmp	.-74     	; 0x39ec <_ZN5Print10printFloatEdh+0x14e>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    3a36:	ce 01       	movw	r24, r28
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    3a38:	df 91       	pop	r29
    3a3a:	cf 91       	pop	r28
    3a3c:	1f 91       	pop	r17
    3a3e:	0f 91       	pop	r16
    3a40:	ff 90       	pop	r15
    3a42:	ef 90       	pop	r14
    3a44:	df 90       	pop	r13
    3a46:	cf 90       	pop	r12
    3a48:	bf 90       	pop	r11
    3a4a:	af 90       	pop	r10
    3a4c:	9f 90       	pop	r9
    3a4e:	8f 90       	pop	r8
    3a50:	7f 90       	pop	r7
    3a52:	08 95       	ret

00003a54 <_ZN5Print5printEdi>:
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    3a54:	0c 94 4f 1c 	jmp	0x389e	; 0x389e <_ZN5Print10printFloatEdh>

00003a58 <_ZN5Print7printlnEdi>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
    3a58:	0f 93       	push	r16
    3a5a:	1f 93       	push	r17
    3a5c:	cf 93       	push	r28
    3a5e:	df 93       	push	r29
    3a60:	ec 01       	movw	r28, r24
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    3a62:	0e 94 4f 1c 	call	0x389e	; 0x389e <_ZN5Print10printFloatEdh>
    3a66:	8c 01       	movw	r16, r24
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
    3a68:	ce 01       	movw	r24, r28
    3a6a:	0e 94 dd 1b 	call	0x37ba	; 0x37ba <_ZN5Print7printlnEv>
  return n;
}
    3a6e:	80 0f       	add	r24, r16
    3a70:	91 1f       	adc	r25, r17
    3a72:	df 91       	pop	r29
    3a74:	cf 91       	pop	r28
    3a76:	1f 91       	pop	r17
    3a78:	0f 91       	pop	r16
    3a7a:	08 95       	ret

00003a7c <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
    3a7c:	1f 92       	push	r1
    3a7e:	0f 92       	push	r0
    3a80:	0f b6       	in	r0, 0x3f	; 63
    3a82:	0f 92       	push	r0
    3a84:	11 24       	eor	r1, r1
    3a86:	2f 93       	push	r18
    3a88:	3f 93       	push	r19
    3a8a:	8f 93       	push	r24
    3a8c:	9f 93       	push	r25
    3a8e:	af 93       	push	r26
    3a90:	bf 93       	push	r27
    3a92:	80 91 23 04 	lds	r24, 0x0423	; 0x800423 <timer0_millis>
    3a96:	90 91 24 04 	lds	r25, 0x0424	; 0x800424 <timer0_millis+0x1>
    3a9a:	a0 91 25 04 	lds	r26, 0x0425	; 0x800425 <timer0_millis+0x2>
    3a9e:	b0 91 26 04 	lds	r27, 0x0426	; 0x800426 <timer0_millis+0x3>
    3aa2:	30 91 22 04 	lds	r19, 0x0422	; 0x800422 <timer0_fract>
    3aa6:	20 e1       	ldi	r18, 0x10	; 16
    3aa8:	23 0f       	add	r18, r19
    3aaa:	2d 37       	cpi	r18, 0x7D	; 125
    3aac:	28 f0       	brcs	.+10     	; 0x3ab8 <__vector_16+0x3c>
    3aae:	23 e9       	ldi	r18, 0x93	; 147
    3ab0:	23 0f       	add	r18, r19
    3ab2:	01 96       	adiw	r24, 0x01	; 1
    3ab4:	a1 1d       	adc	r26, r1
    3ab6:	b1 1d       	adc	r27, r1
    3ab8:	20 93 22 04 	sts	0x0422, r18	; 0x800422 <timer0_fract>
    3abc:	80 93 23 04 	sts	0x0423, r24	; 0x800423 <timer0_millis>
    3ac0:	90 93 24 04 	sts	0x0424, r25	; 0x800424 <timer0_millis+0x1>
    3ac4:	a0 93 25 04 	sts	0x0425, r26	; 0x800425 <timer0_millis+0x2>
    3ac8:	b0 93 26 04 	sts	0x0426, r27	; 0x800426 <timer0_millis+0x3>
    3acc:	80 91 27 04 	lds	r24, 0x0427	; 0x800427 <timer0_overflow_count>
    3ad0:	90 91 28 04 	lds	r25, 0x0428	; 0x800428 <timer0_overflow_count+0x1>
    3ad4:	a0 91 29 04 	lds	r26, 0x0429	; 0x800429 <timer0_overflow_count+0x2>
    3ad8:	b0 91 2a 04 	lds	r27, 0x042A	; 0x80042a <timer0_overflow_count+0x3>
    3adc:	01 96       	adiw	r24, 0x01	; 1
    3ade:	a1 1d       	adc	r26, r1
    3ae0:	b1 1d       	adc	r27, r1
    3ae2:	80 93 27 04 	sts	0x0427, r24	; 0x800427 <timer0_overflow_count>
    3ae6:	90 93 28 04 	sts	0x0428, r25	; 0x800428 <timer0_overflow_count+0x1>
    3aea:	a0 93 29 04 	sts	0x0429, r26	; 0x800429 <timer0_overflow_count+0x2>
    3aee:	b0 93 2a 04 	sts	0x042A, r27	; 0x80042a <timer0_overflow_count+0x3>
    3af2:	bf 91       	pop	r27
    3af4:	af 91       	pop	r26
    3af6:	9f 91       	pop	r25
    3af8:	8f 91       	pop	r24
    3afa:	3f 91       	pop	r19
    3afc:	2f 91       	pop	r18
    3afe:	0f 90       	pop	r0
    3b00:	0f be       	out	0x3f, r0	; 63
    3b02:	0f 90       	pop	r0
    3b04:	1f 90       	pop	r1
    3b06:	18 95       	reti

00003b08 <millis>:
    3b08:	2f b7       	in	r18, 0x3f	; 63
    3b0a:	f8 94       	cli
    3b0c:	60 91 23 04 	lds	r22, 0x0423	; 0x800423 <timer0_millis>
    3b10:	70 91 24 04 	lds	r23, 0x0424	; 0x800424 <timer0_millis+0x1>
    3b14:	80 91 25 04 	lds	r24, 0x0425	; 0x800425 <timer0_millis+0x2>
    3b18:	90 91 26 04 	lds	r25, 0x0426	; 0x800426 <timer0_millis+0x3>
    3b1c:	2f bf       	out	0x3f, r18	; 63
    3b1e:	08 95       	ret

00003b20 <micros>:
    3b20:	3f b7       	in	r19, 0x3f	; 63
    3b22:	f8 94       	cli
    3b24:	80 91 27 04 	lds	r24, 0x0427	; 0x800427 <timer0_overflow_count>
    3b28:	90 91 28 04 	lds	r25, 0x0428	; 0x800428 <timer0_overflow_count+0x1>
    3b2c:	a0 91 29 04 	lds	r26, 0x0429	; 0x800429 <timer0_overflow_count+0x2>
    3b30:	b0 91 2a 04 	lds	r27, 0x042A	; 0x80042a <timer0_overflow_count+0x3>
    3b34:	26 b5       	in	r18, 0x26	; 38
    3b36:	a8 9b       	sbis	0x15, 0	; 21
    3b38:	05 c0       	rjmp	.+10     	; 0x3b44 <micros+0x24>
    3b3a:	2f 3f       	cpi	r18, 0xFF	; 255
    3b3c:	19 f0       	breq	.+6      	; 0x3b44 <micros+0x24>
    3b3e:	01 96       	adiw	r24, 0x01	; 1
    3b40:	a1 1d       	adc	r26, r1
    3b42:	b1 1d       	adc	r27, r1
    3b44:	3f bf       	out	0x3f, r19	; 63
    3b46:	ba 2f       	mov	r27, r26
    3b48:	a9 2f       	mov	r26, r25
    3b4a:	98 2f       	mov	r25, r24
    3b4c:	88 27       	eor	r24, r24
    3b4e:	82 0f       	add	r24, r18
    3b50:	91 1d       	adc	r25, r1
    3b52:	a1 1d       	adc	r26, r1
    3b54:	b1 1d       	adc	r27, r1
    3b56:	bc 01       	movw	r22, r24
    3b58:	cd 01       	movw	r24, r26
    3b5a:	96 95       	lsr	r25
    3b5c:	87 95       	ror	r24
    3b5e:	77 95       	ror	r23
    3b60:	67 95       	ror	r22
    3b62:	08 95       	ret

00003b64 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    3b64:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    3b66:	84 b5       	in	r24, 0x24	; 36
    3b68:	82 60       	ori	r24, 0x02	; 2
    3b6a:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    3b6c:	84 b5       	in	r24, 0x24	; 36
    3b6e:	81 60       	ori	r24, 0x01	; 1
    3b70:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    3b72:	85 b5       	in	r24, 0x25	; 37
    3b74:	82 60       	ori	r24, 0x02	; 2
    3b76:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    3b78:	85 b5       	in	r24, 0x25	; 37
    3b7a:	81 60       	ori	r24, 0x01	; 1
    3b7c:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    3b7e:	ee e6       	ldi	r30, 0x6E	; 110
    3b80:	f0 e0       	ldi	r31, 0x00	; 0
    3b82:	80 81       	ld	r24, Z
    3b84:	81 60       	ori	r24, 0x01	; 1
    3b86:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    3b88:	e1 e8       	ldi	r30, 0x81	; 129
    3b8a:	f0 e0       	ldi	r31, 0x00	; 0
    3b8c:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    3b8e:	80 81       	ld	r24, Z
    3b90:	82 60       	ori	r24, 0x02	; 2
    3b92:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    3b94:	80 81       	ld	r24, Z
    3b96:	81 60       	ori	r24, 0x01	; 1
    3b98:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    3b9a:	e0 e8       	ldi	r30, 0x80	; 128
    3b9c:	f0 e0       	ldi	r31, 0x00	; 0
    3b9e:	80 81       	ld	r24, Z
    3ba0:	81 60       	ori	r24, 0x01	; 1
    3ba2:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    3ba4:	e1 eb       	ldi	r30, 0xB1	; 177
    3ba6:	f0 e0       	ldi	r31, 0x00	; 0
    3ba8:	80 81       	ld	r24, Z
    3baa:	84 60       	ori	r24, 0x04	; 4
    3bac:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    3bae:	e0 eb       	ldi	r30, 0xB0	; 176
    3bb0:	f0 e0       	ldi	r31, 0x00	; 0
    3bb2:	80 81       	ld	r24, Z
    3bb4:	81 60       	ori	r24, 0x01	; 1
    3bb6:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    3bb8:	ea e7       	ldi	r30, 0x7A	; 122
    3bba:	f0 e0       	ldi	r31, 0x00	; 0
    3bbc:	80 81       	ld	r24, Z
    3bbe:	84 60       	ori	r24, 0x04	; 4
    3bc0:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    3bc2:	80 81       	ld	r24, Z
    3bc4:	82 60       	ori	r24, 0x02	; 2
    3bc6:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    3bc8:	80 81       	ld	r24, Z
    3bca:	81 60       	ori	r24, 0x01	; 1
    3bcc:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    3bce:	80 81       	ld	r24, Z
    3bd0:	80 68       	ori	r24, 0x80	; 128
    3bd2:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    3bd4:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    3bd8:	08 95       	ret

00003bda <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    3bda:	cf 93       	push	r28
    3bdc:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    3bde:	90 e0       	ldi	r25, 0x00	; 0
    3be0:	fc 01       	movw	r30, r24
    3be2:	e9 5a       	subi	r30, 0xA9	; 169
    3be4:	fe 4f       	sbci	r31, 0xFE	; 254
    3be6:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    3be8:	fc 01       	movw	r30, r24
    3bea:	e5 59       	subi	r30, 0x95	; 149
    3bec:	fe 4f       	sbci	r31, 0xFE	; 254
    3bee:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    3bf0:	88 23       	and	r24, r24
    3bf2:	61 f1       	breq	.+88     	; 0x3c4c <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    3bf4:	90 e0       	ldi	r25, 0x00	; 0
    3bf6:	88 0f       	add	r24, r24
    3bf8:	99 1f       	adc	r25, r25
    3bfa:	fc 01       	movw	r30, r24
    3bfc:	ed 56       	subi	r30, 0x6D	; 109
    3bfe:	fe 4f       	sbci	r31, 0xFE	; 254
    3c00:	c5 91       	lpm	r28, Z+
    3c02:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    3c04:	fc 01       	movw	r30, r24
    3c06:	e7 57       	subi	r30, 0x77	; 119
    3c08:	fe 4f       	sbci	r31, 0xFE	; 254
    3c0a:	a5 91       	lpm	r26, Z+
    3c0c:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    3c0e:	61 11       	cpse	r22, r1
    3c10:	09 c0       	rjmp	.+18     	; 0x3c24 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    3c12:	9f b7       	in	r25, 0x3f	; 63
                cli();
    3c14:	f8 94       	cli
		*reg &= ~bit;
    3c16:	88 81       	ld	r24, Y
    3c18:	20 95       	com	r18
    3c1a:	82 23       	and	r24, r18
    3c1c:	88 83       	st	Y, r24
		*out &= ~bit;
    3c1e:	ec 91       	ld	r30, X
    3c20:	2e 23       	and	r18, r30
    3c22:	0b c0       	rjmp	.+22     	; 0x3c3a <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    3c24:	62 30       	cpi	r22, 0x02	; 2
    3c26:	61 f4       	brne	.+24     	; 0x3c40 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    3c28:	9f b7       	in	r25, 0x3f	; 63
                cli();
    3c2a:	f8 94       	cli
		*reg &= ~bit;
    3c2c:	88 81       	ld	r24, Y
    3c2e:	32 2f       	mov	r19, r18
    3c30:	30 95       	com	r19
    3c32:	83 23       	and	r24, r19
    3c34:	88 83       	st	Y, r24
		*out |= bit;
    3c36:	ec 91       	ld	r30, X
    3c38:	2e 2b       	or	r18, r30
    3c3a:	2c 93       	st	X, r18
		SREG = oldSREG;
    3c3c:	9f bf       	out	0x3f, r25	; 63
    3c3e:	06 c0       	rjmp	.+12     	; 0x3c4c <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    3c40:	8f b7       	in	r24, 0x3f	; 63
                cli();
    3c42:	f8 94       	cli
		*reg |= bit;
    3c44:	e8 81       	ld	r30, Y
    3c46:	2e 2b       	or	r18, r30
    3c48:	28 83       	st	Y, r18
		SREG = oldSREG;
    3c4a:	8f bf       	out	0x3f, r24	; 63
	}
}
    3c4c:	df 91       	pop	r29
    3c4e:	cf 91       	pop	r28
    3c50:	08 95       	ret

00003c52 <_Z3maplllll>:
  long diff = howbig - howsmall;
  return random(diff) + howsmall;
}

long map(long x, long in_min, long in_max, long out_min, long out_max)
{
    3c52:	4f 92       	push	r4
    3c54:	5f 92       	push	r5
    3c56:	6f 92       	push	r6
    3c58:	7f 92       	push	r7
    3c5a:	af 92       	push	r10
    3c5c:	bf 92       	push	r11
    3c5e:	cf 92       	push	r12
    3c60:	df 92       	push	r13
    3c62:	ef 92       	push	r14
    3c64:	ff 92       	push	r15
    3c66:	0f 93       	push	r16
    3c68:	1f 93       	push	r17
    3c6a:	cf 93       	push	r28
    3c6c:	df 93       	push	r29
    3c6e:	cd b7       	in	r28, 0x3d	; 61
    3c70:	de b7       	in	r29, 0x3e	; 62
    3c72:	29 01       	movw	r4, r18
    3c74:	3a 01       	movw	r6, r20
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    3c76:	9b 01       	movw	r18, r22
    3c78:	ac 01       	movw	r20, r24
    3c7a:	24 19       	sub	r18, r4
    3c7c:	35 09       	sbc	r19, r5
    3c7e:	46 09       	sbc	r20, r6
    3c80:	57 09       	sbc	r21, r7
    3c82:	89 89       	ldd	r24, Y+17	; 0x11
    3c84:	9a 89       	ldd	r25, Y+18	; 0x12
    3c86:	ab 89       	ldd	r26, Y+19	; 0x13
    3c88:	bc 89       	ldd	r27, Y+20	; 0x14
    3c8a:	bc 01       	movw	r22, r24
    3c8c:	cd 01       	movw	r24, r26
    3c8e:	6a 19       	sub	r22, r10
    3c90:	7b 09       	sbc	r23, r11
    3c92:	8c 09       	sbc	r24, r12
    3c94:	9d 09       	sbc	r25, r13
    3c96:	0e 94 6f 1e 	call	0x3cde	; 0x3cde <__mulsi3>
    3c9a:	a8 01       	movw	r20, r16
    3c9c:	97 01       	movw	r18, r14
    3c9e:	24 19       	sub	r18, r4
    3ca0:	35 09       	sbc	r19, r5
    3ca2:	46 09       	sbc	r20, r6
    3ca4:	57 09       	sbc	r21, r7
    3ca6:	0e 94 a1 1e 	call	0x3d42	; 0x3d42 <__divmodsi4>
    3caa:	ca 01       	movw	r24, r20
    3cac:	b9 01       	movw	r22, r18
    3cae:	6a 0d       	add	r22, r10
    3cb0:	7b 1d       	adc	r23, r11
    3cb2:	8c 1d       	adc	r24, r12
    3cb4:	9d 1d       	adc	r25, r13
}
    3cb6:	df 91       	pop	r29
    3cb8:	cf 91       	pop	r28
    3cba:	1f 91       	pop	r17
    3cbc:	0f 91       	pop	r16
    3cbe:	ff 90       	pop	r15
    3cc0:	ef 90       	pop	r14
    3cc2:	df 90       	pop	r13
    3cc4:	cf 90       	pop	r12
    3cc6:	bf 90       	pop	r11
    3cc8:	af 90       	pop	r10
    3cca:	7f 90       	pop	r7
    3ccc:	6f 90       	pop	r6
    3cce:	5f 90       	pop	r5
    3cd0:	4f 90       	pop	r4
    3cd2:	08 95       	ret

00003cd4 <__unordsf2>:
    3cd4:	0e 94 a2 18 	call	0x3144	; 0x3144 <__fp_cmp>
    3cd8:	88 0b       	sbc	r24, r24
    3cda:	99 0b       	sbc	r25, r25
    3cdc:	08 95       	ret

00003cde <__mulsi3>:
    3cde:	db 01       	movw	r26, r22
    3ce0:	8f 93       	push	r24
    3ce2:	9f 93       	push	r25
    3ce4:	0e 94 c6 1e 	call	0x3d8c	; 0x3d8c <__muluhisi3>
    3ce8:	bf 91       	pop	r27
    3cea:	af 91       	pop	r26
    3cec:	a2 9f       	mul	r26, r18
    3cee:	80 0d       	add	r24, r0
    3cf0:	91 1d       	adc	r25, r1
    3cf2:	a3 9f       	mul	r26, r19
    3cf4:	90 0d       	add	r25, r0
    3cf6:	b2 9f       	mul	r27, r18
    3cf8:	90 0d       	add	r25, r0
    3cfa:	11 24       	eor	r1, r1
    3cfc:	08 95       	ret

00003cfe <__udivmodsi4>:
    3cfe:	a1 e2       	ldi	r26, 0x21	; 33
    3d00:	1a 2e       	mov	r1, r26
    3d02:	aa 1b       	sub	r26, r26
    3d04:	bb 1b       	sub	r27, r27
    3d06:	fd 01       	movw	r30, r26
    3d08:	0d c0       	rjmp	.+26     	; 0x3d24 <__udivmodsi4_ep>

00003d0a <__udivmodsi4_loop>:
    3d0a:	aa 1f       	adc	r26, r26
    3d0c:	bb 1f       	adc	r27, r27
    3d0e:	ee 1f       	adc	r30, r30
    3d10:	ff 1f       	adc	r31, r31
    3d12:	a2 17       	cp	r26, r18
    3d14:	b3 07       	cpc	r27, r19
    3d16:	e4 07       	cpc	r30, r20
    3d18:	f5 07       	cpc	r31, r21
    3d1a:	20 f0       	brcs	.+8      	; 0x3d24 <__udivmodsi4_ep>
    3d1c:	a2 1b       	sub	r26, r18
    3d1e:	b3 0b       	sbc	r27, r19
    3d20:	e4 0b       	sbc	r30, r20
    3d22:	f5 0b       	sbc	r31, r21

00003d24 <__udivmodsi4_ep>:
    3d24:	66 1f       	adc	r22, r22
    3d26:	77 1f       	adc	r23, r23
    3d28:	88 1f       	adc	r24, r24
    3d2a:	99 1f       	adc	r25, r25
    3d2c:	1a 94       	dec	r1
    3d2e:	69 f7       	brne	.-38     	; 0x3d0a <__udivmodsi4_loop>
    3d30:	60 95       	com	r22
    3d32:	70 95       	com	r23
    3d34:	80 95       	com	r24
    3d36:	90 95       	com	r25
    3d38:	9b 01       	movw	r18, r22
    3d3a:	ac 01       	movw	r20, r24
    3d3c:	bd 01       	movw	r22, r26
    3d3e:	cf 01       	movw	r24, r30
    3d40:	08 95       	ret

00003d42 <__divmodsi4>:
    3d42:	05 2e       	mov	r0, r21
    3d44:	97 fb       	bst	r25, 7
    3d46:	1e f4       	brtc	.+6      	; 0x3d4e <__divmodsi4+0xc>
    3d48:	00 94       	com	r0
    3d4a:	0e 94 b8 1e 	call	0x3d70	; 0x3d70 <__negsi2>
    3d4e:	57 fd       	sbrc	r21, 7
    3d50:	07 d0       	rcall	.+14     	; 0x3d60 <__divmodsi4_neg2>
    3d52:	0e 94 7f 1e 	call	0x3cfe	; 0x3cfe <__udivmodsi4>
    3d56:	07 fc       	sbrc	r0, 7
    3d58:	03 d0       	rcall	.+6      	; 0x3d60 <__divmodsi4_neg2>
    3d5a:	4e f4       	brtc	.+18     	; 0x3d6e <__divmodsi4_exit>
    3d5c:	0c 94 b8 1e 	jmp	0x3d70	; 0x3d70 <__negsi2>

00003d60 <__divmodsi4_neg2>:
    3d60:	50 95       	com	r21
    3d62:	40 95       	com	r20
    3d64:	30 95       	com	r19
    3d66:	21 95       	neg	r18
    3d68:	3f 4f       	sbci	r19, 0xFF	; 255
    3d6a:	4f 4f       	sbci	r20, 0xFF	; 255
    3d6c:	5f 4f       	sbci	r21, 0xFF	; 255

00003d6e <__divmodsi4_exit>:
    3d6e:	08 95       	ret

00003d70 <__negsi2>:
    3d70:	90 95       	com	r25
    3d72:	80 95       	com	r24
    3d74:	70 95       	com	r23
    3d76:	61 95       	neg	r22
    3d78:	7f 4f       	sbci	r23, 0xFF	; 255
    3d7a:	8f 4f       	sbci	r24, 0xFF	; 255
    3d7c:	9f 4f       	sbci	r25, 0xFF	; 255
    3d7e:	08 95       	ret

00003d80 <__tablejump2__>:
    3d80:	ee 0f       	add	r30, r30
    3d82:	ff 1f       	adc	r31, r31
    3d84:	05 90       	lpm	r0, Z+
    3d86:	f4 91       	lpm	r31, Z
    3d88:	e0 2d       	mov	r30, r0
    3d8a:	09 94       	ijmp

00003d8c <__muluhisi3>:
    3d8c:	0e 94 d1 1e 	call	0x3da2	; 0x3da2 <__umulhisi3>
    3d90:	a5 9f       	mul	r26, r21
    3d92:	90 0d       	add	r25, r0
    3d94:	b4 9f       	mul	r27, r20
    3d96:	90 0d       	add	r25, r0
    3d98:	a4 9f       	mul	r26, r20
    3d9a:	80 0d       	add	r24, r0
    3d9c:	91 1d       	adc	r25, r1
    3d9e:	11 24       	eor	r1, r1
    3da0:	08 95       	ret

00003da2 <__umulhisi3>:
    3da2:	a2 9f       	mul	r26, r18
    3da4:	b0 01       	movw	r22, r0
    3da6:	b3 9f       	mul	r27, r19
    3da8:	c0 01       	movw	r24, r0
    3daa:	a3 9f       	mul	r26, r19
    3dac:	70 0d       	add	r23, r0
    3dae:	81 1d       	adc	r24, r1
    3db0:	11 24       	eor	r1, r1
    3db2:	91 1d       	adc	r25, r1
    3db4:	b2 9f       	mul	r27, r18
    3db6:	70 0d       	add	r23, r0
    3db8:	81 1d       	adc	r24, r1
    3dba:	11 24       	eor	r1, r1
    3dbc:	91 1d       	adc	r25, r1
    3dbe:	08 95       	ret

00003dc0 <malloc>:
    3dc0:	0f 93       	push	r16
    3dc2:	1f 93       	push	r17
    3dc4:	cf 93       	push	r28
    3dc6:	df 93       	push	r29
    3dc8:	82 30       	cpi	r24, 0x02	; 2
    3dca:	91 05       	cpc	r25, r1
    3dcc:	10 f4       	brcc	.+4      	; 0x3dd2 <malloc+0x12>
    3dce:	82 e0       	ldi	r24, 0x02	; 2
    3dd0:	90 e0       	ldi	r25, 0x00	; 0
    3dd2:	e0 91 2d 04 	lds	r30, 0x042D	; 0x80042d <__flp>
    3dd6:	f0 91 2e 04 	lds	r31, 0x042E	; 0x80042e <__flp+0x1>
    3dda:	20 e0       	ldi	r18, 0x00	; 0
    3ddc:	30 e0       	ldi	r19, 0x00	; 0
    3dde:	a0 e0       	ldi	r26, 0x00	; 0
    3de0:	b0 e0       	ldi	r27, 0x00	; 0
    3de2:	30 97       	sbiw	r30, 0x00	; 0
    3de4:	19 f1       	breq	.+70     	; 0x3e2c <malloc+0x6c>
    3de6:	40 81       	ld	r20, Z
    3de8:	51 81       	ldd	r21, Z+1	; 0x01
    3dea:	02 81       	ldd	r16, Z+2	; 0x02
    3dec:	13 81       	ldd	r17, Z+3	; 0x03
    3dee:	48 17       	cp	r20, r24
    3df0:	59 07       	cpc	r21, r25
    3df2:	c8 f0       	brcs	.+50     	; 0x3e26 <malloc+0x66>
    3df4:	84 17       	cp	r24, r20
    3df6:	95 07       	cpc	r25, r21
    3df8:	69 f4       	brne	.+26     	; 0x3e14 <malloc+0x54>
    3dfa:	10 97       	sbiw	r26, 0x00	; 0
    3dfc:	31 f0       	breq	.+12     	; 0x3e0a <malloc+0x4a>
    3dfe:	12 96       	adiw	r26, 0x02	; 2
    3e00:	0c 93       	st	X, r16
    3e02:	12 97       	sbiw	r26, 0x02	; 2
    3e04:	13 96       	adiw	r26, 0x03	; 3
    3e06:	1c 93       	st	X, r17
    3e08:	27 c0       	rjmp	.+78     	; 0x3e58 <malloc+0x98>
    3e0a:	00 93 2d 04 	sts	0x042D, r16	; 0x80042d <__flp>
    3e0e:	10 93 2e 04 	sts	0x042E, r17	; 0x80042e <__flp+0x1>
    3e12:	22 c0       	rjmp	.+68     	; 0x3e58 <malloc+0x98>
    3e14:	21 15       	cp	r18, r1
    3e16:	31 05       	cpc	r19, r1
    3e18:	19 f0       	breq	.+6      	; 0x3e20 <malloc+0x60>
    3e1a:	42 17       	cp	r20, r18
    3e1c:	53 07       	cpc	r21, r19
    3e1e:	18 f4       	brcc	.+6      	; 0x3e26 <malloc+0x66>
    3e20:	9a 01       	movw	r18, r20
    3e22:	bd 01       	movw	r22, r26
    3e24:	ef 01       	movw	r28, r30
    3e26:	df 01       	movw	r26, r30
    3e28:	f8 01       	movw	r30, r16
    3e2a:	db cf       	rjmp	.-74     	; 0x3de2 <malloc+0x22>
    3e2c:	21 15       	cp	r18, r1
    3e2e:	31 05       	cpc	r19, r1
    3e30:	f9 f0       	breq	.+62     	; 0x3e70 <malloc+0xb0>
    3e32:	28 1b       	sub	r18, r24
    3e34:	39 0b       	sbc	r19, r25
    3e36:	24 30       	cpi	r18, 0x04	; 4
    3e38:	31 05       	cpc	r19, r1
    3e3a:	80 f4       	brcc	.+32     	; 0x3e5c <malloc+0x9c>
    3e3c:	8a 81       	ldd	r24, Y+2	; 0x02
    3e3e:	9b 81       	ldd	r25, Y+3	; 0x03
    3e40:	61 15       	cp	r22, r1
    3e42:	71 05       	cpc	r23, r1
    3e44:	21 f0       	breq	.+8      	; 0x3e4e <malloc+0x8e>
    3e46:	fb 01       	movw	r30, r22
    3e48:	93 83       	std	Z+3, r25	; 0x03
    3e4a:	82 83       	std	Z+2, r24	; 0x02
    3e4c:	04 c0       	rjmp	.+8      	; 0x3e56 <malloc+0x96>
    3e4e:	90 93 2e 04 	sts	0x042E, r25	; 0x80042e <__flp+0x1>
    3e52:	80 93 2d 04 	sts	0x042D, r24	; 0x80042d <__flp>
    3e56:	fe 01       	movw	r30, r28
    3e58:	32 96       	adiw	r30, 0x02	; 2
    3e5a:	44 c0       	rjmp	.+136    	; 0x3ee4 <malloc+0x124>
    3e5c:	fe 01       	movw	r30, r28
    3e5e:	e2 0f       	add	r30, r18
    3e60:	f3 1f       	adc	r31, r19
    3e62:	81 93       	st	Z+, r24
    3e64:	91 93       	st	Z+, r25
    3e66:	22 50       	subi	r18, 0x02	; 2
    3e68:	31 09       	sbc	r19, r1
    3e6a:	39 83       	std	Y+1, r19	; 0x01
    3e6c:	28 83       	st	Y, r18
    3e6e:	3a c0       	rjmp	.+116    	; 0x3ee4 <malloc+0x124>
    3e70:	20 91 2b 04 	lds	r18, 0x042B	; 0x80042b <__brkval>
    3e74:	30 91 2c 04 	lds	r19, 0x042C	; 0x80042c <__brkval+0x1>
    3e78:	23 2b       	or	r18, r19
    3e7a:	41 f4       	brne	.+16     	; 0x3e8c <malloc+0xcc>
    3e7c:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    3e80:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    3e84:	30 93 2c 04 	sts	0x042C, r19	; 0x80042c <__brkval+0x1>
    3e88:	20 93 2b 04 	sts	0x042B, r18	; 0x80042b <__brkval>
    3e8c:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    3e90:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    3e94:	21 15       	cp	r18, r1
    3e96:	31 05       	cpc	r19, r1
    3e98:	41 f4       	brne	.+16     	; 0x3eaa <malloc+0xea>
    3e9a:	2d b7       	in	r18, 0x3d	; 61
    3e9c:	3e b7       	in	r19, 0x3e	; 62
    3e9e:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    3ea2:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    3ea6:	24 1b       	sub	r18, r20
    3ea8:	35 0b       	sbc	r19, r21
    3eaa:	e0 91 2b 04 	lds	r30, 0x042B	; 0x80042b <__brkval>
    3eae:	f0 91 2c 04 	lds	r31, 0x042C	; 0x80042c <__brkval+0x1>
    3eb2:	e2 17       	cp	r30, r18
    3eb4:	f3 07       	cpc	r31, r19
    3eb6:	a0 f4       	brcc	.+40     	; 0x3ee0 <malloc+0x120>
    3eb8:	2e 1b       	sub	r18, r30
    3eba:	3f 0b       	sbc	r19, r31
    3ebc:	28 17       	cp	r18, r24
    3ebe:	39 07       	cpc	r19, r25
    3ec0:	78 f0       	brcs	.+30     	; 0x3ee0 <malloc+0x120>
    3ec2:	ac 01       	movw	r20, r24
    3ec4:	4e 5f       	subi	r20, 0xFE	; 254
    3ec6:	5f 4f       	sbci	r21, 0xFF	; 255
    3ec8:	24 17       	cp	r18, r20
    3eca:	35 07       	cpc	r19, r21
    3ecc:	48 f0       	brcs	.+18     	; 0x3ee0 <malloc+0x120>
    3ece:	4e 0f       	add	r20, r30
    3ed0:	5f 1f       	adc	r21, r31
    3ed2:	50 93 2c 04 	sts	0x042C, r21	; 0x80042c <__brkval+0x1>
    3ed6:	40 93 2b 04 	sts	0x042B, r20	; 0x80042b <__brkval>
    3eda:	81 93       	st	Z+, r24
    3edc:	91 93       	st	Z+, r25
    3ede:	02 c0       	rjmp	.+4      	; 0x3ee4 <malloc+0x124>
    3ee0:	e0 e0       	ldi	r30, 0x00	; 0
    3ee2:	f0 e0       	ldi	r31, 0x00	; 0
    3ee4:	cf 01       	movw	r24, r30
    3ee6:	df 91       	pop	r29
    3ee8:	cf 91       	pop	r28
    3eea:	1f 91       	pop	r17
    3eec:	0f 91       	pop	r16
    3eee:	08 95       	ret

00003ef0 <free>:
    3ef0:	cf 93       	push	r28
    3ef2:	df 93       	push	r29
    3ef4:	00 97       	sbiw	r24, 0x00	; 0
    3ef6:	09 f4       	brne	.+2      	; 0x3efa <free+0xa>
    3ef8:	81 c0       	rjmp	.+258    	; 0x3ffc <free+0x10c>
    3efa:	fc 01       	movw	r30, r24
    3efc:	32 97       	sbiw	r30, 0x02	; 2
    3efe:	13 82       	std	Z+3, r1	; 0x03
    3f00:	12 82       	std	Z+2, r1	; 0x02
    3f02:	a0 91 2d 04 	lds	r26, 0x042D	; 0x80042d <__flp>
    3f06:	b0 91 2e 04 	lds	r27, 0x042E	; 0x80042e <__flp+0x1>
    3f0a:	10 97       	sbiw	r26, 0x00	; 0
    3f0c:	81 f4       	brne	.+32     	; 0x3f2e <free+0x3e>
    3f0e:	20 81       	ld	r18, Z
    3f10:	31 81       	ldd	r19, Z+1	; 0x01
    3f12:	82 0f       	add	r24, r18
    3f14:	93 1f       	adc	r25, r19
    3f16:	20 91 2b 04 	lds	r18, 0x042B	; 0x80042b <__brkval>
    3f1a:	30 91 2c 04 	lds	r19, 0x042C	; 0x80042c <__brkval+0x1>
    3f1e:	28 17       	cp	r18, r24
    3f20:	39 07       	cpc	r19, r25
    3f22:	51 f5       	brne	.+84     	; 0x3f78 <free+0x88>
    3f24:	f0 93 2c 04 	sts	0x042C, r31	; 0x80042c <__brkval+0x1>
    3f28:	e0 93 2b 04 	sts	0x042B, r30	; 0x80042b <__brkval>
    3f2c:	67 c0       	rjmp	.+206    	; 0x3ffc <free+0x10c>
    3f2e:	ed 01       	movw	r28, r26
    3f30:	20 e0       	ldi	r18, 0x00	; 0
    3f32:	30 e0       	ldi	r19, 0x00	; 0
    3f34:	ce 17       	cp	r28, r30
    3f36:	df 07       	cpc	r29, r31
    3f38:	40 f4       	brcc	.+16     	; 0x3f4a <free+0x5a>
    3f3a:	4a 81       	ldd	r20, Y+2	; 0x02
    3f3c:	5b 81       	ldd	r21, Y+3	; 0x03
    3f3e:	9e 01       	movw	r18, r28
    3f40:	41 15       	cp	r20, r1
    3f42:	51 05       	cpc	r21, r1
    3f44:	f1 f0       	breq	.+60     	; 0x3f82 <free+0x92>
    3f46:	ea 01       	movw	r28, r20
    3f48:	f5 cf       	rjmp	.-22     	; 0x3f34 <free+0x44>
    3f4a:	d3 83       	std	Z+3, r29	; 0x03
    3f4c:	c2 83       	std	Z+2, r28	; 0x02
    3f4e:	40 81       	ld	r20, Z
    3f50:	51 81       	ldd	r21, Z+1	; 0x01
    3f52:	84 0f       	add	r24, r20
    3f54:	95 1f       	adc	r25, r21
    3f56:	c8 17       	cp	r28, r24
    3f58:	d9 07       	cpc	r29, r25
    3f5a:	59 f4       	brne	.+22     	; 0x3f72 <free+0x82>
    3f5c:	88 81       	ld	r24, Y
    3f5e:	99 81       	ldd	r25, Y+1	; 0x01
    3f60:	84 0f       	add	r24, r20
    3f62:	95 1f       	adc	r25, r21
    3f64:	02 96       	adiw	r24, 0x02	; 2
    3f66:	91 83       	std	Z+1, r25	; 0x01
    3f68:	80 83       	st	Z, r24
    3f6a:	8a 81       	ldd	r24, Y+2	; 0x02
    3f6c:	9b 81       	ldd	r25, Y+3	; 0x03
    3f6e:	93 83       	std	Z+3, r25	; 0x03
    3f70:	82 83       	std	Z+2, r24	; 0x02
    3f72:	21 15       	cp	r18, r1
    3f74:	31 05       	cpc	r19, r1
    3f76:	29 f4       	brne	.+10     	; 0x3f82 <free+0x92>
    3f78:	f0 93 2e 04 	sts	0x042E, r31	; 0x80042e <__flp+0x1>
    3f7c:	e0 93 2d 04 	sts	0x042D, r30	; 0x80042d <__flp>
    3f80:	3d c0       	rjmp	.+122    	; 0x3ffc <free+0x10c>
    3f82:	e9 01       	movw	r28, r18
    3f84:	fb 83       	std	Y+3, r31	; 0x03
    3f86:	ea 83       	std	Y+2, r30	; 0x02
    3f88:	49 91       	ld	r20, Y+
    3f8a:	59 91       	ld	r21, Y+
    3f8c:	c4 0f       	add	r28, r20
    3f8e:	d5 1f       	adc	r29, r21
    3f90:	ec 17       	cp	r30, r28
    3f92:	fd 07       	cpc	r31, r29
    3f94:	61 f4       	brne	.+24     	; 0x3fae <free+0xbe>
    3f96:	80 81       	ld	r24, Z
    3f98:	91 81       	ldd	r25, Z+1	; 0x01
    3f9a:	84 0f       	add	r24, r20
    3f9c:	95 1f       	adc	r25, r21
    3f9e:	02 96       	adiw	r24, 0x02	; 2
    3fa0:	e9 01       	movw	r28, r18
    3fa2:	99 83       	std	Y+1, r25	; 0x01
    3fa4:	88 83       	st	Y, r24
    3fa6:	82 81       	ldd	r24, Z+2	; 0x02
    3fa8:	93 81       	ldd	r25, Z+3	; 0x03
    3faa:	9b 83       	std	Y+3, r25	; 0x03
    3fac:	8a 83       	std	Y+2, r24	; 0x02
    3fae:	e0 e0       	ldi	r30, 0x00	; 0
    3fb0:	f0 e0       	ldi	r31, 0x00	; 0
    3fb2:	12 96       	adiw	r26, 0x02	; 2
    3fb4:	8d 91       	ld	r24, X+
    3fb6:	9c 91       	ld	r25, X
    3fb8:	13 97       	sbiw	r26, 0x03	; 3
    3fba:	00 97       	sbiw	r24, 0x00	; 0
    3fbc:	19 f0       	breq	.+6      	; 0x3fc4 <free+0xd4>
    3fbe:	fd 01       	movw	r30, r26
    3fc0:	dc 01       	movw	r26, r24
    3fc2:	f7 cf       	rjmp	.-18     	; 0x3fb2 <free+0xc2>
    3fc4:	8d 91       	ld	r24, X+
    3fc6:	9c 91       	ld	r25, X
    3fc8:	11 97       	sbiw	r26, 0x01	; 1
    3fca:	9d 01       	movw	r18, r26
    3fcc:	2e 5f       	subi	r18, 0xFE	; 254
    3fce:	3f 4f       	sbci	r19, 0xFF	; 255
    3fd0:	82 0f       	add	r24, r18
    3fd2:	93 1f       	adc	r25, r19
    3fd4:	20 91 2b 04 	lds	r18, 0x042B	; 0x80042b <__brkval>
    3fd8:	30 91 2c 04 	lds	r19, 0x042C	; 0x80042c <__brkval+0x1>
    3fdc:	28 17       	cp	r18, r24
    3fde:	39 07       	cpc	r19, r25
    3fe0:	69 f4       	brne	.+26     	; 0x3ffc <free+0x10c>
    3fe2:	30 97       	sbiw	r30, 0x00	; 0
    3fe4:	29 f4       	brne	.+10     	; 0x3ff0 <free+0x100>
    3fe6:	10 92 2e 04 	sts	0x042E, r1	; 0x80042e <__flp+0x1>
    3fea:	10 92 2d 04 	sts	0x042D, r1	; 0x80042d <__flp>
    3fee:	02 c0       	rjmp	.+4      	; 0x3ff4 <free+0x104>
    3ff0:	13 82       	std	Z+3, r1	; 0x03
    3ff2:	12 82       	std	Z+2, r1	; 0x02
    3ff4:	b0 93 2c 04 	sts	0x042C, r27	; 0x80042c <__brkval+0x1>
    3ff8:	a0 93 2b 04 	sts	0x042B, r26	; 0x80042b <__brkval>
    3ffc:	df 91       	pop	r29
    3ffe:	cf 91       	pop	r28
    4000:	08 95       	ret

00004002 <atof>:
    4002:	66 27       	eor	r22, r22
    4004:	77 27       	eor	r23, r23
    4006:	0c 94 05 20 	jmp	0x400a	; 0x400a <strtod>

0000400a <strtod>:
    400a:	a0 e0       	ldi	r26, 0x00	; 0
    400c:	b0 e0       	ldi	r27, 0x00	; 0
    400e:	eb e0       	ldi	r30, 0x0B	; 11
    4010:	f0 e2       	ldi	r31, 0x20	; 32
    4012:	0c 94 93 21 	jmp	0x4326	; 0x4326 <__prologue_saves__+0xc>
    4016:	ec 01       	movw	r28, r24
    4018:	6b 01       	movw	r12, r22
    401a:	61 15       	cp	r22, r1
    401c:	71 05       	cpc	r23, r1
    401e:	19 f0       	breq	.+6      	; 0x4026 <strtod+0x1c>
    4020:	fb 01       	movw	r30, r22
    4022:	91 83       	std	Z+1, r25	; 0x01
    4024:	80 83       	st	Z, r24
    4026:	7e 01       	movw	r14, r28
    4028:	ff ef       	ldi	r31, 0xFF	; 255
    402a:	ef 1a       	sub	r14, r31
    402c:	ff 0a       	sbc	r15, r31
    402e:	08 81       	ld	r16, Y
    4030:	80 2f       	mov	r24, r16
    4032:	90 e0       	ldi	r25, 0x00	; 0
    4034:	0e 94 53 21 	call	0x42a6	; 0x42a6 <isspace>
    4038:	89 2b       	or	r24, r25
    403a:	11 f0       	breq	.+4      	; 0x4040 <strtod+0x36>
    403c:	e7 01       	movw	r28, r14
    403e:	f3 cf       	rjmp	.-26     	; 0x4026 <strtod+0x1c>
    4040:	0d 32       	cpi	r16, 0x2D	; 45
    4042:	39 f4       	brne	.+14     	; 0x4052 <strtod+0x48>
    4044:	7e 01       	movw	r14, r28
    4046:	82 e0       	ldi	r24, 0x02	; 2
    4048:	e8 0e       	add	r14, r24
    404a:	f1 1c       	adc	r15, r1
    404c:	09 81       	ldd	r16, Y+1	; 0x01
    404e:	11 e0       	ldi	r17, 0x01	; 1
    4050:	08 c0       	rjmp	.+16     	; 0x4062 <strtod+0x58>
    4052:	0b 32       	cpi	r16, 0x2B	; 43
    4054:	29 f4       	brne	.+10     	; 0x4060 <strtod+0x56>
    4056:	7e 01       	movw	r14, r28
    4058:	92 e0       	ldi	r25, 0x02	; 2
    405a:	e9 0e       	add	r14, r25
    405c:	f1 1c       	adc	r15, r1
    405e:	09 81       	ldd	r16, Y+1	; 0x01
    4060:	10 e0       	ldi	r17, 0x00	; 0
    4062:	e7 01       	movw	r28, r14
    4064:	21 97       	sbiw	r28, 0x01	; 1
    4066:	43 e0       	ldi	r20, 0x03	; 3
    4068:	50 e0       	ldi	r21, 0x00	; 0
    406a:	64 e2       	ldi	r22, 0x24	; 36
    406c:	71 e0       	ldi	r23, 0x01	; 1
    406e:	ce 01       	movw	r24, r28
    4070:	0e 94 5c 21 	call	0x42b8	; 0x42b8 <strncasecmp_P>
    4074:	89 2b       	or	r24, r25
    4076:	c1 f4       	brne	.+48     	; 0x40a8 <strtod+0x9e>
    4078:	23 96       	adiw	r28, 0x03	; 3
    407a:	45 e0       	ldi	r20, 0x05	; 5
    407c:	50 e0       	ldi	r21, 0x00	; 0
    407e:	6f e1       	ldi	r22, 0x1F	; 31
    4080:	71 e0       	ldi	r23, 0x01	; 1
    4082:	ce 01       	movw	r24, r28
    4084:	0e 94 5c 21 	call	0x42b8	; 0x42b8 <strncasecmp_P>
    4088:	89 2b       	or	r24, r25
    408a:	09 f4       	brne	.+2      	; 0x408e <strtod+0x84>
    408c:	25 96       	adiw	r28, 0x05	; 5
    408e:	c1 14       	cp	r12, r1
    4090:	d1 04       	cpc	r13, r1
    4092:	19 f0       	breq	.+6      	; 0x409a <strtod+0x90>
    4094:	f6 01       	movw	r30, r12
    4096:	d1 83       	std	Z+1, r29	; 0x01
    4098:	c0 83       	st	Z, r28
    409a:	11 11       	cpse	r17, r1
    409c:	f6 c0       	rjmp	.+492    	; 0x428a <strtod+0x280>
    409e:	60 e0       	ldi	r22, 0x00	; 0
    40a0:	70 e0       	ldi	r23, 0x00	; 0
    40a2:	80 e8       	ldi	r24, 0x80	; 128
    40a4:	9f e7       	ldi	r25, 0x7F	; 127
    40a6:	fa c0       	rjmp	.+500    	; 0x429c <strtod+0x292>
    40a8:	43 e0       	ldi	r20, 0x03	; 3
    40aa:	50 e0       	ldi	r21, 0x00	; 0
    40ac:	6c e1       	ldi	r22, 0x1C	; 28
    40ae:	71 e0       	ldi	r23, 0x01	; 1
    40b0:	ce 01       	movw	r24, r28
    40b2:	0e 94 5c 21 	call	0x42b8	; 0x42b8 <strncasecmp_P>
    40b6:	89 2b       	or	r24, r25
    40b8:	59 f4       	brne	.+22     	; 0x40d0 <strtod+0xc6>
    40ba:	c1 14       	cp	r12, r1
    40bc:	d1 04       	cpc	r13, r1
    40be:	09 f4       	brne	.+2      	; 0x40c2 <strtod+0xb8>
    40c0:	e9 c0       	rjmp	.+466    	; 0x4294 <strtod+0x28a>
    40c2:	f2 e0       	ldi	r31, 0x02	; 2
    40c4:	ef 0e       	add	r14, r31
    40c6:	f1 1c       	adc	r15, r1
    40c8:	f6 01       	movw	r30, r12
    40ca:	f1 82       	std	Z+1, r15	; 0x01
    40cc:	e0 82       	st	Z, r14
    40ce:	e2 c0       	rjmp	.+452    	; 0x4294 <strtod+0x28a>
    40d0:	20 e0       	ldi	r18, 0x00	; 0
    40d2:	30 e0       	ldi	r19, 0x00	; 0
    40d4:	a9 01       	movw	r20, r18
    40d6:	c0 e0       	ldi	r28, 0x00	; 0
    40d8:	d0 e0       	ldi	r29, 0x00	; 0
    40da:	f7 01       	movw	r30, r14
    40dc:	80 ed       	ldi	r24, 0xD0	; 208
    40de:	a8 2e       	mov	r10, r24
    40e0:	a0 0e       	add	r10, r16
    40e2:	89 e0       	ldi	r24, 0x09	; 9
    40e4:	8a 15       	cp	r24, r10
    40e6:	30 f1       	brcs	.+76     	; 0x4134 <strtod+0x12a>
    40e8:	91 2f       	mov	r25, r17
    40ea:	92 60       	ori	r25, 0x02	; 2
    40ec:	b9 2e       	mov	r11, r25
    40ee:	81 2f       	mov	r24, r17
    40f0:	88 70       	andi	r24, 0x08	; 8
    40f2:	12 ff       	sbrs	r17, 2
    40f4:	04 c0       	rjmp	.+8      	; 0x40fe <strtod+0xf4>
    40f6:	81 11       	cpse	r24, r1
    40f8:	24 c0       	rjmp	.+72     	; 0x4142 <strtod+0x138>
    40fa:	21 96       	adiw	r28, 0x01	; 1
    40fc:	22 c0       	rjmp	.+68     	; 0x4142 <strtod+0x138>
    40fe:	81 11       	cpse	r24, r1
    4100:	21 97       	sbiw	r28, 0x01	; 1
    4102:	a5 e0       	ldi	r26, 0x05	; 5
    4104:	b0 e0       	ldi	r27, 0x00	; 0
    4106:	0e 94 c6 1e 	call	0x3d8c	; 0x3d8c <__muluhisi3>
    410a:	dc 01       	movw	r26, r24
    410c:	cb 01       	movw	r24, r22
    410e:	88 0f       	add	r24, r24
    4110:	99 1f       	adc	r25, r25
    4112:	aa 1f       	adc	r26, r26
    4114:	bb 1f       	adc	r27, r27
    4116:	9c 01       	movw	r18, r24
    4118:	ad 01       	movw	r20, r26
    411a:	2a 0d       	add	r18, r10
    411c:	31 1d       	adc	r19, r1
    411e:	41 1d       	adc	r20, r1
    4120:	51 1d       	adc	r21, r1
    4122:	28 39       	cpi	r18, 0x98	; 152
    4124:	89 e9       	ldi	r24, 0x99	; 153
    4126:	38 07       	cpc	r19, r24
    4128:	48 07       	cpc	r20, r24
    412a:	89 e1       	ldi	r24, 0x19	; 25
    412c:	58 07       	cpc	r21, r24
    412e:	48 f0       	brcs	.+18     	; 0x4142 <strtod+0x138>
    4130:	16 60       	ori	r17, 0x06	; 6
    4132:	06 c0       	rjmp	.+12     	; 0x4140 <strtod+0x136>
    4134:	9e ef       	ldi	r25, 0xFE	; 254
    4136:	a9 12       	cpse	r10, r25
    4138:	0a c0       	rjmp	.+20     	; 0x414e <strtod+0x144>
    413a:	13 fd       	sbrc	r17, 3
    413c:	40 c0       	rjmp	.+128    	; 0x41be <strtod+0x1b4>
    413e:	18 60       	ori	r17, 0x08	; 8
    4140:	b1 2e       	mov	r11, r17
    4142:	8f ef       	ldi	r24, 0xFF	; 255
    4144:	e8 1a       	sub	r14, r24
    4146:	f8 0a       	sbc	r15, r24
    4148:	00 81       	ld	r16, Z
    414a:	1b 2d       	mov	r17, r11
    414c:	c6 cf       	rjmp	.-116    	; 0x40da <strtod+0xd0>
    414e:	80 2f       	mov	r24, r16
    4150:	8f 7d       	andi	r24, 0xDF	; 223
    4152:	85 34       	cpi	r24, 0x45	; 69
    4154:	a1 f5       	brne	.+104    	; 0x41be <strtod+0x1b4>
    4156:	80 81       	ld	r24, Z
    4158:	8d 32       	cpi	r24, 0x2D	; 45
    415a:	11 f4       	brne	.+4      	; 0x4160 <strtod+0x156>
    415c:	10 61       	ori	r17, 0x10	; 16
    415e:	06 c0       	rjmp	.+12     	; 0x416c <strtod+0x162>
    4160:	8b 32       	cpi	r24, 0x2B	; 43
    4162:	21 f0       	breq	.+8      	; 0x416c <strtod+0x162>
    4164:	31 96       	adiw	r30, 0x01	; 1
    4166:	61 e0       	ldi	r22, 0x01	; 1
    4168:	70 e0       	ldi	r23, 0x00	; 0
    416a:	04 c0       	rjmp	.+8      	; 0x4174 <strtod+0x16a>
    416c:	81 81       	ldd	r24, Z+1	; 0x01
    416e:	32 96       	adiw	r30, 0x02	; 2
    4170:	62 e0       	ldi	r22, 0x02	; 2
    4172:	70 e0       	ldi	r23, 0x00	; 0
    4174:	80 53       	subi	r24, 0x30	; 48
    4176:	8a 30       	cpi	r24, 0x0A	; 10
    4178:	18 f0       	brcs	.+6      	; 0x4180 <strtod+0x176>
    417a:	e6 1b       	sub	r30, r22
    417c:	f7 0b       	sbc	r31, r23
    417e:	1f c0       	rjmp	.+62     	; 0x41be <strtod+0x1b4>
    4180:	60 e0       	ldi	r22, 0x00	; 0
    4182:	70 e0       	ldi	r23, 0x00	; 0
    4184:	60 38       	cpi	r22, 0x80	; 128
    4186:	9c e0       	ldi	r25, 0x0C	; 12
    4188:	79 07       	cpc	r23, r25
    418a:	5c f4       	brge	.+22     	; 0x41a2 <strtod+0x198>
    418c:	db 01       	movw	r26, r22
    418e:	aa 0f       	add	r26, r26
    4190:	bb 1f       	adc	r27, r27
    4192:	aa 0f       	add	r26, r26
    4194:	bb 1f       	adc	r27, r27
    4196:	6a 0f       	add	r22, r26
    4198:	7b 1f       	adc	r23, r27
    419a:	66 0f       	add	r22, r22
    419c:	77 1f       	adc	r23, r23
    419e:	68 0f       	add	r22, r24
    41a0:	71 1d       	adc	r23, r1
    41a2:	31 96       	adiw	r30, 0x01	; 1
    41a4:	df 01       	movw	r26, r30
    41a6:	11 97       	sbiw	r26, 0x01	; 1
    41a8:	8c 91       	ld	r24, X
    41aa:	80 53       	subi	r24, 0x30	; 48
    41ac:	8a 30       	cpi	r24, 0x0A	; 10
    41ae:	50 f3       	brcs	.-44     	; 0x4184 <strtod+0x17a>
    41b0:	14 ff       	sbrs	r17, 4
    41b2:	03 c0       	rjmp	.+6      	; 0x41ba <strtod+0x1b0>
    41b4:	71 95       	neg	r23
    41b6:	61 95       	neg	r22
    41b8:	71 09       	sbc	r23, r1
    41ba:	c6 0f       	add	r28, r22
    41bc:	d7 1f       	adc	r29, r23
    41be:	11 ff       	sbrs	r17, 1
    41c0:	08 c0       	rjmp	.+16     	; 0x41d2 <strtod+0x1c8>
    41c2:	c1 14       	cp	r12, r1
    41c4:	d1 04       	cpc	r13, r1
    41c6:	29 f0       	breq	.+10     	; 0x41d2 <strtod+0x1c8>
    41c8:	cf 01       	movw	r24, r30
    41ca:	01 97       	sbiw	r24, 0x01	; 1
    41cc:	f6 01       	movw	r30, r12
    41ce:	91 83       	std	Z+1, r25	; 0x01
    41d0:	80 83       	st	Z, r24
    41d2:	ca 01       	movw	r24, r20
    41d4:	b9 01       	movw	r22, r18
    41d6:	0e 94 65 18 	call	0x30ca	; 0x30ca <__floatunsisf>
    41da:	21 2f       	mov	r18, r17
    41dc:	23 70       	andi	r18, 0x03	; 3
    41de:	23 30       	cpi	r18, 0x03	; 3
    41e0:	19 f0       	breq	.+6      	; 0x41e8 <strtod+0x1de>
    41e2:	4b 01       	movw	r8, r22
    41e4:	5c 01       	movw	r10, r24
    41e6:	06 c0       	rjmp	.+12     	; 0x41f4 <strtod+0x1ea>
    41e8:	4b 01       	movw	r8, r22
    41ea:	5c 01       	movw	r10, r24
    41ec:	b7 fa       	bst	r11, 7
    41ee:	b0 94       	com	r11
    41f0:	b7 f8       	bld	r11, 7
    41f2:	b0 94       	com	r11
    41f4:	20 e0       	ldi	r18, 0x00	; 0
    41f6:	30 e0       	ldi	r19, 0x00	; 0
    41f8:	a9 01       	movw	r20, r18
    41fa:	c5 01       	movw	r24, r10
    41fc:	b4 01       	movw	r22, r8
    41fe:	0e 94 b8 17 	call	0x2f70	; 0x2f70 <__cmpsf2>
    4202:	88 23       	and	r24, r24
    4204:	09 f4       	brne	.+2      	; 0x4208 <strtod+0x1fe>
    4206:	3e c0       	rjmp	.+124    	; 0x4284 <strtod+0x27a>
    4208:	d7 ff       	sbrs	r29, 7
    420a:	06 c0       	rjmp	.+12     	; 0x4218 <strtod+0x20e>
    420c:	d1 95       	neg	r29
    420e:	c1 95       	neg	r28
    4210:	d1 09       	sbc	r29, r1
    4212:	0b e3       	ldi	r16, 0x3B	; 59
    4214:	11 e0       	ldi	r17, 0x01	; 1
    4216:	02 c0       	rjmp	.+4      	; 0x421c <strtod+0x212>
    4218:	03 e5       	ldi	r16, 0x53	; 83
    421a:	11 e0       	ldi	r17, 0x01	; 1
    421c:	68 01       	movw	r12, r16
    421e:	f8 e1       	ldi	r31, 0x18	; 24
    4220:	cf 1a       	sub	r12, r31
    4222:	d1 08       	sbc	r13, r1
    4224:	90 e2       	ldi	r25, 0x20	; 32
    4226:	e9 2e       	mov	r14, r25
    4228:	f1 2c       	mov	r15, r1
    422a:	ce 15       	cp	r28, r14
    422c:	df 05       	cpc	r29, r15
    422e:	74 f0       	brlt	.+28     	; 0x424c <strtod+0x242>
    4230:	f8 01       	movw	r30, r16
    4232:	25 91       	lpm	r18, Z+
    4234:	35 91       	lpm	r19, Z+
    4236:	45 91       	lpm	r20, Z+
    4238:	54 91       	lpm	r21, Z
    423a:	c5 01       	movw	r24, r10
    423c:	b4 01       	movw	r22, r8
    423e:	0e 94 4b 19 	call	0x3296	; 0x3296 <__mulsf3>
    4242:	4b 01       	movw	r8, r22
    4244:	5c 01       	movw	r10, r24
    4246:	ce 19       	sub	r28, r14
    4248:	df 09       	sbc	r29, r15
    424a:	ef cf       	rjmp	.-34     	; 0x422a <strtod+0x220>
    424c:	04 50       	subi	r16, 0x04	; 4
    424e:	11 09       	sbc	r17, r1
    4250:	f5 94       	asr	r15
    4252:	e7 94       	ror	r14
    4254:	0c 15       	cp	r16, r12
    4256:	1d 05       	cpc	r17, r13
    4258:	41 f7       	brne	.-48     	; 0x422a <strtod+0x220>
    425a:	8a 2d       	mov	r24, r10
    425c:	88 0f       	add	r24, r24
    425e:	8b 2d       	mov	r24, r11
    4260:	88 1f       	adc	r24, r24
    4262:	8f 3f       	cpi	r24, 0xFF	; 255
    4264:	49 f0       	breq	.+18     	; 0x4278 <strtod+0x26e>
    4266:	20 e0       	ldi	r18, 0x00	; 0
    4268:	30 e0       	ldi	r19, 0x00	; 0
    426a:	a9 01       	movw	r20, r18
    426c:	c5 01       	movw	r24, r10
    426e:	b4 01       	movw	r22, r8
    4270:	0e 94 b8 17 	call	0x2f70	; 0x2f70 <__cmpsf2>
    4274:	81 11       	cpse	r24, r1
    4276:	06 c0       	rjmp	.+12     	; 0x4284 <strtod+0x27a>
    4278:	82 e2       	ldi	r24, 0x22	; 34
    427a:	90 e0       	ldi	r25, 0x00	; 0
    427c:	90 93 30 04 	sts	0x0430, r25	; 0x800430 <errno+0x1>
    4280:	80 93 2f 04 	sts	0x042F, r24	; 0x80042f <errno>
    4284:	c5 01       	movw	r24, r10
    4286:	b4 01       	movw	r22, r8
    4288:	09 c0       	rjmp	.+18     	; 0x429c <strtod+0x292>
    428a:	60 e0       	ldi	r22, 0x00	; 0
    428c:	70 e0       	ldi	r23, 0x00	; 0
    428e:	80 e8       	ldi	r24, 0x80	; 128
    4290:	9f ef       	ldi	r25, 0xFF	; 255
    4292:	04 c0       	rjmp	.+8      	; 0x429c <strtod+0x292>
    4294:	60 e0       	ldi	r22, 0x00	; 0
    4296:	70 e0       	ldi	r23, 0x00	; 0
    4298:	80 ec       	ldi	r24, 0xC0	; 192
    429a:	9f e7       	ldi	r25, 0x7F	; 127
    429c:	cd b7       	in	r28, 0x3d	; 61
    429e:	de b7       	in	r29, 0x3e	; 62
    42a0:	ec e0       	ldi	r30, 0x0C	; 12
    42a2:	0c 94 af 21 	jmp	0x435e	; 0x435e <__epilogue_restores__+0xc>

000042a6 <isspace>:
    42a6:	91 11       	cpse	r25, r1
    42a8:	0c 94 74 21 	jmp	0x42e8	; 0x42e8 <__ctype_isfalse>
    42ac:	80 32       	cpi	r24, 0x20	; 32
    42ae:	19 f0       	breq	.+6      	; 0x42b6 <isspace+0x10>
    42b0:	89 50       	subi	r24, 0x09	; 9
    42b2:	85 50       	subi	r24, 0x05	; 5
    42b4:	c8 f7       	brcc	.-14     	; 0x42a8 <isspace+0x2>
    42b6:	08 95       	ret

000042b8 <strncasecmp_P>:
    42b8:	fb 01       	movw	r30, r22
    42ba:	dc 01       	movw	r26, r24
    42bc:	41 50       	subi	r20, 0x01	; 1
    42be:	50 40       	sbci	r21, 0x00	; 0
    42c0:	88 f0       	brcs	.+34     	; 0x42e4 <strncasecmp_P+0x2c>
    42c2:	8d 91       	ld	r24, X+
    42c4:	81 34       	cpi	r24, 0x41	; 65
    42c6:	1c f0       	brlt	.+6      	; 0x42ce <strncasecmp_P+0x16>
    42c8:	8b 35       	cpi	r24, 0x5B	; 91
    42ca:	0c f4       	brge	.+2      	; 0x42ce <strncasecmp_P+0x16>
    42cc:	80 5e       	subi	r24, 0xE0	; 224
    42ce:	65 91       	lpm	r22, Z+
    42d0:	61 34       	cpi	r22, 0x41	; 65
    42d2:	1c f0       	brlt	.+6      	; 0x42da <strncasecmp_P+0x22>
    42d4:	6b 35       	cpi	r22, 0x5B	; 91
    42d6:	0c f4       	brge	.+2      	; 0x42da <strncasecmp_P+0x22>
    42d8:	60 5e       	subi	r22, 0xE0	; 224
    42da:	86 1b       	sub	r24, r22
    42dc:	61 11       	cpse	r22, r1
    42de:	71 f3       	breq	.-36     	; 0x42bc <strncasecmp_P+0x4>
    42e0:	99 0b       	sbc	r25, r25
    42e2:	08 95       	ret
    42e4:	88 1b       	sub	r24, r24
    42e6:	fc cf       	rjmp	.-8      	; 0x42e0 <strncasecmp_P+0x28>

000042e8 <__ctype_isfalse>:
    42e8:	99 27       	eor	r25, r25
    42ea:	88 27       	eor	r24, r24

000042ec <__ctype_istrue>:
    42ec:	08 95       	ret

000042ee <eeprom_read_byte>:
    42ee:	f9 99       	sbic	0x1f, 1	; 31
    42f0:	fe cf       	rjmp	.-4      	; 0x42ee <eeprom_read_byte>
    42f2:	92 bd       	out	0x22, r25	; 34
    42f4:	81 bd       	out	0x21, r24	; 33
    42f6:	f8 9a       	sbi	0x1f, 0	; 31
    42f8:	99 27       	eor	r25, r25
    42fa:	80 b5       	in	r24, 0x20	; 32
    42fc:	08 95       	ret

000042fe <eeprom_write_byte>:
    42fe:	26 2f       	mov	r18, r22

00004300 <eeprom_write_r18>:
    4300:	f9 99       	sbic	0x1f, 1	; 31
    4302:	fe cf       	rjmp	.-4      	; 0x4300 <eeprom_write_r18>
    4304:	1f ba       	out	0x1f, r1	; 31
    4306:	92 bd       	out	0x22, r25	; 34
    4308:	81 bd       	out	0x21, r24	; 33
    430a:	20 bd       	out	0x20, r18	; 32
    430c:	0f b6       	in	r0, 0x3f	; 63
    430e:	f8 94       	cli
    4310:	fa 9a       	sbi	0x1f, 2	; 31
    4312:	f9 9a       	sbi	0x1f, 1	; 31
    4314:	0f be       	out	0x3f, r0	; 63
    4316:	01 96       	adiw	r24, 0x01	; 1
    4318:	08 95       	ret

0000431a <__prologue_saves__>:
    431a:	2f 92       	push	r2
    431c:	3f 92       	push	r3
    431e:	4f 92       	push	r4
    4320:	5f 92       	push	r5
    4322:	6f 92       	push	r6
    4324:	7f 92       	push	r7
    4326:	8f 92       	push	r8
    4328:	9f 92       	push	r9
    432a:	af 92       	push	r10
    432c:	bf 92       	push	r11
    432e:	cf 92       	push	r12
    4330:	df 92       	push	r13
    4332:	ef 92       	push	r14
    4334:	ff 92       	push	r15
    4336:	0f 93       	push	r16
    4338:	1f 93       	push	r17
    433a:	cf 93       	push	r28
    433c:	df 93       	push	r29
    433e:	cd b7       	in	r28, 0x3d	; 61
    4340:	de b7       	in	r29, 0x3e	; 62
    4342:	ca 1b       	sub	r28, r26
    4344:	db 0b       	sbc	r29, r27
    4346:	0f b6       	in	r0, 0x3f	; 63
    4348:	f8 94       	cli
    434a:	de bf       	out	0x3e, r29	; 62
    434c:	0f be       	out	0x3f, r0	; 63
    434e:	cd bf       	out	0x3d, r28	; 61
    4350:	09 94       	ijmp

00004352 <__epilogue_restores__>:
    4352:	2a 88       	ldd	r2, Y+18	; 0x12
    4354:	39 88       	ldd	r3, Y+17	; 0x11
    4356:	48 88       	ldd	r4, Y+16	; 0x10
    4358:	5f 84       	ldd	r5, Y+15	; 0x0f
    435a:	6e 84       	ldd	r6, Y+14	; 0x0e
    435c:	7d 84       	ldd	r7, Y+13	; 0x0d
    435e:	8c 84       	ldd	r8, Y+12	; 0x0c
    4360:	9b 84       	ldd	r9, Y+11	; 0x0b
    4362:	aa 84       	ldd	r10, Y+10	; 0x0a
    4364:	b9 84       	ldd	r11, Y+9	; 0x09
    4366:	c8 84       	ldd	r12, Y+8	; 0x08
    4368:	df 80       	ldd	r13, Y+7	; 0x07
    436a:	ee 80       	ldd	r14, Y+6	; 0x06
    436c:	fd 80       	ldd	r15, Y+5	; 0x05
    436e:	0c 81       	ldd	r16, Y+4	; 0x04
    4370:	1b 81       	ldd	r17, Y+3	; 0x03
    4372:	aa 81       	ldd	r26, Y+2	; 0x02
    4374:	b9 81       	ldd	r27, Y+1	; 0x01
    4376:	ce 0f       	add	r28, r30
    4378:	d1 1d       	adc	r29, r1
    437a:	0f b6       	in	r0, 0x3f	; 63
    437c:	f8 94       	cli
    437e:	de bf       	out	0x3e, r29	; 62
    4380:	0f be       	out	0x3f, r0	; 63
    4382:	cd bf       	out	0x3d, r28	; 61
    4384:	ed 01       	movw	r28, r26
    4386:	08 95       	ret

00004388 <_exit>:
    4388:	f8 94       	cli

0000438a <__stop_program>:
    438a:	ff cf       	rjmp	.-2      	; 0x438a <__stop_program>
