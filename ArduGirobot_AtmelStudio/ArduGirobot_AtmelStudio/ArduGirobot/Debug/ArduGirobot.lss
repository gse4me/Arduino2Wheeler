
ArduGirobot.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000019a  00800100  00003ddc  00003e70  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003ddc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000345  0080029a  0080029a  0000400a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000400a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004068  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00001038  00000000  00000000  000040a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0001dd7a  00000000  00000000  000050e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003643  00000000  00000000  00022e5a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000069e9  00000000  00000000  0002649d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000039bc  00000000  00000000  0002ce88  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00007372  00000000  00000000  00030844  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00011111  00000000  00000000  00037bb6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000ff8  00000000  00000000  00048cc7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 ac 00 	jmp	0x158	; 0x158 <__ctors_end>
       4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
       8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
       c:	0c 94 60 13 	jmp	0x26c0	; 0x26c0 <__vector_3>
      10:	0c 94 dd 13 	jmp	0x27ba	; 0x27ba <__vector_4>
      14:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      18:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      1c:	0c 94 5e 0f 	jmp	0x1ebc	; 0x1ebc <__vector_7>
      20:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      24:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      28:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      2c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      30:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      34:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      38:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      3c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      40:	0c 94 61 1b 	jmp	0x36c2	; 0x36c2 <__vector_16>
      44:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      48:	0c 94 ca 18 	jmp	0x3194	; 0x3194 <__vector_18>
      4c:	0c 94 fc 18 	jmp	0x31f8	; 0x31f8 <__vector_19>
      50:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      54:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      58:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      5c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      60:	0c 94 5b 10 	jmp	0x20b6	; 0x20b6 <__vector_24>
      64:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      68:	9a 13       	cpse	r25, r26
      6a:	a6 13       	cpse	r26, r22
      6c:	b2 13       	cpse	r27, r18
      6e:	a6 13       	cpse	r26, r22
      70:	d1 13       	cpse	r29, r17
      72:	be 13       	cpse	r27, r30
      74:	9a 13       	cpse	r25, r26
      76:	9a 13       	cpse	r25, r26
      78:	be 13       	cpse	r27, r30
      7a:	d1 13       	cpse	r29, r17
      7c:	a6 13       	cpse	r26, r22
      7e:	b2 13       	cpse	r27, r18
      80:	a6 13       	cpse	r26, r22
      82:	9a 13       	cpse	r25, r26
      84:	15 14       	cp	r1, r5
      86:	21 14       	cp	r2, r1
      88:	2d 14       	cp	r2, r13
      8a:	21 14       	cp	r2, r1
      8c:	4c 14       	cp	r4, r12
      8e:	39 14       	cp	r3, r9
      90:	15 14       	cp	r1, r5
      92:	15 14       	cp	r1, r5
      94:	39 14       	cp	r3, r9
      96:	4c 14       	cp	r4, r12
      98:	21 14       	cp	r2, r1
      9a:	2d 14       	cp	r2, r13
      9c:	21 14       	cp	r2, r1
      9e:	15 14       	cp	r1, r5
      a0:	08 4a       	sbci	r16, 0xA8	; 168
      a2:	d7 3b       	cpi	r29, 0xB7	; 183
      a4:	3b ce       	rjmp	.-906    	; 0xfffffd1c <__eeprom_end+0xff7efd1c>
      a6:	01 6e       	ori	r16, 0xE1	; 225
      a8:	84 bc       	out	0x24, r8	; 36
      aa:	bf fd       	.word	0xfdbf	; ????
      ac:	c1 2f       	mov	r28, r17
      ae:	3d 6c       	ori	r19, 0xCD	; 205
      b0:	74 31       	cpi	r23, 0x14	; 20
      b2:	9a bd       	out	0x2a, r25	; 42
      b4:	56 83       	std	Z+6, r21	; 0x06
      b6:	3d da       	rcall	.-2950   	; 0xfffff532 <__eeprom_end+0xff7ef532>
      b8:	3d 00       	.word	0x003d	; ????
      ba:	c7 7f       	andi	r28, 0xF7	; 247
      bc:	11 be       	out	0x31, r1	; 49
      be:	d9 e4       	ldi	r29, 0x49	; 73
      c0:	bb 4c       	sbci	r27, 0xCB	; 203
      c2:	3e 91       	ld	r19, -X
      c4:	6b aa       	std	Y+51, r6	; 0x33
      c6:	aa be       	out	0x3a, r10	; 58
      c8:	00 00       	nop
      ca:	00 80       	ld	r0, Z
      cc:	3f 00       	.word	0x003f	; ????

000000ce <__trampolines_end>:
      ce:	4e 41       	sbci	r20, 0x1E	; 30
      d0:	4e 49       	Address 0x000000d0 is out of bounds.
.word	0xffff	; ????

000000d1 <pstr_inity>:
      d1:	49 4e 49 54 59                                      INITY

000000d6 <pstr_inf>:
      d6:	49 4e 46                                            INF

000000d9 <pwr_m10>:
      d9:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
      e9:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

000000f1 <pwr_p10>:
      f1:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
     101:	ca 1b 0e 5a ae c5 9d 74                             ...Z...t

00000109 <digital_pin_to_bit_mask_PGM>:
     109:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     119:	04 08 10 20                                         ... 

0000011d <digital_pin_to_port_PGM>:
     11d:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     12d:	03 03 03 03                                         ....

00000131 <port_to_input_PGM>:
     131:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

0000013b <port_to_output_PGM>:
     13b:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

00000145 <port_to_mode_PGM>:
     145:	00 00 00 00 24 00 27 00 2a 00 00                    ....$.'.*..

00000150 <__ctors_start>:
     150:	d6 05       	cpc	r29, r6
     152:	aa 12       	cpse	r10, r26
     154:	ae 12       	cpse	r10, r30
     156:	2c 19       	sub	r18, r12

00000158 <__ctors_end>:
     158:	11 24       	eor	r1, r1
     15a:	1f be       	out	0x3f, r1	; 63
     15c:	cf ef       	ldi	r28, 0xFF	; 255
     15e:	d8 e0       	ldi	r29, 0x08	; 8
     160:	de bf       	out	0x3e, r29	; 62
     162:	cd bf       	out	0x3d, r28	; 61

00000164 <__do_copy_data>:
     164:	12 e0       	ldi	r17, 0x02	; 2
     166:	a0 e0       	ldi	r26, 0x00	; 0
     168:	b1 e0       	ldi	r27, 0x01	; 1
     16a:	ec ed       	ldi	r30, 0xDC	; 220
     16c:	fd e3       	ldi	r31, 0x3D	; 61
     16e:	02 c0       	rjmp	.+4      	; 0x174 <__do_copy_data+0x10>
     170:	05 90       	lpm	r0, Z+
     172:	0d 92       	st	X+, r0
     174:	aa 39       	cpi	r26, 0x9A	; 154
     176:	b1 07       	cpc	r27, r17
     178:	d9 f7       	brne	.-10     	; 0x170 <__do_copy_data+0xc>

0000017a <__do_clear_bss>:
     17a:	25 e0       	ldi	r18, 0x05	; 5
     17c:	aa e9       	ldi	r26, 0x9A	; 154
     17e:	b2 e0       	ldi	r27, 0x02	; 2
     180:	01 c0       	rjmp	.+2      	; 0x184 <.do_clear_bss_start>

00000182 <.do_clear_bss_loop>:
     182:	1d 92       	st	X+, r1

00000184 <.do_clear_bss_start>:
     184:	af 3d       	cpi	r26, 0xDF	; 223
     186:	b2 07       	cpc	r27, r18
     188:	e1 f7       	brne	.-8      	; 0x182 <.do_clear_bss_loop>

0000018a <__do_global_ctors>:
     18a:	10 e0       	ldi	r17, 0x00	; 0
     18c:	cc ea       	ldi	r28, 0xAC	; 172
     18e:	d0 e0       	ldi	r29, 0x00	; 0
     190:	04 c0       	rjmp	.+8      	; 0x19a <__do_global_ctors+0x10>
     192:	21 97       	sbiw	r28, 0x01	; 1
     194:	fe 01       	movw	r30, r28
     196:	0e 94 e3 1c 	call	0x39c6	; 0x39c6 <__tablejump2__>
     19a:	c8 3a       	cpi	r28, 0xA8	; 168
     19c:	d1 07       	cpc	r29, r17
     19e:	c9 f7       	brne	.-14     	; 0x192 <__do_global_ctors+0x8>
     1a0:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <main>
     1a4:	0c 94 ec 1e 	jmp	0x3dd8	; 0x3dd8 <_exit>

000001a8 <__bad_interrupt>:
     1a8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001ac <_Z11PrintPidCfgP11PIDConfig_e>:

*/


void PrintPidCfg(PIDConfig_e *cfg)
{
     1ac:	cf 93       	push	r28
     1ae:	df 93       	push	r29
     1b0:	ec 01       	movw	r28, r24
    Serial.print("DD: ");
     1b2:	67 e0       	ldi	r22, 0x07	; 7
     1b4:	71 e0       	ldi	r23, 0x01	; 1
     1b6:	87 e3       	ldi	r24, 0x37	; 55
     1b8:	95 e0       	ldi	r25, 0x05	; 5
     1ba:	0e 94 a8 19 	call	0x3350	; 0x3350 <_ZN5Print5printEPKc>
    Serial.print(cfg->Name);
     1be:	be 01       	movw	r22, r28
     1c0:	87 e3       	ldi	r24, 0x37	; 55
     1c2:	95 e0       	ldi	r25, 0x05	; 5
     1c4:	0e 94 a8 19 	call	0x3350	; 0x3350 <_ZN5Print5printEPKc>
    Serial.print(" ");
     1c8:	64 e1       	ldi	r22, 0x14	; 20
     1ca:	71 e0       	ldi	r23, 0x01	; 1
     1cc:	87 e3       	ldi	r24, 0x37	; 55
     1ce:	95 e0       	ldi	r25, 0x05	; 5
     1d0:	0e 94 a8 19 	call	0x3350	; 0x3350 <_ZN5Print5printEPKc>
    Serial.print(cfg->Kp);
     1d4:	4d 81       	ldd	r20, Y+5	; 0x05
     1d6:	5e 81       	ldd	r21, Y+6	; 0x06
     1d8:	6f 81       	ldd	r22, Y+7	; 0x07
     1da:	78 85       	ldd	r23, Y+8	; 0x08
     1dc:	22 e0       	ldi	r18, 0x02	; 2
     1de:	30 e0       	ldi	r19, 0x00	; 0
     1e0:	87 e3       	ldi	r24, 0x37	; 55
     1e2:	95 e0       	ldi	r25, 0x05	; 5
     1e4:	0e 94 5f 1b 	call	0x36be	; 0x36be <_ZN5Print5printEdi>
    Serial.print(" ");
     1e8:	64 e1       	ldi	r22, 0x14	; 20
     1ea:	71 e0       	ldi	r23, 0x01	; 1
     1ec:	87 e3       	ldi	r24, 0x37	; 55
     1ee:	95 e0       	ldi	r25, 0x05	; 5
     1f0:	0e 94 a8 19 	call	0x3350	; 0x3350 <_ZN5Print5printEPKc>
    Serial.print(cfg->Ki);
     1f4:	49 85       	ldd	r20, Y+9	; 0x09
     1f6:	5a 85       	ldd	r21, Y+10	; 0x0a
     1f8:	6b 85       	ldd	r22, Y+11	; 0x0b
     1fa:	7c 85       	ldd	r23, Y+12	; 0x0c
     1fc:	22 e0       	ldi	r18, 0x02	; 2
     1fe:	30 e0       	ldi	r19, 0x00	; 0
     200:	87 e3       	ldi	r24, 0x37	; 55
     202:	95 e0       	ldi	r25, 0x05	; 5
     204:	0e 94 5f 1b 	call	0x36be	; 0x36be <_ZN5Print5printEdi>
    Serial.print(" ");
     208:	64 e1       	ldi	r22, 0x14	; 20
     20a:	71 e0       	ldi	r23, 0x01	; 1
     20c:	87 e3       	ldi	r24, 0x37	; 55
     20e:	95 e0       	ldi	r25, 0x05	; 5
     210:	0e 94 a8 19 	call	0x3350	; 0x3350 <_ZN5Print5printEPKc>
    Serial.print(cfg->Kd);
     214:	4d 85       	ldd	r20, Y+13	; 0x0d
     216:	5e 85       	ldd	r21, Y+14	; 0x0e
     218:	6f 85       	ldd	r22, Y+15	; 0x0f
     21a:	78 89       	ldd	r23, Y+16	; 0x10
     21c:	22 e0       	ldi	r18, 0x02	; 2
     21e:	30 e0       	ldi	r19, 0x00	; 0
     220:	87 e3       	ldi	r24, 0x37	; 55
     222:	95 e0       	ldi	r25, 0x05	; 5
     224:	0e 94 5f 1b 	call	0x36be	; 0x36be <_ZN5Print5printEdi>
    Serial.print(" ");
     228:	64 e1       	ldi	r22, 0x14	; 20
     22a:	71 e0       	ldi	r23, 0x01	; 1
     22c:	87 e3       	ldi	r24, 0x37	; 55
     22e:	95 e0       	ldi	r25, 0x05	; 5
     230:	0e 94 a8 19 	call	0x3350	; 0x3350 <_ZN5Print5printEPKc>
    Serial.print(cfg->Setpoint);
     234:	49 89       	ldd	r20, Y+17	; 0x11
     236:	5a 89       	ldd	r21, Y+18	; 0x12
     238:	6b 89       	ldd	r22, Y+19	; 0x13
     23a:	7c 89       	ldd	r23, Y+20	; 0x14
     23c:	22 e0       	ldi	r18, 0x02	; 2
     23e:	30 e0       	ldi	r19, 0x00	; 0
     240:	87 e3       	ldi	r24, 0x37	; 55
     242:	95 e0       	ldi	r25, 0x05	; 5
     244:	0e 94 5f 1b 	call	0x36be	; 0x36be <_ZN5Print5printEdi>
    Serial.println(" ");
     248:	64 e1       	ldi	r22, 0x14	; 20
     24a:	71 e0       	ldi	r23, 0x01	; 1
     24c:	87 e3       	ldi	r24, 0x37	; 55
     24e:	95 e0       	ldi	r25, 0x05	; 5
}
     250:	df 91       	pop	r29
     252:	cf 91       	pop	r28
    Serial.print(cfg->Ki);
    Serial.print(" ");
    Serial.print(cfg->Kd);
    Serial.print(" ");
    Serial.print(cfg->Setpoint);
    Serial.println(" ");
     254:	0c 94 b5 19 	jmp	0x336a	; 0x336a <_ZN5Print7printlnEPKc>

00000258 <_Z18PrintEncoderValuesv>:
}

void PrintEncoderValues()
{
    Serial.print("ENC: ");
     258:	6c e0       	ldi	r22, 0x0C	; 12
     25a:	71 e0       	ldi	r23, 0x01	; 1
     25c:	87 e3       	ldi	r24, 0x37	; 55
     25e:	95 e0       	ldi	r25, 0x05	; 5
     260:	0e 94 a8 19 	call	0x3350	; 0x3350 <_ZN5Print5printEPKc>
    Serial.print(Mot0_PidCtl.Input);
     264:	40 91 0c 04 	lds	r20, 0x040C	; 0x80040c <Mot0_PidCtl+0x15>
     268:	50 91 0d 04 	lds	r21, 0x040D	; 0x80040d <Mot0_PidCtl+0x16>
     26c:	60 91 0e 04 	lds	r22, 0x040E	; 0x80040e <Mot0_PidCtl+0x17>
     270:	70 91 0f 04 	lds	r23, 0x040F	; 0x80040f <Mot0_PidCtl+0x18>
     274:	22 e0       	ldi	r18, 0x02	; 2
     276:	30 e0       	ldi	r19, 0x00	; 0
     278:	87 e3       	ldi	r24, 0x37	; 55
     27a:	95 e0       	ldi	r25, 0x05	; 5
     27c:	0e 94 5f 1b 	call	0x36be	; 0x36be <_ZN5Print5printEdi>
    (Mot0_Dir==0xFFFF)?Serial.print(" 1 "):Serial.print(" 0 ");
     280:	62 e1       	ldi	r22, 0x12	; 18
     282:	71 e0       	ldi	r23, 0x01	; 1
     284:	87 e3       	ldi	r24, 0x37	; 55
     286:	95 e0       	ldi	r25, 0x05	; 5
     288:	0e 94 a8 19 	call	0x3350	; 0x3350 <_ZN5Print5printEPKc>

    Serial.print(Mot1_PidCtl.Input);
     28c:	40 91 ef 03 	lds	r20, 0x03EF	; 0x8003ef <Mot1_PidCtl+0x15>
     290:	50 91 f0 03 	lds	r21, 0x03F0	; 0x8003f0 <Mot1_PidCtl+0x16>
     294:	60 91 f1 03 	lds	r22, 0x03F1	; 0x8003f1 <Mot1_PidCtl+0x17>
     298:	70 91 f2 03 	lds	r23, 0x03F2	; 0x8003f2 <Mot1_PidCtl+0x18>
     29c:	22 e0       	ldi	r18, 0x02	; 2
     29e:	30 e0       	ldi	r19, 0x00	; 0
     2a0:	87 e3       	ldi	r24, 0x37	; 55
     2a2:	95 e0       	ldi	r25, 0x05	; 5
     2a4:	0e 94 5f 1b 	call	0x36be	; 0x36be <_ZN5Print5printEdi>
    (Mot1_Dir==0xFFFF)?Serial.print(" 1 "):Serial.print(" 0 ");
     2a8:	62 e1       	ldi	r22, 0x12	; 18
     2aa:	71 e0       	ldi	r23, 0x01	; 1
     2ac:	87 e3       	ldi	r24, 0x37	; 55
     2ae:	95 e0       	ldi	r25, 0x05	; 5
     2b0:	0e 94 a8 19 	call	0x3350	; 0x3350 <_ZN5Print5printEPKc>
    Serial.println(" ");
     2b4:	64 e1       	ldi	r22, 0x14	; 20
     2b6:	71 e0       	ldi	r23, 0x01	; 1
     2b8:	87 e3       	ldi	r24, 0x37	; 55
     2ba:	95 e0       	ldi	r25, 0x05	; 5
     2bc:	0c 94 b5 19 	jmp	0x336a	; 0x336a <_ZN5Print7printlnEPKc>

000002c0 <_Z20PrintPidOutputValuesv>:
}


void PrintPidOutputValues()
{
     2c0:	0f 93       	push	r16
     2c2:	1f 93       	push	r17
     2c4:	cf 93       	push	r28
     2c6:	df 93       	push	r29
    Serial.print("PID: ");
     2c8:	66 e1       	ldi	r22, 0x16	; 22
     2ca:	71 e0       	ldi	r23, 0x01	; 1
     2cc:	87 e3       	ldi	r24, 0x37	; 55
     2ce:	95 e0       	ldi	r25, 0x05	; 5
     2d0:	0e 94 a8 19 	call	0x3350	; 0x3350 <_ZN5Print5printEPKc>
    Serial.print(Mot0_PidCtl.Output);
     2d4:	07 ef       	ldi	r16, 0xF7	; 247
     2d6:	13 e0       	ldi	r17, 0x03	; 3
     2d8:	f8 01       	movw	r30, r16
     2da:	41 8d       	ldd	r20, Z+25	; 0x19
     2dc:	52 8d       	ldd	r21, Z+26	; 0x1a
     2de:	63 8d       	ldd	r22, Z+27	; 0x1b
     2e0:	74 8d       	ldd	r23, Z+28	; 0x1c
     2e2:	22 e0       	ldi	r18, 0x02	; 2
     2e4:	30 e0       	ldi	r19, 0x00	; 0
     2e6:	87 e3       	ldi	r24, 0x37	; 55
     2e8:	95 e0       	ldi	r25, 0x05	; 5
     2ea:	0e 94 5f 1b 	call	0x36be	; 0x36be <_ZN5Print5printEdi>

    Serial.print(" ");
     2ee:	64 e1       	ldi	r22, 0x14	; 20
     2f0:	71 e0       	ldi	r23, 0x01	; 1
     2f2:	87 e3       	ldi	r24, 0x37	; 55
     2f4:	95 e0       	ldi	r25, 0x05	; 5
     2f6:	0e 94 a8 19 	call	0x3350	; 0x3350 <_ZN5Print5printEPKc>
    Serial.print(Mot1_PidCtl.Output);
     2fa:	ca ed       	ldi	r28, 0xDA	; 218
     2fc:	d3 e0       	ldi	r29, 0x03	; 3
     2fe:	49 8d       	ldd	r20, Y+25	; 0x19
     300:	5a 8d       	ldd	r21, Y+26	; 0x1a
     302:	6b 8d       	ldd	r22, Y+27	; 0x1b
     304:	7c 8d       	ldd	r23, Y+28	; 0x1c
     306:	22 e0       	ldi	r18, 0x02	; 2
     308:	30 e0       	ldi	r19, 0x00	; 0
     30a:	87 e3       	ldi	r24, 0x37	; 55
     30c:	95 e0       	ldi	r25, 0x05	; 5
     30e:	0e 94 5f 1b 	call	0x36be	; 0x36be <_ZN5Print5printEdi>

    Serial.println(" ");
     312:	64 e1       	ldi	r22, 0x14	; 20
     314:	71 e0       	ldi	r23, 0x01	; 1
     316:	87 e3       	ldi	r24, 0x37	; 55
     318:	95 e0       	ldi	r25, 0x05	; 5
     31a:	0e 94 b5 19 	call	0x336a	; 0x336a <_ZN5Print7printlnEPKc>



    Serial.print("SET: ");
     31e:	6c e1       	ldi	r22, 0x1C	; 28
     320:	71 e0       	ldi	r23, 0x01	; 1
     322:	87 e3       	ldi	r24, 0x37	; 55
     324:	95 e0       	ldi	r25, 0x05	; 5
     326:	0e 94 a8 19 	call	0x3350	; 0x3350 <_ZN5Print5printEPKc>
    Serial.print(Mot0_PidCtl.Setpoint);
     32a:	f8 01       	movw	r30, r16
     32c:	41 89       	ldd	r20, Z+17	; 0x11
     32e:	52 89       	ldd	r21, Z+18	; 0x12
     330:	63 89       	ldd	r22, Z+19	; 0x13
     332:	74 89       	ldd	r23, Z+20	; 0x14
     334:	22 e0       	ldi	r18, 0x02	; 2
     336:	30 e0       	ldi	r19, 0x00	; 0
     338:	87 e3       	ldi	r24, 0x37	; 55
     33a:	95 e0       	ldi	r25, 0x05	; 5
     33c:	0e 94 5f 1b 	call	0x36be	; 0x36be <_ZN5Print5printEdi>

    Serial.print(" ");
     340:	64 e1       	ldi	r22, 0x14	; 20
     342:	71 e0       	ldi	r23, 0x01	; 1
     344:	87 e3       	ldi	r24, 0x37	; 55
     346:	95 e0       	ldi	r25, 0x05	; 5
     348:	0e 94 a8 19 	call	0x3350	; 0x3350 <_ZN5Print5printEPKc>
    Serial.print(Mot1_PidCtl.Setpoint);
     34c:	49 89       	ldd	r20, Y+17	; 0x11
     34e:	5a 89       	ldd	r21, Y+18	; 0x12
     350:	6b 89       	ldd	r22, Y+19	; 0x13
     352:	7c 89       	ldd	r23, Y+20	; 0x14
     354:	22 e0       	ldi	r18, 0x02	; 2
     356:	30 e0       	ldi	r19, 0x00	; 0
     358:	87 e3       	ldi	r24, 0x37	; 55
     35a:	95 e0       	ldi	r25, 0x05	; 5
     35c:	0e 94 5f 1b 	call	0x36be	; 0x36be <_ZN5Print5printEdi>

    Serial.println(" ");
     360:	64 e1       	ldi	r22, 0x14	; 20
     362:	71 e0       	ldi	r23, 0x01	; 1
     364:	87 e3       	ldi	r24, 0x37	; 55
     366:	95 e0       	ldi	r25, 0x05	; 5
}
     368:	df 91       	pop	r29
     36a:	cf 91       	pop	r28
     36c:	1f 91       	pop	r17
     36e:	0f 91       	pop	r16
    Serial.print(Mot0_PidCtl.Setpoint);

    Serial.print(" ");
    Serial.print(Mot1_PidCtl.Setpoint);

    Serial.println(" ");
     370:	0c 94 b5 19 	jmp	0x336a	; 0x336a <_ZN5Print7printlnEPKc>

00000374 <_Z13Ser_ParseDatav>:
bool printRawGiro=false;
bool printMotPid=false;
bool printGiroPid=false;

void Ser_ParseData()
{
     374:	cf 92       	push	r12
     376:	df 92       	push	r13
     378:	ef 92       	push	r14
     37a:	ff 92       	push	r15
     37c:	0f 93       	push	r16
     37e:	1f 93       	push	r17
     380:	cf 93       	push	r28
     382:	df 93       	push	r29
    if (Ser_NewData==false) return;
     384:	80 91 b8 02 	lds	r24, 0x02B8	; 0x8002b8 <Ser_NewData>
     388:	88 23       	and	r24, r24
     38a:	09 f4       	brne	.+2      	; 0x38e <_Z13Ser_ParseDatav+0x1a>
     38c:	8a c1       	rjmp	.+788    	; 0x6a2 <__LOCK_REGION_LENGTH__+0x2a2>

    char *pch;

    pch=strtok(Ser_Buffer, " ");
     38e:	64 e1       	ldi	r22, 0x14	; 20
     390:	71 e0       	ldi	r23, 0x01	; 1
     392:	89 eb       	ldi	r24, 0xB9	; 185
     394:	92 e0       	ldi	r25, 0x02	; 2
     396:	0e 94 07 1d 	call	0x3a0e	; 0x3a0e <strtok>
     39a:	ec 01       	movw	r28, r24

    if(strcmp(pch,"SP")==0) //Set Pid
     39c:	62 e2       	ldi	r22, 0x22	; 34
     39e:	71 e0       	ldi	r23, 0x01	; 1
     3a0:	0e 94 0c 1d 	call	0x3a18	; 0x3a18 <strcmp>
     3a4:	89 2b       	or	r24, r25
     3a6:	09 f0       	breq	.+2      	; 0x3aa <_Z13Ser_ParseDatav+0x36>
     3a8:	88 c0       	rjmp	.+272    	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
        {
            Serial.println("Debug: SP Start");
     3aa:	65 e2       	ldi	r22, 0x25	; 37
     3ac:	71 e0       	ldi	r23, 0x01	; 1
     3ae:	87 e3       	ldi	r24, 0x37	; 55
     3b0:	95 e0       	ldi	r25, 0x05	; 5
     3b2:	0e 94 b5 19 	call	0x336a	; 0x336a <_ZN5Print7printlnEPKc>

            pch=strtok(NULL, " ");
     3b6:	64 e1       	ldi	r22, 0x14	; 20
     3b8:	71 e0       	ldi	r23, 0x01	; 1
     3ba:	80 e0       	ldi	r24, 0x00	; 0
     3bc:	90 e0       	ldi	r25, 0x00	; 0
     3be:	0e 94 07 1d 	call	0x3a0e	; 0x3a0e <strtok>
     3c2:	ec 01       	movw	r28, r24
            if(strcmp(pch,"M0")==0)
     3c4:	65 e3       	ldi	r22, 0x35	; 53
     3c6:	71 e0       	ldi	r23, 0x01	; 1
     3c8:	0e 94 0c 1d 	call	0x3a18	; 0x3a18 <strcmp>
     3cc:	89 2b       	or	r24, r25
     3ce:	49 f4       	brne	.+18     	; 0x3e2 <_Z13Ser_ParseDatav+0x6e>
                {
                    CfgPtr = &Mot0_PidCtl;
     3d0:	87 ef       	ldi	r24, 0xF7	; 247
     3d2:	93 e0       	ldi	r25, 0x03	; 3
     3d4:	90 93 b7 02 	sts	0x02B7, r25	; 0x8002b7 <CfgPtr+0x1>
     3d8:	80 93 b6 02 	sts	0x02B6, r24	; 0x8002b6 <CfgPtr>
                    PidPtr = &Mot0_Pid;
     3dc:	81 e8       	ldi	r24, 0x81	; 129
     3de:	93 e0       	ldi	r25, 0x03	; 3
     3e0:	1f c0       	rjmp	.+62     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
                }
            else if(strcmp(pch,"M1")==0)
     3e2:	68 e3       	ldi	r22, 0x38	; 56
     3e4:	71 e0       	ldi	r23, 0x01	; 1
     3e6:	ce 01       	movw	r24, r28
     3e8:	0e 94 0c 1d 	call	0x3a18	; 0x3a18 <strcmp>
     3ec:	89 2b       	or	r24, r25
     3ee:	49 f4       	brne	.+18     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
                {
                    CfgPtr = &Mot1_PidCtl;
     3f0:	8a ed       	ldi	r24, 0xDA	; 218
     3f2:	93 e0       	ldi	r25, 0x03	; 3
     3f4:	90 93 b7 02 	sts	0x02B7, r25	; 0x8002b7 <CfgPtr+0x1>
     3f8:	80 93 b6 02 	sts	0x02B6, r24	; 0x8002b6 <CfgPtr>
                    PidPtr = &Mot1_Pid;
     3fc:	85 e4       	ldi	r24, 0x45	; 69
     3fe:	93 e0       	ldi	r25, 0x03	; 3
     400:	0f c0       	rjmp	.+30     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
                }
            else if(strcmp(pch,"Gi")==0)
     402:	6b e3       	ldi	r22, 0x3B	; 59
     404:	71 e0       	ldi	r23, 0x01	; 1
     406:	ce 01       	movw	r24, r28
     408:	0e 94 0c 1d 	call	0x3a18	; 0x3a18 <strcmp>
     40c:	89 2b       	or	r24, r25
     40e:	61 f4       	brne	.+24     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
                {
                    CfgPtr = &Giro_PidCtl;
     410:	8d eb       	ldi	r24, 0xBD	; 189
     412:	93 e0       	ldi	r25, 0x03	; 3
     414:	90 93 b7 02 	sts	0x02B7, r25	; 0x8002b7 <CfgPtr+0x1>
     418:	80 93 b6 02 	sts	0x02B6, r24	; 0x8002b6 <CfgPtr>
                    PidPtr = &Giro_Pid;
     41c:	89 e0       	ldi	r24, 0x09	; 9
     41e:	93 e0       	ldi	r25, 0x03	; 3
     420:	90 93 b5 02 	sts	0x02B5, r25	; 0x8002b5 <PidPtr+0x1>
     424:	80 93 b4 02 	sts	0x02B4, r24	; 0x8002b4 <PidPtr>
                }

            pch=strtok(NULL, " ");
     428:	64 e1       	ldi	r22, 0x14	; 20
     42a:	71 e0       	ldi	r23, 0x01	; 1
     42c:	80 e0       	ldi	r24, 0x00	; 0
     42e:	90 e0       	ldi	r25, 0x00	; 0
     430:	0e 94 07 1d 	call	0x3a0e	; 0x3a0e <strtok>
            CfgPtr->Kp=atof(pch);
     434:	c0 91 b6 02 	lds	r28, 0x02B6	; 0x8002b6 <CfgPtr>
     438:	d0 91 b7 02 	lds	r29, 0x02B7	; 0x8002b7 <CfgPtr+0x1>
     43c:	0e 94 03 1d 	call	0x3a06	; 0x3a06 <atof>
     440:	6d 83       	std	Y+5, r22	; 0x05
     442:	7e 83       	std	Y+6, r23	; 0x06
     444:	8f 83       	std	Y+7, r24	; 0x07
     446:	98 87       	std	Y+8, r25	; 0x08

            pch=strtok(NULL, " ");
     448:	64 e1       	ldi	r22, 0x14	; 20
     44a:	71 e0       	ldi	r23, 0x01	; 1
     44c:	80 e0       	ldi	r24, 0x00	; 0
     44e:	90 e0       	ldi	r25, 0x00	; 0
     450:	0e 94 07 1d 	call	0x3a0e	; 0x3a0e <strtok>
            CfgPtr->Ki=atof(pch);
     454:	c0 91 b6 02 	lds	r28, 0x02B6	; 0x8002b6 <CfgPtr>
     458:	d0 91 b7 02 	lds	r29, 0x02B7	; 0x8002b7 <CfgPtr+0x1>
     45c:	0e 94 03 1d 	call	0x3a06	; 0x3a06 <atof>
     460:	69 87       	std	Y+9, r22	; 0x09
     462:	7a 87       	std	Y+10, r23	; 0x0a
     464:	8b 87       	std	Y+11, r24	; 0x0b
     466:	9c 87       	std	Y+12, r25	; 0x0c

            pch=strtok(NULL, " ");
     468:	64 e1       	ldi	r22, 0x14	; 20
     46a:	71 e0       	ldi	r23, 0x01	; 1
     46c:	80 e0       	ldi	r24, 0x00	; 0
     46e:	90 e0       	ldi	r25, 0x00	; 0
     470:	0e 94 07 1d 	call	0x3a0e	; 0x3a0e <strtok>
            CfgPtr->Kd=atof(pch);
     474:	c0 91 b6 02 	lds	r28, 0x02B6	; 0x8002b6 <CfgPtr>
     478:	d0 91 b7 02 	lds	r29, 0x02B7	; 0x8002b7 <CfgPtr+0x1>
     47c:	0e 94 03 1d 	call	0x3a06	; 0x3a06 <atof>
     480:	6d 87       	std	Y+13, r22	; 0x0d
     482:	7e 87       	std	Y+14, r23	; 0x0e
     484:	8f 87       	std	Y+15, r24	; 0x0f
     486:	98 8b       	std	Y+16, r25	; 0x10

            PidPtr->SetTunings(CfgPtr->Kp,CfgPtr->Ki,CfgPtr->Kd);
     488:	e0 91 b6 02 	lds	r30, 0x02B6	; 0x8002b6 <CfgPtr>
     48c:	f0 91 b7 02 	lds	r31, 0x02B7	; 0x8002b7 <CfgPtr+0x1>
     490:	c5 84       	ldd	r12, Z+13	; 0x0d
     492:	d6 84       	ldd	r13, Z+14	; 0x0e
     494:	e7 84       	ldd	r14, Z+15	; 0x0f
     496:	f0 88       	ldd	r15, Z+16	; 0x10
     498:	01 85       	ldd	r16, Z+9	; 0x09
     49a:	12 85       	ldd	r17, Z+10	; 0x0a
     49c:	23 85       	ldd	r18, Z+11	; 0x0b
     49e:	34 85       	ldd	r19, Z+12	; 0x0c
     4a0:	45 81       	ldd	r20, Z+5	; 0x05
     4a2:	56 81       	ldd	r21, Z+6	; 0x06
     4a4:	67 81       	ldd	r22, Z+7	; 0x07
     4a6:	70 85       	ldd	r23, Z+8	; 0x08
     4a8:	80 91 b4 02 	lds	r24, 0x02B4	; 0x8002b4 <PidPtr>
     4ac:	90 91 b5 02 	lds	r25, 0x02B5	; 0x8002b5 <PidPtr+0x1>
     4b0:	0e 94 9b 0a 	call	0x1536	; 0x1536 <_ZN3PID10SetTuningsEddd>

            Serial.println("Debug: SP Done");
     4b4:	6e e3       	ldi	r22, 0x3E	; 62
     4b6:	71 e0       	ldi	r23, 0x01	; 1
     4b8:	3c c0       	rjmp	.+120    	; 0x532 <__LOCK_REGION_LENGTH__+0x132>
        }
    else  if(strcmp(pch,"GD")==0)  //Get Pid Data
     4ba:	6d e4       	ldi	r22, 0x4D	; 77
     4bc:	71 e0       	ldi	r23, 0x01	; 1
     4be:	ce 01       	movw	r24, r28
     4c0:	0e 94 0c 1d 	call	0x3a18	; 0x3a18 <strcmp>
     4c4:	89 2b       	or	r24, r25
     4c6:	d1 f5       	brne	.+116    	; 0x53c <__LOCK_REGION_LENGTH__+0x13c>
        {
            Serial.println("Debug: GD Start");
     4c8:	60 e5       	ldi	r22, 0x50	; 80
     4ca:	71 e0       	ldi	r23, 0x01	; 1
     4cc:	87 e3       	ldi	r24, 0x37	; 55
     4ce:	95 e0       	ldi	r25, 0x05	; 5
     4d0:	0e 94 b5 19 	call	0x336a	; 0x336a <_ZN5Print7printlnEPKc>

            pch=strtok(NULL, " ");
     4d4:	64 e1       	ldi	r22, 0x14	; 20
     4d6:	71 e0       	ldi	r23, 0x01	; 1
     4d8:	80 e0       	ldi	r24, 0x00	; 0
     4da:	90 e0       	ldi	r25, 0x00	; 0
     4dc:	0e 94 07 1d 	call	0x3a0e	; 0x3a0e <strtok>
     4e0:	ec 01       	movw	r28, r24

            if(strcmp(pch,"M0")==0)
     4e2:	65 e3       	ldi	r22, 0x35	; 53
     4e4:	71 e0       	ldi	r23, 0x01	; 1
     4e6:	0e 94 0c 1d 	call	0x3a18	; 0x3a18 <strcmp>
     4ea:	89 2b       	or	r24, r25
     4ec:	19 f4       	brne	.+6      	; 0x4f4 <__LOCK_REGION_LENGTH__+0xf4>
                {
                    CfgPtr = &Mot0_PidCtl;
     4ee:	87 ef       	ldi	r24, 0xF7	; 247
     4f0:	93 e0       	ldi	r25, 0x03	; 3
     4f2:	13 c0       	rjmp	.+38     	; 0x51a <__LOCK_REGION_LENGTH__+0x11a>
                }
            else if(strcmp(pch,"M1")==0)
     4f4:	68 e3       	ldi	r22, 0x38	; 56
     4f6:	71 e0       	ldi	r23, 0x01	; 1
     4f8:	ce 01       	movw	r24, r28
     4fa:	0e 94 0c 1d 	call	0x3a18	; 0x3a18 <strcmp>
     4fe:	89 2b       	or	r24, r25
     500:	19 f4       	brne	.+6      	; 0x508 <__LOCK_REGION_LENGTH__+0x108>
                {
                    CfgPtr = &Mot1_PidCtl;
     502:	8a ed       	ldi	r24, 0xDA	; 218
     504:	93 e0       	ldi	r25, 0x03	; 3
     506:	09 c0       	rjmp	.+18     	; 0x51a <__LOCK_REGION_LENGTH__+0x11a>
                }
            else if(strcmp(pch,"Gi")==0)
     508:	6b e3       	ldi	r22, 0x3B	; 59
     50a:	71 e0       	ldi	r23, 0x01	; 1
     50c:	ce 01       	movw	r24, r28
     50e:	0e 94 0c 1d 	call	0x3a18	; 0x3a18 <strcmp>
     512:	89 2b       	or	r24, r25
     514:	31 f4       	brne	.+12     	; 0x522 <__LOCK_REGION_LENGTH__+0x122>
                {
                    CfgPtr = &Giro_PidCtl;
     516:	8d eb       	ldi	r24, 0xBD	; 189
     518:	93 e0       	ldi	r25, 0x03	; 3
     51a:	90 93 b7 02 	sts	0x02B7, r25	; 0x8002b7 <CfgPtr+0x1>
     51e:	80 93 b6 02 	sts	0x02B6, r24	; 0x8002b6 <CfgPtr>
                }

            PrintPidCfg(CfgPtr);
     522:	80 91 b6 02 	lds	r24, 0x02B6	; 0x8002b6 <CfgPtr>
     526:	90 91 b7 02 	lds	r25, 0x02B7	; 0x8002b7 <CfgPtr+0x1>
     52a:	0e 94 d6 00 	call	0x1ac	; 0x1ac <_Z11PrintPidCfgP11PIDConfig_e>

            Serial.println("Debug: GD Done");
     52e:	60 e6       	ldi	r22, 0x60	; 96
     530:	71 e0       	ldi	r23, 0x01	; 1
     532:	87 e3       	ldi	r24, 0x37	; 55
     534:	95 e0       	ldi	r25, 0x05	; 5
     536:	0e 94 b5 19 	call	0x336a	; 0x336a <_ZN5Print7printlnEPKc>
     53a:	b1 c0       	rjmp	.+354    	; 0x69e <__LOCK_REGION_LENGTH__+0x29e>
        }
    else if(strcmp(pch,"SS")==0)  //Set  setpoint
     53c:	6f e6       	ldi	r22, 0x6F	; 111
     53e:	71 e0       	ldi	r23, 0x01	; 1
     540:	ce 01       	movw	r24, r28
     542:	0e 94 0c 1d 	call	0x3a18	; 0x3a18 <strcmp>
     546:	89 2b       	or	r24, r25
     548:	09 f0       	breq	.+2      	; 0x54c <__LOCK_REGION_LENGTH__+0x14c>
     54a:	46 c0       	rjmp	.+140    	; 0x5d8 <__LOCK_REGION_LENGTH__+0x1d8>
        {
            Serial.println("Debug: SS Start");
     54c:	62 e7       	ldi	r22, 0x72	; 114
     54e:	71 e0       	ldi	r23, 0x01	; 1
     550:	87 e3       	ldi	r24, 0x37	; 55
     552:	95 e0       	ldi	r25, 0x05	; 5
     554:	0e 94 b5 19 	call	0x336a	; 0x336a <_ZN5Print7printlnEPKc>
            pch=strtok(NULL, " ");
     558:	64 e1       	ldi	r22, 0x14	; 20
     55a:	71 e0       	ldi	r23, 0x01	; 1
     55c:	80 e0       	ldi	r24, 0x00	; 0
     55e:	90 e0       	ldi	r25, 0x00	; 0
     560:	0e 94 07 1d 	call	0x3a0e	; 0x3a0e <strtok>
     564:	ec 01       	movw	r28, r24

            if(strcmp(pch,"M0")==0)
     566:	65 e3       	ldi	r22, 0x35	; 53
     568:	71 e0       	ldi	r23, 0x01	; 1
     56a:	0e 94 0c 1d 	call	0x3a18	; 0x3a18 <strcmp>
     56e:	89 2b       	or	r24, r25
     570:	19 f4       	brne	.+6      	; 0x578 <__LOCK_REGION_LENGTH__+0x178>
                {
                    CfgPtr = &Mot0_PidCtl;
     572:	87 ef       	ldi	r24, 0xF7	; 247
     574:	93 e0       	ldi	r25, 0x03	; 3
     576:	13 c0       	rjmp	.+38     	; 0x59e <__LOCK_REGION_LENGTH__+0x19e>
                    PidPtr = &Mot0_Pid;
                }
            else if(strcmp(pch,"M1")==0)
     578:	68 e3       	ldi	r22, 0x38	; 56
     57a:	71 e0       	ldi	r23, 0x01	; 1
     57c:	ce 01       	movw	r24, r28
     57e:	0e 94 0c 1d 	call	0x3a18	; 0x3a18 <strcmp>
     582:	89 2b       	or	r24, r25
     584:	19 f4       	brne	.+6      	; 0x58c <__LOCK_REGION_LENGTH__+0x18c>
                {
                    CfgPtr = &Mot1_PidCtl;
     586:	8a ed       	ldi	r24, 0xDA	; 218
     588:	93 e0       	ldi	r25, 0x03	; 3
     58a:	09 c0       	rjmp	.+18     	; 0x59e <__LOCK_REGION_LENGTH__+0x19e>
                    PidPtr = &Mot0_Pid;
                }
            else if(strcmp(pch,"Gi")==0)
     58c:	6b e3       	ldi	r22, 0x3B	; 59
     58e:	71 e0       	ldi	r23, 0x01	; 1
     590:	ce 01       	movw	r24, r28
     592:	0e 94 0c 1d 	call	0x3a18	; 0x3a18 <strcmp>
     596:	89 2b       	or	r24, r25
     598:	61 f4       	brne	.+24     	; 0x5b2 <__LOCK_REGION_LENGTH__+0x1b2>
                {
                    CfgPtr = &Giro_PidCtl;
     59a:	8d eb       	ldi	r24, 0xBD	; 189
     59c:	93 e0       	ldi	r25, 0x03	; 3
     59e:	90 93 b7 02 	sts	0x02B7, r25	; 0x8002b7 <CfgPtr+0x1>
     5a2:	80 93 b6 02 	sts	0x02B6, r24	; 0x8002b6 <CfgPtr>
                    PidPtr = &Mot0_Pid;
     5a6:	81 e8       	ldi	r24, 0x81	; 129
     5a8:	93 e0       	ldi	r25, 0x03	; 3
     5aa:	90 93 b5 02 	sts	0x02B5, r25	; 0x8002b5 <PidPtr+0x1>
     5ae:	80 93 b4 02 	sts	0x02B4, r24	; 0x8002b4 <PidPtr>
                }

            pch=strtok(NULL, " ");
     5b2:	64 e1       	ldi	r22, 0x14	; 20
     5b4:	71 e0       	ldi	r23, 0x01	; 1
     5b6:	80 e0       	ldi	r24, 0x00	; 0
     5b8:	90 e0       	ldi	r25, 0x00	; 0
     5ba:	0e 94 07 1d 	call	0x3a0e	; 0x3a0e <strtok>

            CfgPtr->Setpoint=atof(pch);
     5be:	c0 91 b6 02 	lds	r28, 0x02B6	; 0x8002b6 <CfgPtr>
     5c2:	d0 91 b7 02 	lds	r29, 0x02B7	; 0x8002b7 <CfgPtr+0x1>
     5c6:	0e 94 03 1d 	call	0x3a06	; 0x3a06 <atof>
     5ca:	69 8b       	std	Y+17, r22	; 0x11
     5cc:	7a 8b       	std	Y+18, r23	; 0x12
     5ce:	8b 8b       	std	Y+19, r24	; 0x13
     5d0:	9c 8b       	std	Y+20, r25	; 0x14
            Serial.println("Debug: SS Done");
     5d2:	62 e8       	ldi	r22, 0x82	; 130
     5d4:	71 e0       	ldi	r23, 0x01	; 1
     5d6:	ad cf       	rjmp	.-166    	; 0x532 <__LOCK_REGION_LENGTH__+0x132>

        }

    else if (strcmp(pch,"GC_ON")==0)
     5d8:	61 e9       	ldi	r22, 0x91	; 145
     5da:	71 e0       	ldi	r23, 0x01	; 1
     5dc:	ce 01       	movw	r24, r28
     5de:	0e 94 0c 1d 	call	0x3a18	; 0x3a18 <strcmp>
     5e2:	89 2b       	or	r24, r25
     5e4:	21 f4       	brne	.+8      	; 0x5ee <__LOCK_REGION_LENGTH__+0x1ee>
        {
            connectGiroToMot=true;
     5e6:	81 e0       	ldi	r24, 0x01	; 1
     5e8:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <connectGiroToMot>
     5ec:	58 c0       	rjmp	.+176    	; 0x69e <__LOCK_REGION_LENGTH__+0x29e>
        }
    else if (strcmp(pch,"GC_OFF")==0)
     5ee:	67 e9       	ldi	r22, 0x97	; 151
     5f0:	71 e0       	ldi	r23, 0x01	; 1
     5f2:	ce 01       	movw	r24, r28
     5f4:	0e 94 0c 1d 	call	0x3a18	; 0x3a18 <strcmp>
     5f8:	89 2b       	or	r24, r25
     5fa:	99 f4       	brne	.+38     	; 0x622 <__LOCK_REGION_LENGTH__+0x222>
        {
            connectGiroToMot=false;
     5fc:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <connectGiroToMot>
            Mot0_PidCtl.Setpoint=0;
     600:	10 92 08 04 	sts	0x0408, r1	; 0x800408 <Mot0_PidCtl+0x11>
     604:	10 92 09 04 	sts	0x0409, r1	; 0x800409 <Mot0_PidCtl+0x12>
     608:	10 92 0a 04 	sts	0x040A, r1	; 0x80040a <Mot0_PidCtl+0x13>
     60c:	10 92 0b 04 	sts	0x040B, r1	; 0x80040b <Mot0_PidCtl+0x14>
            Mot1_PidCtl.Setpoint=0;
     610:	10 92 eb 03 	sts	0x03EB, r1	; 0x8003eb <Mot1_PidCtl+0x11>
     614:	10 92 ec 03 	sts	0x03EC, r1	; 0x8003ec <Mot1_PidCtl+0x12>
     618:	10 92 ed 03 	sts	0x03ED, r1	; 0x8003ed <Mot1_PidCtl+0x13>
     61c:	10 92 ee 03 	sts	0x03EE, r1	; 0x8003ee <Mot1_PidCtl+0x14>
     620:	3e c0       	rjmp	.+124    	; 0x69e <__LOCK_REGION_LENGTH__+0x29e>
        }
    else if (strcmp(pch,"GRP_ON")==0)
     622:	6e e9       	ldi	r22, 0x9E	; 158
     624:	71 e0       	ldi	r23, 0x01	; 1
     626:	ce 01       	movw	r24, r28
     628:	0e 94 0c 1d 	call	0x3a18	; 0x3a18 <strcmp>
     62c:	89 2b       	or	r24, r25
     62e:	21 f4       	brne	.+8      	; 0x638 <__LOCK_REGION_LENGTH__+0x238>
        {
            printRawGiro=true;
     630:	81 e0       	ldi	r24, 0x01	; 1
     632:	80 93 b3 02 	sts	0x02B3, r24	; 0x8002b3 <printRawGiro>
     636:	33 c0       	rjmp	.+102    	; 0x69e <__LOCK_REGION_LENGTH__+0x29e>
        }
    else if (strcmp(pch,"GRP_OFF")==0)
     638:	65 ea       	ldi	r22, 0xA5	; 165
     63a:	71 e0       	ldi	r23, 0x01	; 1
     63c:	ce 01       	movw	r24, r28
     63e:	0e 94 0c 1d 	call	0x3a18	; 0x3a18 <strcmp>
     642:	89 2b       	or	r24, r25
     644:	19 f4       	brne	.+6      	; 0x64c <__LOCK_REGION_LENGTH__+0x24c>
        {
            printRawGiro=false;
     646:	10 92 b3 02 	sts	0x02B3, r1	; 0x8002b3 <printRawGiro>
     64a:	29 c0       	rjmp	.+82     	; 0x69e <__LOCK_REGION_LENGTH__+0x29e>
        }
    else if (strcmp(pch,"MP_ON")==0)
     64c:	6d ea       	ldi	r22, 0xAD	; 173
     64e:	71 e0       	ldi	r23, 0x01	; 1
     650:	ce 01       	movw	r24, r28
     652:	0e 94 0c 1d 	call	0x3a18	; 0x3a18 <strcmp>
     656:	89 2b       	or	r24, r25
     658:	21 f4       	brne	.+8      	; 0x662 <__LOCK_REGION_LENGTH__+0x262>
        {
            printMotPid=true;
     65a:	81 e0       	ldi	r24, 0x01	; 1
     65c:	80 93 b2 02 	sts	0x02B2, r24	; 0x8002b2 <printMotPid>
     660:	1e c0       	rjmp	.+60     	; 0x69e <__LOCK_REGION_LENGTH__+0x29e>
        }
    else if (strcmp(pch,"MP_OFF")==0)
     662:	63 eb       	ldi	r22, 0xB3	; 179
     664:	71 e0       	ldi	r23, 0x01	; 1
     666:	ce 01       	movw	r24, r28
     668:	0e 94 0c 1d 	call	0x3a18	; 0x3a18 <strcmp>
     66c:	89 2b       	or	r24, r25
     66e:	19 f4       	brne	.+6      	; 0x676 <__LOCK_REGION_LENGTH__+0x276>
        {
            printMotPid=false;
     670:	10 92 b2 02 	sts	0x02B2, r1	; 0x8002b2 <printMotPid>
     674:	14 c0       	rjmp	.+40     	; 0x69e <__LOCK_REGION_LENGTH__+0x29e>
        }
    else if (strcmp(pch,"GP_ON")==0)
     676:	6a eb       	ldi	r22, 0xBA	; 186
     678:	71 e0       	ldi	r23, 0x01	; 1
     67a:	ce 01       	movw	r24, r28
     67c:	0e 94 0c 1d 	call	0x3a18	; 0x3a18 <strcmp>
     680:	89 2b       	or	r24, r25
     682:	21 f4       	brne	.+8      	; 0x68c <__LOCK_REGION_LENGTH__+0x28c>
        {
            printGiroPid=true;
     684:	81 e0       	ldi	r24, 0x01	; 1
     686:	80 93 b1 02 	sts	0x02B1, r24	; 0x8002b1 <printGiroPid>
     68a:	09 c0       	rjmp	.+18     	; 0x69e <__LOCK_REGION_LENGTH__+0x29e>
        }
    else if (strcmp(pch,"GP_OFF")==0)
     68c:	60 ec       	ldi	r22, 0xC0	; 192
     68e:	71 e0       	ldi	r23, 0x01	; 1
     690:	ce 01       	movw	r24, r28
     692:	0e 94 0c 1d 	call	0x3a18	; 0x3a18 <strcmp>
     696:	89 2b       	or	r24, r25
     698:	11 f4       	brne	.+4      	; 0x69e <__LOCK_REGION_LENGTH__+0x29e>
        {
            printGiroPid=false;
     69a:	10 92 b1 02 	sts	0x02B1, r1	; 0x8002b1 <printGiroPid>
        }


    Ser_NewData=false;
     69e:	10 92 b8 02 	sts	0x02B8, r1	; 0x8002b8 <Ser_NewData>
}
     6a2:	df 91       	pop	r29
     6a4:	cf 91       	pop	r28
     6a6:	1f 91       	pop	r17
     6a8:	0f 91       	pop	r16
     6aa:	ff 90       	pop	r15
     6ac:	ef 90       	pop	r14
     6ae:	df 90       	pop	r13
     6b0:	cf 90       	pop	r12
     6b2:	08 95       	ret

000006b4 <_Z19UpdateEncoderValuesv>:

double *Mot0_RpmPtr=&Mot0_PidCtl.Input;
double *Mot1_RpmPtr=&Mot1_PidCtl.Input;

void UpdateEncoderValues()
{
     6b4:	cf 93       	push	r28
     6b6:	df 93       	push	r29
    *Mot0_RpmPtr=Mot0_Enc;
     6b8:	c0 91 02 01 	lds	r28, 0x0102	; 0x800102 <Mot0_RpmPtr>
     6bc:	d0 91 03 01 	lds	r29, 0x0103	; 0x800103 <Mot0_RpmPtr+0x1>
     6c0:	60 91 33 05 	lds	r22, 0x0533	; 0x800533 <Mot0_Enc>
     6c4:	70 91 34 05 	lds	r23, 0x0534	; 0x800534 <Mot0_Enc+0x1>
     6c8:	80 91 35 05 	lds	r24, 0x0535	; 0x800535 <Mot0_Enc+0x2>
     6cc:	90 91 36 05 	lds	r25, 0x0536	; 0x800536 <Mot0_Enc+0x3>
     6d0:	0e 94 3b 16 	call	0x2c76	; 0x2c76 <__floatsisf>
     6d4:	68 83       	st	Y, r22
     6d6:	79 83       	std	Y+1, r23	; 0x01
     6d8:	8a 83       	std	Y+2, r24	; 0x02
     6da:	9b 83       	std	Y+3, r25	; 0x03
    *Mot1_RpmPtr=Mot1_Enc;
     6dc:	c0 91 00 01 	lds	r28, 0x0100	; 0x800100 <Mot1_RpmPtr>
     6e0:	d0 91 01 01 	lds	r29, 0x0101	; 0x800101 <Mot1_RpmPtr+0x1>
     6e4:	60 91 2f 05 	lds	r22, 0x052F	; 0x80052f <Mot1_Enc>
     6e8:	70 91 30 05 	lds	r23, 0x0530	; 0x800530 <Mot1_Enc+0x1>
     6ec:	80 91 31 05 	lds	r24, 0x0531	; 0x800531 <Mot1_Enc+0x2>
     6f0:	90 91 32 05 	lds	r25, 0x0532	; 0x800532 <Mot1_Enc+0x3>
     6f4:	0e 94 3b 16 	call	0x2c76	; 0x2c76 <__floatsisf>
     6f8:	68 83       	st	Y, r22
     6fa:	79 83       	std	Y+1, r23	; 0x01
     6fc:	8a 83       	std	Y+2, r24	; 0x02
     6fe:	9b 83       	std	Y+3, r25	; 0x03

    Mot0_Enc=0;
     700:	10 92 33 05 	sts	0x0533, r1	; 0x800533 <Mot0_Enc>
     704:	10 92 34 05 	sts	0x0534, r1	; 0x800534 <Mot0_Enc+0x1>
     708:	10 92 35 05 	sts	0x0535, r1	; 0x800535 <Mot0_Enc+0x2>
     70c:	10 92 36 05 	sts	0x0536, r1	; 0x800536 <Mot0_Enc+0x3>
    Mot1_Enc=0;
     710:	10 92 2f 05 	sts	0x052F, r1	; 0x80052f <Mot1_Enc>
     714:	10 92 30 05 	sts	0x0530, r1	; 0x800530 <Mot1_Enc+0x1>
     718:	10 92 31 05 	sts	0x0531, r1	; 0x800531 <Mot1_Enc+0x2>
     71c:	10 92 32 05 	sts	0x0532, r1	; 0x800532 <Mot1_Enc+0x3>
}
     720:	df 91       	pop	r29
     722:	cf 91       	pop	r28
     724:	08 95       	ret

00000726 <_Z13Giro_ReadDatav>:
unsigned long Giro_currTime;
unsigned long Giro_loopTime;
unsigned long Giro_prevTime;

void Giro_ReadData()
{
     726:	8f 92       	push	r8
     728:	9f 92       	push	r9
     72a:	af 92       	push	r10
     72c:	bf 92       	push	r11
     72e:	cf 92       	push	r12
     730:	df 92       	push	r13
     732:	ef 92       	push	r14
     734:	ff 92       	push	r15
     736:	0f 93       	push	r16
     738:	1f 93       	push	r17
     73a:	cf 93       	push	r28
     73c:	df 93       	push	r29

    Giro_currTime = millis();
     73e:	0e 94 a7 1b 	call	0x374e	; 0x374e <millis>
     742:	60 93 ad 02 	sts	0x02AD, r22	; 0x8002ad <Giro_currTime>
     746:	70 93 ae 02 	sts	0x02AE, r23	; 0x8002ae <Giro_currTime+0x1>
     74a:	80 93 af 02 	sts	0x02AF, r24	; 0x8002af <Giro_currTime+0x2>
     74e:	90 93 b0 02 	sts	0x02B0, r25	; 0x8002b0 <Giro_currTime+0x3>
    Giro_loopTime = Giro_currTime - Giro_prevTime;
     752:	c0 90 a5 02 	lds	r12, 0x02A5	; 0x8002a5 <Giro_prevTime>
     756:	d0 90 a6 02 	lds	r13, 0x02A6	; 0x8002a6 <Giro_prevTime+0x1>
     75a:	e0 90 a7 02 	lds	r14, 0x02A7	; 0x8002a7 <Giro_prevTime+0x2>
     75e:	f0 90 a8 02 	lds	r15, 0x02A8	; 0x8002a8 <Giro_prevTime+0x3>
     762:	9b 01       	movw	r18, r22
     764:	ac 01       	movw	r20, r24
     766:	2c 19       	sub	r18, r12
     768:	3d 09       	sbc	r19, r13
     76a:	4e 09       	sbc	r20, r14
     76c:	5f 09       	sbc	r21, r15
     76e:	20 93 a9 02 	sts	0x02A9, r18	; 0x8002a9 <Giro_loopTime>
     772:	30 93 aa 02 	sts	0x02AA, r19	; 0x8002aa <Giro_loopTime+0x1>
     776:	40 93 ab 02 	sts	0x02AB, r20	; 0x8002ab <Giro_loopTime+0x2>
     77a:	50 93 ac 02 	sts	0x02AC, r21	; 0x8002ac <Giro_loopTime+0x3>
    Giro_prevTime = Giro_currTime;
     77e:	60 93 a5 02 	sts	0x02A5, r22	; 0x8002a5 <Giro_prevTime>
     782:	70 93 a6 02 	sts	0x02A6, r23	; 0x8002a6 <Giro_prevTime+0x1>
     786:	80 93 a7 02 	sts	0x02A7, r24	; 0x8002a7 <Giro_prevTime+0x2>
     78a:	90 93 a8 02 	sts	0x02A8, r25	; 0x8002a8 <Giro_prevTime+0x3>

    // read acceleration and gyroscope values
    Giro_AccY = mpu.getAccelerationY();
     78e:	85 e3       	ldi	r24, 0x35	; 53
     790:	94 e0       	ldi	r25, 0x04	; 4
     792:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <_ZN7MPU605016getAccelerationYEv>
     796:	90 93 34 04 	sts	0x0434, r25	; 0x800434 <Giro_AccY+0x1>
     79a:	80 93 33 04 	sts	0x0433, r24	; 0x800433 <Giro_AccY>
    Giro_AccZ = mpu.getAccelerationZ();
     79e:	85 e3       	ldi	r24, 0x35	; 53
     7a0:	94 e0       	ldi	r25, 0x04	; 4
     7a2:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <_ZN7MPU605016getAccelerationZEv>
     7a6:	90 93 32 04 	sts	0x0432, r25	; 0x800432 <Giro_AccZ+0x1>
     7aa:	80 93 31 04 	sts	0x0431, r24	; 0x800431 <Giro_AccZ>
    Giro_RotX = mpu.getRotationX();
     7ae:	85 e3       	ldi	r24, 0x35	; 53
     7b0:	94 e0       	ldi	r25, 0x04	; 4
     7b2:	0e 94 a5 0e 	call	0x1d4a	; 0x1d4a <_ZN7MPU605012getRotationXEv>
     7b6:	ec 01       	movw	r28, r24
     7b8:	90 93 30 04 	sts	0x0430, r25	; 0x800430 <Giro_RotX+0x1>
     7bc:	80 93 2f 04 	sts	0x042F, r24	; 0x80042f <Giro_RotX>


    Giro_AccAngle = atan2(Giro_AccY, Giro_AccZ)*RAD_TO_DEG;
     7c0:	60 91 31 04 	lds	r22, 0x0431	; 0x800431 <Giro_AccZ>
     7c4:	70 91 32 04 	lds	r23, 0x0432	; 0x800432 <Giro_AccZ+0x1>
     7c8:	07 2e       	mov	r0, r23
     7ca:	00 0c       	add	r0, r0
     7cc:	88 0b       	sbc	r24, r24
     7ce:	99 0b       	sbc	r25, r25
     7d0:	0e 94 3b 16 	call	0x2c76	; 0x2c76 <__floatsisf>
     7d4:	6b 01       	movw	r12, r22
     7d6:	7c 01       	movw	r14, r24
     7d8:	60 91 33 04 	lds	r22, 0x0433	; 0x800433 <Giro_AccY>
     7dc:	70 91 34 04 	lds	r23, 0x0434	; 0x800434 <Giro_AccY+0x1>
     7e0:	07 2e       	mov	r0, r23
     7e2:	00 0c       	add	r0, r0
     7e4:	88 0b       	sbc	r24, r24
     7e6:	99 0b       	sbc	r25, r25
     7e8:	0e 94 3b 16 	call	0x2c76	; 0x2c76 <__floatsisf>
     7ec:	a7 01       	movw	r20, r14
     7ee:	96 01       	movw	r18, r12
     7f0:	0e 94 2d 15 	call	0x2a5a	; 0x2a5a <atan2>
     7f4:	21 ee       	ldi	r18, 0xE1	; 225
     7f6:	3e e2       	ldi	r19, 0x2E	; 46
     7f8:	45 e6       	ldi	r20, 0x65	; 101
     7fa:	52 e4       	ldi	r21, 0x42	; 66
     7fc:	0e 94 1f 17 	call	0x2e3e	; 0x2e3e <__mulsf3>
     800:	60 93 29 04 	sts	0x0429, r22	; 0x800429 <Giro_AccAngle>
     804:	70 93 2a 04 	sts	0x042A, r23	; 0x80042a <Giro_AccAngle+0x1>
     808:	80 93 2b 04 	sts	0x042B, r24	; 0x80042b <Giro_AccAngle+0x2>
     80c:	90 93 2c 04 	sts	0x042C, r25	; 0x80042c <Giro_AccAngle+0x3>

    Giro_Rate = map(Giro_RotX, -32768, 32767, -250, 250);
     810:	be 01       	movw	r22, r28
     812:	dd 0f       	add	r29, r29
     814:	88 0b       	sbc	r24, r24
     816:	99 0b       	sbc	r25, r25
     818:	1f 92       	push	r1
     81a:	1f 92       	push	r1
     81c:	1f 92       	push	r1
     81e:	2a ef       	ldi	r18, 0xFA	; 250
     820:	2f 93       	push	r18
     822:	26 e0       	ldi	r18, 0x06	; 6
     824:	a2 2e       	mov	r10, r18
     826:	bb 24       	eor	r11, r11
     828:	ba 94       	dec	r11
     82a:	cb 2c       	mov	r12, r11
     82c:	db 2c       	mov	r13, r11
     82e:	ee 24       	eor	r14, r14
     830:	ea 94       	dec	r14
     832:	1f e7       	ldi	r17, 0x7F	; 127
     834:	f1 2e       	mov	r15, r17
     836:	00 e0       	ldi	r16, 0x00	; 0
     838:	10 e0       	ldi	r17, 0x00	; 0
     83a:	20 e0       	ldi	r18, 0x00	; 0
     83c:	30 e8       	ldi	r19, 0x80	; 128
     83e:	4f ef       	ldi	r20, 0xFF	; 255
     840:	5f ef       	ldi	r21, 0xFF	; 255
     842:	0e 94 4c 1c 	call	0x3898	; 0x3898 <_Z3maplllll>
     846:	70 93 2e 04 	sts	0x042E, r23	; 0x80042e <Giro_Rate+0x1>
     84a:	60 93 2d 04 	sts	0x042D, r22	; 0x80042d <Giro_Rate>
    Giro_Angle = (float)Giro_Rate*Giro_loopTime/1000;
     84e:	c0 91 2d 04 	lds	r28, 0x042D	; 0x80042d <Giro_Rate>
     852:	d0 91 2e 04 	lds	r29, 0x042E	; 0x80042e <Giro_Rate+0x1>
     856:	60 91 a9 02 	lds	r22, 0x02A9	; 0x8002a9 <Giro_loopTime>
     85a:	70 91 aa 02 	lds	r23, 0x02AA	; 0x8002aa <Giro_loopTime+0x1>
     85e:	80 91 ab 02 	lds	r24, 0x02AB	; 0x8002ab <Giro_loopTime+0x2>
     862:	90 91 ac 02 	lds	r25, 0x02AC	; 0x8002ac <Giro_loopTime+0x3>
     866:	0e 94 39 16 	call	0x2c72	; 0x2c72 <__floatunsisf>
     86a:	6b 01       	movw	r12, r22
     86c:	7c 01       	movw	r14, r24
     86e:	be 01       	movw	r22, r28
     870:	dd 0f       	add	r29, r29
     872:	88 0b       	sbc	r24, r24
     874:	99 0b       	sbc	r25, r25
     876:	0e 94 3b 16 	call	0x2c76	; 0x2c76 <__floatsisf>
     87a:	9b 01       	movw	r18, r22
     87c:	ac 01       	movw	r20, r24
     87e:	c7 01       	movw	r24, r14
     880:	b6 01       	movw	r22, r12
     882:	0e 94 1f 17 	call	0x2e3e	; 0x2e3e <__mulsf3>
     886:	20 e0       	ldi	r18, 0x00	; 0
     888:	30 e0       	ldi	r19, 0x00	; 0
     88a:	4a e7       	ldi	r20, 0x7A	; 122
     88c:	54 e4       	ldi	r21, 0x44	; 68
     88e:	0e 94 91 15 	call	0x2b22	; 0x2b22 <__divsf3>
     892:	60 93 25 04 	sts	0x0425, r22	; 0x800425 <Giro_Angle>
     896:	70 93 26 04 	sts	0x0426, r23	; 0x800426 <Giro_Angle+0x1>
     89a:	80 93 27 04 	sts	0x0427, r24	; 0x800427 <Giro_Angle+0x2>
     89e:	90 93 28 04 	sts	0x0428, r25	; 0x800428 <Giro_Angle+0x3>

    Giro_FilteredAngle = 0.9934*(Giro_PrevAngle + Giro_Angle) + 0.0066*(Giro_AccAngle);
     8a2:	60 91 1d 04 	lds	r22, 0x041D	; 0x80041d <Giro_PrevAngle>
     8a6:	70 91 1e 04 	lds	r23, 0x041E	; 0x80041e <Giro_PrevAngle+0x1>
     8aa:	80 91 1f 04 	lds	r24, 0x041F	; 0x80041f <Giro_PrevAngle+0x2>
     8ae:	90 91 20 04 	lds	r25, 0x0420	; 0x800420 <Giro_PrevAngle+0x3>
     8b2:	20 91 25 04 	lds	r18, 0x0425	; 0x800425 <Giro_Angle>
     8b6:	30 91 26 04 	lds	r19, 0x0426	; 0x800426 <Giro_Angle+0x1>
     8ba:	40 91 27 04 	lds	r20, 0x0427	; 0x800427 <Giro_Angle+0x2>
     8be:	50 91 28 04 	lds	r21, 0x0428	; 0x800428 <Giro_Angle+0x3>
     8c2:	80 90 29 04 	lds	r8, 0x0429	; 0x800429 <Giro_AccAngle>
     8c6:	90 90 2a 04 	lds	r9, 0x042A	; 0x80042a <Giro_AccAngle+0x1>
     8ca:	a0 90 2b 04 	lds	r10, 0x042B	; 0x80042b <Giro_AccAngle+0x2>
     8ce:	b0 90 2c 04 	lds	r11, 0x042C	; 0x80042c <Giro_AccAngle+0x3>
     8d2:	0e 94 ae 14 	call	0x295c	; 0x295c <__addsf3>
     8d6:	26 e7       	ldi	r18, 0x76	; 118
     8d8:	3f e4       	ldi	r19, 0x4F	; 79
     8da:	4e e7       	ldi	r20, 0x7E	; 126
     8dc:	5f e3       	ldi	r21, 0x3F	; 63
     8de:	0e 94 1f 17 	call	0x2e3e	; 0x2e3e <__mulsf3>
     8e2:	6b 01       	movw	r12, r22
     8e4:	7c 01       	movw	r14, r24
     8e6:	20 ed       	ldi	r18, 0xD0	; 208
     8e8:	34 e4       	ldi	r19, 0x44	; 68
     8ea:	48 ed       	ldi	r20, 0xD8	; 216
     8ec:	5b e3       	ldi	r21, 0x3B	; 59
     8ee:	c5 01       	movw	r24, r10
     8f0:	b4 01       	movw	r22, r8
     8f2:	0e 94 1f 17 	call	0x2e3e	; 0x2e3e <__mulsf3>
     8f6:	9b 01       	movw	r18, r22
     8f8:	ac 01       	movw	r20, r24
     8fa:	c7 01       	movw	r24, r14
     8fc:	b6 01       	movw	r22, r12
     8fe:	0e 94 ae 14 	call	0x295c	; 0x295c <__addsf3>
     902:	60 93 21 04 	sts	0x0421, r22	; 0x800421 <Giro_FilteredAngle>
     906:	70 93 22 04 	sts	0x0422, r23	; 0x800422 <Giro_FilteredAngle+0x1>
     90a:	80 93 23 04 	sts	0x0423, r24	; 0x800423 <Giro_FilteredAngle+0x2>
     90e:	90 93 24 04 	sts	0x0424, r25	; 0x800424 <Giro_FilteredAngle+0x3>

    Giro_PrevAngle = Giro_FilteredAngle;
     912:	80 91 21 04 	lds	r24, 0x0421	; 0x800421 <Giro_FilteredAngle>
     916:	90 91 22 04 	lds	r25, 0x0422	; 0x800422 <Giro_FilteredAngle+0x1>
     91a:	a0 91 23 04 	lds	r26, 0x0423	; 0x800423 <Giro_FilteredAngle+0x2>
     91e:	b0 91 24 04 	lds	r27, 0x0424	; 0x800424 <Giro_FilteredAngle+0x3>
     922:	80 93 1d 04 	sts	0x041D, r24	; 0x80041d <Giro_PrevAngle>
     926:	90 93 1e 04 	sts	0x041E, r25	; 0x80041e <Giro_PrevAngle+0x1>
     92a:	a0 93 1f 04 	sts	0x041F, r26	; 0x80041f <Giro_PrevAngle+0x2>
     92e:	b0 93 20 04 	sts	0x0420, r27	; 0x800420 <Giro_PrevAngle+0x3>

    Giro_PidCtl.Input=-Giro_FilteredAngle;
     932:	80 91 21 04 	lds	r24, 0x0421	; 0x800421 <Giro_FilteredAngle>
     936:	90 91 22 04 	lds	r25, 0x0422	; 0x800422 <Giro_FilteredAngle+0x1>
     93a:	a0 91 23 04 	lds	r26, 0x0423	; 0x800423 <Giro_FilteredAngle+0x2>
     93e:	b0 91 24 04 	lds	r27, 0x0424	; 0x800424 <Giro_FilteredAngle+0x3>
     942:	b0 58       	subi	r27, 0x80	; 128
     944:	80 93 d2 03 	sts	0x03D2, r24	; 0x8003d2 <Giro_PidCtl+0x15>
     948:	90 93 d3 03 	sts	0x03D3, r25	; 0x8003d3 <Giro_PidCtl+0x16>
     94c:	a0 93 d4 03 	sts	0x03D4, r26	; 0x8003d4 <Giro_PidCtl+0x17>
     950:	b0 93 d5 03 	sts	0x03D5, r27	; 0x8003d5 <Giro_PidCtl+0x18>

}
     954:	0f 90       	pop	r0
     956:	0f 90       	pop	r0
     958:	0f 90       	pop	r0
     95a:	0f 90       	pop	r0
     95c:	df 91       	pop	r29
     95e:	cf 91       	pop	r28
     960:	1f 91       	pop	r17
     962:	0f 91       	pop	r16
     964:	ff 90       	pop	r15
     966:	ef 90       	pop	r14
     968:	df 90       	pop	r13
     96a:	cf 90       	pop	r12
     96c:	bf 90       	pop	r11
     96e:	af 90       	pop	r10
     970:	9f 90       	pop	r9
     972:	8f 90       	pop	r8
     974:	08 95       	ret

00000976 <_Z16PrintGiroRawDatav>:

void PrintGiroRawData()
{
    Serial.print("GRD: ");
     976:	67 ec       	ldi	r22, 0xC7	; 199
     978:	71 e0       	ldi	r23, 0x01	; 1
     97a:	87 e3       	ldi	r24, 0x37	; 55
     97c:	95 e0       	ldi	r25, 0x05	; 5
     97e:	0e 94 a8 19 	call	0x3350	; 0x3350 <_ZN5Print5printEPKc>
    Serial.print(Giro_AccY);
     982:	60 91 33 04 	lds	r22, 0x0433	; 0x800433 <Giro_AccY>
     986:	70 91 34 04 	lds	r23, 0x0434	; 0x800434 <Giro_AccY+0x1>
     98a:	4a e0       	ldi	r20, 0x0A	; 10
     98c:	50 e0       	ldi	r21, 0x00	; 0
     98e:	87 e3       	ldi	r24, 0x37	; 55
     990:	95 e0       	ldi	r25, 0x05	; 5
     992:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <_ZN5Print5printEii>
    Serial.print(" ");
     996:	64 e1       	ldi	r22, 0x14	; 20
     998:	71 e0       	ldi	r23, 0x01	; 1
     99a:	87 e3       	ldi	r24, 0x37	; 55
     99c:	95 e0       	ldi	r25, 0x05	; 5
     99e:	0e 94 a8 19 	call	0x3350	; 0x3350 <_ZN5Print5printEPKc>
    Serial.print(Giro_AccZ);
     9a2:	60 91 31 04 	lds	r22, 0x0431	; 0x800431 <Giro_AccZ>
     9a6:	70 91 32 04 	lds	r23, 0x0432	; 0x800432 <Giro_AccZ+0x1>
     9aa:	4a e0       	ldi	r20, 0x0A	; 10
     9ac:	50 e0       	ldi	r21, 0x00	; 0
     9ae:	87 e3       	ldi	r24, 0x37	; 55
     9b0:	95 e0       	ldi	r25, 0x05	; 5
     9b2:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <_ZN5Print5printEii>
    Serial.print(" ");
     9b6:	64 e1       	ldi	r22, 0x14	; 20
     9b8:	71 e0       	ldi	r23, 0x01	; 1
     9ba:	87 e3       	ldi	r24, 0x37	; 55
     9bc:	95 e0       	ldi	r25, 0x05	; 5
     9be:	0e 94 a8 19 	call	0x3350	; 0x3350 <_ZN5Print5printEPKc>
    Serial.print(Giro_RotX);
     9c2:	60 91 2f 04 	lds	r22, 0x042F	; 0x80042f <Giro_RotX>
     9c6:	70 91 30 04 	lds	r23, 0x0430	; 0x800430 <Giro_RotX+0x1>
     9ca:	4a e0       	ldi	r20, 0x0A	; 10
     9cc:	50 e0       	ldi	r21, 0x00	; 0
     9ce:	87 e3       	ldi	r24, 0x37	; 55
     9d0:	95 e0       	ldi	r25, 0x05	; 5
     9d2:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <_ZN5Print5printEii>

    Serial.println(" ");
     9d6:	64 e1       	ldi	r22, 0x14	; 20
     9d8:	71 e0       	ldi	r23, 0x01	; 1
     9da:	87 e3       	ldi	r24, 0x37	; 55
     9dc:	95 e0       	ldi	r25, 0x05	; 5
     9de:	0c 94 b5 19 	jmp	0x336a	; 0x336a <_ZN5Print7printlnEPKc>

000009e2 <_Z26PrintGiroInputOutputValuesv>:
}

void PrintGiroInputOutputValues()
{
     9e2:	cf 93       	push	r28
     9e4:	df 93       	push	r29
    Serial.print("GIO: ");
     9e6:	6d ec       	ldi	r22, 0xCD	; 205
     9e8:	71 e0       	ldi	r23, 0x01	; 1
     9ea:	87 e3       	ldi	r24, 0x37	; 55
     9ec:	95 e0       	ldi	r25, 0x05	; 5
     9ee:	0e 94 a8 19 	call	0x3350	; 0x3350 <_ZN5Print5printEPKc>
    Serial.print(Giro_PidCtl.Input);
     9f2:	cd eb       	ldi	r28, 0xBD	; 189
     9f4:	d3 e0       	ldi	r29, 0x03	; 3
     9f6:	4d 89       	ldd	r20, Y+21	; 0x15
     9f8:	5e 89       	ldd	r21, Y+22	; 0x16
     9fa:	6f 89       	ldd	r22, Y+23	; 0x17
     9fc:	78 8d       	ldd	r23, Y+24	; 0x18
     9fe:	22 e0       	ldi	r18, 0x02	; 2
     a00:	30 e0       	ldi	r19, 0x00	; 0
     a02:	87 e3       	ldi	r24, 0x37	; 55
     a04:	95 e0       	ldi	r25, 0x05	; 5
     a06:	0e 94 5f 1b 	call	0x36be	; 0x36be <_ZN5Print5printEdi>
    Serial.print(" ");
     a0a:	64 e1       	ldi	r22, 0x14	; 20
     a0c:	71 e0       	ldi	r23, 0x01	; 1
     a0e:	87 e3       	ldi	r24, 0x37	; 55
     a10:	95 e0       	ldi	r25, 0x05	; 5
     a12:	0e 94 a8 19 	call	0x3350	; 0x3350 <_ZN5Print5printEPKc>
    Serial.print(Giro_PidCtl.Output);
     a16:	49 8d       	ldd	r20, Y+25	; 0x19
     a18:	5a 8d       	ldd	r21, Y+26	; 0x1a
     a1a:	6b 8d       	ldd	r22, Y+27	; 0x1b
     a1c:	7c 8d       	ldd	r23, Y+28	; 0x1c
     a1e:	22 e0       	ldi	r18, 0x02	; 2
     a20:	30 e0       	ldi	r19, 0x00	; 0
     a22:	87 e3       	ldi	r24, 0x37	; 55
     a24:	95 e0       	ldi	r25, 0x05	; 5
     a26:	0e 94 5f 1b 	call	0x36be	; 0x36be <_ZN5Print5printEdi>

    Serial.println(" ");
     a2a:	64 e1       	ldi	r22, 0x14	; 20
     a2c:	71 e0       	ldi	r23, 0x01	; 1
     a2e:	87 e3       	ldi	r24, 0x37	; 55
     a30:	95 e0       	ldi	r25, 0x05	; 5
}
     a32:	df 91       	pop	r29
     a34:	cf 91       	pop	r28
    Serial.print("GIO: ");
    Serial.print(Giro_PidCtl.Input);
    Serial.print(" ");
    Serial.print(Giro_PidCtl.Output);

    Serial.println(" ");
     a36:	0c 94 b5 19 	jmp	0x336a	; 0x336a <_ZN5Print7printlnEPKc>

00000a3a <setup>:
}



void setup()
{
     a3a:	0f 93       	push	r16
     a3c:	1f 93       	push	r17
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     a3e:	26 e0       	ldi	r18, 0x06	; 6
     a40:	40 e9       	ldi	r20, 0x90	; 144
     a42:	50 ed       	ldi	r21, 0xD0	; 208
     a44:	63 e0       	ldi	r22, 0x03	; 3
     a46:	70 e0       	ldi	r23, 0x00	; 0
     a48:	87 e3       	ldi	r24, 0x37	; 55
     a4a:	95 e0       	ldi	r25, 0x05	; 5
     a4c:	0e 94 65 18 	call	0x30ca	; 0x30ca <_ZN14HardwareSerial5beginEmh>
    Serial.begin(250000);
    Serial.println("Setup:Serial Initialized");
     a50:	63 ed       	ldi	r22, 0xD3	; 211
     a52:	71 e0       	ldi	r23, 0x01	; 1
     a54:	87 e3       	ldi	r24, 0x37	; 55
     a56:	95 e0       	ldi	r25, 0x05	; 5
     a58:	0e 94 b5 19 	call	0x336a	; 0x336a <_ZN5Print7printlnEPKc>

    //CalibSetup();
    //Sensor readings with offsets:	-3	-5	16388	0	2	-1
    //Your offsets:	501	1553	1320	150	-6	19
    //Data is printed as: acelX acelY acelZ giroX giroY giroZ
    mpu.initialize();
     a5c:	85 e3       	ldi	r24, 0x35	; 53
     a5e:	94 e0       	ldi	r25, 0x04	; 4
     a60:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <_ZN7MPU605010initializeEv>
    mpu.setXAccelOffset(501);
     a64:	65 ef       	ldi	r22, 0xF5	; 245
     a66:	71 e0       	ldi	r23, 0x01	; 1
     a68:	85 e3       	ldi	r24, 0x35	; 53
     a6a:	94 e0       	ldi	r25, 0x04	; 4
     a6c:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <_ZN7MPU605015setXAccelOffsetEi>
    mpu.setYAccelOffset(1553);
     a70:	61 e1       	ldi	r22, 0x11	; 17
     a72:	76 e0       	ldi	r23, 0x06	; 6
     a74:	85 e3       	ldi	r24, 0x35	; 53
     a76:	94 e0       	ldi	r25, 0x04	; 4
     a78:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <_ZN7MPU605015setYAccelOffsetEi>
    mpu.setZAccelOffset(1320);
     a7c:	68 e2       	ldi	r22, 0x28	; 40
     a7e:	75 e0       	ldi	r23, 0x05	; 5
     a80:	85 e3       	ldi	r24, 0x35	; 53
     a82:	94 e0       	ldi	r25, 0x04	; 4
     a84:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <_ZN7MPU605015setZAccelOffsetEi>
    mpu.setXGyroOffset(150);
     a88:	66 e9       	ldi	r22, 0x96	; 150
     a8a:	70 e0       	ldi	r23, 0x00	; 0
     a8c:	85 e3       	ldi	r24, 0x35	; 53
     a8e:	94 e0       	ldi	r25, 0x04	; 4
     a90:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <_ZN7MPU605014setXGyroOffsetEi>
    mpu.setYGyroOffset(-6);
     a94:	6a ef       	ldi	r22, 0xFA	; 250
     a96:	7f ef       	ldi	r23, 0xFF	; 255
     a98:	85 e3       	ldi	r24, 0x35	; 53
     a9a:	94 e0       	ldi	r25, 0x04	; 4
     a9c:	0e 94 fe 0e 	call	0x1dfc	; 0x1dfc <_ZN7MPU605014setYGyroOffsetEi>
    mpu.setZGyroOffset(19);
     aa0:	63 e1       	ldi	r22, 0x13	; 19
     aa2:	70 e0       	ldi	r23, 0x00	; 0
     aa4:	85 e3       	ldi	r24, 0x35	; 53
     aa6:	94 e0       	ldi	r25, 0x04	; 4
     aa8:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <_ZN7MPU605014setZGyroOffsetEi>
    Serial.println("Setup: Mpu6050 Initialized");
     aac:	6c ee       	ldi	r22, 0xEC	; 236
     aae:	71 e0       	ldi	r23, 0x01	; 1
     ab0:	87 e3       	ldi	r24, 0x37	; 55
     ab2:	95 e0       	ldi	r25, 0x05	; 5
     ab4:	0e 94 b5 19 	call	0x336a	; 0x336a <_ZN5Print7printlnEPKc>

    Mot0_Init();
     ab8:	0e 94 d4 12 	call	0x25a8	; 0x25a8 <_Z9Mot0_Initv>
    Mot1_Init();
     abc:	0e 94 e7 12 	call	0x25ce	; 0x25ce <_Z9Mot1_Initv>
    Motors_SetSpeed(0,0);
     ac0:	60 e0       	ldi	r22, 0x00	; 0
     ac2:	70 e0       	ldi	r23, 0x00	; 0
     ac4:	80 e0       	ldi	r24, 0x00	; 0
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	0e 94 1f 13 	call	0x263e	; 0x263e <_Z15Motors_SetSpeedii>
    Serial.println("Setup: Motors Initialized");
     acc:	67 e0       	ldi	r22, 0x07	; 7
     ace:	72 e0       	ldi	r23, 0x02	; 2
     ad0:	87 e3       	ldi	r24, 0x37	; 55
     ad2:	95 e0       	ldi	r25, 0x05	; 5
     ad4:	0e 94 b5 19 	call	0x336a	; 0x336a <_ZN5Print7printlnEPKc>

    Enc_Init();
     ad8:	0e 94 3e 13 	call	0x267c	; 0x267c <_Z8Enc_Initv>
    Serial.println("Setup: Encoders Initialized");
     adc:	61 e2       	ldi	r22, 0x21	; 33
     ade:	72 e0       	ldi	r23, 0x02	; 2
     ae0:	87 e3       	ldi	r24, 0x37	; 55
     ae2:	95 e0       	ldi	r25, 0x05	; 5
     ae4:	0e 94 b5 19 	call	0x336a	; 0x336a <_ZN5Print7printlnEPKc>

    PrintPidCfg(&Mot0_PidCtl);
     ae8:	87 ef       	ldi	r24, 0xF7	; 247
     aea:	93 e0       	ldi	r25, 0x03	; 3
     aec:	0e 94 d6 00 	call	0x1ac	; 0x1ac <_Z11PrintPidCfgP11PIDConfig_e>
    PrintPidCfg(&Mot1_PidCtl);
     af0:	8a ed       	ldi	r24, 0xDA	; 218
     af2:	93 e0       	ldi	r25, 0x03	; 3
     af4:	0e 94 d6 00 	call	0x1ac	; 0x1ac <_Z11PrintPidCfgP11PIDConfig_e>
    PrintPidCfg(&Giro_PidCtl);
     af8:	8d eb       	ldi	r24, 0xBD	; 189
     afa:	93 e0       	ldi	r25, 0x03	; 3
     afc:	0e 94 d6 00 	call	0x1ac	; 0x1ac <_Z11PrintPidCfgP11PIDConfig_e>

    Mot0_Pid.SetSampleTime(PID__MOTOR_SAMPLE_TIME);
     b00:	65 e0       	ldi	r22, 0x05	; 5
     b02:	70 e0       	ldi	r23, 0x00	; 0
     b04:	81 e8       	ldi	r24, 0x81	; 129
     b06:	93 e0       	ldi	r25, 0x03	; 3
     b08:	0e 94 b1 0a 	call	0x1562	; 0x1562 <_ZN3PID13SetSampleTimeEi>
    Mot0_Pid.SetOutputLimits(-255,255);
     b0c:	00 e0       	ldi	r16, 0x00	; 0
     b0e:	10 e0       	ldi	r17, 0x00	; 0
     b10:	2f e7       	ldi	r18, 0x7F	; 127
     b12:	33 e4       	ldi	r19, 0x43	; 67
     b14:	40 e0       	ldi	r20, 0x00	; 0
     b16:	50 e0       	ldi	r21, 0x00	; 0
     b18:	6f e7       	ldi	r22, 0x7F	; 127
     b1a:	73 ec       	ldi	r23, 0xC3	; 195
     b1c:	81 e8       	ldi	r24, 0x81	; 129
     b1e:	93 e0       	ldi	r25, 0x03	; 3
     b20:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <_ZN3PID15SetOutputLimitsEdd>
    Mot0_Pid.SetMode(AUTOMATIC);
     b24:	61 e0       	ldi	r22, 0x01	; 1
     b26:	70 e0       	ldi	r23, 0x00	; 0
     b28:	81 e8       	ldi	r24, 0x81	; 129
     b2a:	93 e0       	ldi	r25, 0x03	; 3
     b2c:	0e 94 c5 0b 	call	0x178a	; 0x178a <_ZN3PID7SetModeEi>

    Mot1_Pid.SetSampleTime(PID__MOTOR_SAMPLE_TIME);
     b30:	65 e0       	ldi	r22, 0x05	; 5
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	85 e4       	ldi	r24, 0x45	; 69
     b36:	93 e0       	ldi	r25, 0x03	; 3
     b38:	0e 94 b1 0a 	call	0x1562	; 0x1562 <_ZN3PID13SetSampleTimeEi>
    Mot1_Pid.SetOutputLimits(-255,255);
     b3c:	00 e0       	ldi	r16, 0x00	; 0
     b3e:	10 e0       	ldi	r17, 0x00	; 0
     b40:	2f e7       	ldi	r18, 0x7F	; 127
     b42:	33 e4       	ldi	r19, 0x43	; 67
     b44:	40 e0       	ldi	r20, 0x00	; 0
     b46:	50 e0       	ldi	r21, 0x00	; 0
     b48:	6f e7       	ldi	r22, 0x7F	; 127
     b4a:	73 ec       	ldi	r23, 0xC3	; 195
     b4c:	85 e4       	ldi	r24, 0x45	; 69
     b4e:	93 e0       	ldi	r25, 0x03	; 3
     b50:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <_ZN3PID15SetOutputLimitsEdd>
    Mot1_Pid.SetMode(AUTOMATIC);
     b54:	61 e0       	ldi	r22, 0x01	; 1
     b56:	70 e0       	ldi	r23, 0x00	; 0
     b58:	85 e4       	ldi	r24, 0x45	; 69
     b5a:	93 e0       	ldi	r25, 0x03	; 3
     b5c:	0e 94 c5 0b 	call	0x178a	; 0x178a <_ZN3PID7SetModeEi>

    Giro_Pid.SetSampleTime(PID__MOTOR_SAMPLE_TIME);
     b60:	65 e0       	ldi	r22, 0x05	; 5
     b62:	70 e0       	ldi	r23, 0x00	; 0
     b64:	89 e0       	ldi	r24, 0x09	; 9
     b66:	93 e0       	ldi	r25, 0x03	; 3
     b68:	0e 94 b1 0a 	call	0x1562	; 0x1562 <_ZN3PID13SetSampleTimeEi>

    Giro_Pid.SetMode(AUTOMATIC);
     b6c:	61 e0       	ldi	r22, 0x01	; 1
     b6e:	70 e0       	ldi	r23, 0x00	; 0
     b70:	89 e0       	ldi	r24, 0x09	; 9
     b72:	93 e0       	ldi	r25, 0x03	; 3
     b74:	0e 94 c5 0b 	call	0x178a	; 0x178a <_ZN3PID7SetModeEi>

#ifndef DOUBLE_ENC_INT
    Giro_Pid.SetOutputLimits(-39,39); //min and max enc speed for a sample time of 10 ms
#else
    Giro_Pid.SetOutputLimits(-39,39); //min and max enc speed for a sample time of 10 ms
     b78:	00 e0       	ldi	r16, 0x00	; 0
     b7a:	10 e0       	ldi	r17, 0x00	; 0
     b7c:	2c e1       	ldi	r18, 0x1C	; 28
     b7e:	32 e4       	ldi	r19, 0x42	; 66
     b80:	40 e0       	ldi	r20, 0x00	; 0
     b82:	50 e0       	ldi	r21, 0x00	; 0
     b84:	6c e1       	ldi	r22, 0x1C	; 28
     b86:	72 ec       	ldi	r23, 0xC2	; 194
     b88:	89 e0       	ldi	r24, 0x09	; 9
     b8a:	93 e0       	ldi	r25, 0x03	; 3
     b8c:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <_ZN3PID15SetOutputLimitsEdd>
#endif

    Serial.println("Setup: Pids initialized");
     b90:	6d e3       	ldi	r22, 0x3D	; 61
     b92:	72 e0       	ldi	r23, 0x02	; 2
     b94:	87 e3       	ldi	r24, 0x37	; 55
     b96:	95 e0       	ldi	r25, 0x05	; 5
     b98:	0e 94 b5 19 	call	0x336a	; 0x336a <_ZN5Print7printlnEPKc>

    Serial.println("Setup: Done");
     b9c:	65 e5       	ldi	r22, 0x55	; 85
     b9e:	72 e0       	ldi	r23, 0x02	; 2
     ba0:	87 e3       	ldi	r24, 0x37	; 55
     ba2:	95 e0       	ldi	r25, 0x05	; 5
}
     ba4:	1f 91       	pop	r17
     ba6:	0f 91       	pop	r16
    Giro_Pid.SetOutputLimits(-39,39); //min and max enc speed for a sample time of 10 ms
#endif

    Serial.println("Setup: Pids initialized");

    Serial.println("Setup: Done");
     ba8:	0c 94 b5 19 	jmp	0x336a	; 0x336a <_ZN5Print7printlnEPKc>

00000bac <_GLOBAL__sub_I_sonar>:
            Serial.print("MC: ");
            Serial.println(loopTime);
        }


}
     bac:	7f 92       	push	r7
     bae:	8f 92       	push	r8
     bb0:	9f 92       	push	r9
     bb2:	af 92       	push	r10
     bb4:	bf 92       	push	r11
     bb6:	cf 92       	push	r12
     bb8:	df 92       	push	r13
     bba:	ef 92       	push	r14
     bbc:	ff 92       	push	r15
     bbe:	0f 93       	push	r16
     bc0:	1f 93       	push	r17
     bc2:	cf 93       	push	r28
     bc4:	df 93       	push	r29
#include "Configs.h"

#define TRIGGER_PIN 9
#define ECHO_PIN 8
#define MAX_DISTANCE 75
NewPing sonar(TRIGGER_PIN, ECHO_PIN, MAX_DISTANCE);
     bc6:	2b e4       	ldi	r18, 0x4B	; 75
     bc8:	30 e0       	ldi	r19, 0x00	; 0
     bca:	48 e0       	ldi	r20, 0x08	; 8
     bcc:	69 e0       	ldi	r22, 0x09	; 9
     bce:	84 e4       	ldi	r24, 0x44	; 68
     bd0:	94 e0       	ldi	r25, 0x04	; 4
     bd2:	0e 94 1c 0f 	call	0x1e38	; 0x1e38 <_ZN7NewPingC1Ehhj>

MPU6050 mpu;
     bd6:	85 e3       	ldi	r24, 0x35	; 53
     bd8:	94 e0       	ldi	r25, 0x04	; 4
     bda:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <_ZN7MPU6050C1Ev>
    double Input;
    double Output;

    PIDConfig_e(char* name, double kp, double ki, double kd, double setpoint)
    {
        strcpy(Name, name);
     bde:	65 e3       	ldi	r22, 0x35	; 53
     be0:	71 e0       	ldi	r23, 0x01	; 1
     be2:	87 ef       	ldi	r24, 0xF7	; 247
     be4:	93 e0       	ldi	r25, 0x03	; 3
     be6:	0e 94 15 1d 	call	0x3a2a	; 0x3a2a <strcpy>
        Kp=kp;
     bea:	e7 ef       	ldi	r30, 0xF7	; 247
     bec:	f3 e0       	ldi	r31, 0x03	; 3
     bee:	c1 2c       	mov	r12, r1
     bf0:	d1 2c       	mov	r13, r1
     bf2:	80 ea       	ldi	r24, 0xA0	; 160
     bf4:	e8 2e       	mov	r14, r24
     bf6:	81 e4       	ldi	r24, 0x41	; 65
     bf8:	f8 2e       	mov	r15, r24
     bfa:	c5 82       	std	Z+5, r12	; 0x05
     bfc:	d6 82       	std	Z+6, r13	; 0x06
     bfe:	e7 82       	std	Z+7, r14	; 0x07
     c00:	f0 86       	std	Z+8, r15	; 0x08
        Kd=kd;
     c02:	15 86       	std	Z+13, r1	; 0x0d
     c04:	16 86       	std	Z+14, r1	; 0x0e
     c06:	17 86       	std	Z+15, r1	; 0x0f
     c08:	10 8a       	std	Z+16, r1	; 0x10
        Ki=ki;
     c0a:	c1 86       	std	Z+9, r12	; 0x09
     c0c:	d2 86       	std	Z+10, r13	; 0x0a
     c0e:	e3 86       	std	Z+11, r14	; 0x0b
     c10:	f4 86       	std	Z+12, r15	; 0x0c
        Setpoint=setpoint;
     c12:	11 8a       	std	Z+17, r1	; 0x11
     c14:	12 8a       	std	Z+18, r1	; 0x12
     c16:	13 8a       	std	Z+19, r1	; 0x13
     c18:	14 8a       	std	Z+20, r1	; 0x14
    double Input;
    double Output;

    PIDConfig_e(char* name, double kp, double ki, double kd, double setpoint)
    {
        strcpy(Name, name);
     c1a:	68 e3       	ldi	r22, 0x38	; 56
     c1c:	71 e0       	ldi	r23, 0x01	; 1
     c1e:	8a ed       	ldi	r24, 0xDA	; 218
     c20:	93 e0       	ldi	r25, 0x03	; 3
     c22:	0e 94 15 1d 	call	0x3a2a	; 0x3a2a <strcpy>
        Kp=kp;
     c26:	9a ed       	ldi	r25, 0xDA	; 218
     c28:	89 2e       	mov	r8, r25
     c2a:	93 e0       	ldi	r25, 0x03	; 3
     c2c:	99 2e       	mov	r9, r25
     c2e:	f4 01       	movw	r30, r8
     c30:	c5 82       	std	Z+5, r12	; 0x05
     c32:	d6 82       	std	Z+6, r13	; 0x06
     c34:	e7 82       	std	Z+7, r14	; 0x07
     c36:	f0 86       	std	Z+8, r15	; 0x08
        Kd=kd;
     c38:	15 86       	std	Z+13, r1	; 0x0d
     c3a:	16 86       	std	Z+14, r1	; 0x0e
     c3c:	17 86       	std	Z+15, r1	; 0x0f
     c3e:	10 8a       	std	Z+16, r1	; 0x10
        Ki=ki;
     c40:	c1 86       	std	Z+9, r12	; 0x09
     c42:	d2 86       	std	Z+10, r13	; 0x0a
     c44:	e3 86       	std	Z+11, r14	; 0x0b
     c46:	f4 86       	std	Z+12, r15	; 0x0c
        Setpoint=setpoint;
     c48:	11 8a       	std	Z+17, r1	; 0x11
     c4a:	12 8a       	std	Z+18, r1	; 0x12
     c4c:	13 8a       	std	Z+19, r1	; 0x13
     c4e:	14 8a       	std	Z+20, r1	; 0x14
    double Input;
    double Output;

    PIDConfig_e(char* name, double kp, double ki, double kd, double setpoint)
    {
        strcpy(Name, name);
     c50:	6b e3       	ldi	r22, 0x3B	; 59
     c52:	71 e0       	ldi	r23, 0x01	; 1
     c54:	8d eb       	ldi	r24, 0xBD	; 189
     c56:	93 e0       	ldi	r25, 0x03	; 3
     c58:	0e 94 15 1d 	call	0x3a2a	; 0x3a2a <strcpy>
        Kp=kp;
     c5c:	cd eb       	ldi	r28, 0xBD	; 189
     c5e:	d3 e0       	ldi	r29, 0x03	; 3
     c60:	80 e0       	ldi	r24, 0x00	; 0
     c62:	90 e0       	ldi	r25, 0x00	; 0
     c64:	a0 e8       	ldi	r26, 0x80	; 128
     c66:	bf e3       	ldi	r27, 0x3F	; 63
     c68:	8d 83       	std	Y+5, r24	; 0x05
     c6a:	9e 83       	std	Y+6, r25	; 0x06
     c6c:	af 83       	std	Y+7, r26	; 0x07
     c6e:	b8 87       	std	Y+8, r27	; 0x08
        Kd=kd;
     c70:	1d 86       	std	Y+13, r1	; 0x0d
     c72:	1e 86       	std	Y+14, r1	; 0x0e
     c74:	1f 86       	std	Y+15, r1	; 0x0f
     c76:	18 8a       	std	Y+16, r1	; 0x10
        Ki=ki;
     c78:	80 e0       	ldi	r24, 0x00	; 0
     c7a:	90 e0       	ldi	r25, 0x00	; 0
     c7c:	a0 e0       	ldi	r26, 0x00	; 0
     c7e:	bf e3       	ldi	r27, 0x3F	; 63
     c80:	89 87       	std	Y+9, r24	; 0x09
     c82:	9a 87       	std	Y+10, r25	; 0x0a
     c84:	ab 87       	std	Y+11, r26	; 0x0b
     c86:	bc 87       	std	Y+12, r27	; 0x0c
        Setpoint=setpoint;
     c88:	80 e0       	ldi	r24, 0x00	; 0
     c8a:	90 e0       	ldi	r25, 0x00	; 0
     c8c:	a0 e8       	ldi	r26, 0x80	; 128
     c8e:	bf eb       	ldi	r27, 0xBF	; 191
     c90:	89 8b       	std	Y+17, r24	; 0x11
     c92:	9a 8b       	std	Y+18, r25	; 0x12
     c94:	ab 8b       	std	Y+19, r26	; 0x13
     c96:	bc 8b       	std	Y+20, r27	; 0x14
PIDConfig_e Mot1_PidCtl ("M1",40,220,0,0);
#endif

PIDConfig_e Giro_PidCtl ("Gi",1,0.5,0,targetAngle);

PID Mot0_Pid(&Mot0_PidCtl.Input, &Mot0_PidCtl.Output, &Mot0_PidCtl.Setpoint, Mot0_PidCtl.Kp, Mot0_PidCtl.Ki, Mot0_PidCtl.Kd, P_ON_E, DIRECT);
     c98:	1f 92       	push	r1
     c9a:	1f 92       	push	r1
     c9c:	1f 92       	push	r1
     c9e:	77 24       	eor	r7, r7
     ca0:	73 94       	inc	r7
     ca2:	7f 92       	push	r7
     ca4:	1f 92       	push	r1
     ca6:	1f 92       	push	r1
     ca8:	1f 92       	push	r1
     caa:	1f 92       	push	r1
     cac:	56 01       	movw	r10, r12
     cae:	67 01       	movw	r12, r14
     cb0:	86 01       	movw	r16, r12
     cb2:	75 01       	movw	r14, r10
     cb4:	28 e0       	ldi	r18, 0x08	; 8
     cb6:	34 e0       	ldi	r19, 0x04	; 4
     cb8:	40 e1       	ldi	r20, 0x10	; 16
     cba:	54 e0       	ldi	r21, 0x04	; 4
     cbc:	6c e0       	ldi	r22, 0x0C	; 12
     cbe:	74 e0       	ldi	r23, 0x04	; 4
     cc0:	81 e8       	ldi	r24, 0x81	; 129
     cc2:	93 e0       	ldi	r25, 0x03	; 3
     cc4:	0e 94 18 0c 	call	0x1830	; 0x1830 <_ZN3PIDC1EPdS0_S0_dddii>
PID Mot1_Pid(&Mot1_PidCtl.Input, &Mot1_PidCtl.Output, &Mot1_PidCtl.Setpoint, Mot1_PidCtl.Kp, Mot1_PidCtl.Ki, Mot1_PidCtl.Kd, P_ON_E, DIRECT);
     cc8:	f4 01       	movw	r30, r8
     cca:	a1 84       	ldd	r10, Z+9	; 0x09
     ccc:	b2 84       	ldd	r11, Z+10	; 0x0a
     cce:	c3 84       	ldd	r12, Z+11	; 0x0b
     cd0:	d4 84       	ldd	r13, Z+12	; 0x0c
     cd2:	e5 80       	ldd	r14, Z+5	; 0x05
     cd4:	f6 80       	ldd	r15, Z+6	; 0x06
     cd6:	07 81       	ldd	r16, Z+7	; 0x07
     cd8:	10 85       	ldd	r17, Z+8	; 0x08
     cda:	1f 92       	push	r1
     cdc:	1f 92       	push	r1
     cde:	1f 92       	push	r1
     ce0:	7f 92       	push	r7
     ce2:	80 89       	ldd	r24, Z+16	; 0x10
     ce4:	8f 93       	push	r24
     ce6:	87 85       	ldd	r24, Z+15	; 0x0f
     ce8:	8f 93       	push	r24
     cea:	86 85       	ldd	r24, Z+14	; 0x0e
     cec:	8f 93       	push	r24
     cee:	85 85       	ldd	r24, Z+13	; 0x0d
     cf0:	8f 93       	push	r24
     cf2:	2b ee       	ldi	r18, 0xEB	; 235
     cf4:	33 e0       	ldi	r19, 0x03	; 3
     cf6:	43 ef       	ldi	r20, 0xF3	; 243
     cf8:	53 e0       	ldi	r21, 0x03	; 3
     cfa:	6f ee       	ldi	r22, 0xEF	; 239
     cfc:	73 e0       	ldi	r23, 0x03	; 3
     cfe:	85 e4       	ldi	r24, 0x45	; 69
     d00:	93 e0       	ldi	r25, 0x03	; 3
     d02:	0e 94 18 0c 	call	0x1830	; 0x1830 <_ZN3PIDC1EPdS0_S0_dddii>
PID Giro_Pid(&Giro_PidCtl.Input, &Giro_PidCtl.Output, &Giro_PidCtl.Setpoint, Giro_PidCtl.Kp, Giro_PidCtl.Ki, Giro_PidCtl.Kd, P_ON_E, DIRECT);
     d06:	a9 84       	ldd	r10, Y+9	; 0x09
     d08:	ba 84       	ldd	r11, Y+10	; 0x0a
     d0a:	cb 84       	ldd	r12, Y+11	; 0x0b
     d0c:	dc 84       	ldd	r13, Y+12	; 0x0c
     d0e:	ed 80       	ldd	r14, Y+5	; 0x05
     d10:	fe 80       	ldd	r15, Y+6	; 0x06
     d12:	0f 81       	ldd	r16, Y+7	; 0x07
     d14:	18 85       	ldd	r17, Y+8	; 0x08
     d16:	1f 92       	push	r1
     d18:	1f 92       	push	r1
     d1a:	1f 92       	push	r1
     d1c:	7f 92       	push	r7
     d1e:	88 89       	ldd	r24, Y+16	; 0x10
     d20:	8f 93       	push	r24
     d22:	8f 85       	ldd	r24, Y+15	; 0x0f
     d24:	8f 93       	push	r24
     d26:	8e 85       	ldd	r24, Y+14	; 0x0e
     d28:	8f 93       	push	r24
     d2a:	8d 85       	ldd	r24, Y+13	; 0x0d
     d2c:	8f 93       	push	r24
     d2e:	2e ec       	ldi	r18, 0xCE	; 206
     d30:	33 e0       	ldi	r19, 0x03	; 3
     d32:	46 ed       	ldi	r20, 0xD6	; 214
     d34:	53 e0       	ldi	r21, 0x03	; 3
     d36:	62 ed       	ldi	r22, 0xD2	; 210
     d38:	73 e0       	ldi	r23, 0x03	; 3
     d3a:	89 e0       	ldi	r24, 0x09	; 9
     d3c:	93 e0       	ldi	r25, 0x03	; 3
     d3e:	0e 94 18 0c 	call	0x1830	; 0x1830 <_ZN3PIDC1EPdS0_S0_dddii>
            Serial.print("MC: ");
            Serial.println(loopTime);
        }


}
     d42:	8d b7       	in	r24, 0x3d	; 61
     d44:	9e b7       	in	r25, 0x3e	; 62
     d46:	48 96       	adiw	r24, 0x18	; 24
     d48:	0f b6       	in	r0, 0x3f	; 63
     d4a:	f8 94       	cli
     d4c:	9e bf       	out	0x3e, r25	; 62
     d4e:	0f be       	out	0x3f, r0	; 63
     d50:	8d bf       	out	0x3d, r24	; 61
     d52:	df 91       	pop	r29
     d54:	cf 91       	pop	r28
     d56:	1f 91       	pop	r17
     d58:	0f 91       	pop	r16
     d5a:	ff 90       	pop	r15
     d5c:	ef 90       	pop	r14
     d5e:	df 90       	pop	r13
     d60:	cf 90       	pop	r12
     d62:	bf 90       	pop	r11
     d64:	af 90       	pop	r10
     d66:	9f 90       	pop	r9
     d68:	8f 90       	pop	r8
     d6a:	7f 90       	pop	r7
     d6c:	08 95       	ret

00000d6e <_Z15Ser_ReceiveDatav>:
const char Ser_EndMarker = '\n';
char Ser_Buffer[Ser_BuffSize]; // an array to store the received data
boolean Ser_NewData = false;

void Ser_ReceiveData()
{
     d6e:	cf 93       	push	r28
     d70:	df 93       	push	r29
                }
            else
                {
                    Ser_Buffer[ndx] = '\0'; // terminate the string
                    ndx = 0;
                    Ser_NewData = true;
     d72:	c1 e0       	ldi	r28, 0x01	; 1
                {
                    Ser_Buffer[ndx] = rc;
                    ndx++;
                    if (ndx >= Ser_BuffSize)
                        {
                            ndx = Ser_BuffSize - 1;
     d74:	df e4       	ldi	r29, 0x4F	; 79
{
    static byte ndx = 0;
    char rc;

    // if (Serial.available() > 0) {
    while (Serial.available() > 0 && Ser_NewData == false)
     d76:	87 e3       	ldi	r24, 0x37	; 55
     d78:	95 e0       	ldi	r25, 0x05	; 5
     d7a:	0e 94 90 17 	call	0x2f20	; 0x2f20 <_ZN14HardwareSerial9availableEv>
     d7e:	18 16       	cp	r1, r24
     d80:	19 06       	cpc	r1, r25
     d82:	1c f5       	brge	.+70     	; 0xdca <_Z15Ser_ReceiveDatav+0x5c>
     d84:	80 91 b8 02 	lds	r24, 0x02B8	; 0x8002b8 <Ser_NewData>
     d88:	81 11       	cpse	r24, r1
     d8a:	1f c0       	rjmp	.+62     	; 0xdca <_Z15Ser_ReceiveDatav+0x5c>
        {
            rc = Serial.read();
     d8c:	87 e3       	ldi	r24, 0x37	; 55
     d8e:	95 e0       	ldi	r25, 0x05	; 5
     d90:	0e 94 aa 17 	call	0x2f54	; 0x2f54 <_ZN14HardwareSerial4readEv>
     d94:	e0 91 9c 02 	lds	r30, 0x029C	; 0x80029c <_ZZ15Ser_ReceiveDatavE3ndx>

            if (rc != Ser_EndMarker)
     d98:	8a 30       	cpi	r24, 0x0A	; 10
     d9a:	71 f0       	breq	.+28     	; 0xdb8 <_Z15Ser_ReceiveDatav+0x4a>
                {
                    Ser_Buffer[ndx] = rc;
     d9c:	ae 2f       	mov	r26, r30
     d9e:	b0 e0       	ldi	r27, 0x00	; 0
     da0:	a7 54       	subi	r26, 0x47	; 71
     da2:	bd 4f       	sbci	r27, 0xFD	; 253
     da4:	8c 93       	st	X, r24
                    ndx++;
     da6:	ef 5f       	subi	r30, 0xFF	; 255
                    if (ndx >= Ser_BuffSize)
     da8:	e0 35       	cpi	r30, 0x50	; 80
     daa:	18 f4       	brcc	.+6      	; 0xdb2 <_Z15Ser_ReceiveDatav+0x44>
            rc = Serial.read();

            if (rc != Ser_EndMarker)
                {
                    Ser_Buffer[ndx] = rc;
                    ndx++;
     dac:	e0 93 9c 02 	sts	0x029C, r30	; 0x80029c <_ZZ15Ser_ReceiveDatavE3ndx>
     db0:	e2 cf       	rjmp	.-60     	; 0xd76 <_Z15Ser_ReceiveDatav+0x8>
                    if (ndx >= Ser_BuffSize)
                        {
                            ndx = Ser_BuffSize - 1;
     db2:	d0 93 9c 02 	sts	0x029C, r29	; 0x80029c <_ZZ15Ser_ReceiveDatavE3ndx>
     db6:	df cf       	rjmp	.-66     	; 0xd76 <_Z15Ser_ReceiveDatav+0x8>
                        }
                }
            else
                {
                    Ser_Buffer[ndx] = '\0'; // terminate the string
     db8:	f0 e0       	ldi	r31, 0x00	; 0
     dba:	e7 54       	subi	r30, 0x47	; 71
     dbc:	fd 4f       	sbci	r31, 0xFD	; 253
     dbe:	10 82       	st	Z, r1
                    ndx = 0;
     dc0:	10 92 9c 02 	sts	0x029C, r1	; 0x80029c <_ZZ15Ser_ReceiveDatavE3ndx>
                    Ser_NewData = true;
     dc4:	c0 93 b8 02 	sts	0x02B8, r28	; 0x8002b8 <Ser_NewData>
     dc8:	d6 cf       	rjmp	.-84     	; 0xd76 <_Z15Ser_ReceiveDatav+0x8>
                }
        }
}
     dca:	df 91       	pop	r29
     dcc:	cf 91       	pop	r28
     dce:	08 95       	ret

00000dd0 <loop>:
unsigned long loopTime;

float self_balance_pid_setpoint=0;

void loop()
{
     dd0:	8f 92       	push	r8
     dd2:	9f 92       	push	r9
     dd4:	af 92       	push	r10
     dd6:	bf 92       	push	r11
     dd8:	cf 92       	push	r12
     dda:	df 92       	push	r13
     ddc:	ef 92       	push	r14
     dde:	ff 92       	push	r15
    loopTime=micros();
     de0:	0e 94 b3 1b 	call	0x3766	; 0x3766 <micros>
     de4:	60 93 a1 02 	sts	0x02A1, r22	; 0x8002a1 <loopTime>
     de8:	70 93 a2 02 	sts	0x02A2, r23	; 0x8002a2 <loopTime+0x1>
     dec:	80 93 a3 02 	sts	0x02A3, r24	; 0x8002a3 <loopTime+0x2>
     df0:	90 93 a4 02 	sts	0x02A4, r25	; 0x8002a4 <loopTime+0x3>


    unsigned long currentMillis = millis();
     df4:	0e 94 a7 1b 	call	0x374e	; 0x374e <millis>
     df8:	6b 01       	movw	r12, r22
     dfa:	7c 01       	movw	r14, r24
    if (currentMillis - previousMilliEnc >= intervalEnc)
     dfc:	80 91 19 04 	lds	r24, 0x0419	; 0x800419 <previousMilliEnc>
     e00:	90 91 1a 04 	lds	r25, 0x041A	; 0x80041a <previousMilliEnc+0x1>
     e04:	a0 91 1b 04 	lds	r26, 0x041B	; 0x80041b <previousMilliEnc+0x2>
     e08:	b0 91 1c 04 	lds	r27, 0x041C	; 0x80041c <previousMilliEnc+0x3>
     e0c:	a7 01       	movw	r20, r14
     e0e:	96 01       	movw	r18, r12
     e10:	28 1b       	sub	r18, r24
     e12:	39 0b       	sbc	r19, r25
     e14:	4a 0b       	sbc	r20, r26
     e16:	5b 0b       	sbc	r21, r27
     e18:	25 30       	cpi	r18, 0x05	; 5
     e1a:	31 05       	cpc	r19, r1
     e1c:	41 05       	cpc	r20, r1
     e1e:	51 05       	cpc	r21, r1
     e20:	50 f0       	brcs	.+20     	; 0xe36 <loop+0x66>
        {
            previousMilliEnc=currentMillis;
     e22:	c0 92 19 04 	sts	0x0419, r12	; 0x800419 <previousMilliEnc>
     e26:	d0 92 1a 04 	sts	0x041A, r13	; 0x80041a <previousMilliEnc+0x1>
     e2a:	e0 92 1b 04 	sts	0x041B, r14	; 0x80041b <previousMilliEnc+0x2>
     e2e:	f0 92 1c 04 	sts	0x041C, r15	; 0x80041c <previousMilliEnc+0x3>
            UpdateEncoderValues();
     e32:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <_Z19UpdateEncoderValuesv>
        }


    Giro_ReadData();
     e36:	0e 94 93 03 	call	0x726	; 0x726 <_Z13Giro_ReadDatav>

    Giro_PidCtl.Input+=self_balance_pid_setpoint;
     e3a:	20 91 9d 02 	lds	r18, 0x029D	; 0x80029d <self_balance_pid_setpoint>
     e3e:	30 91 9e 02 	lds	r19, 0x029E	; 0x80029e <self_balance_pid_setpoint+0x1>
     e42:	40 91 9f 02 	lds	r20, 0x029F	; 0x80029f <self_balance_pid_setpoint+0x2>
     e46:	50 91 a0 02 	lds	r21, 0x02A0	; 0x8002a0 <self_balance_pid_setpoint+0x3>
     e4a:	60 91 d2 03 	lds	r22, 0x03D2	; 0x8003d2 <Giro_PidCtl+0x15>
     e4e:	70 91 d3 03 	lds	r23, 0x03D3	; 0x8003d3 <Giro_PidCtl+0x16>
     e52:	80 91 d4 03 	lds	r24, 0x03D4	; 0x8003d4 <Giro_PidCtl+0x17>
     e56:	90 91 d5 03 	lds	r25, 0x03D5	; 0x8003d5 <Giro_PidCtl+0x18>
     e5a:	0e 94 ae 14 	call	0x295c	; 0x295c <__addsf3>
     e5e:	60 93 d2 03 	sts	0x03D2, r22	; 0x8003d2 <Giro_PidCtl+0x15>
     e62:	70 93 d3 03 	sts	0x03D3, r23	; 0x8003d3 <Giro_PidCtl+0x16>
     e66:	80 93 d4 03 	sts	0x03D4, r24	; 0x8003d4 <Giro_PidCtl+0x17>
     e6a:	90 93 d5 03 	sts	0x03D5, r25	; 0x8003d5 <Giro_PidCtl+0x18>
    Giro_Pid.Compute();
     e6e:	89 e0       	ldi	r24, 0x09	; 9
     e70:	93 e0       	ldi	r25, 0x03	; 3
     e72:	0e 94 5e 08 	call	0x10bc	; 0x10bc <_ZN3PID7ComputeEv>

    if (connectGiroToMot==true)
     e76:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <connectGiroToMot>
     e7a:	88 23       	and	r24, r24
     e7c:	c1 f0       	breq	.+48     	; 0xeae <loop+0xde>
        {
            Mot0_PidCtl.Setpoint=Giro_PidCtl.Output;
     e7e:	80 91 d6 03 	lds	r24, 0x03D6	; 0x8003d6 <Giro_PidCtl+0x19>
     e82:	90 91 d7 03 	lds	r25, 0x03D7	; 0x8003d7 <Giro_PidCtl+0x1a>
     e86:	a0 91 d8 03 	lds	r26, 0x03D8	; 0x8003d8 <Giro_PidCtl+0x1b>
     e8a:	b0 91 d9 03 	lds	r27, 0x03D9	; 0x8003d9 <Giro_PidCtl+0x1c>
     e8e:	80 93 08 04 	sts	0x0408, r24	; 0x800408 <Mot0_PidCtl+0x11>
     e92:	90 93 09 04 	sts	0x0409, r25	; 0x800409 <Mot0_PidCtl+0x12>
     e96:	a0 93 0a 04 	sts	0x040A, r26	; 0x80040a <Mot0_PidCtl+0x13>
     e9a:	b0 93 0b 04 	sts	0x040B, r27	; 0x80040b <Mot0_PidCtl+0x14>
            Mot1_PidCtl.Setpoint=Giro_PidCtl.Output;
     e9e:	80 93 eb 03 	sts	0x03EB, r24	; 0x8003eb <Mot1_PidCtl+0x11>
     ea2:	90 93 ec 03 	sts	0x03EC, r25	; 0x8003ec <Mot1_PidCtl+0x12>
     ea6:	a0 93 ed 03 	sts	0x03ED, r26	; 0x8003ed <Mot1_PidCtl+0x13>
     eaa:	b0 93 ee 03 	sts	0x03EE, r27	; 0x8003ee <Mot1_PidCtl+0x14>
        }


    Mot0_Pid.Compute();
     eae:	81 e8       	ldi	r24, 0x81	; 129
     eb0:	93 e0       	ldi	r25, 0x03	; 3
     eb2:	0e 94 5e 08 	call	0x10bc	; 0x10bc <_ZN3PID7ComputeEv>
    Mot1_Pid.Compute();
     eb6:	85 e4       	ldi	r24, 0x45	; 69
     eb8:	93 e0       	ldi	r25, 0x03	; 3
     eba:	0e 94 5e 08 	call	0x10bc	; 0x10bc <_ZN3PID7ComputeEv>

    if  ( (running==false) &&
     ebe:	80 91 14 04 	lds	r24, 0x0414	; 0x800414 <running>
     ec2:	81 11       	cpse	r24, r1
     ec4:	1f c0       	rjmp	.+62     	; 0xf04 <loop+0x134>
            (Giro_PidCtl.Input > targetAngle-3 ) &&
     ec6:	80 90 d2 03 	lds	r8, 0x03D2	; 0x8003d2 <Giro_PidCtl+0x15>
     eca:	90 90 d3 03 	lds	r9, 0x03D3	; 0x8003d3 <Giro_PidCtl+0x16>
     ece:	a0 90 d4 03 	lds	r10, 0x03D4	; 0x8003d4 <Giro_PidCtl+0x17>
     ed2:	b0 90 d5 03 	lds	r11, 0x03D5	; 0x8003d5 <Giro_PidCtl+0x18>


    Mot0_Pid.Compute();
    Mot1_Pid.Compute();

    if  ( (running==false) &&
     ed6:	20 e0       	ldi	r18, 0x00	; 0
     ed8:	30 e0       	ldi	r19, 0x00	; 0
     eda:	40 e8       	ldi	r20, 0x80	; 128
     edc:	50 ec       	ldi	r21, 0xC0	; 192
     ede:	c5 01       	movw	r24, r10
     ee0:	b4 01       	movw	r22, r8
     ee2:	0e 94 12 17 	call	0x2e24	; 0x2e24 <__gesf2>
     ee6:	18 16       	cp	r1, r24
     ee8:	6c f4       	brge	.+26     	; 0xf04 <loop+0x134>
            (Giro_PidCtl.Input > targetAngle-3 ) &&
     eea:	20 e0       	ldi	r18, 0x00	; 0
     eec:	30 e0       	ldi	r19, 0x00	; 0
     eee:	40 e0       	ldi	r20, 0x00	; 0
     ef0:	50 e4       	ldi	r21, 0x40	; 64
     ef2:	c5 01       	movw	r24, r10
     ef4:	b4 01       	movw	r22, r8
     ef6:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <__cmpsf2>
     efa:	87 ff       	sbrs	r24, 7
     efc:	03 c0       	rjmp	.+6      	; 0xf04 <loop+0x134>
            (Giro_PidCtl.Input < targetAngle+3 )
        )
        {
            running = true;
     efe:	81 e0       	ldi	r24, 0x01	; 1
     f00:	80 93 14 04 	sts	0x0414, r24	; 0x800414 <running>
        }




    if((connectGiroToMot==true) &&
     f04:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <connectGiroToMot>
     f08:	88 23       	and	r24, r24
     f0a:	09 f4       	brne	.+2      	; 0xf0e <loop+0x13e>
     f0c:	4d c0       	rjmp	.+154    	; 0xfa8 <loop+0x1d8>
     f0e:	80 91 14 04 	lds	r24, 0x0414	; 0x800414 <running>
     f12:	88 23       	and	r24, r24
     f14:	c1 f1       	breq	.+112    	; 0xf86 <loop+0x1b6>
            ((running==false) ||
             (Giro_PidCtl.Input > 50 || Giro_PidCtl.Input < -50) || //we fell
     f16:	80 90 d2 03 	lds	r8, 0x03D2	; 0x8003d2 <Giro_PidCtl+0x15>
     f1a:	90 90 d3 03 	lds	r9, 0x03D3	; 0x8003d3 <Giro_PidCtl+0x16>
     f1e:	a0 90 d4 03 	lds	r10, 0x03D4	; 0x8003d4 <Giro_PidCtl+0x17>
     f22:	b0 90 d5 03 	lds	r11, 0x03D5	; 0x8003d5 <Giro_PidCtl+0x18>




    if((connectGiroToMot==true) &&
            ((running==false) ||
     f26:	20 e0       	ldi	r18, 0x00	; 0
     f28:	30 e0       	ldi	r19, 0x00	; 0
     f2a:	48 e4       	ldi	r20, 0x48	; 72
     f2c:	52 e4       	ldi	r21, 0x42	; 66
     f2e:	c5 01       	movw	r24, r10
     f30:	b4 01       	movw	r22, r8
     f32:	0e 94 12 17 	call	0x2e24	; 0x2e24 <__gesf2>
     f36:	18 16       	cp	r1, r24
     f38:	34 f1       	brlt	.+76     	; 0xf86 <loop+0x1b6>
             (Giro_PidCtl.Input > 50 || Giro_PidCtl.Input < -50) || //we fell
     f3a:	20 e0       	ldi	r18, 0x00	; 0
     f3c:	30 e0       	ldi	r19, 0x00	; 0
     f3e:	48 e4       	ldi	r20, 0x48	; 72
     f40:	52 ec       	ldi	r21, 0xC2	; 194
     f42:	c5 01       	movw	r24, r10
     f44:	b4 01       	movw	r22, r8
     f46:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <__cmpsf2>
     f4a:	87 fd       	sbrc	r24, 7
     f4c:	1c c0       	rjmp	.+56     	; 0xf86 <loop+0x1b6>
             ((Giro_PidCtl.Output >1) && (Giro_PidCtl.Output < 1))) //somewhat echilibrum
     f4e:	80 90 d6 03 	lds	r8, 0x03D6	; 0x8003d6 <Giro_PidCtl+0x19>
     f52:	90 90 d7 03 	lds	r9, 0x03D7	; 0x8003d7 <Giro_PidCtl+0x1a>
     f56:	a0 90 d8 03 	lds	r10, 0x03D8	; 0x8003d8 <Giro_PidCtl+0x1b>
     f5a:	b0 90 d9 03 	lds	r11, 0x03D9	; 0x8003d9 <Giro_PidCtl+0x1c>



    if((connectGiroToMot==true) &&
            ((running==false) ||
             (Giro_PidCtl.Input > 50 || Giro_PidCtl.Input < -50) || //we fell
     f5e:	20 e0       	ldi	r18, 0x00	; 0
     f60:	30 e0       	ldi	r19, 0x00	; 0
     f62:	40 e8       	ldi	r20, 0x80	; 128
     f64:	5f e3       	ldi	r21, 0x3F	; 63
     f66:	c5 01       	movw	r24, r10
     f68:	b4 01       	movw	r22, r8
     f6a:	0e 94 12 17 	call	0x2e24	; 0x2e24 <__gesf2>
     f6e:	18 16       	cp	r1, r24
     f70:	dc f4       	brge	.+54     	; 0xfa8 <loop+0x1d8>
             ((Giro_PidCtl.Output >1) && (Giro_PidCtl.Output < 1))) //somewhat echilibrum
     f72:	20 e0       	ldi	r18, 0x00	; 0
     f74:	30 e0       	ldi	r19, 0x00	; 0
     f76:	40 e8       	ldi	r20, 0x80	; 128
     f78:	5f e3       	ldi	r21, 0x3F	; 63
     f7a:	c5 01       	movw	r24, r10
     f7c:	b4 01       	movw	r22, r8
     f7e:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <__cmpsf2>
     f82:	87 ff       	sbrs	r24, 7
     f84:	11 c0       	rjmp	.+34     	; 0xfa8 <loop+0x1d8>
      )
        {
            Motors_SetSpeed(0,0);
     f86:	60 e0       	ldi	r22, 0x00	; 0
     f88:	70 e0       	ldi	r23, 0x00	; 0
     f8a:	80 e0       	ldi	r24, 0x00	; 0
     f8c:	90 e0       	ldi	r25, 0x00	; 0
     f8e:	0e 94 1f 13 	call	0x263e	; 0x263e <_Z15Motors_SetSpeedii>
            running=false;
     f92:	10 92 14 04 	sts	0x0414, r1	; 0x800414 <running>
            self_balance_pid_setpoint = 0;
     f96:	10 92 9d 02 	sts	0x029D, r1	; 0x80029d <self_balance_pid_setpoint>
     f9a:	10 92 9e 02 	sts	0x029E, r1	; 0x80029e <self_balance_pid_setpoint+0x1>
     f9e:	10 92 9f 02 	sts	0x029F, r1	; 0x80029f <self_balance_pid_setpoint+0x2>
     fa2:	10 92 a0 02 	sts	0x02A0, r1	; 0x8002a0 <self_balance_pid_setpoint+0x3>
     fa6:	1b c0       	rjmp	.+54     	; 0xfde <loop+0x20e>
        }
    else
        {
            Motors_SetSpeed(Mot0_PidCtl.Output,Mot1_PidCtl.Output);
     fa8:	60 91 f3 03 	lds	r22, 0x03F3	; 0x8003f3 <Mot1_PidCtl+0x19>
     fac:	70 91 f4 03 	lds	r23, 0x03F4	; 0x8003f4 <Mot1_PidCtl+0x1a>
     fb0:	80 91 f5 03 	lds	r24, 0x03F5	; 0x8003f5 <Mot1_PidCtl+0x1b>
     fb4:	90 91 f6 03 	lds	r25, 0x03F6	; 0x8003f6 <Mot1_PidCtl+0x1c>
     fb8:	0e 94 03 16 	call	0x2c06	; 0x2c06 <__fixsfsi>
     fbc:	4b 01       	movw	r8, r22
     fbe:	5c 01       	movw	r10, r24
     fc0:	60 91 10 04 	lds	r22, 0x0410	; 0x800410 <Mot0_PidCtl+0x19>
     fc4:	70 91 11 04 	lds	r23, 0x0411	; 0x800411 <Mot0_PidCtl+0x1a>
     fc8:	80 91 12 04 	lds	r24, 0x0412	; 0x800412 <Mot0_PidCtl+0x1b>
     fcc:	90 91 13 04 	lds	r25, 0x0413	; 0x800413 <Mot0_PidCtl+0x1c>
     fd0:	0e 94 03 16 	call	0x2c06	; 0x2c06 <__fixsfsi>
     fd4:	dc 01       	movw	r26, r24
     fd6:	cb 01       	movw	r24, r22
     fd8:	b4 01       	movw	r22, r8
     fda:	0e 94 1f 13 	call	0x263e	; 0x263e <_Z15Motors_SetSpeedii>
        }




    if (currentMillis - previousMilliSerialLog >= intervalSerialLog)
     fde:	80 91 15 04 	lds	r24, 0x0415	; 0x800415 <previousMilliSerialLog>
     fe2:	90 91 16 04 	lds	r25, 0x0416	; 0x800416 <previousMilliSerialLog+0x1>
     fe6:	a0 91 17 04 	lds	r26, 0x0417	; 0x800417 <previousMilliSerialLog+0x2>
     fea:	b0 91 18 04 	lds	r27, 0x0418	; 0x800418 <previousMilliSerialLog+0x3>
     fee:	a7 01       	movw	r20, r14
     ff0:	96 01       	movw	r18, r12
     ff2:	28 1b       	sub	r18, r24
     ff4:	39 0b       	sbc	r19, r25
     ff6:	4a 0b       	sbc	r20, r26
     ff8:	5b 0b       	sbc	r21, r27
     ffa:	24 36       	cpi	r18, 0x64	; 100
     ffc:	31 05       	cpc	r19, r1
     ffe:	41 05       	cpc	r20, r1
    1000:	51 05       	cpc	r21, r1
    1002:	08 f4       	brcc	.+2      	; 0x1006 <loop+0x236>
    1004:	52 c0       	rjmp	.+164    	; 0x10aa <loop+0x2da>
        {
            previousMilliSerialLog=currentMillis;
    1006:	c0 92 15 04 	sts	0x0415, r12	; 0x800415 <previousMilliSerialLog>
    100a:	d0 92 16 04 	sts	0x0416, r13	; 0x800416 <previousMilliSerialLog+0x1>
    100e:	e0 92 17 04 	sts	0x0417, r14	; 0x800417 <previousMilliSerialLog+0x2>
    1012:	f0 92 18 04 	sts	0x0418, r15	; 0x800418 <previousMilliSerialLog+0x3>

            if (printRawGiro==true)
    1016:	80 91 b3 02 	lds	r24, 0x02B3	; 0x8002b3 <printRawGiro>
    101a:	81 11       	cpse	r24, r1
                {
                    PrintGiroRawData();
    101c:	0e 94 bb 04 	call	0x976	; 0x976 <_Z16PrintGiroRawDatav>
                }

            if (printGiroPid==true)
    1020:	80 91 b1 02 	lds	r24, 0x02B1	; 0x8002b1 <printGiroPid>
    1024:	81 11       	cpse	r24, r1
                {
                    PrintGiroInputOutputValues();
    1026:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <_Z26PrintGiroInputOutputValuesv>
                }

            if(printMotPid==true)
    102a:	80 91 b2 02 	lds	r24, 0x02B2	; 0x8002b2 <printMotPid>
    102e:	88 23       	and	r24, r24
    1030:	21 f0       	breq	.+8      	; 0x103a <loop+0x26a>
                {
                    PrintEncoderValues();
    1032:	0e 94 2c 01 	call	0x258	; 0x258 <_Z18PrintEncoderValuesv>
                    PrintPidOutputValues();
    1036:	0e 94 60 01 	call	0x2c0	; 0x2c0 <_Z20PrintPidOutputValuesv>
                }

            Ser_ReceiveData();
    103a:	0e 94 b7 06 	call	0xd6e	; 0xd6e <_Z15Ser_ReceiveDatav>
            Ser_ParseData();
    103e:	0e 94 ba 01 	call	0x374	; 0x374 <_Z13Ser_ParseDatav>

            loopTime=micros()-loopTime;
    1042:	0e 94 b3 1b 	call	0x3766	; 0x3766 <micros>
    1046:	c0 90 a1 02 	lds	r12, 0x02A1	; 0x8002a1 <loopTime>
    104a:	d0 90 a2 02 	lds	r13, 0x02A2	; 0x8002a2 <loopTime+0x1>
    104e:	e0 90 a3 02 	lds	r14, 0x02A3	; 0x8002a3 <loopTime+0x2>
    1052:	f0 90 a4 02 	lds	r15, 0x02A4	; 0x8002a4 <loopTime+0x3>
    1056:	dc 01       	movw	r26, r24
    1058:	cb 01       	movw	r24, r22
    105a:	8c 19       	sub	r24, r12
    105c:	9d 09       	sbc	r25, r13
    105e:	ae 09       	sbc	r26, r14
    1060:	bf 09       	sbc	r27, r15
    1062:	80 93 a1 02 	sts	0x02A1, r24	; 0x8002a1 <loopTime>
    1066:	90 93 a2 02 	sts	0x02A2, r25	; 0x8002a2 <loopTime+0x1>
    106a:	a0 93 a3 02 	sts	0x02A3, r26	; 0x8002a3 <loopTime+0x2>
    106e:	b0 93 a4 02 	sts	0x02A4, r27	; 0x8002a4 <loopTime+0x3>
            Serial.print("MC: ");
    1072:	61 e6       	ldi	r22, 0x61	; 97
    1074:	72 e0       	ldi	r23, 0x02	; 2
    1076:	87 e3       	ldi	r24, 0x37	; 55
    1078:	95 e0       	ldi	r25, 0x05	; 5
    107a:	0e 94 a8 19 	call	0x3350	; 0x3350 <_ZN5Print5printEPKc>
            Serial.println(loopTime);
    107e:	40 91 a1 02 	lds	r20, 0x02A1	; 0x8002a1 <loopTime>
    1082:	50 91 a2 02 	lds	r21, 0x02A2	; 0x8002a2 <loopTime+0x1>
    1086:	60 91 a3 02 	lds	r22, 0x02A3	; 0x8002a3 <loopTime+0x2>
    108a:	70 91 a4 02 	lds	r23, 0x02A4	; 0x8002a4 <loopTime+0x3>
    108e:	2a e0       	ldi	r18, 0x0A	; 10
    1090:	30 e0       	ldi	r19, 0x00	; 0
    1092:	87 e3       	ldi	r24, 0x37	; 55
    1094:	95 e0       	ldi	r25, 0x05	; 5
        }


}
    1096:	ff 90       	pop	r15
    1098:	ef 90       	pop	r14
    109a:	df 90       	pop	r13
    109c:	cf 90       	pop	r12
    109e:	bf 90       	pop	r11
    10a0:	af 90       	pop	r10
    10a2:	9f 90       	pop	r9
    10a4:	8f 90       	pop	r8
            Ser_ReceiveData();
            Ser_ParseData();

            loopTime=micros()-loopTime;
            Serial.print("MC: ");
            Serial.println(loopTime);
    10a6:	0c 94 23 1a 	jmp	0x3446	; 0x3446 <_ZN5Print7printlnEmi>
        }


}
    10aa:	ff 90       	pop	r15
    10ac:	ef 90       	pop	r14
    10ae:	df 90       	pop	r13
    10b0:	cf 90       	pop	r12
    10b2:	bf 90       	pop	r11
    10b4:	af 90       	pop	r10
    10b6:	9f 90       	pop	r9
    10b8:	8f 90       	pop	r8
    10ba:	08 95       	ret

000010bc <_ZN3PID7ComputeEv>:
 *   every time "void loop()" executes.  the function will decide for itself whether a new
 *   pid Output needs to be computed.  returns true when the output is computed,
 *   false when nothing has been done.
 **********************************************************************************/
bool PID::Compute()
{
    10bc:	2f 92       	push	r2
    10be:	3f 92       	push	r3
    10c0:	4f 92       	push	r4
    10c2:	5f 92       	push	r5
    10c4:	6f 92       	push	r6
    10c6:	7f 92       	push	r7
    10c8:	8f 92       	push	r8
    10ca:	9f 92       	push	r9
    10cc:	af 92       	push	r10
    10ce:	bf 92       	push	r11
    10d0:	cf 92       	push	r12
    10d2:	df 92       	push	r13
    10d4:	ef 92       	push	r14
    10d6:	ff 92       	push	r15
    10d8:	0f 93       	push	r16
    10da:	1f 93       	push	r17
    10dc:	cf 93       	push	r28
    10de:	df 93       	push	r29
    10e0:	cd b7       	in	r28, 0x3d	; 61
    10e2:	de b7       	in	r29, 0x3e	; 62
    10e4:	60 97       	sbiw	r28, 0x10	; 16
    10e6:	0f b6       	in	r0, 0x3f	; 63
    10e8:	f8 94       	cli
    10ea:	de bf       	out	0x3e, r29	; 62
    10ec:	0f be       	out	0x3f, r0	; 63
    10ee:	cd bf       	out	0x3d, r28	; 61
   if(!inAuto) return false;
    10f0:	dc 01       	movw	r26, r24
    10f2:	da 96       	adiw	r26, 0x3a	; 58
    10f4:	bc 91       	ld	r27, X
    10f6:	b9 83       	std	Y+1, r27	; 0x01
    10f8:	b1 11       	cpse	r27, r1
    10fa:	02 c0       	rjmp	.+4      	; 0x1100 <_ZN3PID7ComputeEv+0x44>
    10fc:	19 82       	std	Y+1, r1	; 0x01
    10fe:	2b c1       	rjmp	.+598    	; 0x1356 <_ZN3PID7ComputeEv+0x29a>
    1100:	98 8b       	std	Y+16, r25	; 0x10
    1102:	8f 87       	std	Y+15, r24	; 0x0f
   unsigned long now = millis();
    1104:	0e 94 a7 1b 	call	0x374e	; 0x374e <millis>
    1108:	6e 83       	std	Y+6, r22	; 0x06
    110a:	7f 83       	std	Y+7, r23	; 0x07
    110c:	88 87       	std	Y+8, r24	; 0x08
    110e:	99 87       	std	Y+9, r25	; 0x09
   unsigned long timeChange = (now - lastTime);
   if(timeChange>=SampleTime)
    1110:	ef 85       	ldd	r30, Y+15	; 0x0f
    1112:	f8 89       	ldd	r31, Y+16	; 0x10
    1114:	82 a1       	ldd	r24, Z+34	; 0x22
    1116:	93 a1       	ldd	r25, Z+35	; 0x23
    1118:	a4 a1       	ldd	r26, Z+36	; 0x24
    111a:	b5 a1       	ldd	r27, Z+37	; 0x25
    111c:	4e 81       	ldd	r20, Y+6	; 0x06
    111e:	5f 81       	ldd	r21, Y+7	; 0x07
    1120:	68 85       	ldd	r22, Y+8	; 0x08
    1122:	79 85       	ldd	r23, Y+9	; 0x09
    1124:	48 1b       	sub	r20, r24
    1126:	59 0b       	sbc	r21, r25
    1128:	6a 0b       	sbc	r22, r26
    112a:	7b 0b       	sbc	r23, r27
    112c:	86 a5       	ldd	r24, Z+46	; 0x2e
    112e:	97 a5       	ldd	r25, Z+47	; 0x2f
    1130:	a0 a9       	ldd	r26, Z+48	; 0x30
    1132:	b1 a9       	ldd	r27, Z+49	; 0x31
    1134:	48 17       	cp	r20, r24
    1136:	59 07       	cpc	r21, r25
    1138:	6a 07       	cpc	r22, r26
    113a:	7b 07       	cpc	r23, r27
    113c:	f8 f2       	brcs	.-66     	; 0x10fc <_ZN3PID7ComputeEv+0x40>
   {
      /*Compute all the working error variables*/
      double input = *myInput;
    113e:	04 8c       	ldd	r0, Z+28	; 0x1c
    1140:	f5 8d       	ldd	r31, Z+29	; 0x1d
    1142:	e0 2d       	mov	r30, r0
    1144:	80 81       	ld	r24, Z
    1146:	91 81       	ldd	r25, Z+1	; 0x01
    1148:	a2 81       	ldd	r26, Z+2	; 0x02
    114a:	b3 81       	ldd	r27, Z+3	; 0x03
    114c:	8a 83       	std	Y+2, r24	; 0x02
    114e:	9b 83       	std	Y+3, r25	; 0x03
    1150:	ac 83       	std	Y+4, r26	; 0x04
    1152:	bd 83       	std	Y+5, r27	; 0x05
      double error = *mySetpoint - input;
    1154:	af 85       	ldd	r26, Y+15	; 0x0f
    1156:	b8 89       	ldd	r27, Y+16	; 0x10
    1158:	90 96       	adiw	r26, 0x20	; 32
    115a:	ed 91       	ld	r30, X+
    115c:	fc 91       	ld	r31, X
    115e:	91 97       	sbiw	r26, 0x21	; 33
    1160:	2a 81       	ldd	r18, Y+2	; 0x02
    1162:	3b 81       	ldd	r19, Y+3	; 0x03
    1164:	4c 81       	ldd	r20, Y+4	; 0x04
    1166:	5d 81       	ldd	r21, Y+5	; 0x05
    1168:	60 81       	ld	r22, Z
    116a:	71 81       	ldd	r23, Z+1	; 0x01
    116c:	82 81       	ldd	r24, Z+2	; 0x02
    116e:	93 81       	ldd	r25, Z+3	; 0x03
    1170:	0e 94 ad 14 	call	0x295a	; 0x295a <__subsf3>
    1174:	4b 01       	movw	r8, r22
    1176:	5c 01       	movw	r10, r24
      double dInput = (input - lastInput);
    1178:	ef 85       	ldd	r30, Y+15	; 0x0f
    117a:	f8 89       	ldd	r31, Y+16	; 0x10
    117c:	22 a5       	ldd	r18, Z+42	; 0x2a
    117e:	33 a5       	ldd	r19, Z+43	; 0x2b
    1180:	44 a5       	ldd	r20, Z+44	; 0x2c
    1182:	55 a5       	ldd	r21, Z+45	; 0x2d
    1184:	6a 81       	ldd	r22, Y+2	; 0x02
    1186:	7b 81       	ldd	r23, Y+3	; 0x03
    1188:	8c 81       	ldd	r24, Y+4	; 0x04
    118a:	9d 81       	ldd	r25, Y+5	; 0x05
    118c:	0e 94 ad 14 	call	0x295a	; 0x295a <__subsf3>
    1190:	6b 01       	movw	r12, r22
    1192:	7c 01       	movw	r14, r24
      outputSum+= (ki * error);
    1194:	af 85       	ldd	r26, Y+15	; 0x0f
    1196:	b8 89       	ldd	r27, Y+16	; 0x10
    1198:	50 96       	adiw	r26, 0x10	; 16
    119a:	2d 91       	ld	r18, X+
    119c:	3d 91       	ld	r19, X+
    119e:	4d 91       	ld	r20, X+
    11a0:	5c 91       	ld	r21, X
    11a2:	53 97       	sbiw	r26, 0x13	; 19
    11a4:	c5 01       	movw	r24, r10
    11a6:	b4 01       	movw	r22, r8
    11a8:	0e 94 1f 17 	call	0x2e3e	; 0x2e3e <__mulsf3>
    11ac:	ef 85       	ldd	r30, Y+15	; 0x0f
    11ae:	f8 89       	ldd	r31, Y+16	; 0x10
    11b0:	26 a1       	ldd	r18, Z+38	; 0x26
    11b2:	37 a1       	ldd	r19, Z+39	; 0x27
    11b4:	40 a5       	ldd	r20, Z+40	; 0x28
    11b6:	51 a5       	ldd	r21, Z+41	; 0x29
    11b8:	0e 94 ae 14 	call	0x295c	; 0x295c <__addsf3>
    11bc:	2b 01       	movw	r4, r22
    11be:	3c 01       	movw	r6, r24
    11c0:	af 85       	ldd	r26, Y+15	; 0x0f
    11c2:	b8 89       	ldd	r27, Y+16	; 0x10
    11c4:	96 96       	adiw	r26, 0x26	; 38
    11c6:	6d 93       	st	X+, r22
    11c8:	7d 93       	st	X+, r23
    11ca:	8d 93       	st	X+, r24
    11cc:	9c 93       	st	X, r25
    11ce:	99 97       	sbiw	r26, 0x29	; 41

      /*Add Proportional on Measurement, if P_ON_M is specified*/
      if(!pOnE) outputSum-= kp * dInput;
    11d0:	db 96       	adiw	r26, 0x3b	; 59
    11d2:	bc 91       	ld	r27, X
    11d4:	ba 87       	std	Y+10, r27	; 0x0a
    11d6:	b1 11       	cpse	r27, r1
    11d8:	18 c0       	rjmp	.+48     	; 0x120a <_ZN3PID7ComputeEv+0x14e>
    11da:	ef 85       	ldd	r30, Y+15	; 0x0f
    11dc:	f8 89       	ldd	r31, Y+16	; 0x10
    11de:	24 85       	ldd	r18, Z+12	; 0x0c
    11e0:	35 85       	ldd	r19, Z+13	; 0x0d
    11e2:	46 85       	ldd	r20, Z+14	; 0x0e
    11e4:	57 85       	ldd	r21, Z+15	; 0x0f
    11e6:	c7 01       	movw	r24, r14
    11e8:	b6 01       	movw	r22, r12
    11ea:	0e 94 1f 17 	call	0x2e3e	; 0x2e3e <__mulsf3>
    11ee:	9b 01       	movw	r18, r22
    11f0:	ac 01       	movw	r20, r24
    11f2:	c3 01       	movw	r24, r6
    11f4:	b2 01       	movw	r22, r4
    11f6:	0e 94 ad 14 	call	0x295a	; 0x295a <__subsf3>
    11fa:	af 85       	ldd	r26, Y+15	; 0x0f
    11fc:	b8 89       	ldd	r27, Y+16	; 0x10
    11fe:	96 96       	adiw	r26, 0x26	; 38
    1200:	6d 93       	st	X+, r22
    1202:	7d 93       	st	X+, r23
    1204:	8d 93       	st	X+, r24
    1206:	9c 93       	st	X, r25
    1208:	99 97       	sbiw	r26, 0x29	; 41

      if(outputSum > outMax) outputSum= outMax;
    120a:	ef 85       	ldd	r30, Y+15	; 0x0f
    120c:	f8 89       	ldd	r31, Y+16	; 0x10
    120e:	46 a0       	ldd	r4, Z+38	; 0x26
    1210:	57 a0       	ldd	r5, Z+39	; 0x27
    1212:	60 a4       	ldd	r6, Z+40	; 0x28
    1214:	71 a4       	ldd	r7, Z+41	; 0x29
    1216:	16 a9       	ldd	r17, Z+54	; 0x36
    1218:	07 a9       	ldd	r16, Z+55	; 0x37
    121a:	30 ac       	ldd	r3, Z+56	; 0x38
    121c:	21 ac       	ldd	r2, Z+57	; 0x39
    121e:	21 2f       	mov	r18, r17
    1220:	30 2f       	mov	r19, r16
    1222:	43 2d       	mov	r20, r3
    1224:	52 2d       	mov	r21, r2
    1226:	c3 01       	movw	r24, r6
    1228:	b2 01       	movw	r22, r4
    122a:	0e 94 12 17 	call	0x2e24	; 0x2e24 <__gesf2>
    122e:	18 16       	cp	r1, r24
    1230:	2c f4       	brge	.+10     	; 0x123c <_ZN3PID7ComputeEv+0x180>
    1232:	81 2f       	mov	r24, r17
    1234:	90 2f       	mov	r25, r16
    1236:	a3 2d       	mov	r26, r3
    1238:	b2 2d       	mov	r27, r2
    123a:	18 c0       	rjmp	.+48     	; 0x126c <_ZN3PID7ComputeEv+0x1b0>
      else if(outputSum < outMin) outputSum= outMin;
    123c:	af 85       	ldd	r26, Y+15	; 0x0f
    123e:	b8 89       	ldd	r27, Y+16	; 0x10
    1240:	d2 96       	adiw	r26, 0x32	; 50
    1242:	8d 91       	ld	r24, X+
    1244:	9d 91       	ld	r25, X+
    1246:	0d 90       	ld	r0, X+
    1248:	bc 91       	ld	r27, X
    124a:	a0 2d       	mov	r26, r0
    124c:	8b 87       	std	Y+11, r24	; 0x0b
    124e:	9c 87       	std	Y+12, r25	; 0x0c
    1250:	ad 87       	std	Y+13, r26	; 0x0d
    1252:	be 87       	std	Y+14, r27	; 0x0e
    1254:	9c 01       	movw	r18, r24
    1256:	ad 01       	movw	r20, r26
    1258:	c3 01       	movw	r24, r6
    125a:	b2 01       	movw	r22, r4
    125c:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <__cmpsf2>
    1260:	87 ff       	sbrs	r24, 7
    1262:	0a c0       	rjmp	.+20     	; 0x1278 <_ZN3PID7ComputeEv+0x1bc>
    1264:	8b 85       	ldd	r24, Y+11	; 0x0b
    1266:	9c 85       	ldd	r25, Y+12	; 0x0c
    1268:	ad 85       	ldd	r26, Y+13	; 0x0d
    126a:	be 85       	ldd	r27, Y+14	; 0x0e
    126c:	ef 85       	ldd	r30, Y+15	; 0x0f
    126e:	f8 89       	ldd	r31, Y+16	; 0x10
    1270:	86 a3       	std	Z+38, r24	; 0x26
    1272:	97 a3       	std	Z+39, r25	; 0x27
    1274:	a0 a7       	std	Z+40, r26	; 0x28
    1276:	b1 a7       	std	Z+41, r27	; 0x29

      /*Add Proportional on Error, if P_ON_E is specified*/
	   double output;
      if(pOnE) output = kp * error;
    1278:	fa 85       	ldd	r31, Y+10	; 0x0a
    127a:	ff 23       	and	r31, r31
    127c:	79 f0       	breq	.+30     	; 0x129c <_ZN3PID7ComputeEv+0x1e0>
    127e:	af 85       	ldd	r26, Y+15	; 0x0f
    1280:	b8 89       	ldd	r27, Y+16	; 0x10
    1282:	1c 96       	adiw	r26, 0x0c	; 12
    1284:	2d 91       	ld	r18, X+
    1286:	3d 91       	ld	r19, X+
    1288:	4d 91       	ld	r20, X+
    128a:	5c 91       	ld	r21, X
    128c:	1f 97       	sbiw	r26, 0x0f	; 15
    128e:	c5 01       	movw	r24, r10
    1290:	b4 01       	movw	r22, r8
    1292:	0e 94 1f 17 	call	0x2e3e	; 0x2e3e <__mulsf3>
    1296:	4b 01       	movw	r8, r22
    1298:	5c 01       	movw	r10, r24
    129a:	03 c0       	rjmp	.+6      	; 0x12a2 <_ZN3PID7ComputeEv+0x1e6>
      else output = 0;
    129c:	81 2c       	mov	r8, r1
    129e:	91 2c       	mov	r9, r1
    12a0:	54 01       	movw	r10, r8

      /*Compute Rest of PID Output*/
      output += outputSum - kd * dInput;
    12a2:	ef 85       	ldd	r30, Y+15	; 0x0f
    12a4:	f8 89       	ldd	r31, Y+16	; 0x10
    12a6:	24 89       	ldd	r18, Z+20	; 0x14
    12a8:	35 89       	ldd	r19, Z+21	; 0x15
    12aa:	46 89       	ldd	r20, Z+22	; 0x16
    12ac:	57 89       	ldd	r21, Z+23	; 0x17
    12ae:	c7 01       	movw	r24, r14
    12b0:	b6 01       	movw	r22, r12
    12b2:	0e 94 1f 17 	call	0x2e3e	; 0x2e3e <__mulsf3>
    12b6:	9b 01       	movw	r18, r22
    12b8:	ac 01       	movw	r20, r24
    12ba:	af 85       	ldd	r26, Y+15	; 0x0f
    12bc:	b8 89       	ldd	r27, Y+16	; 0x10
    12be:	96 96       	adiw	r26, 0x26	; 38
    12c0:	6d 91       	ld	r22, X+
    12c2:	7d 91       	ld	r23, X+
    12c4:	8d 91       	ld	r24, X+
    12c6:	9c 91       	ld	r25, X
    12c8:	99 97       	sbiw	r26, 0x29	; 41
    12ca:	0e 94 ad 14 	call	0x295a	; 0x295a <__subsf3>
    12ce:	a5 01       	movw	r20, r10
    12d0:	94 01       	movw	r18, r8
    12d2:	0e 94 ae 14 	call	0x295c	; 0x295c <__addsf3>
    12d6:	6b 01       	movw	r12, r22
    12d8:	7c 01       	movw	r14, r24

	    if(output > outMax) output = outMax;
    12da:	9b 01       	movw	r18, r22
    12dc:	ac 01       	movw	r20, r24
    12de:	61 2f       	mov	r22, r17
    12e0:	70 2f       	mov	r23, r16
    12e2:	83 2d       	mov	r24, r3
    12e4:	92 2d       	mov	r25, r2
    12e6:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <__cmpsf2>
    12ea:	87 fd       	sbrc	r24, 7
    12ec:	14 c0       	rjmp	.+40     	; 0x1316 <_ZN3PID7ComputeEv+0x25a>
      else if(output < outMin) output = outMin;
    12ee:	ef 85       	ldd	r30, Y+15	; 0x0f
    12f0:	f8 89       	ldd	r31, Y+16	; 0x10
    12f2:	12 a9       	ldd	r17, Z+50	; 0x32
    12f4:	03 a9       	ldd	r16, Z+51	; 0x33
    12f6:	34 a8       	ldd	r3, Z+52	; 0x34
    12f8:	25 a8       	ldd	r2, Z+53	; 0x35
    12fa:	21 2f       	mov	r18, r17
    12fc:	30 2f       	mov	r19, r16
    12fe:	43 2d       	mov	r20, r3
    1300:	52 2d       	mov	r21, r2
    1302:	b6 01       	movw	r22, r12
    1304:	c7 01       	movw	r24, r14
    1306:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <__cmpsf2>
    130a:	87 fd       	sbrc	r24, 7
    130c:	04 c0       	rjmp	.+8      	; 0x1316 <_ZN3PID7ComputeEv+0x25a>
	   double output;
      if(pOnE) output = kp * error;
      else output = 0;

      /*Compute Rest of PID Output*/
      output += outputSum - kd * dInput;
    130e:	1c 2d       	mov	r17, r12
    1310:	0d 2d       	mov	r16, r13
    1312:	3e 2c       	mov	r3, r14
    1314:	2f 2c       	mov	r2, r15

	    if(output > outMax) output = outMax;
      else if(output < outMin) output = outMin;
	    *myOutput = output;
    1316:	af 85       	ldd	r26, Y+15	; 0x0f
    1318:	b8 89       	ldd	r27, Y+16	; 0x10
    131a:	5e 96       	adiw	r26, 0x1e	; 30
    131c:	ed 91       	ld	r30, X+
    131e:	fc 91       	ld	r31, X
    1320:	5f 97       	sbiw	r26, 0x1f	; 31
    1322:	81 2f       	mov	r24, r17
    1324:	90 2f       	mov	r25, r16
    1326:	a3 2d       	mov	r26, r3
    1328:	b2 2d       	mov	r27, r2
    132a:	80 83       	st	Z, r24
    132c:	91 83       	std	Z+1, r25	; 0x01
    132e:	a2 83       	std	Z+2, r26	; 0x02
    1330:	b3 83       	std	Z+3, r27	; 0x03

      /*Remember some variables for next time*/
      lastInput = input;
    1332:	8a 81       	ldd	r24, Y+2	; 0x02
    1334:	9b 81       	ldd	r25, Y+3	; 0x03
    1336:	ac 81       	ldd	r26, Y+4	; 0x04
    1338:	bd 81       	ldd	r27, Y+5	; 0x05
    133a:	ef 85       	ldd	r30, Y+15	; 0x0f
    133c:	f8 89       	ldd	r31, Y+16	; 0x10
    133e:	82 a7       	std	Z+42, r24	; 0x2a
    1340:	93 a7       	std	Z+43, r25	; 0x2b
    1342:	a4 a7       	std	Z+44, r26	; 0x2c
    1344:	b5 a7       	std	Z+45, r27	; 0x2d
      lastTime = now;
    1346:	8e 81       	ldd	r24, Y+6	; 0x06
    1348:	9f 81       	ldd	r25, Y+7	; 0x07
    134a:	a8 85       	ldd	r26, Y+8	; 0x08
    134c:	b9 85       	ldd	r27, Y+9	; 0x09
    134e:	82 a3       	std	Z+34, r24	; 0x22
    1350:	93 a3       	std	Z+35, r25	; 0x23
    1352:	a4 a3       	std	Z+36, r26	; 0x24
    1354:	b5 a3       	std	Z+37, r27	; 0x25
	    return true;
   }
   else return false;
}
    1356:	89 81       	ldd	r24, Y+1	; 0x01
    1358:	60 96       	adiw	r28, 0x10	; 16
    135a:	0f b6       	in	r0, 0x3f	; 63
    135c:	f8 94       	cli
    135e:	de bf       	out	0x3e, r29	; 62
    1360:	0f be       	out	0x3f, r0	; 63
    1362:	cd bf       	out	0x3d, r28	; 61
    1364:	df 91       	pop	r29
    1366:	cf 91       	pop	r28
    1368:	1f 91       	pop	r17
    136a:	0f 91       	pop	r16
    136c:	ff 90       	pop	r15
    136e:	ef 90       	pop	r14
    1370:	df 90       	pop	r13
    1372:	cf 90       	pop	r12
    1374:	bf 90       	pop	r11
    1376:	af 90       	pop	r10
    1378:	9f 90       	pop	r9
    137a:	8f 90       	pop	r8
    137c:	7f 90       	pop	r7
    137e:	6f 90       	pop	r6
    1380:	5f 90       	pop	r5
    1382:	4f 90       	pop	r4
    1384:	3f 90       	pop	r3
    1386:	2f 90       	pop	r2
    1388:	08 95       	ret

0000138a <_ZN3PID10SetTuningsEdddi>:
 * This function allows the controller's dynamic performance to be adjusted.
 * it's called automatically from the constructor, but tunings can also
 * be adjusted on the fly during normal operation
 ******************************************************************************/
void PID::SetTunings(double Kp, double Ki, double Kd, int POn)
{
    138a:	4f 92       	push	r4
    138c:	5f 92       	push	r5
    138e:	6f 92       	push	r6
    1390:	7f 92       	push	r7
    1392:	8f 92       	push	r8
    1394:	9f 92       	push	r9
    1396:	af 92       	push	r10
    1398:	bf 92       	push	r11
    139a:	cf 92       	push	r12
    139c:	df 92       	push	r13
    139e:	ef 92       	push	r14
    13a0:	ff 92       	push	r15
    13a2:	0f 93       	push	r16
    13a4:	1f 93       	push	r17
    13a6:	cf 93       	push	r28
    13a8:	df 93       	push	r29
    13aa:	00 d0       	rcall	.+0      	; 0x13ac <_ZN3PID10SetTuningsEdddi+0x22>
    13ac:	00 d0       	rcall	.+0      	; 0x13ae <_ZN3PID10SetTuningsEdddi+0x24>
    13ae:	00 d0       	rcall	.+0      	; 0x13b0 <_ZN3PID10SetTuningsEdddi+0x26>
    13b0:	cd b7       	in	r28, 0x3d	; 61
    13b2:	de b7       	in	r29, 0x3e	; 62
    13b4:	9e 83       	std	Y+6, r25	; 0x06
    13b6:	8d 83       	std	Y+5, r24	; 0x05
    13b8:	49 83       	std	Y+1, r20	; 0x01
    13ba:	5a 83       	std	Y+2, r21	; 0x02
    13bc:	6b 83       	std	Y+3, r22	; 0x03
    13be:	7c 83       	std	Y+4, r23	; 0x04
    13c0:	28 01       	movw	r4, r16
    13c2:	39 01       	movw	r6, r18
   if (Kp<0 || Ki<0 || Kd<0) return;
    13c4:	20 e0       	ldi	r18, 0x00	; 0
    13c6:	30 e0       	ldi	r19, 0x00	; 0
    13c8:	a9 01       	movw	r20, r18
    13ca:	69 81       	ldd	r22, Y+1	; 0x01
    13cc:	7a 81       	ldd	r23, Y+2	; 0x02
    13ce:	8b 81       	ldd	r24, Y+3	; 0x03
    13d0:	9c 81       	ldd	r25, Y+4	; 0x04
    13d2:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <__cmpsf2>
    13d6:	87 fd       	sbrc	r24, 7
    13d8:	97 c0       	rjmp	.+302    	; 0x1508 <_ZN3PID10SetTuningsEdddi+0x17e>
    13da:	20 e0       	ldi	r18, 0x00	; 0
    13dc:	30 e0       	ldi	r19, 0x00	; 0
    13de:	a9 01       	movw	r20, r18
    13e0:	c3 01       	movw	r24, r6
    13e2:	b2 01       	movw	r22, r4
    13e4:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <__cmpsf2>
    13e8:	87 fd       	sbrc	r24, 7
    13ea:	8e c0       	rjmp	.+284    	; 0x1508 <_ZN3PID10SetTuningsEdddi+0x17e>
    13ec:	20 e0       	ldi	r18, 0x00	; 0
    13ee:	30 e0       	ldi	r19, 0x00	; 0
    13f0:	a9 01       	movw	r20, r18
    13f2:	c7 01       	movw	r24, r14
    13f4:	b6 01       	movw	r22, r12
    13f6:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <__cmpsf2>
    13fa:	87 fd       	sbrc	r24, 7
    13fc:	85 c0       	rjmp	.+266    	; 0x1508 <_ZN3PID10SetTuningsEdddi+0x17e>

   pOn = POn;
    13fe:	ad 81       	ldd	r26, Y+5	; 0x05
    1400:	be 81       	ldd	r27, Y+6	; 0x06
    1402:	5b 96       	adiw	r26, 0x1b	; 27
    1404:	bc 92       	st	X, r11
    1406:	ae 92       	st	-X, r10
    1408:	5a 97       	sbiw	r26, 0x1a	; 26
   pOnE = POn == P_ON_E;
    140a:	81 e0       	ldi	r24, 0x01	; 1
    140c:	aa 94       	dec	r10
    140e:	ab 28       	or	r10, r11
    1410:	09 f0       	breq	.+2      	; 0x1414 <_ZN3PID10SetTuningsEdddi+0x8a>
    1412:	80 e0       	ldi	r24, 0x00	; 0
    1414:	ed 81       	ldd	r30, Y+5	; 0x05
    1416:	fe 81       	ldd	r31, Y+6	; 0x06
    1418:	83 af       	std	Z+59, r24	; 0x3b

   dispKp = Kp; dispKi = Ki; dispKd = Kd;
    141a:	89 81       	ldd	r24, Y+1	; 0x01
    141c:	9a 81       	ldd	r25, Y+2	; 0x02
    141e:	ab 81       	ldd	r26, Y+3	; 0x03
    1420:	bc 81       	ldd	r27, Y+4	; 0x04
    1422:	80 83       	st	Z, r24
    1424:	91 83       	std	Z+1, r25	; 0x01
    1426:	a2 83       	std	Z+2, r26	; 0x02
    1428:	b3 83       	std	Z+3, r27	; 0x03
    142a:	44 82       	std	Z+4, r4	; 0x04
    142c:	55 82       	std	Z+5, r5	; 0x05
    142e:	66 82       	std	Z+6, r6	; 0x06
    1430:	77 82       	std	Z+7, r7	; 0x07
    1432:	c0 86       	std	Z+8, r12	; 0x08
    1434:	d1 86       	std	Z+9, r13	; 0x09
    1436:	e2 86       	std	Z+10, r14	; 0x0a
    1438:	f3 86       	std	Z+11, r15	; 0x0b

   double SampleTimeInSec = ((double)SampleTime)/1000;
    143a:	66 a5       	ldd	r22, Z+46	; 0x2e
    143c:	77 a5       	ldd	r23, Z+47	; 0x2f
    143e:	80 a9       	ldd	r24, Z+48	; 0x30
    1440:	91 a9       	ldd	r25, Z+49	; 0x31
    1442:	0e 94 39 16 	call	0x2c72	; 0x2c72 <__floatunsisf>
    1446:	20 e0       	ldi	r18, 0x00	; 0
    1448:	30 e0       	ldi	r19, 0x00	; 0
    144a:	4a e7       	ldi	r20, 0x7A	; 122
    144c:	54 e4       	ldi	r21, 0x44	; 68
    144e:	0e 94 91 15 	call	0x2b22	; 0x2b22 <__divsf3>
    1452:	4b 01       	movw	r8, r22
    1454:	5c 01       	movw	r10, r24
   kp = Kp;
    1456:	89 81       	ldd	r24, Y+1	; 0x01
    1458:	9a 81       	ldd	r25, Y+2	; 0x02
    145a:	ab 81       	ldd	r26, Y+3	; 0x03
    145c:	bc 81       	ldd	r27, Y+4	; 0x04
    145e:	ed 81       	ldd	r30, Y+5	; 0x05
    1460:	fe 81       	ldd	r31, Y+6	; 0x06
    1462:	84 87       	std	Z+12, r24	; 0x0c
    1464:	95 87       	std	Z+13, r25	; 0x0d
    1466:	a6 87       	std	Z+14, r26	; 0x0e
    1468:	b7 87       	std	Z+15, r27	; 0x0f
   ki = Ki * SampleTimeInSec;
    146a:	a5 01       	movw	r20, r10
    146c:	94 01       	movw	r18, r8
    146e:	c3 01       	movw	r24, r6
    1470:	b2 01       	movw	r22, r4
    1472:	0e 94 1f 17 	call	0x2e3e	; 0x2e3e <__mulsf3>
    1476:	2b 01       	movw	r4, r22
    1478:	3c 01       	movw	r6, r24
    147a:	ad 81       	ldd	r26, Y+5	; 0x05
    147c:	be 81       	ldd	r27, Y+6	; 0x06
    147e:	50 96       	adiw	r26, 0x10	; 16
    1480:	6d 93       	st	X+, r22
    1482:	7d 93       	st	X+, r23
    1484:	8d 93       	st	X+, r24
    1486:	9c 93       	st	X, r25
    1488:	53 97       	sbiw	r26, 0x13	; 19
   kd = Kd / SampleTimeInSec;
    148a:	a5 01       	movw	r20, r10
    148c:	94 01       	movw	r18, r8
    148e:	c7 01       	movw	r24, r14
    1490:	b6 01       	movw	r22, r12
    1492:	0e 94 91 15 	call	0x2b22	; 0x2b22 <__divsf3>
    1496:	6b 01       	movw	r12, r22
    1498:	7c 01       	movw	r14, r24
    149a:	ed 81       	ldd	r30, Y+5	; 0x05
    149c:	fe 81       	ldd	r31, Y+6	; 0x06
    149e:	64 8b       	std	Z+20, r22	; 0x14
    14a0:	75 8b       	std	Z+21, r23	; 0x15
    14a2:	86 8b       	std	Z+22, r24	; 0x16
    14a4:	97 8b       	std	Z+23, r25	; 0x17

  if(controllerDirection ==REVERSE)
    14a6:	80 8d       	ldd	r24, Z+24	; 0x18
    14a8:	91 8d       	ldd	r25, Z+25	; 0x19
    14aa:	01 97       	sbiw	r24, 0x01	; 1
    14ac:	69 f5       	brne	.+90     	; 0x1508 <_ZN3PID10SetTuningsEdddi+0x17e>
   {
      kp = (0 - kp);
    14ae:	29 81       	ldd	r18, Y+1	; 0x01
    14b0:	3a 81       	ldd	r19, Y+2	; 0x02
    14b2:	4b 81       	ldd	r20, Y+3	; 0x03
    14b4:	5c 81       	ldd	r21, Y+4	; 0x04
    14b6:	60 e0       	ldi	r22, 0x00	; 0
    14b8:	70 e0       	ldi	r23, 0x00	; 0
    14ba:	cb 01       	movw	r24, r22
    14bc:	0e 94 ad 14 	call	0x295a	; 0x295a <__subsf3>
    14c0:	ad 81       	ldd	r26, Y+5	; 0x05
    14c2:	be 81       	ldd	r27, Y+6	; 0x06
    14c4:	1c 96       	adiw	r26, 0x0c	; 12
    14c6:	6d 93       	st	X+, r22
    14c8:	7d 93       	st	X+, r23
    14ca:	8d 93       	st	X+, r24
    14cc:	9c 93       	st	X, r25
    14ce:	1f 97       	sbiw	r26, 0x0f	; 15
      ki = (0 - ki);
    14d0:	a3 01       	movw	r20, r6
    14d2:	92 01       	movw	r18, r4
    14d4:	60 e0       	ldi	r22, 0x00	; 0
    14d6:	70 e0       	ldi	r23, 0x00	; 0
    14d8:	cb 01       	movw	r24, r22
    14da:	0e 94 ad 14 	call	0x295a	; 0x295a <__subsf3>
    14de:	ed 81       	ldd	r30, Y+5	; 0x05
    14e0:	fe 81       	ldd	r31, Y+6	; 0x06
    14e2:	60 8b       	std	Z+16, r22	; 0x10
    14e4:	71 8b       	std	Z+17, r23	; 0x11
    14e6:	82 8b       	std	Z+18, r24	; 0x12
    14e8:	93 8b       	std	Z+19, r25	; 0x13
      kd = (0 - kd);
    14ea:	a7 01       	movw	r20, r14
    14ec:	96 01       	movw	r18, r12
    14ee:	60 e0       	ldi	r22, 0x00	; 0
    14f0:	70 e0       	ldi	r23, 0x00	; 0
    14f2:	cb 01       	movw	r24, r22
    14f4:	0e 94 ad 14 	call	0x295a	; 0x295a <__subsf3>
    14f8:	ad 81       	ldd	r26, Y+5	; 0x05
    14fa:	be 81       	ldd	r27, Y+6	; 0x06
    14fc:	54 96       	adiw	r26, 0x14	; 20
    14fe:	6d 93       	st	X+, r22
    1500:	7d 93       	st	X+, r23
    1502:	8d 93       	st	X+, r24
    1504:	9c 93       	st	X, r25
    1506:	57 97       	sbiw	r26, 0x17	; 23
   }
}
    1508:	26 96       	adiw	r28, 0x06	; 6
    150a:	0f b6       	in	r0, 0x3f	; 63
    150c:	f8 94       	cli
    150e:	de bf       	out	0x3e, r29	; 62
    1510:	0f be       	out	0x3f, r0	; 63
    1512:	cd bf       	out	0x3d, r28	; 61
    1514:	df 91       	pop	r29
    1516:	cf 91       	pop	r28
    1518:	1f 91       	pop	r17
    151a:	0f 91       	pop	r16
    151c:	ff 90       	pop	r15
    151e:	ef 90       	pop	r14
    1520:	df 90       	pop	r13
    1522:	cf 90       	pop	r12
    1524:	bf 90       	pop	r11
    1526:	af 90       	pop	r10
    1528:	9f 90       	pop	r9
    152a:	8f 90       	pop	r8
    152c:	7f 90       	pop	r7
    152e:	6f 90       	pop	r6
    1530:	5f 90       	pop	r5
    1532:	4f 90       	pop	r4
    1534:	08 95       	ret

00001536 <_ZN3PID10SetTuningsEddd>:

/* SetTunings(...)*************************************************************
 * Set Tunings using the last-rembered POn setting
 ******************************************************************************/
void PID::SetTunings(double Kp, double Ki, double Kd){
    1536:	af 92       	push	r10
    1538:	bf 92       	push	r11
    153a:	cf 92       	push	r12
    153c:	df 92       	push	r13
    153e:	ef 92       	push	r14
    1540:	ff 92       	push	r15
    1542:	0f 93       	push	r16
    1544:	1f 93       	push	r17
    SetTunings(Kp, Ki, Kd, pOn); 
    1546:	fc 01       	movw	r30, r24
    1548:	a2 8c       	ldd	r10, Z+26	; 0x1a
    154a:	b3 8c       	ldd	r11, Z+27	; 0x1b
    154c:	0e 94 c5 09 	call	0x138a	; 0x138a <_ZN3PID10SetTuningsEdddi>
}
    1550:	1f 91       	pop	r17
    1552:	0f 91       	pop	r16
    1554:	ff 90       	pop	r15
    1556:	ef 90       	pop	r14
    1558:	df 90       	pop	r13
    155a:	cf 90       	pop	r12
    155c:	bf 90       	pop	r11
    155e:	af 90       	pop	r10
    1560:	08 95       	ret

00001562 <_ZN3PID13SetSampleTimeEi>:

/* SetSampleTime(...) *********************************************************
 * sets the period, in Milliseconds, at which the calculation is performed
 ******************************************************************************/
void PID::SetSampleTime(int NewSampleTime)
{
    1562:	8f 92       	push	r8
    1564:	9f 92       	push	r9
    1566:	af 92       	push	r10
    1568:	bf 92       	push	r11
    156a:	cf 92       	push	r12
    156c:	df 92       	push	r13
    156e:	ef 92       	push	r14
    1570:	ff 92       	push	r15
    1572:	cf 93       	push	r28
    1574:	df 93       	push	r29
   if (NewSampleTime > 0)
    1576:	16 16       	cp	r1, r22
    1578:	17 06       	cpc	r1, r23
    157a:	b4 f5       	brge	.+108    	; 0x15e8 <_ZN3PID13SetSampleTimeEi+0x86>
    157c:	6b 01       	movw	r12, r22
    157e:	ec 01       	movw	r28, r24
   {
      double ratio  = (double)NewSampleTime
                      / (double)SampleTime;
    1580:	0d 2c       	mov	r0, r13
    1582:	00 0c       	add	r0, r0
    1584:	ee 08       	sbc	r14, r14
    1586:	ff 08       	sbc	r15, r15
    1588:	c7 01       	movw	r24, r14
    158a:	b6 01       	movw	r22, r12
    158c:	0e 94 3b 16 	call	0x2c76	; 0x2c76 <__floatsisf>
    1590:	4b 01       	movw	r8, r22
    1592:	5c 01       	movw	r10, r24
    1594:	6e a5       	ldd	r22, Y+46	; 0x2e
    1596:	7f a5       	ldd	r23, Y+47	; 0x2f
    1598:	88 a9       	ldd	r24, Y+48	; 0x30
    159a:	99 a9       	ldd	r25, Y+49	; 0x31
    159c:	0e 94 39 16 	call	0x2c72	; 0x2c72 <__floatunsisf>
    15a0:	9b 01       	movw	r18, r22
    15a2:	ac 01       	movw	r20, r24
    15a4:	c5 01       	movw	r24, r10
    15a6:	b4 01       	movw	r22, r8
    15a8:	0e 94 91 15 	call	0x2b22	; 0x2b22 <__divsf3>
    15ac:	4b 01       	movw	r8, r22
    15ae:	5c 01       	movw	r10, r24
      ki *= ratio;
    15b0:	9b 01       	movw	r18, r22
    15b2:	ac 01       	movw	r20, r24
    15b4:	68 89       	ldd	r22, Y+16	; 0x10
    15b6:	79 89       	ldd	r23, Y+17	; 0x11
    15b8:	8a 89       	ldd	r24, Y+18	; 0x12
    15ba:	9b 89       	ldd	r25, Y+19	; 0x13
    15bc:	0e 94 1f 17 	call	0x2e3e	; 0x2e3e <__mulsf3>
    15c0:	68 8b       	std	Y+16, r22	; 0x10
    15c2:	79 8b       	std	Y+17, r23	; 0x11
    15c4:	8a 8b       	std	Y+18, r24	; 0x12
    15c6:	9b 8b       	std	Y+19, r25	; 0x13
      kd /= ratio;
    15c8:	a5 01       	movw	r20, r10
    15ca:	94 01       	movw	r18, r8
    15cc:	6c 89       	ldd	r22, Y+20	; 0x14
    15ce:	7d 89       	ldd	r23, Y+21	; 0x15
    15d0:	8e 89       	ldd	r24, Y+22	; 0x16
    15d2:	9f 89       	ldd	r25, Y+23	; 0x17
    15d4:	0e 94 91 15 	call	0x2b22	; 0x2b22 <__divsf3>
    15d8:	6c 8b       	std	Y+20, r22	; 0x14
    15da:	7d 8b       	std	Y+21, r23	; 0x15
    15dc:	8e 8b       	std	Y+22, r24	; 0x16
    15de:	9f 8b       	std	Y+23, r25	; 0x17
      SampleTime = (unsigned long)NewSampleTime;
    15e0:	ce a6       	std	Y+46, r12	; 0x2e
    15e2:	df a6       	std	Y+47, r13	; 0x2f
    15e4:	e8 aa       	std	Y+48, r14	; 0x30
    15e6:	f9 aa       	std	Y+49, r15	; 0x31
   }
}
    15e8:	df 91       	pop	r29
    15ea:	cf 91       	pop	r28
    15ec:	ff 90       	pop	r15
    15ee:	ef 90       	pop	r14
    15f0:	df 90       	pop	r13
    15f2:	cf 90       	pop	r12
    15f4:	bf 90       	pop	r11
    15f6:	af 90       	pop	r10
    15f8:	9f 90       	pop	r9
    15fa:	8f 90       	pop	r8
    15fc:	08 95       	ret

000015fe <_ZN3PID15SetOutputLimitsEdd>:
 *  be doing a time window and will need 0-8000 or something.  or maybe they'll
 *  want to clamp it from 0-125.  who knows.  at any rate, that can all be done
 *  here.
 **************************************************************************/
void PID::SetOutputLimits(double Min, double Max)
{
    15fe:	2f 92       	push	r2
    1600:	3f 92       	push	r3
    1602:	4f 92       	push	r4
    1604:	5f 92       	push	r5
    1606:	6f 92       	push	r6
    1608:	7f 92       	push	r7
    160a:	8f 92       	push	r8
    160c:	9f 92       	push	r9
    160e:	af 92       	push	r10
    1610:	bf 92       	push	r11
    1612:	cf 92       	push	r12
    1614:	df 92       	push	r13
    1616:	ef 92       	push	r14
    1618:	ff 92       	push	r15
    161a:	0f 93       	push	r16
    161c:	1f 93       	push	r17
    161e:	cf 93       	push	r28
    1620:	df 93       	push	r29
    1622:	ec 01       	movw	r28, r24
    1624:	6a 01       	movw	r12, r20
    1626:	7b 01       	movw	r14, r22
    1628:	48 01       	movw	r8, r16
    162a:	59 01       	movw	r10, r18
   if(Min >= Max) return;
    162c:	a9 01       	movw	r20, r18
    162e:	98 01       	movw	r18, r16
    1630:	c7 01       	movw	r24, r14
    1632:	b6 01       	movw	r22, r12
    1634:	0e 94 12 17 	call	0x2e24	; 0x2e24 <__gesf2>
    1638:	87 ff       	sbrs	r24, 7
    163a:	4e c0       	rjmp	.+156    	; 0x16d8 <_ZN3PID15SetOutputLimitsEdd+0xda>
   outMin = Min;
    163c:	ca aa       	std	Y+50, r12	; 0x32
    163e:	db aa       	std	Y+51, r13	; 0x33
    1640:	ec aa       	std	Y+52, r14	; 0x34
    1642:	fd aa       	std	Y+53, r15	; 0x35
   outMax = Max;
    1644:	8e aa       	std	Y+54, r8	; 0x36
    1646:	9f aa       	std	Y+55, r9	; 0x37
    1648:	a8 ae       	std	Y+56, r10	; 0x38
    164a:	b9 ae       	std	Y+57, r11	; 0x39

   if(inAuto)
    164c:	8a ad       	ldd	r24, Y+58	; 0x3a
    164e:	88 23       	and	r24, r24
    1650:	09 f4       	brne	.+2      	; 0x1654 <_ZN3PID15SetOutputLimitsEdd+0x56>
    1652:	42 c0       	rjmp	.+132    	; 0x16d8 <_ZN3PID15SetOutputLimitsEdd+0xda>
   {
	   if(*myOutput > outMax) *myOutput = outMax;
    1654:	2e 8c       	ldd	r2, Y+30	; 0x1e
    1656:	3f 8c       	ldd	r3, Y+31	; 0x1f
    1658:	f1 01       	movw	r30, r2
    165a:	40 80       	ld	r4, Z
    165c:	51 80       	ldd	r5, Z+1	; 0x01
    165e:	62 80       	ldd	r6, Z+2	; 0x02
    1660:	73 80       	ldd	r7, Z+3	; 0x03
    1662:	a3 01       	movw	r20, r6
    1664:	92 01       	movw	r18, r4
    1666:	c5 01       	movw	r24, r10
    1668:	b4 01       	movw	r22, r8
    166a:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <__cmpsf2>
    166e:	87 ff       	sbrs	r24, 7
    1670:	06 c0       	rjmp	.+12     	; 0x167e <_ZN3PID15SetOutputLimitsEdd+0x80>
    1672:	f1 01       	movw	r30, r2
    1674:	80 82       	st	Z, r8
    1676:	91 82       	std	Z+1, r9	; 0x01
    1678:	a2 82       	std	Z+2, r10	; 0x02
    167a:	b3 82       	std	Z+3, r11	; 0x03
    167c:	0d c0       	rjmp	.+26     	; 0x1698 <_ZN3PID15SetOutputLimitsEdd+0x9a>
	   else if(*myOutput < outMin) *myOutput = outMin;
    167e:	a3 01       	movw	r20, r6
    1680:	92 01       	movw	r18, r4
    1682:	c7 01       	movw	r24, r14
    1684:	b6 01       	movw	r22, r12
    1686:	0e 94 12 17 	call	0x2e24	; 0x2e24 <__gesf2>
    168a:	18 16       	cp	r1, r24
    168c:	2c f4       	brge	.+10     	; 0x1698 <_ZN3PID15SetOutputLimitsEdd+0x9a>
    168e:	f1 01       	movw	r30, r2
    1690:	c0 82       	st	Z, r12
    1692:	d1 82       	std	Z+1, r13	; 0x01
    1694:	e2 82       	std	Z+2, r14	; 0x02
    1696:	f3 82       	std	Z+3, r15	; 0x03

	   if(outputSum > outMax) outputSum= outMax;
    1698:	8e a0       	ldd	r8, Y+38	; 0x26
    169a:	9f a0       	ldd	r9, Y+39	; 0x27
    169c:	a8 a4       	ldd	r10, Y+40	; 0x28
    169e:	b9 a4       	ldd	r11, Y+41	; 0x29
    16a0:	ce a8       	ldd	r12, Y+54	; 0x36
    16a2:	df a8       	ldd	r13, Y+55	; 0x37
    16a4:	e8 ac       	ldd	r14, Y+56	; 0x38
    16a6:	f9 ac       	ldd	r15, Y+57	; 0x39
    16a8:	a7 01       	movw	r20, r14
    16aa:	96 01       	movw	r18, r12
    16ac:	c5 01       	movw	r24, r10
    16ae:	b4 01       	movw	r22, r8
    16b0:	0e 94 12 17 	call	0x2e24	; 0x2e24 <__gesf2>
    16b4:	18 16       	cp	r1, r24
    16b6:	64 f0       	brlt	.+24     	; 0x16d0 <_ZN3PID15SetOutputLimitsEdd+0xd2>
	   else if(outputSum < outMin) outputSum= outMin;
    16b8:	ca a8       	ldd	r12, Y+50	; 0x32
    16ba:	db a8       	ldd	r13, Y+51	; 0x33
    16bc:	ec a8       	ldd	r14, Y+52	; 0x34
    16be:	fd a8       	ldd	r15, Y+53	; 0x35
    16c0:	a7 01       	movw	r20, r14
    16c2:	96 01       	movw	r18, r12
    16c4:	c5 01       	movw	r24, r10
    16c6:	b4 01       	movw	r22, r8
    16c8:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <__cmpsf2>
    16cc:	87 ff       	sbrs	r24, 7
    16ce:	04 c0       	rjmp	.+8      	; 0x16d8 <_ZN3PID15SetOutputLimitsEdd+0xda>
    16d0:	ce a2       	std	Y+38, r12	; 0x26
    16d2:	df a2       	std	Y+39, r13	; 0x27
    16d4:	e8 a6       	std	Y+40, r14	; 0x28
    16d6:	f9 a6       	std	Y+41, r15	; 0x29
   }
}
    16d8:	df 91       	pop	r29
    16da:	cf 91       	pop	r28
    16dc:	1f 91       	pop	r17
    16de:	0f 91       	pop	r16
    16e0:	ff 90       	pop	r15
    16e2:	ef 90       	pop	r14
    16e4:	df 90       	pop	r13
    16e6:	cf 90       	pop	r12
    16e8:	bf 90       	pop	r11
    16ea:	af 90       	pop	r10
    16ec:	9f 90       	pop	r9
    16ee:	8f 90       	pop	r8
    16f0:	7f 90       	pop	r7
    16f2:	6f 90       	pop	r6
    16f4:	5f 90       	pop	r5
    16f6:	4f 90       	pop	r4
    16f8:	3f 90       	pop	r3
    16fa:	2f 90       	pop	r2
    16fc:	08 95       	ret

000016fe <_ZN3PID10InitializeEv>:
/* Initialize()****************************************************************
 *	does all the things that need to happen to ensure a bumpless transfer
 *  from manual to automatic mode.
 ******************************************************************************/
void PID::Initialize()
{
    16fe:	8f 92       	push	r8
    1700:	9f 92       	push	r9
    1702:	af 92       	push	r10
    1704:	bf 92       	push	r11
    1706:	cf 92       	push	r12
    1708:	df 92       	push	r13
    170a:	ef 92       	push	r14
    170c:	ff 92       	push	r15
    170e:	cf 93       	push	r28
    1710:	df 93       	push	r29
    1712:	ec 01       	movw	r28, r24
   outputSum = *myOutput;
    1714:	ee 8d       	ldd	r30, Y+30	; 0x1e
    1716:	ff 8d       	ldd	r31, Y+31	; 0x1f
    1718:	c0 80       	ld	r12, Z
    171a:	d1 80       	ldd	r13, Z+1	; 0x01
    171c:	e2 80       	ldd	r14, Z+2	; 0x02
    171e:	f3 80       	ldd	r15, Z+3	; 0x03
    1720:	ce a2       	std	Y+38, r12	; 0x26
    1722:	df a2       	std	Y+39, r13	; 0x27
    1724:	e8 a6       	std	Y+40, r14	; 0x28
    1726:	f9 a6       	std	Y+41, r15	; 0x29
   lastInput = *myInput;
    1728:	ec 8d       	ldd	r30, Y+28	; 0x1c
    172a:	fd 8d       	ldd	r31, Y+29	; 0x1d
    172c:	80 81       	ld	r24, Z
    172e:	91 81       	ldd	r25, Z+1	; 0x01
    1730:	a2 81       	ldd	r26, Z+2	; 0x02
    1732:	b3 81       	ldd	r27, Z+3	; 0x03
    1734:	8a a7       	std	Y+42, r24	; 0x2a
    1736:	9b a7       	std	Y+43, r25	; 0x2b
    1738:	ac a7       	std	Y+44, r26	; 0x2c
    173a:	bd a7       	std	Y+45, r27	; 0x2d
   if(outputSum > outMax) outputSum = outMax;
    173c:	8e a8       	ldd	r8, Y+54	; 0x36
    173e:	9f a8       	ldd	r9, Y+55	; 0x37
    1740:	a8 ac       	ldd	r10, Y+56	; 0x38
    1742:	b9 ac       	ldd	r11, Y+57	; 0x39
    1744:	a5 01       	movw	r20, r10
    1746:	94 01       	movw	r18, r8
    1748:	c7 01       	movw	r24, r14
    174a:	b6 01       	movw	r22, r12
    174c:	0e 94 12 17 	call	0x2e24	; 0x2e24 <__gesf2>
    1750:	18 16       	cp	r1, r24
    1752:	64 f0       	brlt	.+24     	; 0x176c <_ZN3PID10InitializeEv+0x6e>
   else if(outputSum < outMin) outputSum = outMin;
    1754:	8a a8       	ldd	r8, Y+50	; 0x32
    1756:	9b a8       	ldd	r9, Y+51	; 0x33
    1758:	ac a8       	ldd	r10, Y+52	; 0x34
    175a:	bd a8       	ldd	r11, Y+53	; 0x35
    175c:	a5 01       	movw	r20, r10
    175e:	94 01       	movw	r18, r8
    1760:	c7 01       	movw	r24, r14
    1762:	b6 01       	movw	r22, r12
    1764:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <__cmpsf2>
    1768:	87 ff       	sbrs	r24, 7
    176a:	04 c0       	rjmp	.+8      	; 0x1774 <_ZN3PID10InitializeEv+0x76>
    176c:	8e a2       	std	Y+38, r8	; 0x26
    176e:	9f a2       	std	Y+39, r9	; 0x27
    1770:	a8 a6       	std	Y+40, r10	; 0x28
    1772:	b9 a6       	std	Y+41, r11	; 0x29
}
    1774:	df 91       	pop	r29
    1776:	cf 91       	pop	r28
    1778:	ff 90       	pop	r15
    177a:	ef 90       	pop	r14
    177c:	df 90       	pop	r13
    177e:	cf 90       	pop	r12
    1780:	bf 90       	pop	r11
    1782:	af 90       	pop	r10
    1784:	9f 90       	pop	r9
    1786:	8f 90       	pop	r8
    1788:	08 95       	ret

0000178a <_ZN3PID7SetModeEi>:
 * Allows the controller Mode to be set to manual (0) or Automatic (non-zero)
 * when the transition from manual to auto occurs, the controller is
 * automatically initialized
 ******************************************************************************/
void PID::SetMode(int Mode)
{
    178a:	1f 93       	push	r17
    178c:	cf 93       	push	r28
    178e:	df 93       	push	r29
    1790:	ec 01       	movw	r28, r24
    bool newAuto = (Mode == AUTOMATIC);
    1792:	11 e0       	ldi	r17, 0x01	; 1
    1794:	61 30       	cpi	r22, 0x01	; 1
    1796:	71 05       	cpc	r23, r1
    1798:	09 f0       	breq	.+2      	; 0x179c <_ZN3PID7SetModeEi+0x12>
    179a:	10 e0       	ldi	r17, 0x00	; 0
    if(newAuto && !inAuto)
    179c:	61 30       	cpi	r22, 0x01	; 1
    179e:	71 05       	cpc	r23, r1
    17a0:	31 f4       	brne	.+12     	; 0x17ae <_ZN3PID7SetModeEi+0x24>
    17a2:	8a ad       	ldd	r24, Y+58	; 0x3a
    17a4:	81 11       	cpse	r24, r1
    17a6:	03 c0       	rjmp	.+6      	; 0x17ae <_ZN3PID7SetModeEi+0x24>
    {  /*we just went from manual to auto*/
        PID::Initialize();
    17a8:	ce 01       	movw	r24, r28
    17aa:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <_ZN3PID10InitializeEv>
    }
    inAuto = newAuto;
    17ae:	1a af       	std	Y+58, r17	; 0x3a
}
    17b0:	df 91       	pop	r29
    17b2:	cf 91       	pop	r28
    17b4:	1f 91       	pop	r17
    17b6:	08 95       	ret

000017b8 <_ZN3PID22SetControllerDirectionEi>:
 * to +Input) or a REVERSE acting process(+Output leads to -Input.)  we need to
 * know which one, because otherwise we may increase the output when we should
 * be decreasing.  This is called from the constructor.
 ******************************************************************************/
void PID::SetControllerDirection(int Direction)
{
    17b8:	0f 93       	push	r16
    17ba:	1f 93       	push	r17
    17bc:	cf 93       	push	r28
    17be:	df 93       	push	r29
    17c0:	ec 01       	movw	r28, r24
    17c2:	8b 01       	movw	r16, r22
   if(inAuto && Direction !=controllerDirection)
    17c4:	8a ad       	ldd	r24, Y+58	; 0x3a
    17c6:	88 23       	and	r24, r24
    17c8:	61 f1       	breq	.+88     	; 0x1822 <_ZN3PID22SetControllerDirectionEi+0x6a>
    17ca:	88 8d       	ldd	r24, Y+24	; 0x18
    17cc:	99 8d       	ldd	r25, Y+25	; 0x19
    17ce:	86 17       	cp	r24, r22
    17d0:	97 07       	cpc	r25, r23
    17d2:	39 f1       	breq	.+78     	; 0x1822 <_ZN3PID22SetControllerDirectionEi+0x6a>
   {
	    kp = (0 - kp);
    17d4:	2c 85       	ldd	r18, Y+12	; 0x0c
    17d6:	3d 85       	ldd	r19, Y+13	; 0x0d
    17d8:	4e 85       	ldd	r20, Y+14	; 0x0e
    17da:	5f 85       	ldd	r21, Y+15	; 0x0f
    17dc:	60 e0       	ldi	r22, 0x00	; 0
    17de:	70 e0       	ldi	r23, 0x00	; 0
    17e0:	cb 01       	movw	r24, r22
    17e2:	0e 94 ad 14 	call	0x295a	; 0x295a <__subsf3>
    17e6:	6c 87       	std	Y+12, r22	; 0x0c
    17e8:	7d 87       	std	Y+13, r23	; 0x0d
    17ea:	8e 87       	std	Y+14, r24	; 0x0e
    17ec:	9f 87       	std	Y+15, r25	; 0x0f
      ki = (0 - ki);
    17ee:	28 89       	ldd	r18, Y+16	; 0x10
    17f0:	39 89       	ldd	r19, Y+17	; 0x11
    17f2:	4a 89       	ldd	r20, Y+18	; 0x12
    17f4:	5b 89       	ldd	r21, Y+19	; 0x13
    17f6:	60 e0       	ldi	r22, 0x00	; 0
    17f8:	70 e0       	ldi	r23, 0x00	; 0
    17fa:	cb 01       	movw	r24, r22
    17fc:	0e 94 ad 14 	call	0x295a	; 0x295a <__subsf3>
    1800:	68 8b       	std	Y+16, r22	; 0x10
    1802:	79 8b       	std	Y+17, r23	; 0x11
    1804:	8a 8b       	std	Y+18, r24	; 0x12
    1806:	9b 8b       	std	Y+19, r25	; 0x13
      kd = (0 - kd);
    1808:	2c 89       	ldd	r18, Y+20	; 0x14
    180a:	3d 89       	ldd	r19, Y+21	; 0x15
    180c:	4e 89       	ldd	r20, Y+22	; 0x16
    180e:	5f 89       	ldd	r21, Y+23	; 0x17
    1810:	60 e0       	ldi	r22, 0x00	; 0
    1812:	70 e0       	ldi	r23, 0x00	; 0
    1814:	cb 01       	movw	r24, r22
    1816:	0e 94 ad 14 	call	0x295a	; 0x295a <__subsf3>
    181a:	6c 8b       	std	Y+20, r22	; 0x14
    181c:	7d 8b       	std	Y+21, r23	; 0x15
    181e:	8e 8b       	std	Y+22, r24	; 0x16
    1820:	9f 8b       	std	Y+23, r25	; 0x17
   }
   controllerDirection = Direction;
    1822:	19 8f       	std	Y+25, r17	; 0x19
    1824:	08 8f       	std	Y+24, r16	; 0x18
}
    1826:	df 91       	pop	r29
    1828:	cf 91       	pop	r28
    182a:	1f 91       	pop	r17
    182c:	0f 91       	pop	r16
    182e:	08 95       	ret

00001830 <_ZN3PIDC1EPdS0_S0_dddii>:

/*Constructor (...)*********************************************************
 *    The parameters specified here are those for for which we can't set up
 *    reliable defaults, so we need to have the user set them.
 ***************************************************************************/
PID::PID(double* Input, double* Output, double* Setpoint,
    1830:	4f 92       	push	r4
    1832:	5f 92       	push	r5
    1834:	6f 92       	push	r6
    1836:	7f 92       	push	r7
    1838:	8f 92       	push	r8
    183a:	9f 92       	push	r9
    183c:	af 92       	push	r10
    183e:	bf 92       	push	r11
    1840:	cf 92       	push	r12
    1842:	df 92       	push	r13
    1844:	ef 92       	push	r14
    1846:	ff 92       	push	r15
    1848:	0f 93       	push	r16
    184a:	1f 93       	push	r17
    184c:	cf 93       	push	r28
    184e:	df 93       	push	r29
    1850:	00 d0       	rcall	.+0      	; 0x1852 <_ZN3PIDC1EPdS0_S0_dddii+0x22>
    1852:	00 d0       	rcall	.+0      	; 0x1854 <_ZN3PIDC1EPdS0_S0_dddii+0x24>
    1854:	cd b7       	in	r28, 0x3d	; 61
    1856:	de b7       	in	r29, 0x3e	; 62
    1858:	4c 01       	movw	r8, r24
    185a:	27 01       	movw	r4, r14
    185c:	38 01       	movw	r6, r16
    185e:	a9 82       	std	Y+1, r10	; 0x01
    1860:	ba 82       	std	Y+2, r11	; 0x02
    1862:	cb 82       	std	Y+3, r12	; 0x03
    1864:	dc 82       	std	Y+4, r13	; 0x04
        double Kp, double Ki, double Kd, int POn, int ControllerDirection)
{
    myOutput = Output;
    1866:	fc 01       	movw	r30, r24
    1868:	57 8f       	std	Z+31, r21	; 0x1f
    186a:	46 8f       	std	Z+30, r20	; 0x1e
    myInput = Input;
    186c:	75 8f       	std	Z+29, r23	; 0x1d
    186e:	64 8f       	std	Z+28, r22	; 0x1c
    mySetpoint = Setpoint;
    1870:	31 a3       	std	Z+33, r19	; 0x21
    1872:	20 a3       	std	Z+32, r18	; 0x20
    inAuto = false;
    1874:	12 ae       	std	Z+58, r1	; 0x3a
 *  here.
 **************************************************************************/
void PID::SetOutputLimits(double Min, double Max)
{
   if(Min >= Max) return;
   outMin = Min;
    1876:	12 aa       	std	Z+50, r1	; 0x32
    1878:	13 aa       	std	Z+51, r1	; 0x33
    187a:	14 aa       	std	Z+52, r1	; 0x34
    187c:	15 aa       	std	Z+53, r1	; 0x35
   outMax = Max;
    187e:	80 e0       	ldi	r24, 0x00	; 0
    1880:	90 e0       	ldi	r25, 0x00	; 0
    1882:	af e7       	ldi	r26, 0x7F	; 127
    1884:	b3 e4       	ldi	r27, 0x43	; 67
    1886:	86 ab       	std	Z+54, r24	; 0x36
    1888:	97 ab       	std	Z+55, r25	; 0x37
    188a:	a0 af       	std	Z+56, r26	; 0x38
    188c:	b1 af       	std	Z+57, r27	; 0x39
    inAuto = false;

    PID::SetOutputLimits(0, 255);				//default output limit corresponds to
												//the arduino pwm limits

    SampleTime = 100;							//default Controller Sample Time is 0.1 seconds
    188e:	84 e6       	ldi	r24, 0x64	; 100
    1890:	90 e0       	ldi	r25, 0x00	; 0
    1892:	a0 e0       	ldi	r26, 0x00	; 0
    1894:	b0 e0       	ldi	r27, 0x00	; 0
    1896:	86 a7       	std	Z+46, r24	; 0x2e
    1898:	97 a7       	std	Z+47, r25	; 0x2f
    189a:	a0 ab       	std	Z+48, r26	; 0x30
    189c:	b1 ab       	std	Z+49, r27	; 0x31

    PID::SetControllerDirection(ControllerDirection);
    189e:	6d 8d       	ldd	r22, Y+29	; 0x1d
    18a0:	7e 8d       	ldd	r23, Y+30	; 0x1e
    18a2:	c4 01       	movw	r24, r8
    18a4:	0e 94 dc 0b 	call	0x17b8	; 0x17b8 <_ZN3PID22SetControllerDirectionEi>
    PID::SetTunings(Kp, Ki, Kd, POn);
    18a8:	ab 8c       	ldd	r10, Y+27	; 0x1b
    18aa:	bc 8c       	ldd	r11, Y+28	; 0x1c
    18ac:	cf 88       	ldd	r12, Y+23	; 0x17
    18ae:	d8 8c       	ldd	r13, Y+24	; 0x18
    18b0:	e9 8c       	ldd	r14, Y+25	; 0x19
    18b2:	fa 8c       	ldd	r15, Y+26	; 0x1a
    18b4:	09 81       	ldd	r16, Y+1	; 0x01
    18b6:	1a 81       	ldd	r17, Y+2	; 0x02
    18b8:	2b 81       	ldd	r18, Y+3	; 0x03
    18ba:	3c 81       	ldd	r19, Y+4	; 0x04
    18bc:	b3 01       	movw	r22, r6
    18be:	a2 01       	movw	r20, r4
    18c0:	c4 01       	movw	r24, r8
    18c2:	0e 94 c5 09 	call	0x138a	; 0x138a <_ZN3PID10SetTuningsEdddi>

    lastTime = millis()-SampleTime;
    18c6:	0e 94 a7 1b 	call	0x374e	; 0x374e <millis>
    18ca:	f4 01       	movw	r30, r8
    18cc:	46 a4       	ldd	r4, Z+46	; 0x2e
    18ce:	57 a4       	ldd	r5, Z+47	; 0x2f
    18d0:	60 a8       	ldd	r6, Z+48	; 0x30
    18d2:	71 a8       	ldd	r7, Z+49	; 0x31
    18d4:	dc 01       	movw	r26, r24
    18d6:	cb 01       	movw	r24, r22
    18d8:	84 19       	sub	r24, r4
    18da:	95 09       	sbc	r25, r5
    18dc:	a6 09       	sbc	r26, r6
    18de:	b7 09       	sbc	r27, r7
    18e0:	82 a3       	std	Z+34, r24	; 0x22
    18e2:	93 a3       	std	Z+35, r25	; 0x23
    18e4:	a4 a3       	std	Z+36, r26	; 0x24
    18e6:	b5 a3       	std	Z+37, r27	; 0x25
}
    18e8:	0f 90       	pop	r0
    18ea:	0f 90       	pop	r0
    18ec:	0f 90       	pop	r0
    18ee:	0f 90       	pop	r0
    18f0:	df 91       	pop	r29
    18f2:	cf 91       	pop	r28
    18f4:	1f 91       	pop	r17
    18f6:	0f 91       	pop	r16
    18f8:	ff 90       	pop	r15
    18fa:	ef 90       	pop	r14
    18fc:	df 90       	pop	r13
    18fe:	cf 90       	pop	r12
    1900:	bf 90       	pop	r11
    1902:	af 90       	pop	r10
    1904:	9f 90       	pop	r9
    1906:	8f 90       	pop	r8
    1908:	7f 90       	pop	r7
    190a:	6f 90       	pop	r6
    190c:	5f 90       	pop	r5
    190e:	4f 90       	pop	r4
    1910:	08 95       	ret

00001912 <_ZN6I2Cdev10writeBytesEhhhPh>:
        b &= mask;
        b >>= (bitStart - length + 1);
        *data = b;
    }
    return count;
}
    1912:	ff 92       	push	r15
    1914:	0f 93       	push	r16
    1916:	1f 93       	push	r17
    1918:	cf 93       	push	r28
    191a:	df 93       	push	r29
    191c:	c6 2f       	mov	r28, r22
    191e:	14 2f       	mov	r17, r20
    1920:	f2 2e       	mov	r15, r18
    1922:	03 2f       	mov	r16, r19
    1924:	68 2f       	mov	r22, r24
    1926:	86 ec       	ldi	r24, 0xC6	; 198
    1928:	94 e0       	ldi	r25, 0x04	; 4
    192a:	0e 94 23 12 	call	0x2446	; 0x2446 <_ZN7TwoWire17beginTransmissionEh>
    192e:	6c 2f       	mov	r22, r28
    1930:	86 ec       	ldi	r24, 0xC6	; 198
    1932:	94 e0       	ldi	r25, 0x04	; 4
    1934:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <_ZN7TwoWire5writeEh>
    1938:	cf 2d       	mov	r28, r15
    193a:	d0 2f       	mov	r29, r16
    193c:	ce 01       	movw	r24, r28
    193e:	81 0f       	add	r24, r17
    1940:	91 1d       	adc	r25, r1
    1942:	8c 01       	movw	r16, r24
    1944:	c0 17       	cp	r28, r16
    1946:	d1 07       	cpc	r29, r17
    1948:	31 f0       	breq	.+12     	; 0x1956 <_ZN6I2Cdev10writeBytesEhhhPh+0x44>
    194a:	69 91       	ld	r22, Y+
    194c:	86 ec       	ldi	r24, 0xC6	; 198
    194e:	94 e0       	ldi	r25, 0x04	; 4
    1950:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <_ZN7TwoWire5writeEh>
    1954:	f7 cf       	rjmp	.-18     	; 0x1944 <_ZN6I2Cdev10writeBytesEhhhPh+0x32>
    1956:	86 ec       	ldi	r24, 0xC6	; 198
    1958:	94 e0       	ldi	r25, 0x04	; 4
    195a:	0e 94 a7 12 	call	0x254e	; 0x254e <_ZN7TwoWire15endTransmissionEv>
    195e:	91 e0       	ldi	r25, 0x01	; 1
    1960:	81 11       	cpse	r24, r1
    1962:	90 e0       	ldi	r25, 0x00	; 0
    1964:	89 2f       	mov	r24, r25
    1966:	df 91       	pop	r29
    1968:	cf 91       	pop	r28
    196a:	1f 91       	pop	r17
    196c:	0f 91       	pop	r16
    196e:	ff 90       	pop	r15
    1970:	08 95       	ret

00001972 <_ZN6I2Cdev9writeByteEhhh>:
    1972:	cf 93       	push	r28
    1974:	df 93       	push	r29
    1976:	1f 92       	push	r1
    1978:	cd b7       	in	r28, 0x3d	; 61
    197a:	de b7       	in	r29, 0x3e	; 62
    197c:	49 83       	std	Y+1, r20	; 0x01
    197e:	9e 01       	movw	r18, r28
    1980:	2f 5f       	subi	r18, 0xFF	; 255
    1982:	3f 4f       	sbci	r19, 0xFF	; 255
    1984:	41 e0       	ldi	r20, 0x01	; 1
    1986:	0e 94 89 0c 	call	0x1912	; 0x1912 <_ZN6I2Cdev10writeBytesEhhhPh>
    198a:	0f 90       	pop	r0
    198c:	df 91       	pop	r29
    198e:	cf 91       	pop	r28
    1990:	08 95       	ret

00001992 <_ZN6I2Cdev10writeWordsEhhhPj>:
    1992:	cf 92       	push	r12
    1994:	df 92       	push	r13
    1996:	ff 92       	push	r15
    1998:	0f 93       	push	r16
    199a:	1f 93       	push	r17
    199c:	cf 93       	push	r28
    199e:	df 93       	push	r29
    19a0:	c6 2f       	mov	r28, r22
    19a2:	04 2f       	mov	r16, r20
    19a4:	69 01       	movw	r12, r18
    19a6:	68 2f       	mov	r22, r24
    19a8:	86 ec       	ldi	r24, 0xC6	; 198
    19aa:	94 e0       	ldi	r25, 0x04	; 4
    19ac:	0e 94 23 12 	call	0x2446	; 0x2446 <_ZN7TwoWire17beginTransmissionEh>
    19b0:	6c 2f       	mov	r22, r28
    19b2:	86 ec       	ldi	r24, 0xC6	; 198
    19b4:	94 e0       	ldi	r25, 0x04	; 4
    19b6:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <_ZN7TwoWire5writeEh>
    19ba:	10 e0       	ldi	r17, 0x00	; 0
    19bc:	00 0f       	add	r16, r16
    19be:	11 1f       	adc	r17, r17
    19c0:	f1 2c       	mov	r15, r1
    19c2:	cf 2d       	mov	r28, r15
    19c4:	d0 e0       	ldi	r29, 0x00	; 0
    19c6:	c0 17       	cp	r28, r16
    19c8:	d1 07       	cpc	r29, r17
    19ca:	8c f4       	brge	.+34     	; 0x19ee <_ZN6I2Cdev10writeWordsEhhhPj+0x5c>
    19cc:	cc 0f       	add	r28, r28
    19ce:	dd 1f       	adc	r29, r29
    19d0:	cc 0d       	add	r28, r12
    19d2:	dd 1d       	adc	r29, r13
    19d4:	69 81       	ldd	r22, Y+1	; 0x01
    19d6:	86 ec       	ldi	r24, 0xC6	; 198
    19d8:	94 e0       	ldi	r25, 0x04	; 4
    19da:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <_ZN7TwoWire5writeEh>
    19de:	68 81       	ld	r22, Y
    19e0:	86 ec       	ldi	r24, 0xC6	; 198
    19e2:	94 e0       	ldi	r25, 0x04	; 4
    19e4:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <_ZN7TwoWire5writeEh>
    19e8:	f3 94       	inc	r15
    19ea:	f3 94       	inc	r15
    19ec:	ea cf       	rjmp	.-44     	; 0x19c2 <_ZN6I2Cdev10writeWordsEhhhPj+0x30>
    19ee:	86 ec       	ldi	r24, 0xC6	; 198
    19f0:	94 e0       	ldi	r25, 0x04	; 4
    19f2:	0e 94 a7 12 	call	0x254e	; 0x254e <_ZN7TwoWire15endTransmissionEv>
    19f6:	91 e0       	ldi	r25, 0x01	; 1
    19f8:	81 11       	cpse	r24, r1
    19fa:	90 e0       	ldi	r25, 0x00	; 0
    19fc:	89 2f       	mov	r24, r25
    19fe:	df 91       	pop	r29
    1a00:	cf 91       	pop	r28
    1a02:	1f 91       	pop	r17
    1a04:	0f 91       	pop	r16
    1a06:	ff 90       	pop	r15
    1a08:	df 90       	pop	r13
    1a0a:	cf 90       	pop	r12
    1a0c:	08 95       	ret

00001a0e <_ZN6I2Cdev9writeWordEhhj>:
    1a0e:	cf 93       	push	r28
    1a10:	df 93       	push	r29
    1a12:	00 d0       	rcall	.+0      	; 0x1a14 <_ZN6I2Cdev9writeWordEhhj+0x6>
    1a14:	cd b7       	in	r28, 0x3d	; 61
    1a16:	de b7       	in	r29, 0x3e	; 62
    1a18:	5a 83       	std	Y+2, r21	; 0x02
    1a1a:	49 83       	std	Y+1, r20	; 0x01
    1a1c:	9e 01       	movw	r18, r28
    1a1e:	2f 5f       	subi	r18, 0xFF	; 255
    1a20:	3f 4f       	sbci	r19, 0xFF	; 255
    1a22:	41 e0       	ldi	r20, 0x01	; 1
    1a24:	0e 94 c9 0c 	call	0x1992	; 0x1992 <_ZN6I2Cdev10writeWordsEhhhPj>
    1a28:	0f 90       	pop	r0
    1a2a:	0f 90       	pop	r0
    1a2c:	df 91       	pop	r29
    1a2e:	cf 91       	pop	r28
    1a30:	08 95       	ret

00001a32 <_ZN6I2Cdev9readBytesEhhhPhj>:
    1a32:	3f 92       	push	r3
    1a34:	4f 92       	push	r4
    1a36:	5f 92       	push	r5
    1a38:	6f 92       	push	r6
    1a3a:	7f 92       	push	r7
    1a3c:	8f 92       	push	r8
    1a3e:	9f 92       	push	r9
    1a40:	af 92       	push	r10
    1a42:	bf 92       	push	r11
    1a44:	cf 92       	push	r12
    1a46:	df 92       	push	r13
    1a48:	ef 92       	push	r14
    1a4a:	ff 92       	push	r15
    1a4c:	0f 93       	push	r16
    1a4e:	1f 93       	push	r17
    1a50:	cf 93       	push	r28
    1a52:	df 93       	push	r29
    1a54:	00 d0       	rcall	.+0      	; 0x1a56 <_ZN6I2Cdev9readBytesEhhhPhj+0x24>
    1a56:	00 d0       	rcall	.+0      	; 0x1a58 <_ZN6I2Cdev9readBytesEhhhPhj+0x26>
    1a58:	00 d0       	rcall	.+0      	; 0x1a5a <_ZN6I2Cdev9readBytesEhhhPhj+0x28>
    1a5a:	cd b7       	in	r28, 0x3d	; 61
    1a5c:	de b7       	in	r29, 0x3e	; 62
    1a5e:	d8 2e       	mov	r13, r24
    1a60:	c6 2e       	mov	r12, r22
    1a62:	4d 83       	std	Y+5, r20	; 0x05
    1a64:	79 01       	movw	r14, r18
    1a66:	0e 94 a7 1b 	call	0x374e	; 0x374e <millis>
    1a6a:	4b 01       	movw	r8, r22
    1a6c:	5c 01       	movw	r10, r24
    1a6e:	31 2c       	mov	r3, r1
    1a70:	1e 82       	std	Y+6, r1	; 0x06
    1a72:	9d 81       	ldd	r25, Y+5	; 0x05
    1a74:	89 2f       	mov	r24, r25
    1a76:	90 e0       	ldi	r25, 0x00	; 0
    1a78:	9c 83       	std	Y+4, r25	; 0x04
    1a7a:	8b 83       	std	Y+3, r24	; 0x03
    1a7c:	28 01       	movw	r4, r16
    1a7e:	61 2c       	mov	r6, r1
    1a80:	71 2c       	mov	r7, r1
    1a82:	ed 81       	ldd	r30, Y+5	; 0x05
    1a84:	3e 16       	cp	r3, r30
    1a86:	c8 f5       	brcc	.+114    	; 0x1afa <_ZN6I2Cdev9readBytesEhhhPhj+0xc8>
    1a88:	6d 2d       	mov	r22, r13
    1a8a:	86 ec       	ldi	r24, 0xC6	; 198
    1a8c:	94 e0       	ldi	r25, 0x04	; 4
    1a8e:	0e 94 23 12 	call	0x2446	; 0x2446 <_ZN7TwoWire17beginTransmissionEh>
    1a92:	6c 2d       	mov	r22, r12
    1a94:	86 ec       	ldi	r24, 0xC6	; 198
    1a96:	94 e0       	ldi	r25, 0x04	; 4
    1a98:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <_ZN7TwoWire5writeEh>
    1a9c:	86 ec       	ldi	r24, 0xC6	; 198
    1a9e:	94 e0       	ldi	r25, 0x04	; 4
    1aa0:	0e 94 a7 12 	call	0x254e	; 0x254e <_ZN7TwoWire15endTransmissionEv>
    1aa4:	6d 2d       	mov	r22, r13
    1aa6:	86 ec       	ldi	r24, 0xC6	; 198
    1aa8:	94 e0       	ldi	r25, 0x04	; 4
    1aaa:	0e 94 23 12 	call	0x2446	; 0x2446 <_ZN7TwoWire17beginTransmissionEh>
    1aae:	4b 81       	ldd	r20, Y+3	; 0x03
    1ab0:	5c 81       	ldd	r21, Y+4	; 0x04
    1ab2:	43 19       	sub	r20, r3
    1ab4:	51 09       	sbc	r21, r1
    1ab6:	41 32       	cpi	r20, 0x21	; 33
    1ab8:	51 05       	cpc	r21, r1
    1aba:	14 f0       	brlt	.+4      	; 0x1ac0 <_ZN6I2Cdev9readBytesEhhhPhj+0x8e>
    1abc:	40 e2       	ldi	r20, 0x20	; 32
    1abe:	50 e0       	ldi	r21, 0x00	; 0
    1ac0:	6d 2d       	mov	r22, r13
    1ac2:	86 ec       	ldi	r24, 0xC6	; 198
    1ac4:	94 e0       	ldi	r25, 0x04	; 4
    1ac6:	0e 94 a4 12 	call	0x2548	; 0x2548 <_ZN7TwoWire11requestFromEhh>
    1aca:	86 ec       	ldi	r24, 0xC6	; 198
    1acc:	94 e0       	ldi	r25, 0x04	; 4
    1ace:	0e 94 8b 11 	call	0x2316	; 0x2316 <_ZN7TwoWire9availableEv>
    1ad2:	89 2b       	or	r24, r25
    1ad4:	09 f4       	brne	.+2      	; 0x1ad8 <_ZN6I2Cdev9readBytesEhhhPhj+0xa6>
    1ad6:	43 c0       	rjmp	.+134    	; 0x1b5e <_ZN6I2Cdev9readBytesEhhhPhj+0x12c>
    1ad8:	01 15       	cp	r16, r1
    1ada:	11 05       	cpc	r17, r1
    1adc:	69 f1       	breq	.+90     	; 0x1b38 <_ZN6I2Cdev9readBytesEhhhPhj+0x106>
    1ade:	0e 94 a7 1b 	call	0x374e	; 0x374e <millis>
    1ae2:	dc 01       	movw	r26, r24
    1ae4:	cb 01       	movw	r24, r22
    1ae6:	88 19       	sub	r24, r8
    1ae8:	99 09       	sbc	r25, r9
    1aea:	aa 09       	sbc	r26, r10
    1aec:	bb 09       	sbc	r27, r11
    1aee:	84 15       	cp	r24, r4
    1af0:	95 05       	cpc	r25, r5
    1af2:	a6 05       	cpc	r26, r6
    1af4:	b7 05       	cpc	r27, r7
    1af6:	00 f1       	brcs	.+64     	; 0x1b38 <_ZN6I2Cdev9readBytesEhhhPhj+0x106>
    1af8:	32 c0       	rjmp	.+100    	; 0x1b5e <_ZN6I2Cdev9readBytesEhhhPhj+0x12c>
    1afa:	01 15       	cp	r16, r1
    1afc:	11 05       	cpc	r17, r1
    1afe:	a9 f1       	breq	.+106    	; 0x1b6a <_ZN6I2Cdev9readBytesEhhhPhj+0x138>
    1b00:	0e 94 a7 1b 	call	0x374e	; 0x374e <millis>
    1b04:	dc 01       	movw	r26, r24
    1b06:	cb 01       	movw	r24, r22
    1b08:	88 19       	sub	r24, r8
    1b0a:	99 09       	sbc	r25, r9
    1b0c:	aa 09       	sbc	r26, r10
    1b0e:	bb 09       	sbc	r27, r11
    1b10:	20 e0       	ldi	r18, 0x00	; 0
    1b12:	30 e0       	ldi	r19, 0x00	; 0
    1b14:	80 17       	cp	r24, r16
    1b16:	91 07       	cpc	r25, r17
    1b18:	a2 07       	cpc	r26, r18
    1b1a:	b3 07       	cpc	r27, r19
    1b1c:	30 f1       	brcs	.+76     	; 0x1b6a <_ZN6I2Cdev9readBytesEhhhPhj+0x138>
    1b1e:	fd 81       	ldd	r31, Y+5	; 0x05
    1b20:	2f 2f       	mov	r18, r31
    1b22:	30 e0       	ldi	r19, 0x00	; 0
    1b24:	4e 81       	ldd	r20, Y+6	; 0x06
    1b26:	84 2f       	mov	r24, r20
    1b28:	44 0f       	add	r20, r20
    1b2a:	99 0b       	sbc	r25, r25
    1b2c:	82 17       	cp	r24, r18
    1b2e:	93 07       	cpc	r25, r19
    1b30:	e4 f4       	brge	.+56     	; 0x1b6a <_ZN6I2Cdev9readBytesEhhhPhj+0x138>
    1b32:	8f ef       	ldi	r24, 0xFF	; 255
    1b34:	8e 83       	std	Y+6, r24	; 0x06
    1b36:	19 c0       	rjmp	.+50     	; 0x1b6a <_ZN6I2Cdev9readBytesEhhhPhj+0x138>
    1b38:	f7 01       	movw	r30, r14
    1b3a:	2e 81       	ldd	r18, Y+6	; 0x06
    1b3c:	e2 0f       	add	r30, r18
    1b3e:	f1 1d       	adc	r31, r1
    1b40:	27 fd       	sbrc	r18, 7
    1b42:	fa 95       	dec	r31
    1b44:	fa 83       	std	Y+2, r31	; 0x02
    1b46:	e9 83       	std	Y+1, r30	; 0x01
    1b48:	86 ec       	ldi	r24, 0xC6	; 198
    1b4a:	94 e0       	ldi	r25, 0x04	; 4
    1b4c:	0e 94 93 11 	call	0x2326	; 0x2326 <_ZN7TwoWire4readEv>
    1b50:	e9 81       	ldd	r30, Y+1	; 0x01
    1b52:	fa 81       	ldd	r31, Y+2	; 0x02
    1b54:	80 83       	st	Z, r24
    1b56:	fe 81       	ldd	r31, Y+6	; 0x06
    1b58:	ff 5f       	subi	r31, 0xFF	; 255
    1b5a:	fe 83       	std	Y+6, r31	; 0x06
    1b5c:	b6 cf       	rjmp	.-148    	; 0x1aca <_ZN6I2Cdev9readBytesEhhhPhj+0x98>
    1b5e:	8d 81       	ldd	r24, Y+5	; 0x05
    1b60:	81 32       	cpi	r24, 0x21	; 33
    1b62:	08 f0       	brcs	.+2      	; 0x1b66 <_ZN6I2Cdev9readBytesEhhhPhj+0x134>
    1b64:	80 e2       	ldi	r24, 0x20	; 32
    1b66:	38 0e       	add	r3, r24
    1b68:	8c cf       	rjmp	.-232    	; 0x1a82 <_ZN6I2Cdev9readBytesEhhhPhj+0x50>
    1b6a:	8e 81       	ldd	r24, Y+6	; 0x06
    1b6c:	26 96       	adiw	r28, 0x06	; 6
    1b6e:	0f b6       	in	r0, 0x3f	; 63
    1b70:	f8 94       	cli
    1b72:	de bf       	out	0x3e, r29	; 62
    1b74:	0f be       	out	0x3f, r0	; 63
    1b76:	cd bf       	out	0x3d, r28	; 61
    1b78:	df 91       	pop	r29
    1b7a:	cf 91       	pop	r28
    1b7c:	1f 91       	pop	r17
    1b7e:	0f 91       	pop	r16
    1b80:	ff 90       	pop	r15
    1b82:	ef 90       	pop	r14
    1b84:	df 90       	pop	r13
    1b86:	cf 90       	pop	r12
    1b88:	bf 90       	pop	r11
    1b8a:	af 90       	pop	r10
    1b8c:	9f 90       	pop	r9
    1b8e:	8f 90       	pop	r8
    1b90:	7f 90       	pop	r7
    1b92:	6f 90       	pop	r6
    1b94:	5f 90       	pop	r5
    1b96:	4f 90       	pop	r4
    1b98:	3f 90       	pop	r3
    1b9a:	08 95       	ret

00001b9c <_ZN6I2Cdev8readByteEhhPhj>:
    1b9c:	0f 93       	push	r16
    1b9e:	1f 93       	push	r17
    1ba0:	89 01       	movw	r16, r18
    1ba2:	9a 01       	movw	r18, r20
    1ba4:	41 e0       	ldi	r20, 0x01	; 1
    1ba6:	0e 94 19 0d 	call	0x1a32	; 0x1a32 <_ZN6I2Cdev9readBytesEhhhPhj>
    1baa:	1f 91       	pop	r17
    1bac:	0f 91       	pop	r16
    1bae:	08 95       	ret

00001bb0 <_ZN6I2Cdev8writeBitEhhhh>:
 * @param regAddr Register regAddr to write to
 * @param bitNum Bit position to write (0-7)
 * @param value New bit value to write
 * @return Status of operation (true = success)
 */
bool I2Cdev::writeBit(uint8_t devAddr, uint8_t regAddr, uint8_t bitNum, uint8_t data) {
    1bb0:	ef 92       	push	r14
    1bb2:	ff 92       	push	r15
    1bb4:	0f 93       	push	r16
    1bb6:	1f 93       	push	r17
    1bb8:	cf 93       	push	r28
    1bba:	df 93       	push	r29
    1bbc:	1f 92       	push	r1
    1bbe:	cd b7       	in	r28, 0x3d	; 61
    1bc0:	de b7       	in	r29, 0x3e	; 62
    1bc2:	18 2f       	mov	r17, r24
    1bc4:	06 2f       	mov	r16, r22
    1bc6:	f4 2e       	mov	r15, r20
    1bc8:	e2 2e       	mov	r14, r18
    uint8_t b;
    readByte(devAddr, regAddr, &b);
    1bca:	20 91 05 01 	lds	r18, 0x0105	; 0x800105 <_ZN6I2Cdev11readTimeoutE>
    1bce:	30 91 06 01 	lds	r19, 0x0106	; 0x800106 <_ZN6I2Cdev11readTimeoutE+0x1>
    1bd2:	ae 01       	movw	r20, r28
    1bd4:	4f 5f       	subi	r20, 0xFF	; 255
    1bd6:	5f 4f       	sbci	r21, 0xFF	; 255
    1bd8:	0e 94 ce 0d 	call	0x1b9c	; 0x1b9c <_ZN6I2Cdev8readByteEhhPhj>
    1bdc:	89 81       	ldd	r24, Y+1	; 0x01
    b = (data != 0) ? (b | (1 << bitNum)) : (b & ~(1 << bitNum));
    1bde:	41 e0       	ldi	r20, 0x01	; 1
    1be0:	50 e0       	ldi	r21, 0x00	; 0
    1be2:	01 c0       	rjmp	.+2      	; 0x1be6 <_ZN6I2Cdev8writeBitEhhhh+0x36>
    1be4:	44 0f       	add	r20, r20
    1be6:	fa 94       	dec	r15
    1be8:	ea f7       	brpl	.-6      	; 0x1be4 <_ZN6I2Cdev8writeBitEhhhh+0x34>
    1bea:	ee 20       	and	r14, r14
    1bec:	11 f0       	breq	.+4      	; 0x1bf2 <_ZN6I2Cdev8writeBitEhhhh+0x42>
    1bee:	48 2b       	or	r20, r24
    1bf0:	02 c0       	rjmp	.+4      	; 0x1bf6 <_ZN6I2Cdev8writeBitEhhhh+0x46>
    1bf2:	40 95       	com	r20
    1bf4:	48 23       	and	r20, r24
    1bf6:	49 83       	std	Y+1, r20	; 0x01
    return writeByte(devAddr, regAddr, b);
    1bf8:	60 2f       	mov	r22, r16
    1bfa:	81 2f       	mov	r24, r17
    1bfc:	0e 94 b9 0c 	call	0x1972	; 0x1972 <_ZN6I2Cdev9writeByteEhhh>
}
    1c00:	0f 90       	pop	r0
    1c02:	df 91       	pop	r29
    1c04:	cf 91       	pop	r28
    1c06:	1f 91       	pop	r17
    1c08:	0f 91       	pop	r16
    1c0a:	ff 90       	pop	r15
    1c0c:	ef 90       	pop	r14
    1c0e:	08 95       	ret

00001c10 <_ZN6I2Cdev9writeBitsEhhhhh>:
 * @param bitStart First bit position to write (0-7)
 * @param length Number of bits to write (not more than 8)
 * @param data Right-aligned value to write
 * @return Status of operation (true = success)
 */
bool I2Cdev::writeBits(uint8_t devAddr, uint8_t regAddr, uint8_t bitStart, uint8_t length, uint8_t data) {
    1c10:	df 92       	push	r13
    1c12:	ef 92       	push	r14
    1c14:	ff 92       	push	r15
    1c16:	0f 93       	push	r16
    1c18:	1f 93       	push	r17
    1c1a:	cf 93       	push	r28
    1c1c:	df 93       	push	r29
    1c1e:	1f 92       	push	r1
    1c20:	cd b7       	in	r28, 0x3d	; 61
    1c22:	de b7       	in	r29, 0x3e	; 62
    1c24:	18 2f       	mov	r17, r24
    1c26:	f6 2e       	mov	r15, r22
    1c28:	e4 2e       	mov	r14, r20
    1c2a:	d2 2e       	mov	r13, r18
    // 00011100 mask byte
    // 10101111 original value (sample)
    // 10100011 original & ~mask
    // 10101011 masked | value
    uint8_t b;
    if (readByte(devAddr, regAddr, &b) != 0) {
    1c2c:	20 91 05 01 	lds	r18, 0x0105	; 0x800105 <_ZN6I2Cdev11readTimeoutE>
    1c30:	30 91 06 01 	lds	r19, 0x0106	; 0x800106 <_ZN6I2Cdev11readTimeoutE+0x1>
    1c34:	ae 01       	movw	r20, r28
    1c36:	4f 5f       	subi	r20, 0xFF	; 255
    1c38:	5f 4f       	sbci	r21, 0xFF	; 255
    1c3a:	0e 94 ce 0d 	call	0x1b9c	; 0x1b9c <_ZN6I2Cdev8readByteEhhPhj>
    1c3e:	88 23       	and	r24, r24
    1c40:	39 f1       	breq	.+78     	; 0x1c90 <_ZN6I2Cdev9writeBitsEhhhhh+0x80>
        uint8_t mask = ((1 << length) - 1) << (bitStart - length + 1);
    1c42:	2e 2d       	mov	r18, r14
    1c44:	30 e0       	ldi	r19, 0x00	; 0
    1c46:	2d 19       	sub	r18, r13
    1c48:	31 09       	sbc	r19, r1
    1c4a:	2f 5f       	subi	r18, 0xFF	; 255
    1c4c:	3f 4f       	sbci	r19, 0xFF	; 255
    1c4e:	81 e0       	ldi	r24, 0x01	; 1
    1c50:	90 e0       	ldi	r25, 0x00	; 0
    1c52:	02 c0       	rjmp	.+4      	; 0x1c58 <_ZN6I2Cdev9writeBitsEhhhhh+0x48>
    1c54:	88 0f       	add	r24, r24
    1c56:	99 1f       	adc	r25, r25
    1c58:	da 94       	dec	r13
    1c5a:	e2 f7       	brpl	.-8      	; 0x1c54 <_ZN6I2Cdev9writeBitsEhhhhh+0x44>
    1c5c:	01 97       	sbiw	r24, 0x01	; 1
    1c5e:	02 2e       	mov	r0, r18
    1c60:	01 c0       	rjmp	.+2      	; 0x1c64 <_ZN6I2Cdev9writeBitsEhhhhh+0x54>
    1c62:	88 0f       	add	r24, r24
    1c64:	0a 94       	dec	r0
    1c66:	ea f7       	brpl	.-6      	; 0x1c62 <_ZN6I2Cdev9writeBitsEhhhhh+0x52>
        data <<= (bitStart - length + 1); // shift data into correct position
    1c68:	40 2f       	mov	r20, r16
    1c6a:	50 e0       	ldi	r21, 0x00	; 0
    1c6c:	ba 01       	movw	r22, r20
    1c6e:	02 c0       	rjmp	.+4      	; 0x1c74 <_ZN6I2Cdev9writeBitsEhhhhh+0x64>
    1c70:	66 0f       	add	r22, r22
    1c72:	77 1f       	adc	r23, r23
    1c74:	2a 95       	dec	r18
    1c76:	e2 f7       	brpl	.-8      	; 0x1c70 <_ZN6I2Cdev9writeBitsEhhhhh+0x60>
        data &= mask; // zero all non-important bits in data
        b &= ~(mask); // zero all important bits in existing byte
        b |= data; // combine data with existing byte
    1c78:	48 2f       	mov	r20, r24
    1c7a:	40 95       	com	r20
    1c7c:	99 81       	ldd	r25, Y+1	; 0x01
    1c7e:	49 23       	and	r20, r25
    1c80:	86 23       	and	r24, r22
    1c82:	48 2b       	or	r20, r24
    1c84:	49 83       	std	Y+1, r20	; 0x01
        return writeByte(devAddr, regAddr, b);
    1c86:	6f 2d       	mov	r22, r15
    1c88:	81 2f       	mov	r24, r17
    1c8a:	0e 94 b9 0c 	call	0x1972	; 0x1972 <_ZN6I2Cdev9writeByteEhhh>
    1c8e:	01 c0       	rjmp	.+2      	; 0x1c92 <_ZN6I2Cdev9writeBitsEhhhhh+0x82>
    } else {
        return false;
    1c90:	80 e0       	ldi	r24, 0x00	; 0
    }
}
    1c92:	0f 90       	pop	r0
    1c94:	df 91       	pop	r29
    1c96:	cf 91       	pop	r28
    1c98:	1f 91       	pop	r17
    1c9a:	0f 91       	pop	r16
    1c9c:	ff 90       	pop	r15
    1c9e:	ef 90       	pop	r14
    1ca0:	df 90       	pop	r13
    1ca2:	08 95       	ret

00001ca4 <_ZN7MPU6050C1Ev>:
// ZG_OFFS_USR* register

int16_t MPU6050::getZGyroOffset() {
    I2Cdev::readBytes(devAddr, MPU6050_RA_ZG_OFFS_USRH, 2, buffer);
    return (((int16_t)buffer[0]) << 8) | buffer[1];
}
    1ca4:	28 e6       	ldi	r18, 0x68	; 104
    1ca6:	fc 01       	movw	r30, r24
    1ca8:	20 83       	st	Z, r18
    1caa:	08 95       	ret

00001cac <_ZN7MPU6050C1Eh>:
    1cac:	fc 01       	movw	r30, r24
    1cae:	60 83       	st	Z, r22
    1cb0:	08 95       	ret

00001cb2 <_ZN7MPU605021setFullScaleGyroRangeEh>:
    1cb2:	0f 93       	push	r16
    1cb4:	06 2f       	mov	r16, r22
    1cb6:	22 e0       	ldi	r18, 0x02	; 2
    1cb8:	44 e0       	ldi	r20, 0x04	; 4
    1cba:	6b e1       	ldi	r22, 0x1B	; 27
    1cbc:	fc 01       	movw	r30, r24
    1cbe:	80 81       	ld	r24, Z
    1cc0:	0e 94 08 0e 	call	0x1c10	; 0x1c10 <_ZN6I2Cdev9writeBitsEhhhhh>
    1cc4:	0f 91       	pop	r16
    1cc6:	08 95       	ret

00001cc8 <_ZN7MPU605022setFullScaleAccelRangeEh>:
    1cc8:	0f 93       	push	r16
    1cca:	06 2f       	mov	r16, r22
    1ccc:	22 e0       	ldi	r18, 0x02	; 2
    1cce:	44 e0       	ldi	r20, 0x04	; 4
    1cd0:	6c e1       	ldi	r22, 0x1C	; 28
    1cd2:	fc 01       	movw	r30, r24
    1cd4:	80 81       	ld	r24, Z
    1cd6:	0e 94 08 0e 	call	0x1c10	; 0x1c10 <_ZN6I2Cdev9writeBitsEhhhhh>
    1cda:	0f 91       	pop	r16
    1cdc:	08 95       	ret

00001cde <_ZN7MPU605016getAccelerationYEv>:
    1cde:	0f 93       	push	r16
    1ce0:	1f 93       	push	r17
    1ce2:	cf 93       	push	r28
    1ce4:	df 93       	push	r29
    1ce6:	ec 01       	movw	r28, r24
    1ce8:	00 91 05 01 	lds	r16, 0x0105	; 0x800105 <_ZN6I2Cdev11readTimeoutE>
    1cec:	10 91 06 01 	lds	r17, 0x0106	; 0x800106 <_ZN6I2Cdev11readTimeoutE+0x1>
    1cf0:	9c 01       	movw	r18, r24
    1cf2:	2f 5f       	subi	r18, 0xFF	; 255
    1cf4:	3f 4f       	sbci	r19, 0xFF	; 255
    1cf6:	42 e0       	ldi	r20, 0x02	; 2
    1cf8:	6d e3       	ldi	r22, 0x3D	; 61
    1cfa:	88 81       	ld	r24, Y
    1cfc:	0e 94 19 0d 	call	0x1a32	; 0x1a32 <_ZN6I2Cdev9readBytesEhhhPhj>
    1d00:	89 81       	ldd	r24, Y+1	; 0x01
    1d02:	9a 81       	ldd	r25, Y+2	; 0x02
    1d04:	98 27       	eor	r25, r24
    1d06:	89 27       	eor	r24, r25
    1d08:	98 27       	eor	r25, r24
    1d0a:	df 91       	pop	r29
    1d0c:	cf 91       	pop	r28
    1d0e:	1f 91       	pop	r17
    1d10:	0f 91       	pop	r16
    1d12:	08 95       	ret

00001d14 <_ZN7MPU605016getAccelerationZEv>:
    1d14:	0f 93       	push	r16
    1d16:	1f 93       	push	r17
    1d18:	cf 93       	push	r28
    1d1a:	df 93       	push	r29
    1d1c:	ec 01       	movw	r28, r24
    1d1e:	00 91 05 01 	lds	r16, 0x0105	; 0x800105 <_ZN6I2Cdev11readTimeoutE>
    1d22:	10 91 06 01 	lds	r17, 0x0106	; 0x800106 <_ZN6I2Cdev11readTimeoutE+0x1>
    1d26:	9c 01       	movw	r18, r24
    1d28:	2f 5f       	subi	r18, 0xFF	; 255
    1d2a:	3f 4f       	sbci	r19, 0xFF	; 255
    1d2c:	42 e0       	ldi	r20, 0x02	; 2
    1d2e:	6f e3       	ldi	r22, 0x3F	; 63
    1d30:	88 81       	ld	r24, Y
    1d32:	0e 94 19 0d 	call	0x1a32	; 0x1a32 <_ZN6I2Cdev9readBytesEhhhPhj>
    1d36:	89 81       	ldd	r24, Y+1	; 0x01
    1d38:	9a 81       	ldd	r25, Y+2	; 0x02
    1d3a:	98 27       	eor	r25, r24
    1d3c:	89 27       	eor	r24, r25
    1d3e:	98 27       	eor	r25, r24
    1d40:	df 91       	pop	r29
    1d42:	cf 91       	pop	r28
    1d44:	1f 91       	pop	r17
    1d46:	0f 91       	pop	r16
    1d48:	08 95       	ret

00001d4a <_ZN7MPU605012getRotationXEv>:
    1d4a:	0f 93       	push	r16
    1d4c:	1f 93       	push	r17
    1d4e:	cf 93       	push	r28
    1d50:	df 93       	push	r29
    1d52:	ec 01       	movw	r28, r24
    1d54:	00 91 05 01 	lds	r16, 0x0105	; 0x800105 <_ZN6I2Cdev11readTimeoutE>
    1d58:	10 91 06 01 	lds	r17, 0x0106	; 0x800106 <_ZN6I2Cdev11readTimeoutE+0x1>
    1d5c:	9c 01       	movw	r18, r24
    1d5e:	2f 5f       	subi	r18, 0xFF	; 255
    1d60:	3f 4f       	sbci	r19, 0xFF	; 255
    1d62:	42 e0       	ldi	r20, 0x02	; 2
    1d64:	63 e4       	ldi	r22, 0x43	; 67
    1d66:	88 81       	ld	r24, Y
    1d68:	0e 94 19 0d 	call	0x1a32	; 0x1a32 <_ZN6I2Cdev9readBytesEhhhPhj>
    1d6c:	89 81       	ldd	r24, Y+1	; 0x01
    1d6e:	9a 81       	ldd	r25, Y+2	; 0x02
    1d70:	98 27       	eor	r25, r24
    1d72:	89 27       	eor	r24, r25
    1d74:	98 27       	eor	r25, r24
    1d76:	df 91       	pop	r29
    1d78:	cf 91       	pop	r28
    1d7a:	1f 91       	pop	r17
    1d7c:	0f 91       	pop	r16
    1d7e:	08 95       	ret

00001d80 <_ZN7MPU605015setSleepEnabledEb>:
    1d80:	26 2f       	mov	r18, r22
    1d82:	46 e0       	ldi	r20, 0x06	; 6
    1d84:	6b e6       	ldi	r22, 0x6B	; 107
    1d86:	fc 01       	movw	r30, r24
    1d88:	80 81       	ld	r24, Z
    1d8a:	0c 94 d8 0d 	jmp	0x1bb0	; 0x1bb0 <_ZN6I2Cdev8writeBitEhhhh>

00001d8e <_ZN7MPU605014setClockSourceEh>:
    1d8e:	0f 93       	push	r16
    1d90:	06 2f       	mov	r16, r22
    1d92:	23 e0       	ldi	r18, 0x03	; 3
    1d94:	42 e0       	ldi	r20, 0x02	; 2
    1d96:	6b e6       	ldi	r22, 0x6B	; 107
    1d98:	fc 01       	movw	r30, r24
    1d9a:	80 81       	ld	r24, Z
    1d9c:	0e 94 08 0e 	call	0x1c10	; 0x1c10 <_ZN6I2Cdev9writeBitsEhhhhh>
    1da0:	0f 91       	pop	r16
    1da2:	08 95       	ret

00001da4 <_ZN7MPU605010initializeEv>:
    1da4:	cf 93       	push	r28
    1da6:	df 93       	push	r29
    1da8:	ec 01       	movw	r28, r24
    1daa:	61 e0       	ldi	r22, 0x01	; 1
    1dac:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <_ZN7MPU605014setClockSourceEh>
    1db0:	60 e0       	ldi	r22, 0x00	; 0
    1db2:	ce 01       	movw	r24, r28
    1db4:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <_ZN7MPU605021setFullScaleGyroRangeEh>
    1db8:	60 e0       	ldi	r22, 0x00	; 0
    1dba:	ce 01       	movw	r24, r28
    1dbc:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <_ZN7MPU605022setFullScaleAccelRangeEh>
    1dc0:	60 e0       	ldi	r22, 0x00	; 0
    1dc2:	ce 01       	movw	r24, r28
    1dc4:	df 91       	pop	r29
    1dc6:	cf 91       	pop	r28
    1dc8:	0c 94 c0 0e 	jmp	0x1d80	; 0x1d80 <_ZN7MPU605015setSleepEnabledEb>

00001dcc <_ZN7MPU605015setXAccelOffsetEi>:
    1dcc:	ab 01       	movw	r20, r22
    1dce:	66 e0       	ldi	r22, 0x06	; 6
    1dd0:	fc 01       	movw	r30, r24
    1dd2:	80 81       	ld	r24, Z
    1dd4:	0c 94 07 0d 	jmp	0x1a0e	; 0x1a0e <_ZN6I2Cdev9writeWordEhhj>

00001dd8 <_ZN7MPU605015setYAccelOffsetEi>:
    1dd8:	ab 01       	movw	r20, r22
    1dda:	68 e0       	ldi	r22, 0x08	; 8
    1ddc:	fc 01       	movw	r30, r24
    1dde:	80 81       	ld	r24, Z
    1de0:	0c 94 07 0d 	jmp	0x1a0e	; 0x1a0e <_ZN6I2Cdev9writeWordEhhj>

00001de4 <_ZN7MPU605015setZAccelOffsetEi>:
    1de4:	ab 01       	movw	r20, r22
    1de6:	6a e0       	ldi	r22, 0x0A	; 10
    1de8:	fc 01       	movw	r30, r24
    1dea:	80 81       	ld	r24, Z
    1dec:	0c 94 07 0d 	jmp	0x1a0e	; 0x1a0e <_ZN6I2Cdev9writeWordEhhj>

00001df0 <_ZN7MPU605014setXGyroOffsetEi>:
    1df0:	ab 01       	movw	r20, r22
    1df2:	63 e1       	ldi	r22, 0x13	; 19
    1df4:	fc 01       	movw	r30, r24
    1df6:	80 81       	ld	r24, Z
    1df8:	0c 94 07 0d 	jmp	0x1a0e	; 0x1a0e <_ZN6I2Cdev9writeWordEhhj>

00001dfc <_ZN7MPU605014setYGyroOffsetEi>:
    1dfc:	ab 01       	movw	r20, r22
    1dfe:	65 e1       	ldi	r22, 0x15	; 21
    1e00:	fc 01       	movw	r30, r24
    1e02:	80 81       	ld	r24, Z
    1e04:	0c 94 07 0d 	jmp	0x1a0e	; 0x1a0e <_ZN6I2Cdev9writeWordEhhj>

00001e08 <_ZN7MPU605014setZGyroOffsetEi>:
void MPU6050::setZGyroOffset(int16_t offset) {
    1e08:	ab 01       	movw	r20, r22
    I2Cdev::writeWord(devAddr, MPU6050_RA_ZG_OFFS_USRH, offset);
    1e0a:	67 e1       	ldi	r22, 0x17	; 23
    1e0c:	fc 01       	movw	r30, r24
    1e0e:	80 81       	ld	r24, Z
    1e10:	0c 94 07 0d 	jmp	0x1a0e	; 0x1a0e <_ZN6I2Cdev9writeWordEhhj>

00001e14 <_ZN7NewPing16set_max_distanceEj>:
	TIMSK4 = (1<<TOIE4);   // Enable Timer4 interrupt.
#elif defined (__arm__) && defined (TEENSYDUINO)  // Timer for Teensy 3.x
	itimer.begin(NewPing::timer_ms_cntdwn, 1000); // Set timer to 1ms (1000 uS).
#else
	OCR2A = 249;           // Every count is 4uS, so 1ms = 250 counts - 1.
	TIMSK2 |= (1<<OCIE2A); // Enable Timer2 interrupt.
    1e14:	6f 5f       	subi	r22, 0xFF	; 255
    1e16:	7f 4f       	sbci	r23, 0xFF	; 255
    1e18:	49 e3       	ldi	r20, 0x39	; 57
    1e1a:	46 9f       	mul	r20, r22
    1e1c:	90 01       	movw	r18, r0
    1e1e:	47 9f       	mul	r20, r23
    1e20:	30 0d       	add	r19, r0
    1e22:	11 24       	eor	r1, r1
    1e24:	2e 38       	cpi	r18, 0x8E	; 142
    1e26:	4f e6       	ldi	r20, 0x6F	; 111
    1e28:	34 07       	cpc	r19, r20
    1e2a:	10 f0       	brcs	.+4      	; 0x1e30 <_ZN7NewPing16set_max_distanceEj+0x1c>
    1e2c:	2d e8       	ldi	r18, 0x8D	; 141
    1e2e:	3f e6       	ldi	r19, 0x6F	; 111
    1e30:	fc 01       	movw	r30, r24
    1e32:	35 87       	std	Z+13, r19	; 0x0d
    1e34:	24 87       	std	Z+12, r18	; 0x0c
    1e36:	08 95       	ret

00001e38 <_ZN7NewPingC1Ehhj>:
    1e38:	dc 01       	movw	r26, r24
    1e3a:	70 e0       	ldi	r23, 0x00	; 0
    1e3c:	fb 01       	movw	r30, r22
    1e3e:	e7 5f       	subi	r30, 0xF7	; 247
    1e40:	fe 4f       	sbci	r31, 0xFE	; 254
    1e42:	e4 91       	lpm	r30, Z
    1e44:	14 96       	adiw	r26, 0x04	; 4
    1e46:	ec 93       	st	X, r30
    1e48:	14 97       	sbiw	r26, 0x04	; 4
    1e4a:	50 e0       	ldi	r21, 0x00	; 0
    1e4c:	fa 01       	movw	r30, r20
    1e4e:	e7 5f       	subi	r30, 0xF7	; 247
    1e50:	fe 4f       	sbci	r31, 0xFE	; 254
    1e52:	e4 91       	lpm	r30, Z
    1e54:	15 96       	adiw	r26, 0x05	; 5
    1e56:	ec 93       	st	X, r30
    1e58:	15 97       	sbiw	r26, 0x05	; 5
    1e5a:	63 5e       	subi	r22, 0xE3	; 227
    1e5c:	7e 4f       	sbci	r23, 0xFE	; 254
    1e5e:	fb 01       	movw	r30, r22
    1e60:	84 91       	lpm	r24, Z
    1e62:	e8 2f       	mov	r30, r24
    1e64:	f0 e0       	ldi	r31, 0x00	; 0
    1e66:	ee 0f       	add	r30, r30
    1e68:	ff 1f       	adc	r31, r31
    1e6a:	e5 5c       	subi	r30, 0xC5	; 197
    1e6c:	fe 4f       	sbci	r31, 0xFE	; 254
    1e6e:	85 91       	lpm	r24, Z+
    1e70:	94 91       	lpm	r25, Z
    1e72:	17 96       	adiw	r26, 0x07	; 7
    1e74:	9c 93       	st	X, r25
    1e76:	8e 93       	st	-X, r24
    1e78:	16 97       	sbiw	r26, 0x06	; 6
    1e7a:	fa 01       	movw	r30, r20
    1e7c:	e3 5e       	subi	r30, 0xE3	; 227
    1e7e:	fe 4f       	sbci	r31, 0xFE	; 254
    1e80:	e4 91       	lpm	r30, Z
    1e82:	f0 e0       	ldi	r31, 0x00	; 0
    1e84:	ee 0f       	add	r30, r30
    1e86:	ff 1f       	adc	r31, r31
    1e88:	ef 5c       	subi	r30, 0xCF	; 207
    1e8a:	fe 4f       	sbci	r31, 0xFE	; 254
    1e8c:	85 91       	lpm	r24, Z+
    1e8e:	94 91       	lpm	r25, Z
    1e90:	19 96       	adiw	r26, 0x09	; 9
    1e92:	9c 93       	st	X, r25
    1e94:	8e 93       	st	-X, r24
    1e96:	18 97       	sbiw	r26, 0x08	; 8
    1e98:	fb 01       	movw	r30, r22
    1e9a:	64 91       	lpm	r22, Z
    1e9c:	e6 2f       	mov	r30, r22
    1e9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ea0:	ee 0f       	add	r30, r30
    1ea2:	ff 1f       	adc	r31, r31
    1ea4:	eb 5b       	subi	r30, 0xBB	; 187
    1ea6:	fe 4f       	sbci	r31, 0xFE	; 254
    1ea8:	85 91       	lpm	r24, Z+
    1eaa:	94 91       	lpm	r25, Z
    1eac:	1b 96       	adiw	r26, 0x0b	; 11
    1eae:	9c 93       	st	X, r25
    1eb0:	8e 93       	st	-X, r24
    1eb2:	1a 97       	sbiw	r26, 0x0a	; 10
    1eb4:	b9 01       	movw	r22, r18
    1eb6:	cd 01       	movw	r24, r26
    1eb8:	0c 94 0a 0f 	jmp	0x1e14	; 0x1e14 <_ZN7NewPing16set_max_distanceEj>

00001ebc <__vector_7>:
	intFunc(); // Call wrapped function.
}
#elif defined (__arm__)
// Do nothing...
#else
ISR(TIMER2_COMPA_vect) {
    1ebc:	1f 92       	push	r1
    1ebe:	0f 92       	push	r0
    1ec0:	0f b6       	in	r0, 0x3f	; 63
    1ec2:	0f 92       	push	r0
    1ec4:	11 24       	eor	r1, r1
    1ec6:	2f 93       	push	r18
    1ec8:	3f 93       	push	r19
    1eca:	4f 93       	push	r20
    1ecc:	5f 93       	push	r21
    1ece:	6f 93       	push	r22
    1ed0:	7f 93       	push	r23
    1ed2:	8f 93       	push	r24
    1ed4:	9f 93       	push	r25
    1ed6:	af 93       	push	r26
    1ed8:	bf 93       	push	r27
    1eda:	ef 93       	push	r30
    1edc:	ff 93       	push	r31
	intFunc(); // Call wrapped function.
    1ede:	e0 91 56 04 	lds	r30, 0x0456	; 0x800456 <intFunc>
    1ee2:	f0 91 57 04 	lds	r31, 0x0457	; 0x800457 <intFunc+0x1>
    1ee6:	09 95       	icall
}
    1ee8:	ff 91       	pop	r31
    1eea:	ef 91       	pop	r30
    1eec:	bf 91       	pop	r27
    1eee:	af 91       	pop	r26
    1ef0:	9f 91       	pop	r25
    1ef2:	8f 91       	pop	r24
    1ef4:	7f 91       	pop	r23
    1ef6:	6f 91       	pop	r22
    1ef8:	5f 91       	pop	r21
    1efa:	4f 91       	pop	r20
    1efc:	3f 91       	pop	r19
    1efe:	2f 91       	pop	r18
    1f00:	0f 90       	pop	r0
    1f02:	0f be       	out	0x3f, r0	; 63
    1f04:	0f 90       	pop	r0
    1f06:	1f 90       	pop	r1
    1f08:	18 95       	reti

00001f0a <twi_readFrom>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    1f0a:	41 32       	cpi	r20, 0x21	; 33
    1f0c:	08 f0       	brcs	.+2      	; 0x1f10 <twi_readFrom+0x6>
    1f0e:	43 c0       	rjmp	.+134    	; 0x1f96 <twi_readFrom+0x8c>
    1f10:	90 91 c5 04 	lds	r25, 0x04C5	; 0x8004c5 <twi_state>
    1f14:	91 11       	cpse	r25, r1
    1f16:	fc cf       	rjmp	.-8      	; 0x1f10 <twi_readFrom+0x6>
    1f18:	91 e0       	ldi	r25, 0x01	; 1
    1f1a:	90 93 c5 04 	sts	0x04C5, r25	; 0x8004c5 <twi_state>
    1f1e:	20 93 c3 04 	sts	0x04C3, r18	; 0x8004c3 <twi_sendStop>
    1f22:	2f ef       	ldi	r18, 0xFF	; 255
    1f24:	20 93 58 04 	sts	0x0458, r18	; 0x800458 <twi_error>
    1f28:	10 92 9d 04 	sts	0x049D, r1	; 0x80049d <twi_masterBufferIndex>
    1f2c:	24 0f       	add	r18, r20
    1f2e:	20 93 9c 04 	sts	0x049C, r18	; 0x80049c <twi_masterBufferLength>
    1f32:	90 93 c4 04 	sts	0x04C4, r25	; 0x8004c4 <twi_slarw>
    1f36:	90 91 c4 04 	lds	r25, 0x04C4	; 0x8004c4 <twi_slarw>
    1f3a:	88 0f       	add	r24, r24
    1f3c:	89 2b       	or	r24, r25
    1f3e:	80 93 c4 04 	sts	0x04C4, r24	; 0x8004c4 <twi_slarw>
    1f42:	80 91 c2 04 	lds	r24, 0x04C2	; 0x8004c2 <twi_inRepStart>
    1f46:	81 30       	cpi	r24, 0x01	; 1
    1f48:	61 f4       	brne	.+24     	; 0x1f62 <twi_readFrom+0x58>
    1f4a:	10 92 c2 04 	sts	0x04C2, r1	; 0x8004c2 <twi_inRepStart>
    1f4e:	80 91 c4 04 	lds	r24, 0x04C4	; 0x8004c4 <twi_slarw>
    1f52:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    1f56:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1f5a:	83 fd       	sbrc	r24, 3
    1f5c:	f8 cf       	rjmp	.-16     	; 0x1f4e <twi_readFrom+0x44>
    1f5e:	85 ec       	ldi	r24, 0xC5	; 197
    1f60:	01 c0       	rjmp	.+2      	; 0x1f64 <twi_readFrom+0x5a>
    1f62:	85 ee       	ldi	r24, 0xE5	; 229
    1f64:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1f68:	80 91 c5 04 	lds	r24, 0x04C5	; 0x8004c5 <twi_state>
    1f6c:	81 30       	cpi	r24, 0x01	; 1
    1f6e:	e1 f3       	breq	.-8      	; 0x1f68 <twi_readFrom+0x5e>
    1f70:	80 91 9d 04 	lds	r24, 0x049D	; 0x80049d <twi_masterBufferIndex>
    1f74:	84 17       	cp	r24, r20
    1f76:	10 f4       	brcc	.+4      	; 0x1f7c <twi_readFrom+0x72>
    1f78:	40 91 9d 04 	lds	r20, 0x049D	; 0x80049d <twi_masterBufferIndex>
    1f7c:	ae e9       	ldi	r26, 0x9E	; 158
    1f7e:	b4 e0       	ldi	r27, 0x04	; 4
    1f80:	96 2f       	mov	r25, r22
    1f82:	fb 01       	movw	r30, r22
    1f84:	8e 2f       	mov	r24, r30
    1f86:	89 1b       	sub	r24, r25
    1f88:	84 17       	cp	r24, r20
    1f8a:	18 f4       	brcc	.+6      	; 0x1f92 <twi_readFrom+0x88>
    1f8c:	8d 91       	ld	r24, X+
    1f8e:	81 93       	st	Z+, r24
    1f90:	f9 cf       	rjmp	.-14     	; 0x1f84 <twi_readFrom+0x7a>
    1f92:	84 2f       	mov	r24, r20
    1f94:	08 95       	ret
    1f96:	80 e0       	ldi	r24, 0x00	; 0
    1f98:	08 95       	ret

00001f9a <twi_writeTo>:
    1f9a:	0f 93       	push	r16
    1f9c:	41 32       	cpi	r20, 0x21	; 33
    1f9e:	08 f0       	brcs	.+2      	; 0x1fa2 <twi_writeTo+0x8>
    1fa0:	4a c0       	rjmp	.+148    	; 0x2036 <twi_writeTo+0x9c>
    1fa2:	90 91 c5 04 	lds	r25, 0x04C5	; 0x8004c5 <twi_state>
    1fa6:	91 11       	cpse	r25, r1
    1fa8:	fc cf       	rjmp	.-8      	; 0x1fa2 <twi_writeTo+0x8>
    1faa:	32 e0       	ldi	r19, 0x02	; 2
    1fac:	30 93 c5 04 	sts	0x04C5, r19	; 0x8004c5 <twi_state>
    1fb0:	00 93 c3 04 	sts	0x04C3, r16	; 0x8004c3 <twi_sendStop>
    1fb4:	3f ef       	ldi	r19, 0xFF	; 255
    1fb6:	30 93 58 04 	sts	0x0458, r19	; 0x800458 <twi_error>
    1fba:	10 92 9d 04 	sts	0x049D, r1	; 0x80049d <twi_masterBufferIndex>
    1fbe:	40 93 9c 04 	sts	0x049C, r20	; 0x80049c <twi_masterBufferLength>
    1fc2:	56 2f       	mov	r21, r22
    1fc4:	ae e9       	ldi	r26, 0x9E	; 158
    1fc6:	b4 e0       	ldi	r27, 0x04	; 4
    1fc8:	fb 01       	movw	r30, r22
    1fca:	3e 2f       	mov	r19, r30
    1fcc:	35 1b       	sub	r19, r21
    1fce:	34 17       	cp	r19, r20
    1fd0:	18 f4       	brcc	.+6      	; 0x1fd8 <twi_writeTo+0x3e>
    1fd2:	31 91       	ld	r19, Z+
    1fd4:	3d 93       	st	X+, r19
    1fd6:	f9 cf       	rjmp	.-14     	; 0x1fca <twi_writeTo+0x30>
    1fd8:	10 92 c4 04 	sts	0x04C4, r1	; 0x8004c4 <twi_slarw>
    1fdc:	30 91 c4 04 	lds	r19, 0x04C4	; 0x8004c4 <twi_slarw>
    1fe0:	88 0f       	add	r24, r24
    1fe2:	83 2b       	or	r24, r19
    1fe4:	80 93 c4 04 	sts	0x04C4, r24	; 0x8004c4 <twi_slarw>
    1fe8:	80 91 c2 04 	lds	r24, 0x04C2	; 0x8004c2 <twi_inRepStart>
    1fec:	81 30       	cpi	r24, 0x01	; 1
    1fee:	61 f4       	brne	.+24     	; 0x2008 <twi_writeTo+0x6e>
    1ff0:	10 92 c2 04 	sts	0x04C2, r1	; 0x8004c2 <twi_inRepStart>
    1ff4:	80 91 c4 04 	lds	r24, 0x04C4	; 0x8004c4 <twi_slarw>
    1ff8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    1ffc:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    2000:	83 fd       	sbrc	r24, 3
    2002:	f8 cf       	rjmp	.-16     	; 0x1ff4 <twi_writeTo+0x5a>
    2004:	85 ec       	ldi	r24, 0xC5	; 197
    2006:	01 c0       	rjmp	.+2      	; 0x200a <twi_writeTo+0x70>
    2008:	85 ee       	ldi	r24, 0xE5	; 229
    200a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    200e:	22 23       	and	r18, r18
    2010:	21 f0       	breq	.+8      	; 0x201a <twi_writeTo+0x80>
    2012:	80 91 c5 04 	lds	r24, 0x04C5	; 0x8004c5 <twi_state>
    2016:	82 30       	cpi	r24, 0x02	; 2
    2018:	d1 f3       	breq	.-12     	; 0x200e <twi_writeTo+0x74>
    201a:	80 91 58 04 	lds	r24, 0x0458	; 0x800458 <twi_error>
    201e:	8f 3f       	cpi	r24, 0xFF	; 255
    2020:	79 f0       	breq	.+30     	; 0x2040 <twi_writeTo+0xa6>
    2022:	80 91 58 04 	lds	r24, 0x0458	; 0x800458 <twi_error>
    2026:	80 32       	cpi	r24, 0x20	; 32
    2028:	41 f0       	breq	.+16     	; 0x203a <twi_writeTo+0xa0>
    202a:	80 91 58 04 	lds	r24, 0x0458	; 0x800458 <twi_error>
    202e:	80 33       	cpi	r24, 0x30	; 48
    2030:	31 f0       	breq	.+12     	; 0x203e <twi_writeTo+0xa4>
    2032:	94 e0       	ldi	r25, 0x04	; 4
    2034:	05 c0       	rjmp	.+10     	; 0x2040 <twi_writeTo+0xa6>
    2036:	91 e0       	ldi	r25, 0x01	; 1
    2038:	03 c0       	rjmp	.+6      	; 0x2040 <twi_writeTo+0xa6>
    203a:	92 e0       	ldi	r25, 0x02	; 2
    203c:	01 c0       	rjmp	.+2      	; 0x2040 <twi_writeTo+0xa6>
    203e:	93 e0       	ldi	r25, 0x03	; 3
    2040:	89 2f       	mov	r24, r25
    2042:	0f 91       	pop	r16
    2044:	08 95       	ret

00002046 <twi_transmit>:
    2046:	40 91 7a 04 	lds	r20, 0x047A	; 0x80047a <twi_txBufferLength>
    204a:	26 2f       	mov	r18, r22
    204c:	30 e0       	ldi	r19, 0x00	; 0
    204e:	24 0f       	add	r18, r20
    2050:	31 1d       	adc	r19, r1
    2052:	21 32       	cpi	r18, 0x21	; 33
    2054:	31 05       	cpc	r19, r1
    2056:	dc f4       	brge	.+54     	; 0x208e <twi_transmit+0x48>
    2058:	20 91 c5 04 	lds	r18, 0x04C5	; 0x8004c5 <twi_state>
    205c:	24 30       	cpi	r18, 0x04	; 4
    205e:	c9 f4       	brne	.+50     	; 0x2092 <twi_transmit+0x4c>
    2060:	fc 01       	movw	r30, r24
    2062:	80 e0       	ldi	r24, 0x00	; 0
    2064:	90 e0       	ldi	r25, 0x00	; 0
    2066:	86 17       	cp	r24, r22
    2068:	58 f4       	brcc	.+22     	; 0x2080 <twi_transmit+0x3a>
    206a:	30 91 7a 04 	lds	r19, 0x047A	; 0x80047a <twi_txBufferLength>
    206e:	21 91       	ld	r18, Z+
    2070:	dc 01       	movw	r26, r24
    2072:	a4 58       	subi	r26, 0x84	; 132
    2074:	bb 4f       	sbci	r27, 0xFB	; 251
    2076:	a3 0f       	add	r26, r19
    2078:	b1 1d       	adc	r27, r1
    207a:	2c 93       	st	X, r18
    207c:	01 96       	adiw	r24, 0x01	; 1
    207e:	f3 cf       	rjmp	.-26     	; 0x2066 <twi_transmit+0x20>
    2080:	80 91 7a 04 	lds	r24, 0x047A	; 0x80047a <twi_txBufferLength>
    2084:	68 0f       	add	r22, r24
    2086:	60 93 7a 04 	sts	0x047A, r22	; 0x80047a <twi_txBufferLength>
    208a:	80 e0       	ldi	r24, 0x00	; 0
    208c:	08 95       	ret
    208e:	81 e0       	ldi	r24, 0x01	; 1
    2090:	08 95       	ret
    2092:	82 e0       	ldi	r24, 0x02	; 2
    2094:	08 95       	ret

00002096 <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    2096:	85 ed       	ldi	r24, 0xD5	; 213
    2098:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    209c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    20a0:	84 fd       	sbrc	r24, 4
    20a2:	fc cf       	rjmp	.-8      	; 0x209c <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    20a4:	10 92 c5 04 	sts	0x04C5, r1	; 0x8004c5 <twi_state>
    20a8:	08 95       	ret

000020aa <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    20aa:	85 ec       	ldi	r24, 0xC5	; 197
    20ac:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // update twi state
  twi_state = TWI_READY;
    20b0:	10 92 c5 04 	sts	0x04C5, r1	; 0x8004c5 <twi_state>
    20b4:	08 95       	ret

000020b6 <__vector_24>:
}

ISR(TWI_vect)
{
    20b6:	1f 92       	push	r1
    20b8:	0f 92       	push	r0
    20ba:	0f b6       	in	r0, 0x3f	; 63
    20bc:	0f 92       	push	r0
    20be:	11 24       	eor	r1, r1
    20c0:	2f 93       	push	r18
    20c2:	3f 93       	push	r19
    20c4:	4f 93       	push	r20
    20c6:	5f 93       	push	r21
    20c8:	6f 93       	push	r22
    20ca:	7f 93       	push	r23
    20cc:	8f 93       	push	r24
    20ce:	9f 93       	push	r25
    20d0:	af 93       	push	r26
    20d2:	bf 93       	push	r27
    20d4:	ef 93       	push	r30
    20d6:	ff 93       	push	r31
  switch(TW_STATUS){
    20d8:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    20dc:	88 7f       	andi	r24, 0xF8	; 248
    20de:	80 36       	cpi	r24, 0x60	; 96
    20e0:	09 f4       	brne	.+2      	; 0x20e4 <__vector_24+0x2e>
    20e2:	9e c0       	rjmp	.+316    	; 0x2220 <__vector_24+0x16a>
    20e4:	78 f5       	brcc	.+94     	; 0x2144 <__vector_24+0x8e>
    20e6:	88 32       	cpi	r24, 0x28	; 40
    20e8:	09 f4       	brne	.+2      	; 0x20ec <__vector_24+0x36>
    20ea:	5d c0       	rjmp	.+186    	; 0x21a6 <__vector_24+0xf0>
    20ec:	90 f4       	brcc	.+36     	; 0x2112 <__vector_24+0x5c>
    20ee:	80 31       	cpi	r24, 0x10	; 16
    20f0:	09 f4       	brne	.+2      	; 0x20f4 <__vector_24+0x3e>
    20f2:	56 c0       	rjmp	.+172    	; 0x21a0 <__vector_24+0xea>
    20f4:	38 f4       	brcc	.+14     	; 0x2104 <__vector_24+0x4e>
    20f6:	88 23       	and	r24, r24
    20f8:	09 f4       	brne	.+2      	; 0x20fc <__vector_24+0x46>
    20fa:	f5 c0       	rjmp	.+490    	; 0x22e6 <__vector_24+0x230>
    20fc:	88 30       	cpi	r24, 0x08	; 8
    20fe:	09 f4       	brne	.+2      	; 0x2102 <__vector_24+0x4c>
    2100:	4f c0       	rjmp	.+158    	; 0x21a0 <__vector_24+0xea>
    2102:	f5 c0       	rjmp	.+490    	; 0x22ee <__vector_24+0x238>
    2104:	88 31       	cpi	r24, 0x18	; 24
    2106:	09 f4       	brne	.+2      	; 0x210a <__vector_24+0x54>
    2108:	4e c0       	rjmp	.+156    	; 0x21a6 <__vector_24+0xf0>
    210a:	80 32       	cpi	r24, 0x20	; 32
    210c:	09 f4       	brne	.+2      	; 0x2110 <__vector_24+0x5a>
    210e:	5f c0       	rjmp	.+190    	; 0x21ce <__vector_24+0x118>
    2110:	ee c0       	rjmp	.+476    	; 0x22ee <__vector_24+0x238>
    2112:	80 34       	cpi	r24, 0x40	; 64
    2114:	09 f4       	brne	.+2      	; 0x2118 <__vector_24+0x62>
    2116:	6a c0       	rjmp	.+212    	; 0x21ec <__vector_24+0x136>
    2118:	58 f4       	brcc	.+22     	; 0x2130 <__vector_24+0x7a>
    211a:	80 33       	cpi	r24, 0x30	; 48
    211c:	09 f4       	brne	.+2      	; 0x2120 <__vector_24+0x6a>
    211e:	57 c0       	rjmp	.+174    	; 0x21ce <__vector_24+0x118>
    2120:	88 33       	cpi	r24, 0x38	; 56
    2122:	09 f0       	breq	.+2      	; 0x2126 <__vector_24+0x70>
    2124:	e4 c0       	rjmp	.+456    	; 0x22ee <__vector_24+0x238>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    2126:	80 93 58 04 	sts	0x0458, r24	; 0x800458 <twi_error>
      twi_releaseBus();
    212a:	0e 94 55 10 	call	0x20aa	; 0x20aa <twi_releaseBus>
      break;
    212e:	df c0       	rjmp	.+446    	; 0x22ee <__vector_24+0x238>
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    2130:	80 35       	cpi	r24, 0x50	; 80
    2132:	09 f4       	brne	.+2      	; 0x2136 <__vector_24+0x80>
    2134:	4f c0       	rjmp	.+158    	; 0x21d4 <__vector_24+0x11e>
    2136:	88 35       	cpi	r24, 0x58	; 88
    2138:	09 f4       	brne	.+2      	; 0x213c <__vector_24+0x86>
    213a:	5d c0       	rjmp	.+186    	; 0x21f6 <__vector_24+0x140>
    213c:	88 34       	cpi	r24, 0x48	; 72
    213e:	09 f0       	breq	.+2      	; 0x2142 <__vector_24+0x8c>
    2140:	d6 c0       	rjmp	.+428    	; 0x22ee <__vector_24+0x238>
    2142:	d3 c0       	rjmp	.+422    	; 0x22ea <__vector_24+0x234>
    2144:	88 39       	cpi	r24, 0x98	; 152
    2146:	09 f4       	brne	.+2      	; 0x214a <__vector_24+0x94>
    2148:	c4 c0       	rjmp	.+392    	; 0x22d2 <__vector_24+0x21c>
    214a:	a8 f4       	brcc	.+42     	; 0x2176 <__vector_24+0xc0>
    214c:	88 37       	cpi	r24, 0x78	; 120
    214e:	09 f4       	brne	.+2      	; 0x2152 <__vector_24+0x9c>
    2150:	67 c0       	rjmp	.+206    	; 0x2220 <__vector_24+0x16a>
    2152:	38 f4       	brcc	.+14     	; 0x2162 <__vector_24+0xac>
    2154:	88 36       	cpi	r24, 0x68	; 104
    2156:	09 f4       	brne	.+2      	; 0x215a <__vector_24+0xa4>
    2158:	63 c0       	rjmp	.+198    	; 0x2220 <__vector_24+0x16a>
    215a:	80 37       	cpi	r24, 0x70	; 112
    215c:	09 f4       	brne	.+2      	; 0x2160 <__vector_24+0xaa>
    215e:	60 c0       	rjmp	.+192    	; 0x2220 <__vector_24+0x16a>
    2160:	c6 c0       	rjmp	.+396    	; 0x22ee <__vector_24+0x238>
    2162:	88 38       	cpi	r24, 0x88	; 136
    2164:	09 f4       	brne	.+2      	; 0x2168 <__vector_24+0xb2>
    2166:	b5 c0       	rjmp	.+362    	; 0x22d2 <__vector_24+0x21c>
    2168:	80 39       	cpi	r24, 0x90	; 144
    216a:	09 f4       	brne	.+2      	; 0x216e <__vector_24+0xb8>
    216c:	5f c0       	rjmp	.+190    	; 0x222c <__vector_24+0x176>
    216e:	80 38       	cpi	r24, 0x80	; 128
    2170:	09 f0       	breq	.+2      	; 0x2174 <__vector_24+0xbe>
    2172:	bd c0       	rjmp	.+378    	; 0x22ee <__vector_24+0x238>
    2174:	5b c0       	rjmp	.+182    	; 0x222c <__vector_24+0x176>
    2176:	80 3b       	cpi	r24, 0xB0	; 176
    2178:	09 f4       	brne	.+2      	; 0x217c <__vector_24+0xc6>
    217a:	83 c0       	rjmp	.+262    	; 0x2282 <__vector_24+0x1cc>
    217c:	38 f4       	brcc	.+14     	; 0x218c <__vector_24+0xd6>
    217e:	80 3a       	cpi	r24, 0xA0	; 160
    2180:	09 f4       	brne	.+2      	; 0x2184 <__vector_24+0xce>
    2182:	66 c0       	rjmp	.+204    	; 0x2250 <__vector_24+0x19a>
    2184:	88 3a       	cpi	r24, 0xA8	; 168
    2186:	09 f4       	brne	.+2      	; 0x218a <__vector_24+0xd4>
    2188:	7c c0       	rjmp	.+248    	; 0x2282 <__vector_24+0x1cc>
    218a:	b1 c0       	rjmp	.+354    	; 0x22ee <__vector_24+0x238>
    218c:	80 3c       	cpi	r24, 0xC0	; 192
    218e:	09 f4       	brne	.+2      	; 0x2192 <__vector_24+0xdc>
    2190:	a4 c0       	rjmp	.+328    	; 0x22da <__vector_24+0x224>
    2192:	88 3c       	cpi	r24, 0xC8	; 200
    2194:	09 f4       	brne	.+2      	; 0x2198 <__vector_24+0xe2>
    2196:	a1 c0       	rjmp	.+322    	; 0x22da <__vector_24+0x224>
    2198:	88 3b       	cpi	r24, 0xB8	; 184
    219a:	09 f4       	brne	.+2      	; 0x219e <__vector_24+0xe8>
    219c:	87 c0       	rjmp	.+270    	; 0x22ac <__vector_24+0x1f6>
    219e:	a7 c0       	rjmp	.+334    	; 0x22ee <__vector_24+0x238>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    21a0:	80 91 c4 04 	lds	r24, 0x04C4	; 0x8004c4 <twi_slarw>
    21a4:	10 c0       	rjmp	.+32     	; 0x21c6 <__vector_24+0x110>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    21a6:	90 91 9d 04 	lds	r25, 0x049D	; 0x80049d <twi_masterBufferIndex>
    21aa:	80 91 9c 04 	lds	r24, 0x049C	; 0x80049c <twi_masterBufferLength>
    21ae:	98 17       	cp	r25, r24
    21b0:	70 f5       	brcc	.+92     	; 0x220e <__vector_24+0x158>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    21b2:	e0 91 9d 04 	lds	r30, 0x049D	; 0x80049d <twi_masterBufferIndex>
    21b6:	81 e0       	ldi	r24, 0x01	; 1
    21b8:	8e 0f       	add	r24, r30
    21ba:	80 93 9d 04 	sts	0x049D, r24	; 0x80049d <twi_masterBufferIndex>
    21be:	f0 e0       	ldi	r31, 0x00	; 0
    21c0:	e2 56       	subi	r30, 0x62	; 98
    21c2:	fb 4f       	sbci	r31, 0xFB	; 251
    21c4:	80 81       	ld	r24, Z
    21c6:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    21ca:	85 ec       	ldi	r24, 0xC5	; 197
    21cc:	83 c0       	rjmp	.+262    	; 0x22d4 <__vector_24+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    21ce:	80 93 58 04 	sts	0x0458, r24	; 0x800458 <twi_error>
    21d2:	8b c0       	rjmp	.+278    	; 0x22ea <__vector_24+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    21d4:	e0 91 9d 04 	lds	r30, 0x049D	; 0x80049d <twi_masterBufferIndex>
    21d8:	81 e0       	ldi	r24, 0x01	; 1
    21da:	8e 0f       	add	r24, r30
    21dc:	80 93 9d 04 	sts	0x049D, r24	; 0x80049d <twi_masterBufferIndex>
    21e0:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    21e4:	f0 e0       	ldi	r31, 0x00	; 0
    21e6:	e2 56       	subi	r30, 0x62	; 98
    21e8:	fb 4f       	sbci	r31, 0xFB	; 251
    21ea:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    21ec:	90 91 9d 04 	lds	r25, 0x049D	; 0x80049d <twi_masterBufferIndex>
    21f0:	80 91 9c 04 	lds	r24, 0x049C	; 0x80049c <twi_masterBufferLength>
    21f4:	6b c0       	rjmp	.+214    	; 0x22cc <__vector_24+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    21f6:	e0 91 9d 04 	lds	r30, 0x049D	; 0x80049d <twi_masterBufferIndex>
    21fa:	81 e0       	ldi	r24, 0x01	; 1
    21fc:	8e 0f       	add	r24, r30
    21fe:	80 93 9d 04 	sts	0x049D, r24	; 0x80049d <twi_masterBufferIndex>
    2202:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    2206:	f0 e0       	ldi	r31, 0x00	; 0
    2208:	e2 56       	subi	r30, 0x62	; 98
    220a:	fb 4f       	sbci	r31, 0xFB	; 251
    220c:	80 83       	st	Z, r24
	if (twi_sendStop)
    220e:	80 91 c3 04 	lds	r24, 0x04C3	; 0x8004c3 <twi_sendStop>
    2212:	81 11       	cpse	r24, r1
    2214:	6a c0       	rjmp	.+212    	; 0x22ea <__vector_24+0x234>
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    2216:	81 e0       	ldi	r24, 0x01	; 1
    2218:	80 93 c2 04 	sts	0x04C2, r24	; 0x8004c2 <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    221c:	84 ea       	ldi	r24, 0xA4	; 164
    221e:	5e c0       	rjmp	.+188    	; 0x22dc <__vector_24+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    2220:	83 e0       	ldi	r24, 0x03	; 3
    2222:	80 93 c5 04 	sts	0x04C5, r24	; 0x8004c5 <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    2226:	10 92 59 04 	sts	0x0459, r1	; 0x800459 <twi_rxBufferIndex>
    222a:	cf cf       	rjmp	.-98     	; 0x21ca <__vector_24+0x114>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    222c:	80 91 59 04 	lds	r24, 0x0459	; 0x800459 <twi_rxBufferIndex>
    2230:	80 32       	cpi	r24, 0x20	; 32
    2232:	08 f0       	brcs	.+2      	; 0x2236 <__vector_24+0x180>
    2234:	4e c0       	rjmp	.+156    	; 0x22d2 <__vector_24+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    2236:	e0 91 59 04 	lds	r30, 0x0459	; 0x800459 <twi_rxBufferIndex>
    223a:	81 e0       	ldi	r24, 0x01	; 1
    223c:	8e 0f       	add	r24, r30
    223e:	80 93 59 04 	sts	0x0459, r24	; 0x800459 <twi_rxBufferIndex>
    2242:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    2246:	f0 e0       	ldi	r31, 0x00	; 0
    2248:	e6 5a       	subi	r30, 0xA6	; 166
    224a:	fb 4f       	sbci	r31, 0xFB	; 251
    224c:	80 83       	st	Z, r24
    224e:	bd cf       	rjmp	.-134    	; 0x21ca <__vector_24+0x114>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    2250:	0e 94 55 10 	call	0x20aa	; 0x20aa <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    2254:	80 91 59 04 	lds	r24, 0x0459	; 0x800459 <twi_rxBufferIndex>
    2258:	80 32       	cpi	r24, 0x20	; 32
    225a:	30 f4       	brcc	.+12     	; 0x2268 <__vector_24+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    225c:	e0 91 59 04 	lds	r30, 0x0459	; 0x800459 <twi_rxBufferIndex>
    2260:	f0 e0       	ldi	r31, 0x00	; 0
    2262:	e6 5a       	subi	r30, 0xA6	; 166
    2264:	fb 4f       	sbci	r31, 0xFB	; 251
    2266:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    2268:	60 91 59 04 	lds	r22, 0x0459	; 0x800459 <twi_rxBufferIndex>
    226c:	70 e0       	ldi	r23, 0x00	; 0
    226e:	e0 91 be 04 	lds	r30, 0x04BE	; 0x8004be <twi_onSlaveReceive>
    2272:	f0 91 bf 04 	lds	r31, 0x04BF	; 0x8004bf <twi_onSlaveReceive+0x1>
    2276:	8a e5       	ldi	r24, 0x5A	; 90
    2278:	94 e0       	ldi	r25, 0x04	; 4
    227a:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    227c:	10 92 59 04 	sts	0x0459, r1	; 0x800459 <twi_rxBufferIndex>
      break;
    2280:	36 c0       	rjmp	.+108    	; 0x22ee <__vector_24+0x238>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    2282:	84 e0       	ldi	r24, 0x04	; 4
    2284:	80 93 c5 04 	sts	0x04C5, r24	; 0x8004c5 <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    2288:	10 92 7b 04 	sts	0x047B, r1	; 0x80047b <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    228c:	10 92 7a 04 	sts	0x047A, r1	; 0x80047a <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    2290:	e0 91 c0 04 	lds	r30, 0x04C0	; 0x8004c0 <twi_onSlaveTransmit>
    2294:	f0 91 c1 04 	lds	r31, 0x04C1	; 0x8004c1 <twi_onSlaveTransmit+0x1>
    2298:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    229a:	80 91 7a 04 	lds	r24, 0x047A	; 0x80047a <twi_txBufferLength>
    229e:	81 11       	cpse	r24, r1
    22a0:	05 c0       	rjmp	.+10     	; 0x22ac <__vector_24+0x1f6>
        twi_txBufferLength = 1;
    22a2:	81 e0       	ldi	r24, 0x01	; 1
    22a4:	80 93 7a 04 	sts	0x047A, r24	; 0x80047a <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    22a8:	10 92 7c 04 	sts	0x047C, r1	; 0x80047c <twi_txBuffer>
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    22ac:	e0 91 7b 04 	lds	r30, 0x047B	; 0x80047b <twi_txBufferIndex>
    22b0:	81 e0       	ldi	r24, 0x01	; 1
    22b2:	8e 0f       	add	r24, r30
    22b4:	80 93 7b 04 	sts	0x047B, r24	; 0x80047b <twi_txBufferIndex>
    22b8:	f0 e0       	ldi	r31, 0x00	; 0
    22ba:	e4 58       	subi	r30, 0x84	; 132
    22bc:	fb 4f       	sbci	r31, 0xFB	; 251
    22be:	80 81       	ld	r24, Z
    22c0:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    22c4:	90 91 7b 04 	lds	r25, 0x047B	; 0x80047b <twi_txBufferIndex>
    22c8:	80 91 7a 04 	lds	r24, 0x047A	; 0x80047a <twi_txBufferLength>
    22cc:	98 17       	cp	r25, r24
    22ce:	08 f4       	brcc	.+2      	; 0x22d2 <__vector_24+0x21c>
    22d0:	7c cf       	rjmp	.-264    	; 0x21ca <__vector_24+0x114>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    22d2:	85 e8       	ldi	r24, 0x85	; 133
    22d4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    22d8:	0a c0       	rjmp	.+20     	; 0x22ee <__vector_24+0x238>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    22da:	85 ec       	ldi	r24, 0xC5	; 197
    22dc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    22e0:	10 92 c5 04 	sts	0x04C5, r1	; 0x8004c5 <twi_state>
      break;
    22e4:	04 c0       	rjmp	.+8      	; 0x22ee <__vector_24+0x238>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    22e6:	10 92 58 04 	sts	0x0458, r1	; 0x800458 <twi_error>
      twi_stop();
    22ea:	0e 94 4b 10 	call	0x2096	; 0x2096 <twi_stop>
      break;
  }
}
    22ee:	ff 91       	pop	r31
    22f0:	ef 91       	pop	r30
    22f2:	bf 91       	pop	r27
    22f4:	af 91       	pop	r26
    22f6:	9f 91       	pop	r25
    22f8:	8f 91       	pop	r24
    22fa:	7f 91       	pop	r23
    22fc:	6f 91       	pop	r22
    22fe:	5f 91       	pop	r21
    2300:	4f 91       	pop	r20
    2302:	3f 91       	pop	r19
    2304:	2f 91       	pop	r18
    2306:	0f 90       	pop	r0
    2308:	0f be       	out	0x3f, r0	; 63
    230a:	0f 90       	pop	r0
    230c:	1f 90       	pop	r1
    230e:	18 95       	reti

00002310 <_ZN5Print17availableForWriteEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    2310:	80 e0       	ldi	r24, 0x00	; 0
    2312:	90 e0       	ldi	r25, 0x00	; 0
    2314:	08 95       	ret

00002316 <_ZN7TwoWire9availableEv>:
    2316:	80 91 f6 04 	lds	r24, 0x04F6	; 0x8004f6 <_ZN7TwoWire14rxBufferLengthE>
    231a:	90 e0       	ldi	r25, 0x00	; 0
    231c:	20 91 f7 04 	lds	r18, 0x04F7	; 0x8004f7 <_ZN7TwoWire13rxBufferIndexE>
    2320:	82 1b       	sub	r24, r18
    2322:	91 09       	sbc	r25, r1
    2324:	08 95       	ret

00002326 <_ZN7TwoWire4readEv>:
    2326:	90 91 f7 04 	lds	r25, 0x04F7	; 0x8004f7 <_ZN7TwoWire13rxBufferIndexE>
    232a:	80 91 f6 04 	lds	r24, 0x04F6	; 0x8004f6 <_ZN7TwoWire14rxBufferLengthE>
    232e:	98 17       	cp	r25, r24
    2330:	50 f4       	brcc	.+20     	; 0x2346 <_ZN7TwoWire4readEv+0x20>
    2332:	e9 2f       	mov	r30, r25
    2334:	f0 e0       	ldi	r31, 0x00	; 0
    2336:	e8 50       	subi	r30, 0x08	; 8
    2338:	fb 4f       	sbci	r31, 0xFB	; 251
    233a:	20 81       	ld	r18, Z
    233c:	30 e0       	ldi	r19, 0x00	; 0
    233e:	9f 5f       	subi	r25, 0xFF	; 255
    2340:	90 93 f7 04 	sts	0x04F7, r25	; 0x8004f7 <_ZN7TwoWire13rxBufferIndexE>
    2344:	02 c0       	rjmp	.+4      	; 0x234a <_ZN7TwoWire4readEv+0x24>
    2346:	2f ef       	ldi	r18, 0xFF	; 255
    2348:	3f ef       	ldi	r19, 0xFF	; 255
    234a:	c9 01       	movw	r24, r18
    234c:	08 95       	ret

0000234e <_ZN7TwoWire4peekEv>:
    234e:	e0 91 f7 04 	lds	r30, 0x04F7	; 0x8004f7 <_ZN7TwoWire13rxBufferIndexE>
    2352:	80 91 f6 04 	lds	r24, 0x04F6	; 0x8004f6 <_ZN7TwoWire14rxBufferLengthE>
    2356:	e8 17       	cp	r30, r24
    2358:	30 f4       	brcc	.+12     	; 0x2366 <_ZN7TwoWire4peekEv+0x18>
    235a:	f0 e0       	ldi	r31, 0x00	; 0
    235c:	e8 50       	subi	r30, 0x08	; 8
    235e:	fb 4f       	sbci	r31, 0xFB	; 251
    2360:	80 81       	ld	r24, Z
    2362:	90 e0       	ldi	r25, 0x00	; 0
    2364:	08 95       	ret
    2366:	8f ef       	ldi	r24, 0xFF	; 255
    2368:	9f ef       	ldi	r25, 0xFF	; 255
    236a:	08 95       	ret

0000236c <_ZN7TwoWire5flushEv>:
    236c:	08 95       	ret

0000236e <_ZN7TwoWire5writeEPKhj>:
    236e:	cf 92       	push	r12
    2370:	df 92       	push	r13
    2372:	ef 92       	push	r14
    2374:	ff 92       	push	r15
    2376:	0f 93       	push	r16
    2378:	1f 93       	push	r17
    237a:	cf 93       	push	r28
    237c:	df 93       	push	r29
    237e:	7c 01       	movw	r14, r24
    2380:	cb 01       	movw	r24, r22
    2382:	8a 01       	movw	r16, r20
    2384:	20 91 d2 04 	lds	r18, 0x04D2	; 0x8004d2 <_ZN7TwoWire12transmittingE>
    2388:	22 23       	and	r18, r18
    238a:	89 f0       	breq	.+34     	; 0x23ae <_ZN7TwoWire5writeEPKhj+0x40>
    238c:	eb 01       	movw	r28, r22
    238e:	6b 01       	movw	r12, r22
    2390:	c4 0e       	add	r12, r20
    2392:	d5 1e       	adc	r13, r21
    2394:	cc 15       	cp	r28, r12
    2396:	dd 05       	cpc	r29, r13
    2398:	69 f0       	breq	.+26     	; 0x23b4 <_ZN7TwoWire5writeEPKhj+0x46>
    239a:	69 91       	ld	r22, Y+
    239c:	d7 01       	movw	r26, r14
    239e:	ed 91       	ld	r30, X+
    23a0:	fc 91       	ld	r31, X
    23a2:	01 90       	ld	r0, Z+
    23a4:	f0 81       	ld	r31, Z
    23a6:	e0 2d       	mov	r30, r0
    23a8:	c7 01       	movw	r24, r14
    23aa:	09 95       	icall
    23ac:	f3 cf       	rjmp	.-26     	; 0x2394 <_ZN7TwoWire5writeEPKhj+0x26>
    23ae:	64 2f       	mov	r22, r20
    23b0:	0e 94 23 10 	call	0x2046	; 0x2046 <twi_transmit>
    23b4:	c8 01       	movw	r24, r16
    23b6:	df 91       	pop	r29
    23b8:	cf 91       	pop	r28
    23ba:	1f 91       	pop	r17
    23bc:	0f 91       	pop	r16
    23be:	ff 90       	pop	r15
    23c0:	ef 90       	pop	r14
    23c2:	df 90       	pop	r13
    23c4:	cf 90       	pop	r12
    23c6:	08 95       	ret

000023c8 <_ZN7TwoWire5writeEh>:
    23c8:	cf 93       	push	r28
    23ca:	df 93       	push	r29
    23cc:	1f 92       	push	r1
    23ce:	cd b7       	in	r28, 0x3d	; 61
    23d0:	de b7       	in	r29, 0x3e	; 62
    23d2:	69 83       	std	Y+1, r22	; 0x01
    23d4:	20 91 d2 04 	lds	r18, 0x04D2	; 0x8004d2 <_ZN7TwoWire12transmittingE>
    23d8:	22 23       	and	r18, r18
    23da:	d1 f0       	breq	.+52     	; 0x2410 <_ZN7TwoWire5writeEh+0x48>
    23dc:	20 91 d3 04 	lds	r18, 0x04D3	; 0x8004d3 <_ZN7TwoWire14txBufferLengthE>
    23e0:	20 32       	cpi	r18, 0x20	; 32
    23e2:	40 f0       	brcs	.+16     	; 0x23f4 <_ZN7TwoWire5writeEh+0x2c>
    23e4:	21 e0       	ldi	r18, 0x01	; 1
    23e6:	30 e0       	ldi	r19, 0x00	; 0
    23e8:	fc 01       	movw	r30, r24
    23ea:	33 83       	std	Z+3, r19	; 0x03
    23ec:	22 83       	std	Z+2, r18	; 0x02
    23ee:	80 e0       	ldi	r24, 0x00	; 0
    23f0:	90 e0       	ldi	r25, 0x00	; 0
    23f2:	15 c0       	rjmp	.+42     	; 0x241e <_ZN7TwoWire5writeEh+0x56>
    23f4:	80 91 d4 04 	lds	r24, 0x04D4	; 0x8004d4 <_ZN7TwoWire13txBufferIndexE>
    23f8:	e8 2f       	mov	r30, r24
    23fa:	f0 e0       	ldi	r31, 0x00	; 0
    23fc:	eb 52       	subi	r30, 0x2B	; 43
    23fe:	fb 4f       	sbci	r31, 0xFB	; 251
    2400:	99 81       	ldd	r25, Y+1	; 0x01
    2402:	90 83       	st	Z, r25
    2404:	8f 5f       	subi	r24, 0xFF	; 255
    2406:	80 93 d4 04 	sts	0x04D4, r24	; 0x8004d4 <_ZN7TwoWire13txBufferIndexE>
    240a:	80 93 d3 04 	sts	0x04D3, r24	; 0x8004d3 <_ZN7TwoWire14txBufferLengthE>
    240e:	05 c0       	rjmp	.+10     	; 0x241a <_ZN7TwoWire5writeEh+0x52>
    2410:	61 e0       	ldi	r22, 0x01	; 1
    2412:	ce 01       	movw	r24, r28
    2414:	01 96       	adiw	r24, 0x01	; 1
    2416:	0e 94 23 10 	call	0x2046	; 0x2046 <twi_transmit>
    241a:	81 e0       	ldi	r24, 0x01	; 1
    241c:	90 e0       	ldi	r25, 0x00	; 0
    241e:	0f 90       	pop	r0
    2420:	df 91       	pop	r29
    2422:	cf 91       	pop	r28
    2424:	08 95       	ret

00002426 <_ZN7TwoWireC1Ev>:
    2426:	fc 01       	movw	r30, r24
    2428:	13 82       	std	Z+3, r1	; 0x03
    242a:	12 82       	std	Z+2, r1	; 0x02
    242c:	88 ee       	ldi	r24, 0xE8	; 232
    242e:	93 e0       	ldi	r25, 0x03	; 3
    2430:	a0 e0       	ldi	r26, 0x00	; 0
    2432:	b0 e0       	ldi	r27, 0x00	; 0
    2434:	84 83       	std	Z+4, r24	; 0x04
    2436:	95 83       	std	Z+5, r25	; 0x05
    2438:	a6 83       	std	Z+6, r26	; 0x06
    243a:	b7 83       	std	Z+7, r27	; 0x07
    243c:	8a e6       	ldi	r24, 0x6A	; 106
    243e:	92 e0       	ldi	r25, 0x02	; 2
    2440:	91 83       	std	Z+1, r25	; 0x01
    2442:	80 83       	st	Z, r24
    2444:	08 95       	ret

00002446 <_ZN7TwoWire17beginTransmissionEh>:
    2446:	81 e0       	ldi	r24, 0x01	; 1
    2448:	80 93 d2 04 	sts	0x04D2, r24	; 0x8004d2 <_ZN7TwoWire12transmittingE>
    244c:	60 93 f5 04 	sts	0x04F5, r22	; 0x8004f5 <_ZN7TwoWire9txAddressE>
    2450:	10 92 d4 04 	sts	0x04D4, r1	; 0x8004d4 <_ZN7TwoWire13txBufferIndexE>
    2454:	10 92 d3 04 	sts	0x04D3, r1	; 0x8004d3 <_ZN7TwoWire14txBufferLengthE>
    2458:	08 95       	ret

0000245a <_ZN7TwoWire15endTransmissionEh>:
    245a:	0f 93       	push	r16
    245c:	06 2f       	mov	r16, r22
    245e:	21 e0       	ldi	r18, 0x01	; 1
    2460:	40 91 d3 04 	lds	r20, 0x04D3	; 0x8004d3 <_ZN7TwoWire14txBufferLengthE>
    2464:	65 ed       	ldi	r22, 0xD5	; 213
    2466:	74 e0       	ldi	r23, 0x04	; 4
    2468:	80 91 f5 04 	lds	r24, 0x04F5	; 0x8004f5 <_ZN7TwoWire9txAddressE>
    246c:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <twi_writeTo>
    2470:	10 92 d4 04 	sts	0x04D4, r1	; 0x8004d4 <_ZN7TwoWire13txBufferIndexE>
    2474:	10 92 d3 04 	sts	0x04D3, r1	; 0x8004d3 <_ZN7TwoWire14txBufferLengthE>
    2478:	10 92 d2 04 	sts	0x04D2, r1	; 0x8004d2 <_ZN7TwoWire12transmittingE>
    247c:	0f 91       	pop	r16
    247e:	08 95       	ret

00002480 <_ZN7TwoWire11requestFromEhhmhh>:
    2480:	4f 92       	push	r4
    2482:	5f 92       	push	r5
    2484:	6f 92       	push	r6
    2486:	7f 92       	push	r7
    2488:	af 92       	push	r10
    248a:	bf 92       	push	r11
    248c:	cf 92       	push	r12
    248e:	ef 92       	push	r14
    2490:	ff 92       	push	r15
    2492:	0f 93       	push	r16
    2494:	1f 93       	push	r17
    2496:	cf 93       	push	r28
    2498:	df 93       	push	r29
    249a:	5c 01       	movw	r10, r24
    249c:	f6 2e       	mov	r15, r22
    249e:	d4 2f       	mov	r29, r20
    24a0:	28 01       	movw	r4, r16
    24a2:	39 01       	movw	r6, r18
    24a4:	ee 20       	and	r14, r14
    24a6:	21 f1       	breq	.+72     	; 0x24f0 <_ZN7TwoWire11requestFromEhhmhh+0x70>
    24a8:	0e 94 23 12 	call	0x2446	; 0x2446 <_ZN7TwoWire17beginTransmissionEh>
    24ac:	ce 2d       	mov	r28, r14
    24ae:	c4 30       	cpi	r28, 0x04	; 4
    24b0:	08 f0       	brcs	.+2      	; 0x24b4 <_ZN7TwoWire11requestFromEhhmhh+0x34>
    24b2:	c3 e0       	ldi	r28, 0x03	; 3
    24b4:	c1 50       	subi	r28, 0x01	; 1
    24b6:	c0 f0       	brcs	.+48     	; 0x24e8 <_ZN7TwoWire11requestFromEhhmhh+0x68>
    24b8:	28 e0       	ldi	r18, 0x08	; 8
    24ba:	c2 9f       	mul	r28, r18
    24bc:	c0 01       	movw	r24, r0
    24be:	11 24       	eor	r1, r1
    24c0:	a3 01       	movw	r20, r6
    24c2:	92 01       	movw	r18, r4
    24c4:	04 c0       	rjmp	.+8      	; 0x24ce <_ZN7TwoWire11requestFromEhhmhh+0x4e>
    24c6:	56 95       	lsr	r21
    24c8:	47 95       	ror	r20
    24ca:	37 95       	ror	r19
    24cc:	27 95       	ror	r18
    24ce:	8a 95       	dec	r24
    24d0:	d2 f7       	brpl	.-12     	; 0x24c6 <_ZN7TwoWire11requestFromEhhmhh+0x46>
    24d2:	ca 01       	movw	r24, r20
    24d4:	b9 01       	movw	r22, r18
    24d6:	d5 01       	movw	r26, r10
    24d8:	ed 91       	ld	r30, X+
    24da:	fc 91       	ld	r31, X
    24dc:	01 90       	ld	r0, Z+
    24de:	f0 81       	ld	r31, Z
    24e0:	e0 2d       	mov	r30, r0
    24e2:	c5 01       	movw	r24, r10
    24e4:	09 95       	icall
    24e6:	e6 cf       	rjmp	.-52     	; 0x24b4 <_ZN7TwoWire11requestFromEhhmhh+0x34>
    24e8:	60 e0       	ldi	r22, 0x00	; 0
    24ea:	c5 01       	movw	r24, r10
    24ec:	0e 94 2d 12 	call	0x245a	; 0x245a <_ZN7TwoWire15endTransmissionEh>
    24f0:	4d 2f       	mov	r20, r29
    24f2:	d1 32       	cpi	r29, 0x21	; 33
    24f4:	08 f0       	brcs	.+2      	; 0x24f8 <_ZN7TwoWire11requestFromEhhmhh+0x78>
    24f6:	40 e2       	ldi	r20, 0x20	; 32
    24f8:	2c 2d       	mov	r18, r12
    24fa:	68 ef       	ldi	r22, 0xF8	; 248
    24fc:	74 e0       	ldi	r23, 0x04	; 4
    24fe:	8f 2d       	mov	r24, r15
    2500:	0e 94 85 0f 	call	0x1f0a	; 0x1f0a <twi_readFrom>
    2504:	10 92 f7 04 	sts	0x04F7, r1	; 0x8004f7 <_ZN7TwoWire13rxBufferIndexE>
    2508:	80 93 f6 04 	sts	0x04F6, r24	; 0x8004f6 <_ZN7TwoWire14rxBufferLengthE>
    250c:	df 91       	pop	r29
    250e:	cf 91       	pop	r28
    2510:	1f 91       	pop	r17
    2512:	0f 91       	pop	r16
    2514:	ff 90       	pop	r15
    2516:	ef 90       	pop	r14
    2518:	cf 90       	pop	r12
    251a:	bf 90       	pop	r11
    251c:	af 90       	pop	r10
    251e:	7f 90       	pop	r7
    2520:	6f 90       	pop	r6
    2522:	5f 90       	pop	r5
    2524:	4f 90       	pop	r4
    2526:	08 95       	ret

00002528 <_ZN7TwoWire11requestFromEhhh>:
    2528:	cf 92       	push	r12
    252a:	ef 92       	push	r14
    252c:	0f 93       	push	r16
    252e:	1f 93       	push	r17
    2530:	c2 2e       	mov	r12, r18
    2532:	e1 2c       	mov	r14, r1
    2534:	00 e0       	ldi	r16, 0x00	; 0
    2536:	10 e0       	ldi	r17, 0x00	; 0
    2538:	98 01       	movw	r18, r16
    253a:	0e 94 40 12 	call	0x2480	; 0x2480 <_ZN7TwoWire11requestFromEhhmhh>
    253e:	1f 91       	pop	r17
    2540:	0f 91       	pop	r16
    2542:	ef 90       	pop	r14
    2544:	cf 90       	pop	r12
    2546:	08 95       	ret

00002548 <_ZN7TwoWire11requestFromEhh>:
    2548:	21 e0       	ldi	r18, 0x01	; 1
    254a:	0c 94 94 12 	jmp	0x2528	; 0x2528 <_ZN7TwoWire11requestFromEhhh>

0000254e <_ZN7TwoWire15endTransmissionEv>:
    254e:	61 e0       	ldi	r22, 0x01	; 1
    2550:	0c 94 2d 12 	jmp	0x245a	; 0x245a <_ZN7TwoWire15endTransmissionEh>

00002554 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    2554:	86 ec       	ldi	r24, 0xC6	; 198
    2556:	94 e0       	ldi	r25, 0x04	; 4
    2558:	0c 94 13 12 	jmp	0x2426	; 0x2426 <_ZN7TwoWireC1Ev>

0000255c <_GLOBAL__sub_I_buffersize>:
// default I2C address is 0x68
// specific I2C addresses may be passed as a parameter here
// AD0 low = 0x68 (default for InvenSense evaluation board)
// AD0 high = 0x69
//MPU6050 accelgyro;
MPU6050 accelgyro(0x68); // <-- use for AD0 high
    255c:	68 e6       	ldi	r22, 0x68	; 104
    255e:	88 e1       	ldi	r24, 0x18	; 24
    2560:	95 e0       	ldi	r25, 0x05	; 5
    2562:	0c 94 56 0e 	jmp	0x1cac	; 0x1cac <_ZN7MPU6050C1Eh>

00002566 <_Z15Motor0_SetSpeedhh.part.0>:
    PORTB &= ~(1<<PORTB3);
}


#ifdef SLOW_DRAIN
void Motor0_SetSpeed(uint8_t dir,uint8_t speed)
    2566:	cf 93       	push	r28
    2568:	c8 2f       	mov	r28, r24
            PWM_0_disable_output_ch0();
            PORTD |= (1<<PORTD6);
        }
    else if (dir==REV)
        {
            PWM_0_enable_output_ch0();
    256a:	0e 94 68 14 	call	0x28d0	; 0x28d0 <PWM_0_enable_output_ch0>
            PWM_0_load_duty_cycle_ch0(255-speed);
    256e:	8c 2f       	mov	r24, r28
    2570:	80 95       	com	r24
    2572:	0e 94 78 14 	call	0x28f0	; 0x28f0 <PWM_0_load_duty_cycle_ch0>

            PWM_0_disable_output_ch1();
    2576:	0e 94 74 14 	call	0x28e8	; 0x28e8 <PWM_0_disable_output_ch1>
            PORTD |= (1<<PORTD5);
    257a:	5d 9a       	sbi	0x0b, 5	; 11
        }
}
    257c:	cf 91       	pop	r28
    257e:	08 95       	ret

00002580 <_Z15Motor1_SetSpeedhh.part.1>:
        }
}
#endif

#ifdef SLOW_DRAIN
void Motor1_SetSpeed(uint8_t dir,uint8_t speed)
    2580:	cf 93       	push	r28
    2582:	c8 2f       	mov	r28, r24
            PWM_1_disable_output_ch0();
            PORTB |= (1<<PORTB3);
        }
    else if (dir==REV)
        {
            PWM_1_enable_output_ch0();
    2584:	0e 94 8f 14 	call	0x291e	; 0x291e <PWM_1_enable_output_ch0>
            PWM_1_load_duty_cycle_ch0(255-speed);
    2588:	8c 2f       	mov	r24, r28
    258a:	80 95       	com	r24
    258c:	0e 94 a7 14 	call	0x294e	; 0x294e <PWM_1_load_duty_cycle_ch0>

            PWM_1_disable_output_ch1();
    2590:	0e 94 a1 14 	call	0x2942	; 0x2942 <PWM_1_disable_output_ch1>
            PORTD |= (1<<PORTD3);
    2594:	5b 9a       	sbi	0x0b, 3	; 11
        }
}
    2596:	cf 91       	pop	r28
    2598:	08 95       	ret

0000259a <_Z11Motor0_Stopv>:
    Motor1_Stop();
}

void Motor0_Stop()
{
    PWM_0_disable_output_ch1();
    259a:	0e 94 74 14 	call	0x28e8	; 0x28e8 <PWM_0_disable_output_ch1>
    PWM_0_disable_output_ch0();
    259e:	0e 94 6c 14 	call	0x28d8	; 0x28d8 <PWM_0_disable_output_ch0>
    PORTD &= ~(1<<PORTD5);
    25a2:	5d 98       	cbi	0x0b, 5	; 11
    PORTD &= ~(1<<PORTD6);
    25a4:	5e 98       	cbi	0x0b, 6	; 11
    25a6:	08 95       	ret

000025a8 <_Z9Mot0_Initv>:
#include "pwm_basic.h"
#include "../Configs.h"

void Mot0_Init(void)
{
    PWM_0_init();
    25a8:	0e 94 58 14 	call	0x28b0	; 0x28b0 <PWM_0_init>

    pinMode(PD5Pin,OUTPUT);
    25ac:	61 e0       	ldi	r22, 0x01	; 1
    25ae:	85 e0       	ldi	r24, 0x05	; 5
    25b0:	0e 94 10 1c 	call	0x3820	; 0x3820 <pinMode>
    pinMode(PD6Pin,OUTPUT);
    25b4:	61 e0       	ldi	r22, 0x01	; 1
    25b6:	86 e0       	ldi	r24, 0x06	; 6
    25b8:	0e 94 10 1c 	call	0x3820	; 0x3820 <pinMode>
    Motor0_Stop();
    25bc:	0c 94 cd 12 	jmp	0x259a	; 0x259a <_Z11Motor0_Stopv>

000025c0 <_Z11Motor1_Stopv>:
    PORTD &= ~(1<<PORTD6);
}

void Motor1_Stop()
{
    PWM_1_disable_output_ch1();
    25c0:	0e 94 a1 14 	call	0x2942	; 0x2942 <PWM_1_disable_output_ch1>
    PWM_1_disable_output_ch0();
    25c4:	0e 94 95 14 	call	0x292a	; 0x292a <PWM_1_disable_output_ch0>
    PORTD &= ~(1<<PORTD3);
    25c8:	5b 98       	cbi	0x0b, 3	; 11
    PORTB &= ~(1<<PORTB3);
    25ca:	2b 98       	cbi	0x05, 3	; 5
    25cc:	08 95       	ret

000025ce <_Z9Mot1_Initv>:
    Motor0_Stop();
}

void Mot1_Init(void)
{
    PWM_1_init();
    25ce:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <PWM_1_init>

    pinMode(PB3Pin,OUTPUT);
    25d2:	61 e0       	ldi	r22, 0x01	; 1
    25d4:	8b e0       	ldi	r24, 0x0B	; 11
    25d6:	0e 94 10 1c 	call	0x3820	; 0x3820 <pinMode>
    pinMode(PD3Pin,OUTPUT);
    25da:	61 e0       	ldi	r22, 0x01	; 1
    25dc:	83 e0       	ldi	r24, 0x03	; 3
    25de:	0e 94 10 1c 	call	0x3820	; 0x3820 <pinMode>
    Motor1_Stop();
    25e2:	0c 94 e0 12 	jmp	0x25c0	; 0x25c0 <_Z11Motor1_Stopv>

000025e6 <_Z15Motor0_SetSpeedhh>:
}


#ifdef SLOW_DRAIN
void Motor0_SetSpeed(uint8_t dir,uint8_t speed)
{
    25e6:	cf 93       	push	r28
    if (dir==FWD)
    25e8:	81 11       	cpse	r24, r1
    25ea:	0b c0       	rjmp	.+22     	; 0x2602 <_Z15Motor0_SetSpeedhh+0x1c>
    25ec:	c6 2f       	mov	r28, r22
        {
            PWM_0_enable_output_ch1();
    25ee:	0e 94 70 14 	call	0x28e0	; 0x28e0 <PWM_0_enable_output_ch1>
            PWM_0_load_duty_cycle_ch1(255-speed);
    25f2:	8c 2f       	mov	r24, r28
    25f4:	80 95       	com	r24
    25f6:	0e 94 7a 14 	call	0x28f4	; 0x28f4 <PWM_0_load_duty_cycle_ch1>

            PWM_0_disable_output_ch0();
    25fa:	0e 94 6c 14 	call	0x28d8	; 0x28d8 <PWM_0_disable_output_ch0>
            PORTD |= (1<<PORTD6);
    25fe:	5e 9a       	sbi	0x0b, 6	; 11
    2600:	06 c0       	rjmp	.+12     	; 0x260e <_Z15Motor0_SetSpeedhh+0x28>
        }
    else if (dir==REV)
    2602:	81 30       	cpi	r24, 0x01	; 1
    2604:	21 f4       	brne	.+8      	; 0x260e <_Z15Motor0_SetSpeedhh+0x28>
    2606:	86 2f       	mov	r24, r22
            PWM_0_load_duty_cycle_ch0(255-speed);

            PWM_0_disable_output_ch1();
            PORTD |= (1<<PORTD5);
        }
}
    2608:	cf 91       	pop	r28
    260a:	0c 94 b3 12 	jmp	0x2566	; 0x2566 <_Z15Motor0_SetSpeedhh.part.0>
    260e:	cf 91       	pop	r28
    2610:	08 95       	ret

00002612 <_Z15Motor1_SetSpeedhh>:
}
#endif

#ifdef SLOW_DRAIN
void Motor1_SetSpeed(uint8_t dir,uint8_t speed)
{
    2612:	cf 93       	push	r28
    if (dir==FWD)
    2614:	81 11       	cpse	r24, r1
    2616:	0b c0       	rjmp	.+22     	; 0x262e <_Z15Motor1_SetSpeedhh+0x1c>
    2618:	c6 2f       	mov	r28, r22
        {
            PWM_1_enable_output_ch1();
    261a:	0e 94 9b 14 	call	0x2936	; 0x2936 <PWM_1_enable_output_ch1>
            PWM_1_load_duty_cycle_ch1(255-speed);
    261e:	8c 2f       	mov	r24, r28
    2620:	80 95       	com	r24
    2622:	0e 94 aa 14 	call	0x2954	; 0x2954 <PWM_1_load_duty_cycle_ch1>

            PWM_1_disable_output_ch0();
    2626:	0e 94 95 14 	call	0x292a	; 0x292a <PWM_1_disable_output_ch0>
            PORTB |= (1<<PORTB3);
    262a:	2b 9a       	sbi	0x05, 3	; 5
    262c:	06 c0       	rjmp	.+12     	; 0x263a <_Z15Motor1_SetSpeedhh+0x28>
        }
    else if (dir==REV)
    262e:	81 30       	cpi	r24, 0x01	; 1
    2630:	21 f4       	brne	.+8      	; 0x263a <_Z15Motor1_SetSpeedhh+0x28>
    2632:	86 2f       	mov	r24, r22
            PWM_1_load_duty_cycle_ch0(255-speed);

            PWM_1_disable_output_ch1();
            PORTD |= (1<<PORTD3);
        }
}
    2634:	cf 91       	pop	r28
    2636:	0c 94 c0 12 	jmp	0x2580	; 0x2580 <_Z15Motor1_SetSpeedhh.part.1>
    263a:	cf 91       	pop	r28
    263c:	08 95       	ret

0000263e <_Z15Motors_SetSpeedii>:
        }
}
#endif

void Motors_SetSpeed(int leftMotorSpeed, int rightMotorSpeed)
{
    263e:	cf 93       	push	r28
    2640:	df 93       	push	r29
    2642:	eb 01       	movw	r28, r22

    if(leftMotorSpeed >= 0)
    2644:	97 fd       	sbrc	r25, 7
    2646:	03 c0       	rjmp	.+6      	; 0x264e <_Z15Motors_SetSpeedii+0x10>
    2648:	0e 94 b3 12 	call	0x2566	; 0x2566 <_Z15Motor0_SetSpeedhh.part.0>
    264c:	07 c0       	rjmp	.+14     	; 0x265c <_Z15Motors_SetSpeedii+0x1e>
        {
            Motor0_SetSpeed(REV,leftMotorSpeed);
        }
    else
        {
            Motor0_SetSpeed(FWD, abs(leftMotorSpeed));
    264e:	66 27       	eor	r22, r22
    2650:	77 27       	eor	r23, r23
    2652:	68 1b       	sub	r22, r24
    2654:	79 0b       	sbc	r23, r25
    2656:	80 e0       	ldi	r24, 0x00	; 0
    2658:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <_Z15Motor0_SetSpeedhh>
        }

    if(rightMotorSpeed >= 0)
    265c:	d7 fd       	sbrc	r29, 7
    265e:	05 c0       	rjmp	.+10     	; 0x266a <_Z15Motors_SetSpeedii+0x2c>
    2660:	8c 2f       	mov	r24, r28
        }
    else
        {
            Motor1_SetSpeed(FWD,abs(rightMotorSpeed));
        }
}
    2662:	df 91       	pop	r29
    2664:	cf 91       	pop	r28
    2666:	0c 94 c0 12 	jmp	0x2580	; 0x2580 <_Z15Motor1_SetSpeedhh.part.1>
        {
            Motor1_SetSpeed(REV,rightMotorSpeed);
        }
    else
        {
            Motor1_SetSpeed(FWD,abs(rightMotorSpeed));
    266a:	66 27       	eor	r22, r22
    266c:	77 27       	eor	r23, r23
    266e:	6c 1b       	sub	r22, r28
    2670:	7d 0b       	sbc	r23, r29
    2672:	80 e0       	ldi	r24, 0x00	; 0
        }
}
    2674:	df 91       	pop	r29
    2676:	cf 91       	pop	r28
        {
            Motor1_SetSpeed(REV,rightMotorSpeed);
        }
    else
        {
            Motor1_SetSpeed(FWD,abs(rightMotorSpeed));
    2678:	0c 94 09 13 	jmp	0x2612	; 0x2612 <_Z15Motor1_SetSpeedhh>

0000267c <_Z8Enc_Initv>:
}


void Enc_Init()
{
    pinMode(A1,INPUT_PULLUP);
    267c:	62 e0       	ldi	r22, 0x02	; 2
    267e:	8f e0       	ldi	r24, 0x0F	; 15
    2680:	0e 94 10 1c 	call	0x3820	; 0x3820 <pinMode>
    pinMode(A0,INPUT_PULLUP);
    2684:	62 e0       	ldi	r22, 0x02	; 2
    2686:	8e e0       	ldi	r24, 0x0E	; 14
    2688:	0e 94 10 1c 	call	0x3820	; 0x3820 <pinMode>
    pinMode(13,INPUT_PULLUP);//pinMode(13,INPUT_PULLUP); //led
    268c:	62 e0       	ldi	r22, 0x02	; 2
    268e:	8d e0       	ldi	r24, 0x0D	; 13
    2690:	0e 94 10 1c 	call	0x3820	; 0x3820 <pinMode>
    pinMode(12,INPUT_PULLUP);
    2694:	62 e0       	ldi	r22, 0x02	; 2
    2696:	8c e0       	ldi	r24, 0x0C	; 12
    2698:	0e 94 10 1c 	call	0x3820	; 0x3820 <pinMode>

    PCICR = (1 << PCIE0) | // Enable pin change interrupt 0 {PCINT[14:8]}
            (1 << PCIE1) ; // Enable pin change interrupt 1 {PCINT[7:0]}
    269c:	83 e0       	ldi	r24, 0x03	; 3
    269e:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>


    PCMSK0 = (1 << PCINT4); // Pin change enable mask 5
    26a2:	ab e6       	ldi	r26, 0x6B	; 107
    26a4:	b0 e0       	ldi	r27, 0x00	; 0
    26a6:	80 e1       	ldi	r24, 0x10	; 16
    26a8:	8c 93       	st	X, r24
    PCMSK1 = (1 << PCINT9); // Pin change enable mask 9
    26aa:	ec e6       	ldi	r30, 0x6C	; 108
    26ac:	f0 e0       	ldi	r31, 0x00	; 0
    26ae:	82 e0       	ldi	r24, 0x02	; 2
    26b0:	80 83       	st	Z, r24
#ifdef DOUBLE_ENC_INT
    PCMSK0 |= (1 << PCINT5); // Pin change enable mask 5
    26b2:	8c 91       	ld	r24, X
    26b4:	80 62       	ori	r24, 0x20	; 32
    26b6:	8c 93       	st	X, r24
    PCMSK1 |= (1 << PCINT8); // Pin change enable mask 9
    26b8:	80 81       	ld	r24, Z
    26ba:	81 60       	ori	r24, 0x01	; 1
    26bc:	80 83       	st	Z, r24
    26be:	08 95       	ret

000026c0 <__vector_3>:
uint8_t Mot0_tmpState;



ISR(PCINT0_vect)
{
    26c0:	1f 92       	push	r1
    26c2:	0f 92       	push	r0
    26c4:	0f b6       	in	r0, 0x3f	; 63
    26c6:	0f 92       	push	r0
    26c8:	11 24       	eor	r1, r1
    26ca:	2f 93       	push	r18
    26cc:	8f 93       	push	r24
    26ce:	9f 93       	push	r25
    26d0:	af 93       	push	r26
    26d2:	bf 93       	push	r27
    26d4:	ef 93       	push	r30
    26d6:	ff 93       	push	r31
    Mot1_p1Val = bitRead(PINB,5);
    26d8:	23 b1       	in	r18, 0x03	; 3
    26da:	25 fb       	bst	r18, 5
    26dc:	22 27       	eor	r18, r18
    26de:	20 f9       	bld	r18, 0
    26e0:	20 93 2d 05 	sts	0x052D, r18	; 0x80052d <Mot1_p1Val>
    Mot1_p2Val = bitRead(PINB,4);
    26e4:	83 b1       	in	r24, 0x03	; 3
    26e6:	82 95       	swap	r24
    26e8:	81 70       	andi	r24, 0x01	; 1
    26ea:	80 93 2c 05 	sts	0x052C, r24	; 0x80052c <Mot1_p2Val>
    Mot1_tmpState = Mot1_state & 3;
    26ee:	90 91 2e 05 	lds	r25, 0x052E	; 0x80052e <Mot1_state>
    26f2:	93 70       	andi	r25, 0x03	; 3

    if (Mot1_p1Val) Mot1_tmpState |= 8;
    26f4:	21 11       	cpse	r18, r1
    26f6:	98 60       	ori	r25, 0x08	; 8
    26f8:	90 93 2b 05 	sts	0x052B, r25	; 0x80052b <Mot1_tmpState>
    if (Mot1_p2Val) Mot1_tmpState |= 4;
    26fc:	88 23       	and	r24, r24
    26fe:	29 f0       	breq	.+10     	; 0x270a <__vector_3+0x4a>
    2700:	80 91 2b 05 	lds	r24, 0x052B	; 0x80052b <Mot1_tmpState>
    2704:	84 60       	ori	r24, 0x04	; 4
    2706:	80 93 2b 05 	sts	0x052B, r24	; 0x80052b <Mot1_tmpState>

    Mot1_state = (Mot1_tmpState >> 2);
    270a:	e0 91 2b 05 	lds	r30, 0x052B	; 0x80052b <Mot1_tmpState>
    270e:	8e 2f       	mov	r24, r30
    2710:	90 e0       	ldi	r25, 0x00	; 0
    2712:	95 95       	asr	r25
    2714:	87 95       	ror	r24
    2716:	95 95       	asr	r25
    2718:	87 95       	ror	r24
    271a:	80 93 2e 05 	sts	0x052E, r24	; 0x80052e <Mot1_state>
    switch (Mot1_tmpState)
    271e:	8e 2f       	mov	r24, r30
    2720:	90 e0       	ldi	r25, 0x00	; 0
    2722:	fc 01       	movw	r30, r24
    2724:	31 97       	sbiw	r30, 0x01	; 1
    2726:	ee 30       	cpi	r30, 0x0E	; 14
    2728:	f1 05       	cpc	r31, r1
    272a:	d8 f5       	brcc	.+118    	; 0x27a2 <__vector_3+0xe2>
    272c:	ec 5c       	subi	r30, 0xCC	; 204
    272e:	ff 4f       	sbci	r31, 0xFF	; 255
    2730:	0c 94 e3 1c 	jmp	0x39c6	; 0x39c6 <__tablejump2__>
        {
        case 1:
        case 7:
        case 8:
        case 14:
            Mot1_Enc++;
    2734:	80 91 2f 05 	lds	r24, 0x052F	; 0x80052f <Mot1_Enc>
    2738:	90 91 30 05 	lds	r25, 0x0530	; 0x800530 <Mot1_Enc+0x1>
    273c:	a0 91 31 05 	lds	r26, 0x0531	; 0x800531 <Mot1_Enc+0x2>
    2740:	b0 91 32 05 	lds	r27, 0x0532	; 0x800532 <Mot1_Enc+0x3>
    2744:	01 96       	adiw	r24, 0x01	; 1
    2746:	a1 1d       	adc	r26, r1
    2748:	b1 1d       	adc	r27, r1
    274a:	23 c0       	rjmp	.+70     	; 0x2792 <__vector_3+0xd2>
            return;
        case 2:
        case 4:
        case 11:
        case 13:
            Mot1_Enc--;
    274c:	80 91 2f 05 	lds	r24, 0x052F	; 0x80052f <Mot1_Enc>
    2750:	90 91 30 05 	lds	r25, 0x0530	; 0x800530 <Mot1_Enc+0x1>
    2754:	a0 91 31 05 	lds	r26, 0x0531	; 0x800531 <Mot1_Enc+0x2>
    2758:	b0 91 32 05 	lds	r27, 0x0532	; 0x800532 <Mot1_Enc+0x3>
    275c:	01 97       	sbiw	r24, 0x01	; 1
    275e:	a1 09       	sbc	r26, r1
    2760:	b1 09       	sbc	r27, r1
    2762:	17 c0       	rjmp	.+46     	; 0x2792 <__vector_3+0xd2>
            return;
        case 3:
        case 12:
            Mot1_Enc += 2;
    2764:	80 91 2f 05 	lds	r24, 0x052F	; 0x80052f <Mot1_Enc>
    2768:	90 91 30 05 	lds	r25, 0x0530	; 0x800530 <Mot1_Enc+0x1>
    276c:	a0 91 31 05 	lds	r26, 0x0531	; 0x800531 <Mot1_Enc+0x2>
    2770:	b0 91 32 05 	lds	r27, 0x0532	; 0x800532 <Mot1_Enc+0x3>
    2774:	02 96       	adiw	r24, 0x02	; 2
    2776:	a1 1d       	adc	r26, r1
    2778:	b1 1d       	adc	r27, r1
    277a:	0b c0       	rjmp	.+22     	; 0x2792 <__vector_3+0xd2>
            return;
        case 6:
        case 9:
            Mot1_Enc -= 2;
    277c:	80 91 2f 05 	lds	r24, 0x052F	; 0x80052f <Mot1_Enc>
    2780:	90 91 30 05 	lds	r25, 0x0530	; 0x800530 <Mot1_Enc+0x1>
    2784:	a0 91 31 05 	lds	r26, 0x0531	; 0x800531 <Mot1_Enc+0x2>
    2788:	b0 91 32 05 	lds	r27, 0x0532	; 0x800532 <Mot1_Enc+0x3>
    278c:	02 97       	sbiw	r24, 0x02	; 2
    278e:	a1 09       	sbc	r26, r1
    2790:	b1 09       	sbc	r27, r1
    2792:	80 93 2f 05 	sts	0x052F, r24	; 0x80052f <Mot1_Enc>
    2796:	90 93 30 05 	sts	0x0530, r25	; 0x800530 <Mot1_Enc+0x1>
    279a:	a0 93 31 05 	sts	0x0531, r26	; 0x800531 <Mot1_Enc+0x2>
    279e:	b0 93 32 05 	sts	0x0532, r27	; 0x800532 <Mot1_Enc+0x3>
            return;
        }
}
    27a2:	ff 91       	pop	r31
    27a4:	ef 91       	pop	r30
    27a6:	bf 91       	pop	r27
    27a8:	af 91       	pop	r26
    27aa:	9f 91       	pop	r25
    27ac:	8f 91       	pop	r24
    27ae:	2f 91       	pop	r18
    27b0:	0f 90       	pop	r0
    27b2:	0f be       	out	0x3f, r0	; 63
    27b4:	0f 90       	pop	r0
    27b6:	1f 90       	pop	r1
    27b8:	18 95       	reti

000027ba <__vector_4>:

ISR(PCINT1_vect)
{
    27ba:	1f 92       	push	r1
    27bc:	0f 92       	push	r0
    27be:	0f b6       	in	r0, 0x3f	; 63
    27c0:	0f 92       	push	r0
    27c2:	11 24       	eor	r1, r1
    27c4:	2f 93       	push	r18
    27c6:	8f 93       	push	r24
    27c8:	9f 93       	push	r25
    27ca:	af 93       	push	r26
    27cc:	bf 93       	push	r27
    27ce:	ef 93       	push	r30
    27d0:	ff 93       	push	r31
    Mot0_p1Val = bitRead(PINC,1);
    27d2:	96 b1       	in	r25, 0x06	; 6
    27d4:	96 95       	lsr	r25
    27d6:	91 70       	andi	r25, 0x01	; 1
    27d8:	90 93 29 05 	sts	0x0529, r25	; 0x800529 <Mot0_p1Val>
    Mot0_p2Val = bitRead(PINC,0);
    27dc:	26 b1       	in	r18, 0x06	; 6
    27de:	21 70       	andi	r18, 0x01	; 1
    27e0:	20 93 28 05 	sts	0x0528, r18	; 0x800528 <Mot0_p2Val>
    Mot0_tmpState = Mot0_state & 3;
    27e4:	80 91 2a 05 	lds	r24, 0x052A	; 0x80052a <Mot0_state>
    27e8:	83 70       	andi	r24, 0x03	; 3

    if (Mot0_p1Val) Mot0_tmpState |= 4;
    27ea:	91 11       	cpse	r25, r1
    27ec:	84 60       	ori	r24, 0x04	; 4
    27ee:	80 93 27 05 	sts	0x0527, r24	; 0x800527 <Mot0_tmpState>
    if (Mot0_p2Val) Mot0_tmpState |= 8;
    27f2:	22 23       	and	r18, r18
    27f4:	29 f0       	breq	.+10     	; 0x2800 <__vector_4+0x46>
    27f6:	80 91 27 05 	lds	r24, 0x0527	; 0x800527 <Mot0_tmpState>
    27fa:	88 60       	ori	r24, 0x08	; 8
    27fc:	80 93 27 05 	sts	0x0527, r24	; 0x800527 <Mot0_tmpState>

    Mot0_state = (Mot0_tmpState >> 2);
    2800:	e0 91 27 05 	lds	r30, 0x0527	; 0x800527 <Mot0_tmpState>
    2804:	8e 2f       	mov	r24, r30
    2806:	90 e0       	ldi	r25, 0x00	; 0
    2808:	95 95       	asr	r25
    280a:	87 95       	ror	r24
    280c:	95 95       	asr	r25
    280e:	87 95       	ror	r24
    2810:	80 93 2a 05 	sts	0x052A, r24	; 0x80052a <Mot0_state>
    switch (Mot0_tmpState)
    2814:	8e 2f       	mov	r24, r30
    2816:	90 e0       	ldi	r25, 0x00	; 0
    2818:	fc 01       	movw	r30, r24
    281a:	31 97       	sbiw	r30, 0x01	; 1
    281c:	ee 30       	cpi	r30, 0x0E	; 14
    281e:	f1 05       	cpc	r31, r1
    2820:	d8 f5       	brcc	.+118    	; 0x2898 <__vector_4+0xde>
    2822:	ee 5b       	subi	r30, 0xBE	; 190
    2824:	ff 4f       	sbci	r31, 0xFF	; 255
    2826:	0c 94 e3 1c 	jmp	0x39c6	; 0x39c6 <__tablejump2__>
        {
        case 1:
        case 7:
        case 8:
        case 14:
            Mot0_Enc++;
    282a:	80 91 33 05 	lds	r24, 0x0533	; 0x800533 <Mot0_Enc>
    282e:	90 91 34 05 	lds	r25, 0x0534	; 0x800534 <Mot0_Enc+0x1>
    2832:	a0 91 35 05 	lds	r26, 0x0535	; 0x800535 <Mot0_Enc+0x2>
    2836:	b0 91 36 05 	lds	r27, 0x0536	; 0x800536 <Mot0_Enc+0x3>
    283a:	01 96       	adiw	r24, 0x01	; 1
    283c:	a1 1d       	adc	r26, r1
    283e:	b1 1d       	adc	r27, r1
    2840:	23 c0       	rjmp	.+70     	; 0x2888 <__vector_4+0xce>
            return;
        case 2:
        case 4:
        case 11:
        case 13:
            Mot0_Enc--;
    2842:	80 91 33 05 	lds	r24, 0x0533	; 0x800533 <Mot0_Enc>
    2846:	90 91 34 05 	lds	r25, 0x0534	; 0x800534 <Mot0_Enc+0x1>
    284a:	a0 91 35 05 	lds	r26, 0x0535	; 0x800535 <Mot0_Enc+0x2>
    284e:	b0 91 36 05 	lds	r27, 0x0536	; 0x800536 <Mot0_Enc+0x3>
    2852:	01 97       	sbiw	r24, 0x01	; 1
    2854:	a1 09       	sbc	r26, r1
    2856:	b1 09       	sbc	r27, r1
    2858:	17 c0       	rjmp	.+46     	; 0x2888 <__vector_4+0xce>
            return;
        case 3:
        case 12:
            Mot0_Enc += 2;
    285a:	80 91 33 05 	lds	r24, 0x0533	; 0x800533 <Mot0_Enc>
    285e:	90 91 34 05 	lds	r25, 0x0534	; 0x800534 <Mot0_Enc+0x1>
    2862:	a0 91 35 05 	lds	r26, 0x0535	; 0x800535 <Mot0_Enc+0x2>
    2866:	b0 91 36 05 	lds	r27, 0x0536	; 0x800536 <Mot0_Enc+0x3>
    286a:	02 96       	adiw	r24, 0x02	; 2
    286c:	a1 1d       	adc	r26, r1
    286e:	b1 1d       	adc	r27, r1
    2870:	0b c0       	rjmp	.+22     	; 0x2888 <__vector_4+0xce>
            return;
        case 6:
        case 9:
            Mot0_Enc -= 2;
    2872:	80 91 33 05 	lds	r24, 0x0533	; 0x800533 <Mot0_Enc>
    2876:	90 91 34 05 	lds	r25, 0x0534	; 0x800534 <Mot0_Enc+0x1>
    287a:	a0 91 35 05 	lds	r26, 0x0535	; 0x800535 <Mot0_Enc+0x2>
    287e:	b0 91 36 05 	lds	r27, 0x0536	; 0x800536 <Mot0_Enc+0x3>
    2882:	02 97       	sbiw	r24, 0x02	; 2
    2884:	a1 09       	sbc	r26, r1
    2886:	b1 09       	sbc	r27, r1
    2888:	80 93 33 05 	sts	0x0533, r24	; 0x800533 <Mot0_Enc>
    288c:	90 93 34 05 	sts	0x0534, r25	; 0x800534 <Mot0_Enc+0x1>
    2890:	a0 93 35 05 	sts	0x0535, r26	; 0x800535 <Mot0_Enc+0x2>
    2894:	b0 93 36 05 	sts	0x0536, r27	; 0x800536 <Mot0_Enc+0x3>
            return;
        }
}
    2898:	ff 91       	pop	r31
    289a:	ef 91       	pop	r30
    289c:	bf 91       	pop	r27
    289e:	af 91       	pop	r26
    28a0:	9f 91       	pop	r25
    28a2:	8f 91       	pop	r24
    28a4:	2f 91       	pop	r18
    28a6:	0f 90       	pop	r0
    28a8:	0f be       	out	0x3f, r0	; 63
    28aa:	0f 90       	pop	r0
    28ac:	1f 90       	pop	r1
    28ae:	18 95       	reti

000028b0 <PWM_0_init>:
    TCCR2A &= ~((1 << COM2B1) | (1 << COM2B0));
}

inline void PWM_1_load_counter(PWM_1_register_t counter_value)
{
    TCNT2 = counter_value;
    28b0:	e4 e6       	ldi	r30, 0x64	; 100
    28b2:	f0 e0       	ldi	r31, 0x00	; 0
    28b4:	80 81       	ld	r24, Z
    28b6:	8f 7d       	andi	r24, 0xDF	; 223
    28b8:	80 83       	st	Z, r24
    28ba:	83 ea       	ldi	r24, 0xA3	; 163
    28bc:	84 bd       	out	0x24, r24	; 36
    28be:	82 e0       	ldi	r24, 0x02	; 2
    28c0:	85 bd       	out	0x25, r24	; 37
    28c2:	81 e0       	ldi	r24, 0x01	; 1
    28c4:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
    28c8:	17 bc       	out	0x27, r1	; 39
    28ca:	18 bc       	out	0x28, r1	; 40
    28cc:	80 e0       	ldi	r24, 0x00	; 0
    28ce:	08 95       	ret

000028d0 <PWM_0_enable_output_ch0>:
    28d0:	84 b5       	in	r24, 0x24	; 36
    28d2:	80 68       	ori	r24, 0x80	; 128
    28d4:	84 bd       	out	0x24, r24	; 36
    28d6:	08 95       	ret

000028d8 <PWM_0_disable_output_ch0>:
    28d8:	84 b5       	in	r24, 0x24	; 36
    28da:	8f 73       	andi	r24, 0x3F	; 63
    28dc:	84 bd       	out	0x24, r24	; 36
    28de:	08 95       	ret

000028e0 <PWM_0_enable_output_ch1>:
    28e0:	84 b5       	in	r24, 0x24	; 36
    28e2:	80 62       	ori	r24, 0x20	; 32
    28e4:	84 bd       	out	0x24, r24	; 36
    28e6:	08 95       	ret

000028e8 <PWM_0_disable_output_ch1>:
    28e8:	84 b5       	in	r24, 0x24	; 36
    28ea:	8f 7c       	andi	r24, 0xCF	; 207
    28ec:	84 bd       	out	0x24, r24	; 36
    28ee:	08 95       	ret

000028f0 <PWM_0_load_duty_cycle_ch0>:
    28f0:	87 bd       	out	0x27, r24	; 39
    28f2:	08 95       	ret

000028f4 <PWM_0_load_duty_cycle_ch1>:
    28f4:	88 bd       	out	0x28, r24	; 40
    28f6:	08 95       	ret

000028f8 <PWM_1_init>:
    28f8:	e4 e6       	ldi	r30, 0x64	; 100
    28fa:	f0 e0       	ldi	r31, 0x00	; 0
    28fc:	80 81       	ld	r24, Z
    28fe:	8f 7b       	andi	r24, 0xBF	; 191
    2900:	80 83       	st	Z, r24
    2902:	83 ea       	ldi	r24, 0xA3	; 163
    2904:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    2908:	82 e0       	ldi	r24, 0x02	; 2
    290a:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
    290e:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
    2912:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
    2916:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
    291a:	80 e0       	ldi	r24, 0x00	; 0
    291c:	08 95       	ret

0000291e <PWM_1_enable_output_ch0>:
    291e:	e0 eb       	ldi	r30, 0xB0	; 176
    2920:	f0 e0       	ldi	r31, 0x00	; 0
    2922:	80 81       	ld	r24, Z
    2924:	80 68       	ori	r24, 0x80	; 128
    2926:	80 83       	st	Z, r24
    2928:	08 95       	ret

0000292a <PWM_1_disable_output_ch0>:
    292a:	e0 eb       	ldi	r30, 0xB0	; 176
    292c:	f0 e0       	ldi	r31, 0x00	; 0
    292e:	80 81       	ld	r24, Z
    2930:	8f 73       	andi	r24, 0x3F	; 63
    2932:	80 83       	st	Z, r24
    2934:	08 95       	ret

00002936 <PWM_1_enable_output_ch1>:
    2936:	e0 eb       	ldi	r30, 0xB0	; 176
    2938:	f0 e0       	ldi	r31, 0x00	; 0
    293a:	80 81       	ld	r24, Z
    293c:	80 62       	ori	r24, 0x20	; 32
    293e:	80 83       	st	Z, r24
    2940:	08 95       	ret

00002942 <PWM_1_disable_output_ch1>:
    2942:	e0 eb       	ldi	r30, 0xB0	; 176
    2944:	f0 e0       	ldi	r31, 0x00	; 0
    2946:	80 81       	ld	r24, Z
    2948:	8f 7c       	andi	r24, 0xCF	; 207
    294a:	80 83       	st	Z, r24
    294c:	08 95       	ret

0000294e <PWM_1_load_duty_cycle_ch0>:
}

inline void PWM_1_load_duty_cycle_ch0(PWM_1_register_t duty_value)
{
    OCR2A = duty_value;
    294e:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
    2952:	08 95       	ret

00002954 <PWM_1_load_duty_cycle_ch1>:
}

inline void PWM_1_load_duty_cycle_ch1(PWM_1_register_t duty_value)
{
    OCR2B = duty_value;
    2954:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
    2958:	08 95       	ret

0000295a <__subsf3>:
    295a:	50 58       	subi	r21, 0x80	; 128

0000295c <__addsf3>:
    295c:	bb 27       	eor	r27, r27
    295e:	aa 27       	eor	r26, r26
    2960:	0e 94 c5 14 	call	0x298a	; 0x298a <__addsf3x>
    2964:	0c 94 d8 16 	jmp	0x2db0	; 0x2db0 <__fp_round>
    2968:	0e 94 ca 16 	call	0x2d94	; 0x2d94 <__fp_pscA>
    296c:	38 f0       	brcs	.+14     	; 0x297c <__addsf3+0x20>
    296e:	0e 94 d1 16 	call	0x2da2	; 0x2da2 <__fp_pscB>
    2972:	20 f0       	brcs	.+8      	; 0x297c <__addsf3+0x20>
    2974:	39 f4       	brne	.+14     	; 0x2984 <__addsf3+0x28>
    2976:	9f 3f       	cpi	r25, 0xFF	; 255
    2978:	19 f4       	brne	.+6      	; 0x2980 <__addsf3+0x24>
    297a:	26 f4       	brtc	.+8      	; 0x2984 <__addsf3+0x28>
    297c:	0c 94 a0 16 	jmp	0x2d40	; 0x2d40 <__fp_nan>
    2980:	0e f4       	brtc	.+2      	; 0x2984 <__addsf3+0x28>
    2982:	e0 95       	com	r30
    2984:	e7 fb       	bst	r30, 7
    2986:	0c 94 9a 16 	jmp	0x2d34	; 0x2d34 <__fp_inf>

0000298a <__addsf3x>:
    298a:	e9 2f       	mov	r30, r25
    298c:	0e 94 e9 16 	call	0x2dd2	; 0x2dd2 <__fp_split3>
    2990:	58 f3       	brcs	.-42     	; 0x2968 <__addsf3+0xc>
    2992:	ba 17       	cp	r27, r26
    2994:	62 07       	cpc	r22, r18
    2996:	73 07       	cpc	r23, r19
    2998:	84 07       	cpc	r24, r20
    299a:	95 07       	cpc	r25, r21
    299c:	20 f0       	brcs	.+8      	; 0x29a6 <__addsf3x+0x1c>
    299e:	79 f4       	brne	.+30     	; 0x29be <__addsf3x+0x34>
    29a0:	a6 f5       	brtc	.+104    	; 0x2a0a <__addsf3x+0x80>
    29a2:	0c 94 0b 17 	jmp	0x2e16	; 0x2e16 <__fp_zero>
    29a6:	0e f4       	brtc	.+2      	; 0x29aa <__addsf3x+0x20>
    29a8:	e0 95       	com	r30
    29aa:	0b 2e       	mov	r0, r27
    29ac:	ba 2f       	mov	r27, r26
    29ae:	a0 2d       	mov	r26, r0
    29b0:	0b 01       	movw	r0, r22
    29b2:	b9 01       	movw	r22, r18
    29b4:	90 01       	movw	r18, r0
    29b6:	0c 01       	movw	r0, r24
    29b8:	ca 01       	movw	r24, r20
    29ba:	a0 01       	movw	r20, r0
    29bc:	11 24       	eor	r1, r1
    29be:	ff 27       	eor	r31, r31
    29c0:	59 1b       	sub	r21, r25
    29c2:	99 f0       	breq	.+38     	; 0x29ea <__addsf3x+0x60>
    29c4:	59 3f       	cpi	r21, 0xF9	; 249
    29c6:	50 f4       	brcc	.+20     	; 0x29dc <__addsf3x+0x52>
    29c8:	50 3e       	cpi	r21, 0xE0	; 224
    29ca:	68 f1       	brcs	.+90     	; 0x2a26 <__addsf3x+0x9c>
    29cc:	1a 16       	cp	r1, r26
    29ce:	f0 40       	sbci	r31, 0x00	; 0
    29d0:	a2 2f       	mov	r26, r18
    29d2:	23 2f       	mov	r18, r19
    29d4:	34 2f       	mov	r19, r20
    29d6:	44 27       	eor	r20, r20
    29d8:	58 5f       	subi	r21, 0xF8	; 248
    29da:	f3 cf       	rjmp	.-26     	; 0x29c2 <__addsf3x+0x38>
    29dc:	46 95       	lsr	r20
    29de:	37 95       	ror	r19
    29e0:	27 95       	ror	r18
    29e2:	a7 95       	ror	r26
    29e4:	f0 40       	sbci	r31, 0x00	; 0
    29e6:	53 95       	inc	r21
    29e8:	c9 f7       	brne	.-14     	; 0x29dc <__addsf3x+0x52>
    29ea:	7e f4       	brtc	.+30     	; 0x2a0a <__addsf3x+0x80>
    29ec:	1f 16       	cp	r1, r31
    29ee:	ba 0b       	sbc	r27, r26
    29f0:	62 0b       	sbc	r22, r18
    29f2:	73 0b       	sbc	r23, r19
    29f4:	84 0b       	sbc	r24, r20
    29f6:	ba f0       	brmi	.+46     	; 0x2a26 <__addsf3x+0x9c>
    29f8:	91 50       	subi	r25, 0x01	; 1
    29fa:	a1 f0       	breq	.+40     	; 0x2a24 <__addsf3x+0x9a>
    29fc:	ff 0f       	add	r31, r31
    29fe:	bb 1f       	adc	r27, r27
    2a00:	66 1f       	adc	r22, r22
    2a02:	77 1f       	adc	r23, r23
    2a04:	88 1f       	adc	r24, r24
    2a06:	c2 f7       	brpl	.-16     	; 0x29f8 <__addsf3x+0x6e>
    2a08:	0e c0       	rjmp	.+28     	; 0x2a26 <__addsf3x+0x9c>
    2a0a:	ba 0f       	add	r27, r26
    2a0c:	62 1f       	adc	r22, r18
    2a0e:	73 1f       	adc	r23, r19
    2a10:	84 1f       	adc	r24, r20
    2a12:	48 f4       	brcc	.+18     	; 0x2a26 <__addsf3x+0x9c>
    2a14:	87 95       	ror	r24
    2a16:	77 95       	ror	r23
    2a18:	67 95       	ror	r22
    2a1a:	b7 95       	ror	r27
    2a1c:	f7 95       	ror	r31
    2a1e:	9e 3f       	cpi	r25, 0xFE	; 254
    2a20:	08 f0       	brcs	.+2      	; 0x2a24 <__addsf3x+0x9a>
    2a22:	b0 cf       	rjmp	.-160    	; 0x2984 <__addsf3+0x28>
    2a24:	93 95       	inc	r25
    2a26:	88 0f       	add	r24, r24
    2a28:	08 f0       	brcs	.+2      	; 0x2a2c <__addsf3x+0xa2>
    2a2a:	99 27       	eor	r25, r25
    2a2c:	ee 0f       	add	r30, r30
    2a2e:	97 95       	ror	r25
    2a30:	87 95       	ror	r24
    2a32:	08 95       	ret
    2a34:	0e 94 ca 16 	call	0x2d94	; 0x2d94 <__fp_pscA>
    2a38:	60 f0       	brcs	.+24     	; 0x2a52 <__addsf3x+0xc8>
    2a3a:	80 e8       	ldi	r24, 0x80	; 128
    2a3c:	91 e0       	ldi	r25, 0x01	; 1
    2a3e:	09 f4       	brne	.+2      	; 0x2a42 <__addsf3x+0xb8>
    2a40:	9e ef       	ldi	r25, 0xFE	; 254
    2a42:	0e 94 d1 16 	call	0x2da2	; 0x2da2 <__fp_pscB>
    2a46:	28 f0       	brcs	.+10     	; 0x2a52 <__addsf3x+0xc8>
    2a48:	40 e8       	ldi	r20, 0x80	; 128
    2a4a:	51 e0       	ldi	r21, 0x01	; 1
    2a4c:	71 f4       	brne	.+28     	; 0x2a6a <atan2+0x10>
    2a4e:	5e ef       	ldi	r21, 0xFE	; 254
    2a50:	0c c0       	rjmp	.+24     	; 0x2a6a <atan2+0x10>
    2a52:	0c 94 a0 16 	jmp	0x2d40	; 0x2d40 <__fp_nan>
    2a56:	0c 94 0b 17 	jmp	0x2e16	; 0x2e16 <__fp_zero>

00002a5a <atan2>:
    2a5a:	e9 2f       	mov	r30, r25
    2a5c:	e0 78       	andi	r30, 0x80	; 128
    2a5e:	0e 94 e9 16 	call	0x2dd2	; 0x2dd2 <__fp_split3>
    2a62:	40 f3       	brcs	.-48     	; 0x2a34 <__addsf3x+0xaa>
    2a64:	09 2e       	mov	r0, r25
    2a66:	05 2a       	or	r0, r21
    2a68:	b1 f3       	breq	.-20     	; 0x2a56 <__addsf3x+0xcc>
    2a6a:	26 17       	cp	r18, r22
    2a6c:	37 07       	cpc	r19, r23
    2a6e:	48 07       	cpc	r20, r24
    2a70:	59 07       	cpc	r21, r25
    2a72:	38 f0       	brcs	.+14     	; 0x2a82 <atan2+0x28>
    2a74:	0e 2e       	mov	r0, r30
    2a76:	07 f8       	bld	r0, 7
    2a78:	e0 25       	eor	r30, r0
    2a7a:	69 f0       	breq	.+26     	; 0x2a96 <atan2+0x3c>
    2a7c:	e0 25       	eor	r30, r0
    2a7e:	e0 64       	ori	r30, 0x40	; 64
    2a80:	0a c0       	rjmp	.+20     	; 0x2a96 <atan2+0x3c>
    2a82:	ef 63       	ori	r30, 0x3F	; 63
    2a84:	07 f8       	bld	r0, 7
    2a86:	00 94       	com	r0
    2a88:	07 fa       	bst	r0, 7
    2a8a:	db 01       	movw	r26, r22
    2a8c:	b9 01       	movw	r22, r18
    2a8e:	9d 01       	movw	r18, r26
    2a90:	dc 01       	movw	r26, r24
    2a92:	ca 01       	movw	r24, r20
    2a94:	ad 01       	movw	r20, r26
    2a96:	ef 93       	push	r30
    2a98:	0e 94 a8 15 	call	0x2b50	; 0x2b50 <__divsf3_pse>
    2a9c:	0e 94 d8 16 	call	0x2db0	; 0x2db0 <__fp_round>
    2aa0:	0e 94 5d 15 	call	0x2aba	; 0x2aba <atan>
    2aa4:	5f 91       	pop	r21
    2aa6:	55 23       	and	r21, r21
    2aa8:	39 f0       	breq	.+14     	; 0x2ab8 <atan2+0x5e>
    2aaa:	2b ed       	ldi	r18, 0xDB	; 219
    2aac:	3f e0       	ldi	r19, 0x0F	; 15
    2aae:	49 e4       	ldi	r20, 0x49	; 73
    2ab0:	50 fd       	sbrc	r21, 0
    2ab2:	49 ec       	ldi	r20, 0xC9	; 201
    2ab4:	0c 94 ae 14 	jmp	0x295c	; 0x295c <__addsf3>
    2ab8:	08 95       	ret

00002aba <atan>:
    2aba:	df 93       	push	r29
    2abc:	dd 27       	eor	r29, r29
    2abe:	b9 2f       	mov	r27, r25
    2ac0:	bf 77       	andi	r27, 0x7F	; 127
    2ac2:	40 e8       	ldi	r20, 0x80	; 128
    2ac4:	5f e3       	ldi	r21, 0x3F	; 63
    2ac6:	16 16       	cp	r1, r22
    2ac8:	17 06       	cpc	r1, r23
    2aca:	48 07       	cpc	r20, r24
    2acc:	5b 07       	cpc	r21, r27
    2ace:	18 f4       	brcc	.+6      	; 0x2ad6 <atan+0x1c>
    2ad0:	d9 2f       	mov	r29, r25
    2ad2:	0e 94 17 17 	call	0x2e2e	; 0x2e2e <inverse>
    2ad6:	9f 93       	push	r25
    2ad8:	8f 93       	push	r24
    2ada:	7f 93       	push	r23
    2adc:	6f 93       	push	r22
    2ade:	0e 94 8c 17 	call	0x2f18	; 0x2f18 <square>
    2ae2:	e0 ea       	ldi	r30, 0xA0	; 160
    2ae4:	f0 e0       	ldi	r31, 0x00	; 0
    2ae6:	0e 94 a3 16 	call	0x2d46	; 0x2d46 <__fp_powser>
    2aea:	0e 94 d8 16 	call	0x2db0	; 0x2db0 <__fp_round>
    2aee:	2f 91       	pop	r18
    2af0:	3f 91       	pop	r19
    2af2:	4f 91       	pop	r20
    2af4:	5f 91       	pop	r21
    2af6:	0e 94 32 17 	call	0x2e64	; 0x2e64 <__mulsf3x>
    2afa:	dd 23       	and	r29, r29
    2afc:	51 f0       	breq	.+20     	; 0x2b12 <atan+0x58>
    2afe:	90 58       	subi	r25, 0x80	; 128
    2b00:	a2 ea       	ldi	r26, 0xA2	; 162
    2b02:	2a ed       	ldi	r18, 0xDA	; 218
    2b04:	3f e0       	ldi	r19, 0x0F	; 15
    2b06:	49 ec       	ldi	r20, 0xC9	; 201
    2b08:	5f e3       	ldi	r21, 0x3F	; 63
    2b0a:	d0 78       	andi	r29, 0x80	; 128
    2b0c:	5d 27       	eor	r21, r29
    2b0e:	0e 94 c5 14 	call	0x298a	; 0x298a <__addsf3x>
    2b12:	df 91       	pop	r29
    2b14:	0c 94 d8 16 	jmp	0x2db0	; 0x2db0 <__fp_round>

00002b18 <__cmpsf2>:
    2b18:	0e 94 76 16 	call	0x2cec	; 0x2cec <__fp_cmp>
    2b1c:	08 f4       	brcc	.+2      	; 0x2b20 <__cmpsf2+0x8>
    2b1e:	81 e0       	ldi	r24, 0x01	; 1
    2b20:	08 95       	ret

00002b22 <__divsf3>:
    2b22:	0e 94 a5 15 	call	0x2b4a	; 0x2b4a <__divsf3x>
    2b26:	0c 94 d8 16 	jmp	0x2db0	; 0x2db0 <__fp_round>
    2b2a:	0e 94 d1 16 	call	0x2da2	; 0x2da2 <__fp_pscB>
    2b2e:	58 f0       	brcs	.+22     	; 0x2b46 <__divsf3+0x24>
    2b30:	0e 94 ca 16 	call	0x2d94	; 0x2d94 <__fp_pscA>
    2b34:	40 f0       	brcs	.+16     	; 0x2b46 <__divsf3+0x24>
    2b36:	29 f4       	brne	.+10     	; 0x2b42 <__divsf3+0x20>
    2b38:	5f 3f       	cpi	r21, 0xFF	; 255
    2b3a:	29 f0       	breq	.+10     	; 0x2b46 <__divsf3+0x24>
    2b3c:	0c 94 9a 16 	jmp	0x2d34	; 0x2d34 <__fp_inf>
    2b40:	51 11       	cpse	r21, r1
    2b42:	0c 94 0c 17 	jmp	0x2e18	; 0x2e18 <__fp_szero>
    2b46:	0c 94 a0 16 	jmp	0x2d40	; 0x2d40 <__fp_nan>

00002b4a <__divsf3x>:
    2b4a:	0e 94 e9 16 	call	0x2dd2	; 0x2dd2 <__fp_split3>
    2b4e:	68 f3       	brcs	.-38     	; 0x2b2a <__divsf3+0x8>

00002b50 <__divsf3_pse>:
    2b50:	99 23       	and	r25, r25
    2b52:	b1 f3       	breq	.-20     	; 0x2b40 <__divsf3+0x1e>
    2b54:	55 23       	and	r21, r21
    2b56:	91 f3       	breq	.-28     	; 0x2b3c <__divsf3+0x1a>
    2b58:	95 1b       	sub	r25, r21
    2b5a:	55 0b       	sbc	r21, r21
    2b5c:	bb 27       	eor	r27, r27
    2b5e:	aa 27       	eor	r26, r26
    2b60:	62 17       	cp	r22, r18
    2b62:	73 07       	cpc	r23, r19
    2b64:	84 07       	cpc	r24, r20
    2b66:	38 f0       	brcs	.+14     	; 0x2b76 <__divsf3_pse+0x26>
    2b68:	9f 5f       	subi	r25, 0xFF	; 255
    2b6a:	5f 4f       	sbci	r21, 0xFF	; 255
    2b6c:	22 0f       	add	r18, r18
    2b6e:	33 1f       	adc	r19, r19
    2b70:	44 1f       	adc	r20, r20
    2b72:	aa 1f       	adc	r26, r26
    2b74:	a9 f3       	breq	.-22     	; 0x2b60 <__divsf3_pse+0x10>
    2b76:	35 d0       	rcall	.+106    	; 0x2be2 <__divsf3_pse+0x92>
    2b78:	0e 2e       	mov	r0, r30
    2b7a:	3a f0       	brmi	.+14     	; 0x2b8a <__divsf3_pse+0x3a>
    2b7c:	e0 e8       	ldi	r30, 0x80	; 128
    2b7e:	32 d0       	rcall	.+100    	; 0x2be4 <__divsf3_pse+0x94>
    2b80:	91 50       	subi	r25, 0x01	; 1
    2b82:	50 40       	sbci	r21, 0x00	; 0
    2b84:	e6 95       	lsr	r30
    2b86:	00 1c       	adc	r0, r0
    2b88:	ca f7       	brpl	.-14     	; 0x2b7c <__divsf3_pse+0x2c>
    2b8a:	2b d0       	rcall	.+86     	; 0x2be2 <__divsf3_pse+0x92>
    2b8c:	fe 2f       	mov	r31, r30
    2b8e:	29 d0       	rcall	.+82     	; 0x2be2 <__divsf3_pse+0x92>
    2b90:	66 0f       	add	r22, r22
    2b92:	77 1f       	adc	r23, r23
    2b94:	88 1f       	adc	r24, r24
    2b96:	bb 1f       	adc	r27, r27
    2b98:	26 17       	cp	r18, r22
    2b9a:	37 07       	cpc	r19, r23
    2b9c:	48 07       	cpc	r20, r24
    2b9e:	ab 07       	cpc	r26, r27
    2ba0:	b0 e8       	ldi	r27, 0x80	; 128
    2ba2:	09 f0       	breq	.+2      	; 0x2ba6 <__divsf3_pse+0x56>
    2ba4:	bb 0b       	sbc	r27, r27
    2ba6:	80 2d       	mov	r24, r0
    2ba8:	bf 01       	movw	r22, r30
    2baa:	ff 27       	eor	r31, r31
    2bac:	93 58       	subi	r25, 0x83	; 131
    2bae:	5f 4f       	sbci	r21, 0xFF	; 255
    2bb0:	3a f0       	brmi	.+14     	; 0x2bc0 <__divsf3_pse+0x70>
    2bb2:	9e 3f       	cpi	r25, 0xFE	; 254
    2bb4:	51 05       	cpc	r21, r1
    2bb6:	78 f0       	brcs	.+30     	; 0x2bd6 <__divsf3_pse+0x86>
    2bb8:	0c 94 9a 16 	jmp	0x2d34	; 0x2d34 <__fp_inf>
    2bbc:	0c 94 0c 17 	jmp	0x2e18	; 0x2e18 <__fp_szero>
    2bc0:	5f 3f       	cpi	r21, 0xFF	; 255
    2bc2:	e4 f3       	brlt	.-8      	; 0x2bbc <__divsf3_pse+0x6c>
    2bc4:	98 3e       	cpi	r25, 0xE8	; 232
    2bc6:	d4 f3       	brlt	.-12     	; 0x2bbc <__divsf3_pse+0x6c>
    2bc8:	86 95       	lsr	r24
    2bca:	77 95       	ror	r23
    2bcc:	67 95       	ror	r22
    2bce:	b7 95       	ror	r27
    2bd0:	f7 95       	ror	r31
    2bd2:	9f 5f       	subi	r25, 0xFF	; 255
    2bd4:	c9 f7       	brne	.-14     	; 0x2bc8 <__divsf3_pse+0x78>
    2bd6:	88 0f       	add	r24, r24
    2bd8:	91 1d       	adc	r25, r1
    2bda:	96 95       	lsr	r25
    2bdc:	87 95       	ror	r24
    2bde:	97 f9       	bld	r25, 7
    2be0:	08 95       	ret
    2be2:	e1 e0       	ldi	r30, 0x01	; 1
    2be4:	66 0f       	add	r22, r22
    2be6:	77 1f       	adc	r23, r23
    2be8:	88 1f       	adc	r24, r24
    2bea:	bb 1f       	adc	r27, r27
    2bec:	62 17       	cp	r22, r18
    2bee:	73 07       	cpc	r23, r19
    2bf0:	84 07       	cpc	r24, r20
    2bf2:	ba 07       	cpc	r27, r26
    2bf4:	20 f0       	brcs	.+8      	; 0x2bfe <__divsf3_pse+0xae>
    2bf6:	62 1b       	sub	r22, r18
    2bf8:	73 0b       	sbc	r23, r19
    2bfa:	84 0b       	sbc	r24, r20
    2bfc:	ba 0b       	sbc	r27, r26
    2bfe:	ee 1f       	adc	r30, r30
    2c00:	88 f7       	brcc	.-30     	; 0x2be4 <__divsf3_pse+0x94>
    2c02:	e0 95       	com	r30
    2c04:	08 95       	ret

00002c06 <__fixsfsi>:
    2c06:	0e 94 0a 16 	call	0x2c14	; 0x2c14 <__fixunssfsi>
    2c0a:	68 94       	set
    2c0c:	b1 11       	cpse	r27, r1
    2c0e:	0c 94 0c 17 	jmp	0x2e18	; 0x2e18 <__fp_szero>
    2c12:	08 95       	ret

00002c14 <__fixunssfsi>:
    2c14:	0e 94 f1 16 	call	0x2de2	; 0x2de2 <__fp_splitA>
    2c18:	88 f0       	brcs	.+34     	; 0x2c3c <__fixunssfsi+0x28>
    2c1a:	9f 57       	subi	r25, 0x7F	; 127
    2c1c:	98 f0       	brcs	.+38     	; 0x2c44 <__fixunssfsi+0x30>
    2c1e:	b9 2f       	mov	r27, r25
    2c20:	99 27       	eor	r25, r25
    2c22:	b7 51       	subi	r27, 0x17	; 23
    2c24:	b0 f0       	brcs	.+44     	; 0x2c52 <__fixunssfsi+0x3e>
    2c26:	e1 f0       	breq	.+56     	; 0x2c60 <__fixunssfsi+0x4c>
    2c28:	66 0f       	add	r22, r22
    2c2a:	77 1f       	adc	r23, r23
    2c2c:	88 1f       	adc	r24, r24
    2c2e:	99 1f       	adc	r25, r25
    2c30:	1a f0       	brmi	.+6      	; 0x2c38 <__fixunssfsi+0x24>
    2c32:	ba 95       	dec	r27
    2c34:	c9 f7       	brne	.-14     	; 0x2c28 <__fixunssfsi+0x14>
    2c36:	14 c0       	rjmp	.+40     	; 0x2c60 <__fixunssfsi+0x4c>
    2c38:	b1 30       	cpi	r27, 0x01	; 1
    2c3a:	91 f0       	breq	.+36     	; 0x2c60 <__fixunssfsi+0x4c>
    2c3c:	0e 94 0b 17 	call	0x2e16	; 0x2e16 <__fp_zero>
    2c40:	b1 e0       	ldi	r27, 0x01	; 1
    2c42:	08 95       	ret
    2c44:	0c 94 0b 17 	jmp	0x2e16	; 0x2e16 <__fp_zero>
    2c48:	67 2f       	mov	r22, r23
    2c4a:	78 2f       	mov	r23, r24
    2c4c:	88 27       	eor	r24, r24
    2c4e:	b8 5f       	subi	r27, 0xF8	; 248
    2c50:	39 f0       	breq	.+14     	; 0x2c60 <__fixunssfsi+0x4c>
    2c52:	b9 3f       	cpi	r27, 0xF9	; 249
    2c54:	cc f3       	brlt	.-14     	; 0x2c48 <__fixunssfsi+0x34>
    2c56:	86 95       	lsr	r24
    2c58:	77 95       	ror	r23
    2c5a:	67 95       	ror	r22
    2c5c:	b3 95       	inc	r27
    2c5e:	d9 f7       	brne	.-10     	; 0x2c56 <__fixunssfsi+0x42>
    2c60:	3e f4       	brtc	.+14     	; 0x2c70 <__fixunssfsi+0x5c>
    2c62:	90 95       	com	r25
    2c64:	80 95       	com	r24
    2c66:	70 95       	com	r23
    2c68:	61 95       	neg	r22
    2c6a:	7f 4f       	sbci	r23, 0xFF	; 255
    2c6c:	8f 4f       	sbci	r24, 0xFF	; 255
    2c6e:	9f 4f       	sbci	r25, 0xFF	; 255
    2c70:	08 95       	ret

00002c72 <__floatunsisf>:
    2c72:	e8 94       	clt
    2c74:	09 c0       	rjmp	.+18     	; 0x2c88 <__floatsisf+0x12>

00002c76 <__floatsisf>:
    2c76:	97 fb       	bst	r25, 7
    2c78:	3e f4       	brtc	.+14     	; 0x2c88 <__floatsisf+0x12>
    2c7a:	90 95       	com	r25
    2c7c:	80 95       	com	r24
    2c7e:	70 95       	com	r23
    2c80:	61 95       	neg	r22
    2c82:	7f 4f       	sbci	r23, 0xFF	; 255
    2c84:	8f 4f       	sbci	r24, 0xFF	; 255
    2c86:	9f 4f       	sbci	r25, 0xFF	; 255
    2c88:	99 23       	and	r25, r25
    2c8a:	a9 f0       	breq	.+42     	; 0x2cb6 <__floatsisf+0x40>
    2c8c:	f9 2f       	mov	r31, r25
    2c8e:	96 e9       	ldi	r25, 0x96	; 150
    2c90:	bb 27       	eor	r27, r27
    2c92:	93 95       	inc	r25
    2c94:	f6 95       	lsr	r31
    2c96:	87 95       	ror	r24
    2c98:	77 95       	ror	r23
    2c9a:	67 95       	ror	r22
    2c9c:	b7 95       	ror	r27
    2c9e:	f1 11       	cpse	r31, r1
    2ca0:	f8 cf       	rjmp	.-16     	; 0x2c92 <__floatsisf+0x1c>
    2ca2:	fa f4       	brpl	.+62     	; 0x2ce2 <__floatsisf+0x6c>
    2ca4:	bb 0f       	add	r27, r27
    2ca6:	11 f4       	brne	.+4      	; 0x2cac <__floatsisf+0x36>
    2ca8:	60 ff       	sbrs	r22, 0
    2caa:	1b c0       	rjmp	.+54     	; 0x2ce2 <__floatsisf+0x6c>
    2cac:	6f 5f       	subi	r22, 0xFF	; 255
    2cae:	7f 4f       	sbci	r23, 0xFF	; 255
    2cb0:	8f 4f       	sbci	r24, 0xFF	; 255
    2cb2:	9f 4f       	sbci	r25, 0xFF	; 255
    2cb4:	16 c0       	rjmp	.+44     	; 0x2ce2 <__floatsisf+0x6c>
    2cb6:	88 23       	and	r24, r24
    2cb8:	11 f0       	breq	.+4      	; 0x2cbe <__floatsisf+0x48>
    2cba:	96 e9       	ldi	r25, 0x96	; 150
    2cbc:	11 c0       	rjmp	.+34     	; 0x2ce0 <__floatsisf+0x6a>
    2cbe:	77 23       	and	r23, r23
    2cc0:	21 f0       	breq	.+8      	; 0x2cca <__floatsisf+0x54>
    2cc2:	9e e8       	ldi	r25, 0x8E	; 142
    2cc4:	87 2f       	mov	r24, r23
    2cc6:	76 2f       	mov	r23, r22
    2cc8:	05 c0       	rjmp	.+10     	; 0x2cd4 <__floatsisf+0x5e>
    2cca:	66 23       	and	r22, r22
    2ccc:	71 f0       	breq	.+28     	; 0x2cea <__floatsisf+0x74>
    2cce:	96 e8       	ldi	r25, 0x86	; 134
    2cd0:	86 2f       	mov	r24, r22
    2cd2:	70 e0       	ldi	r23, 0x00	; 0
    2cd4:	60 e0       	ldi	r22, 0x00	; 0
    2cd6:	2a f0       	brmi	.+10     	; 0x2ce2 <__floatsisf+0x6c>
    2cd8:	9a 95       	dec	r25
    2cda:	66 0f       	add	r22, r22
    2cdc:	77 1f       	adc	r23, r23
    2cde:	88 1f       	adc	r24, r24
    2ce0:	da f7       	brpl	.-10     	; 0x2cd8 <__floatsisf+0x62>
    2ce2:	88 0f       	add	r24, r24
    2ce4:	96 95       	lsr	r25
    2ce6:	87 95       	ror	r24
    2ce8:	97 f9       	bld	r25, 7
    2cea:	08 95       	ret

00002cec <__fp_cmp>:
    2cec:	99 0f       	add	r25, r25
    2cee:	00 08       	sbc	r0, r0
    2cf0:	55 0f       	add	r21, r21
    2cf2:	aa 0b       	sbc	r26, r26
    2cf4:	e0 e8       	ldi	r30, 0x80	; 128
    2cf6:	fe ef       	ldi	r31, 0xFE	; 254
    2cf8:	16 16       	cp	r1, r22
    2cfa:	17 06       	cpc	r1, r23
    2cfc:	e8 07       	cpc	r30, r24
    2cfe:	f9 07       	cpc	r31, r25
    2d00:	c0 f0       	brcs	.+48     	; 0x2d32 <__fp_cmp+0x46>
    2d02:	12 16       	cp	r1, r18
    2d04:	13 06       	cpc	r1, r19
    2d06:	e4 07       	cpc	r30, r20
    2d08:	f5 07       	cpc	r31, r21
    2d0a:	98 f0       	brcs	.+38     	; 0x2d32 <__fp_cmp+0x46>
    2d0c:	62 1b       	sub	r22, r18
    2d0e:	73 0b       	sbc	r23, r19
    2d10:	84 0b       	sbc	r24, r20
    2d12:	95 0b       	sbc	r25, r21
    2d14:	39 f4       	brne	.+14     	; 0x2d24 <__fp_cmp+0x38>
    2d16:	0a 26       	eor	r0, r26
    2d18:	61 f0       	breq	.+24     	; 0x2d32 <__fp_cmp+0x46>
    2d1a:	23 2b       	or	r18, r19
    2d1c:	24 2b       	or	r18, r20
    2d1e:	25 2b       	or	r18, r21
    2d20:	21 f4       	brne	.+8      	; 0x2d2a <__fp_cmp+0x3e>
    2d22:	08 95       	ret
    2d24:	0a 26       	eor	r0, r26
    2d26:	09 f4       	brne	.+2      	; 0x2d2a <__fp_cmp+0x3e>
    2d28:	a1 40       	sbci	r26, 0x01	; 1
    2d2a:	a6 95       	lsr	r26
    2d2c:	8f ef       	ldi	r24, 0xFF	; 255
    2d2e:	81 1d       	adc	r24, r1
    2d30:	81 1d       	adc	r24, r1
    2d32:	08 95       	ret

00002d34 <__fp_inf>:
    2d34:	97 f9       	bld	r25, 7
    2d36:	9f 67       	ori	r25, 0x7F	; 127
    2d38:	80 e8       	ldi	r24, 0x80	; 128
    2d3a:	70 e0       	ldi	r23, 0x00	; 0
    2d3c:	60 e0       	ldi	r22, 0x00	; 0
    2d3e:	08 95       	ret

00002d40 <__fp_nan>:
    2d40:	9f ef       	ldi	r25, 0xFF	; 255
    2d42:	80 ec       	ldi	r24, 0xC0	; 192
    2d44:	08 95       	ret

00002d46 <__fp_powser>:
    2d46:	df 93       	push	r29
    2d48:	cf 93       	push	r28
    2d4a:	1f 93       	push	r17
    2d4c:	0f 93       	push	r16
    2d4e:	ff 92       	push	r15
    2d50:	ef 92       	push	r14
    2d52:	df 92       	push	r13
    2d54:	7b 01       	movw	r14, r22
    2d56:	8c 01       	movw	r16, r24
    2d58:	68 94       	set
    2d5a:	06 c0       	rjmp	.+12     	; 0x2d68 <__fp_powser+0x22>
    2d5c:	da 2e       	mov	r13, r26
    2d5e:	ef 01       	movw	r28, r30
    2d60:	0e 94 32 17 	call	0x2e64	; 0x2e64 <__mulsf3x>
    2d64:	fe 01       	movw	r30, r28
    2d66:	e8 94       	clt
    2d68:	a5 91       	lpm	r26, Z+
    2d6a:	25 91       	lpm	r18, Z+
    2d6c:	35 91       	lpm	r19, Z+
    2d6e:	45 91       	lpm	r20, Z+
    2d70:	55 91       	lpm	r21, Z+
    2d72:	a6 f3       	brts	.-24     	; 0x2d5c <__fp_powser+0x16>
    2d74:	ef 01       	movw	r28, r30
    2d76:	0e 94 c5 14 	call	0x298a	; 0x298a <__addsf3x>
    2d7a:	fe 01       	movw	r30, r28
    2d7c:	97 01       	movw	r18, r14
    2d7e:	a8 01       	movw	r20, r16
    2d80:	da 94       	dec	r13
    2d82:	69 f7       	brne	.-38     	; 0x2d5e <__fp_powser+0x18>
    2d84:	df 90       	pop	r13
    2d86:	ef 90       	pop	r14
    2d88:	ff 90       	pop	r15
    2d8a:	0f 91       	pop	r16
    2d8c:	1f 91       	pop	r17
    2d8e:	cf 91       	pop	r28
    2d90:	df 91       	pop	r29
    2d92:	08 95       	ret

00002d94 <__fp_pscA>:
    2d94:	00 24       	eor	r0, r0
    2d96:	0a 94       	dec	r0
    2d98:	16 16       	cp	r1, r22
    2d9a:	17 06       	cpc	r1, r23
    2d9c:	18 06       	cpc	r1, r24
    2d9e:	09 06       	cpc	r0, r25
    2da0:	08 95       	ret

00002da2 <__fp_pscB>:
    2da2:	00 24       	eor	r0, r0
    2da4:	0a 94       	dec	r0
    2da6:	12 16       	cp	r1, r18
    2da8:	13 06       	cpc	r1, r19
    2daa:	14 06       	cpc	r1, r20
    2dac:	05 06       	cpc	r0, r21
    2dae:	08 95       	ret

00002db0 <__fp_round>:
    2db0:	09 2e       	mov	r0, r25
    2db2:	03 94       	inc	r0
    2db4:	00 0c       	add	r0, r0
    2db6:	11 f4       	brne	.+4      	; 0x2dbc <__fp_round+0xc>
    2db8:	88 23       	and	r24, r24
    2dba:	52 f0       	brmi	.+20     	; 0x2dd0 <__fp_round+0x20>
    2dbc:	bb 0f       	add	r27, r27
    2dbe:	40 f4       	brcc	.+16     	; 0x2dd0 <__fp_round+0x20>
    2dc0:	bf 2b       	or	r27, r31
    2dc2:	11 f4       	brne	.+4      	; 0x2dc8 <__fp_round+0x18>
    2dc4:	60 ff       	sbrs	r22, 0
    2dc6:	04 c0       	rjmp	.+8      	; 0x2dd0 <__fp_round+0x20>
    2dc8:	6f 5f       	subi	r22, 0xFF	; 255
    2dca:	7f 4f       	sbci	r23, 0xFF	; 255
    2dcc:	8f 4f       	sbci	r24, 0xFF	; 255
    2dce:	9f 4f       	sbci	r25, 0xFF	; 255
    2dd0:	08 95       	ret

00002dd2 <__fp_split3>:
    2dd2:	57 fd       	sbrc	r21, 7
    2dd4:	90 58       	subi	r25, 0x80	; 128
    2dd6:	44 0f       	add	r20, r20
    2dd8:	55 1f       	adc	r21, r21
    2dda:	59 f0       	breq	.+22     	; 0x2df2 <__fp_splitA+0x10>
    2ddc:	5f 3f       	cpi	r21, 0xFF	; 255
    2dde:	71 f0       	breq	.+28     	; 0x2dfc <__fp_splitA+0x1a>
    2de0:	47 95       	ror	r20

00002de2 <__fp_splitA>:
    2de2:	88 0f       	add	r24, r24
    2de4:	97 fb       	bst	r25, 7
    2de6:	99 1f       	adc	r25, r25
    2de8:	61 f0       	breq	.+24     	; 0x2e02 <__fp_splitA+0x20>
    2dea:	9f 3f       	cpi	r25, 0xFF	; 255
    2dec:	79 f0       	breq	.+30     	; 0x2e0c <__fp_splitA+0x2a>
    2dee:	87 95       	ror	r24
    2df0:	08 95       	ret
    2df2:	12 16       	cp	r1, r18
    2df4:	13 06       	cpc	r1, r19
    2df6:	14 06       	cpc	r1, r20
    2df8:	55 1f       	adc	r21, r21
    2dfa:	f2 cf       	rjmp	.-28     	; 0x2de0 <__fp_split3+0xe>
    2dfc:	46 95       	lsr	r20
    2dfe:	f1 df       	rcall	.-30     	; 0x2de2 <__fp_splitA>
    2e00:	08 c0       	rjmp	.+16     	; 0x2e12 <__fp_splitA+0x30>
    2e02:	16 16       	cp	r1, r22
    2e04:	17 06       	cpc	r1, r23
    2e06:	18 06       	cpc	r1, r24
    2e08:	99 1f       	adc	r25, r25
    2e0a:	f1 cf       	rjmp	.-30     	; 0x2dee <__fp_splitA+0xc>
    2e0c:	86 95       	lsr	r24
    2e0e:	71 05       	cpc	r23, r1
    2e10:	61 05       	cpc	r22, r1
    2e12:	08 94       	sec
    2e14:	08 95       	ret

00002e16 <__fp_zero>:
    2e16:	e8 94       	clt

00002e18 <__fp_szero>:
    2e18:	bb 27       	eor	r27, r27
    2e1a:	66 27       	eor	r22, r22
    2e1c:	77 27       	eor	r23, r23
    2e1e:	cb 01       	movw	r24, r22
    2e20:	97 f9       	bld	r25, 7
    2e22:	08 95       	ret

00002e24 <__gesf2>:
    2e24:	0e 94 76 16 	call	0x2cec	; 0x2cec <__fp_cmp>
    2e28:	08 f4       	brcc	.+2      	; 0x2e2c <__gesf2+0x8>
    2e2a:	8f ef       	ldi	r24, 0xFF	; 255
    2e2c:	08 95       	ret

00002e2e <inverse>:
    2e2e:	9b 01       	movw	r18, r22
    2e30:	ac 01       	movw	r20, r24
    2e32:	60 e0       	ldi	r22, 0x00	; 0
    2e34:	70 e0       	ldi	r23, 0x00	; 0
    2e36:	80 e8       	ldi	r24, 0x80	; 128
    2e38:	9f e3       	ldi	r25, 0x3F	; 63
    2e3a:	0c 94 91 15 	jmp	0x2b22	; 0x2b22 <__divsf3>

00002e3e <__mulsf3>:
    2e3e:	0e 94 32 17 	call	0x2e64	; 0x2e64 <__mulsf3x>
    2e42:	0c 94 d8 16 	jmp	0x2db0	; 0x2db0 <__fp_round>
    2e46:	0e 94 ca 16 	call	0x2d94	; 0x2d94 <__fp_pscA>
    2e4a:	38 f0       	brcs	.+14     	; 0x2e5a <__mulsf3+0x1c>
    2e4c:	0e 94 d1 16 	call	0x2da2	; 0x2da2 <__fp_pscB>
    2e50:	20 f0       	brcs	.+8      	; 0x2e5a <__mulsf3+0x1c>
    2e52:	95 23       	and	r25, r21
    2e54:	11 f0       	breq	.+4      	; 0x2e5a <__mulsf3+0x1c>
    2e56:	0c 94 9a 16 	jmp	0x2d34	; 0x2d34 <__fp_inf>
    2e5a:	0c 94 a0 16 	jmp	0x2d40	; 0x2d40 <__fp_nan>
    2e5e:	11 24       	eor	r1, r1
    2e60:	0c 94 0c 17 	jmp	0x2e18	; 0x2e18 <__fp_szero>

00002e64 <__mulsf3x>:
    2e64:	0e 94 e9 16 	call	0x2dd2	; 0x2dd2 <__fp_split3>
    2e68:	70 f3       	brcs	.-36     	; 0x2e46 <__mulsf3+0x8>

00002e6a <__mulsf3_pse>:
    2e6a:	95 9f       	mul	r25, r21
    2e6c:	c1 f3       	breq	.-16     	; 0x2e5e <__mulsf3+0x20>
    2e6e:	95 0f       	add	r25, r21
    2e70:	50 e0       	ldi	r21, 0x00	; 0
    2e72:	55 1f       	adc	r21, r21
    2e74:	62 9f       	mul	r22, r18
    2e76:	f0 01       	movw	r30, r0
    2e78:	72 9f       	mul	r23, r18
    2e7a:	bb 27       	eor	r27, r27
    2e7c:	f0 0d       	add	r31, r0
    2e7e:	b1 1d       	adc	r27, r1
    2e80:	63 9f       	mul	r22, r19
    2e82:	aa 27       	eor	r26, r26
    2e84:	f0 0d       	add	r31, r0
    2e86:	b1 1d       	adc	r27, r1
    2e88:	aa 1f       	adc	r26, r26
    2e8a:	64 9f       	mul	r22, r20
    2e8c:	66 27       	eor	r22, r22
    2e8e:	b0 0d       	add	r27, r0
    2e90:	a1 1d       	adc	r26, r1
    2e92:	66 1f       	adc	r22, r22
    2e94:	82 9f       	mul	r24, r18
    2e96:	22 27       	eor	r18, r18
    2e98:	b0 0d       	add	r27, r0
    2e9a:	a1 1d       	adc	r26, r1
    2e9c:	62 1f       	adc	r22, r18
    2e9e:	73 9f       	mul	r23, r19
    2ea0:	b0 0d       	add	r27, r0
    2ea2:	a1 1d       	adc	r26, r1
    2ea4:	62 1f       	adc	r22, r18
    2ea6:	83 9f       	mul	r24, r19
    2ea8:	a0 0d       	add	r26, r0
    2eaa:	61 1d       	adc	r22, r1
    2eac:	22 1f       	adc	r18, r18
    2eae:	74 9f       	mul	r23, r20
    2eb0:	33 27       	eor	r19, r19
    2eb2:	a0 0d       	add	r26, r0
    2eb4:	61 1d       	adc	r22, r1
    2eb6:	23 1f       	adc	r18, r19
    2eb8:	84 9f       	mul	r24, r20
    2eba:	60 0d       	add	r22, r0
    2ebc:	21 1d       	adc	r18, r1
    2ebe:	82 2f       	mov	r24, r18
    2ec0:	76 2f       	mov	r23, r22
    2ec2:	6a 2f       	mov	r22, r26
    2ec4:	11 24       	eor	r1, r1
    2ec6:	9f 57       	subi	r25, 0x7F	; 127
    2ec8:	50 40       	sbci	r21, 0x00	; 0
    2eca:	9a f0       	brmi	.+38     	; 0x2ef2 <__mulsf3_pse+0x88>
    2ecc:	f1 f0       	breq	.+60     	; 0x2f0a <__mulsf3_pse+0xa0>
    2ece:	88 23       	and	r24, r24
    2ed0:	4a f0       	brmi	.+18     	; 0x2ee4 <__mulsf3_pse+0x7a>
    2ed2:	ee 0f       	add	r30, r30
    2ed4:	ff 1f       	adc	r31, r31
    2ed6:	bb 1f       	adc	r27, r27
    2ed8:	66 1f       	adc	r22, r22
    2eda:	77 1f       	adc	r23, r23
    2edc:	88 1f       	adc	r24, r24
    2ede:	91 50       	subi	r25, 0x01	; 1
    2ee0:	50 40       	sbci	r21, 0x00	; 0
    2ee2:	a9 f7       	brne	.-22     	; 0x2ece <__mulsf3_pse+0x64>
    2ee4:	9e 3f       	cpi	r25, 0xFE	; 254
    2ee6:	51 05       	cpc	r21, r1
    2ee8:	80 f0       	brcs	.+32     	; 0x2f0a <__mulsf3_pse+0xa0>
    2eea:	0c 94 9a 16 	jmp	0x2d34	; 0x2d34 <__fp_inf>
    2eee:	0c 94 0c 17 	jmp	0x2e18	; 0x2e18 <__fp_szero>
    2ef2:	5f 3f       	cpi	r21, 0xFF	; 255
    2ef4:	e4 f3       	brlt	.-8      	; 0x2eee <__mulsf3_pse+0x84>
    2ef6:	98 3e       	cpi	r25, 0xE8	; 232
    2ef8:	d4 f3       	brlt	.-12     	; 0x2eee <__mulsf3_pse+0x84>
    2efa:	86 95       	lsr	r24
    2efc:	77 95       	ror	r23
    2efe:	67 95       	ror	r22
    2f00:	b7 95       	ror	r27
    2f02:	f7 95       	ror	r31
    2f04:	e7 95       	ror	r30
    2f06:	9f 5f       	subi	r25, 0xFF	; 255
    2f08:	c1 f7       	brne	.-16     	; 0x2efa <__mulsf3_pse+0x90>
    2f0a:	fe 2b       	or	r31, r30
    2f0c:	88 0f       	add	r24, r24
    2f0e:	91 1d       	adc	r25, r1
    2f10:	96 95       	lsr	r25
    2f12:	87 95       	ror	r24
    2f14:	97 f9       	bld	r25, 7
    2f16:	08 95       	ret

00002f18 <square>:
    2f18:	9b 01       	movw	r18, r22
    2f1a:	ac 01       	movw	r20, r24
    2f1c:	0c 94 1f 17 	jmp	0x2e3e	; 0x2e3e <__mulsf3>

00002f20 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    2f20:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    2f22:	91 8d       	ldd	r25, Z+25	; 0x19
    2f24:	22 8d       	ldd	r18, Z+26	; 0x1a
    2f26:	89 2f       	mov	r24, r25
    2f28:	90 e0       	ldi	r25, 0x00	; 0
    2f2a:	80 5c       	subi	r24, 0xC0	; 192
    2f2c:	9f 4f       	sbci	r25, 0xFF	; 255
    2f2e:	82 1b       	sub	r24, r18
    2f30:	91 09       	sbc	r25, r1
}
    2f32:	8f 73       	andi	r24, 0x3F	; 63
    2f34:	99 27       	eor	r25, r25
    2f36:	08 95       	ret

00002f38 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    2f38:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    2f3a:	91 8d       	ldd	r25, Z+25	; 0x19
    2f3c:	82 8d       	ldd	r24, Z+26	; 0x1a
    2f3e:	98 17       	cp	r25, r24
    2f40:	31 f0       	breq	.+12     	; 0x2f4e <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    2f42:	82 8d       	ldd	r24, Z+26	; 0x1a
    2f44:	e8 0f       	add	r30, r24
    2f46:	f1 1d       	adc	r31, r1
    2f48:	85 8d       	ldd	r24, Z+29	; 0x1d
    2f4a:	90 e0       	ldi	r25, 0x00	; 0
    2f4c:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    2f4e:	8f ef       	ldi	r24, 0xFF	; 255
    2f50:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    2f52:	08 95       	ret

00002f54 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    2f54:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    2f56:	91 8d       	ldd	r25, Z+25	; 0x19
    2f58:	82 8d       	ldd	r24, Z+26	; 0x1a
    2f5a:	98 17       	cp	r25, r24
    2f5c:	61 f0       	breq	.+24     	; 0x2f76 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    2f5e:	82 8d       	ldd	r24, Z+26	; 0x1a
    2f60:	df 01       	movw	r26, r30
    2f62:	a8 0f       	add	r26, r24
    2f64:	b1 1d       	adc	r27, r1
    2f66:	5d 96       	adiw	r26, 0x1d	; 29
    2f68:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    2f6a:	92 8d       	ldd	r25, Z+26	; 0x1a
    2f6c:	9f 5f       	subi	r25, 0xFF	; 255
    2f6e:	9f 73       	andi	r25, 0x3F	; 63
    2f70:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    2f72:	90 e0       	ldi	r25, 0x00	; 0
    2f74:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    2f76:	8f ef       	ldi	r24, 0xFF	; 255
    2f78:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    2f7a:	08 95       	ret

00002f7c <_ZN14HardwareSerial17availableForWriteEv>:
{
#if (SERIAL_TX_BUFFER_SIZE>256)
  uint8_t oldSREG = SREG;
  cli();
#endif
  tx_buffer_index_t head = _tx_buffer_head;
    2f7c:	fc 01       	movw	r30, r24
    2f7e:	53 8d       	ldd	r21, Z+27	; 0x1b
  tx_buffer_index_t tail = _tx_buffer_tail;
    2f80:	44 8d       	ldd	r20, Z+28	; 0x1c
    2f82:	25 2f       	mov	r18, r21
    2f84:	30 e0       	ldi	r19, 0x00	; 0
    2f86:	84 2f       	mov	r24, r20
    2f88:	90 e0       	ldi	r25, 0x00	; 0
#if (SERIAL_TX_BUFFER_SIZE>256)
  SREG = oldSREG;
#endif
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    2f8a:	82 1b       	sub	r24, r18
    2f8c:	93 0b       	sbc	r25, r19
    2f8e:	54 17       	cp	r21, r20
    2f90:	10 f0       	brcs	.+4      	; 0x2f96 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
    2f92:	cf 96       	adiw	r24, 0x3f	; 63
    2f94:	08 95       	ret
  return tail - head - 1;
    2f96:	01 97       	sbiw	r24, 0x01	; 1
}
    2f98:	08 95       	ret

00002f9a <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    2f9a:	82 e2       	ldi	r24, 0x22	; 34
    2f9c:	99 e1       	ldi	r25, 0x19	; 25
    2f9e:	89 2b       	or	r24, r25
    2fa0:	49 f0       	breq	.+18     	; 0x2fb4 <_Z14serialEventRunv+0x1a>
    2fa2:	80 e0       	ldi	r24, 0x00	; 0
    2fa4:	90 e0       	ldi	r25, 0x00	; 0
    2fa6:	89 2b       	or	r24, r25
    2fa8:	29 f0       	breq	.+10     	; 0x2fb4 <_Z14serialEventRunv+0x1a>
    2faa:	0e 94 22 19 	call	0x3244	; 0x3244 <_Z17Serial0_availablev>
    2fae:	81 11       	cpse	r24, r1
    2fb0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    2fb4:	08 95       	ret

00002fb6 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    2fb6:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    2fb8:	84 8d       	ldd	r24, Z+28	; 0x1c
    2fba:	df 01       	movw	r26, r30
    2fbc:	a8 0f       	add	r26, r24
    2fbe:	b1 1d       	adc	r27, r1
    2fc0:	a3 5a       	subi	r26, 0xA3	; 163
    2fc2:	bf 4f       	sbci	r27, 0xFF	; 255
    2fc4:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    2fc6:	84 8d       	ldd	r24, Z+28	; 0x1c
    2fc8:	90 e0       	ldi	r25, 0x00	; 0
    2fca:	01 96       	adiw	r24, 0x01	; 1
    2fcc:	8f 73       	andi	r24, 0x3F	; 63
    2fce:	99 27       	eor	r25, r25
    2fd0:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    2fd2:	a6 89       	ldd	r26, Z+22	; 0x16
    2fd4:	b7 89       	ldd	r27, Z+23	; 0x17
    2fd6:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
    2fd8:	a0 89       	ldd	r26, Z+16	; 0x10
    2fda:	b1 89       	ldd	r27, Z+17	; 0x11
    2fdc:	8c 91       	ld	r24, X
    2fde:	80 64       	ori	r24, 0x40	; 64
    2fe0:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
    2fe2:	93 8d       	ldd	r25, Z+27	; 0x1b
    2fe4:	84 8d       	ldd	r24, Z+28	; 0x1c
    2fe6:	98 13       	cpse	r25, r24
    2fe8:	06 c0       	rjmp	.+12     	; 0x2ff6 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    2fea:	02 88       	ldd	r0, Z+18	; 0x12
    2fec:	f3 89       	ldd	r31, Z+19	; 0x13
    2fee:	e0 2d       	mov	r30, r0
    2ff0:	80 81       	ld	r24, Z
    2ff2:	8f 7d       	andi	r24, 0xDF	; 223
    2ff4:	80 83       	st	Z, r24
    2ff6:	08 95       	ret

00002ff8 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    2ff8:	ef 92       	push	r14
    2ffa:	ff 92       	push	r15
    2ffc:	0f 93       	push	r16
    2ffe:	1f 93       	push	r17
    3000:	cf 93       	push	r28
    3002:	df 93       	push	r29
    3004:	ec 01       	movw	r28, r24
  _written = true;
    3006:	81 e0       	ldi	r24, 0x01	; 1
    3008:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    300a:	9b 8d       	ldd	r25, Y+27	; 0x1b
    300c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    300e:	98 13       	cpse	r25, r24
    3010:	05 c0       	rjmp	.+10     	; 0x301c <_ZN14HardwareSerial5writeEh+0x24>
    3012:	e8 89       	ldd	r30, Y+16	; 0x10
    3014:	f9 89       	ldd	r31, Y+17	; 0x11
    3016:	80 81       	ld	r24, Z
    3018:	85 fd       	sbrc	r24, 5
    301a:	24 c0       	rjmp	.+72     	; 0x3064 <_ZN14HardwareSerial5writeEh+0x6c>
    301c:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    301e:	0b 8d       	ldd	r16, Y+27	; 0x1b
    3020:	10 e0       	ldi	r17, 0x00	; 0
    3022:	0f 5f       	subi	r16, 0xFF	; 255
    3024:	1f 4f       	sbci	r17, 0xFF	; 255
    3026:	0f 73       	andi	r16, 0x3F	; 63
    3028:	11 27       	eor	r17, r17
    302a:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    302c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    302e:	e8 12       	cpse	r14, r24
    3030:	0c c0       	rjmp	.+24     	; 0x304a <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
    3032:	0f b6       	in	r0, 0x3f	; 63
    3034:	07 fc       	sbrc	r0, 7
    3036:	fa cf       	rjmp	.-12     	; 0x302c <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    3038:	e8 89       	ldd	r30, Y+16	; 0x10
    303a:	f9 89       	ldd	r31, Y+17	; 0x11
    303c:	80 81       	ld	r24, Z
    303e:	85 ff       	sbrs	r24, 5
    3040:	f5 cf       	rjmp	.-22     	; 0x302c <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    3042:	ce 01       	movw	r24, r28
    3044:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    3048:	f1 cf       	rjmp	.-30     	; 0x302c <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    304a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    304c:	fe 01       	movw	r30, r28
    304e:	e8 0f       	add	r30, r24
    3050:	f1 1d       	adc	r31, r1
    3052:	e3 5a       	subi	r30, 0xA3	; 163
    3054:	ff 4f       	sbci	r31, 0xFF	; 255
    3056:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
    3058:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
    305a:	ea 89       	ldd	r30, Y+18	; 0x12
    305c:	fb 89       	ldd	r31, Y+19	; 0x13
    305e:	80 81       	ld	r24, Z
    3060:	80 62       	ori	r24, 0x20	; 32
    3062:	07 c0       	rjmp	.+14     	; 0x3072 <_ZN14HardwareSerial5writeEh+0x7a>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    3064:	ee 89       	ldd	r30, Y+22	; 0x16
    3066:	ff 89       	ldd	r31, Y+23	; 0x17
    3068:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
    306a:	e8 89       	ldd	r30, Y+16	; 0x10
    306c:	f9 89       	ldd	r31, Y+17	; 0x11
    306e:	80 81       	ld	r24, Z
    3070:	80 64       	ori	r24, 0x40	; 64
    3072:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
    3074:	81 e0       	ldi	r24, 0x01	; 1
    3076:	90 e0       	ldi	r25, 0x00	; 0
    3078:	df 91       	pop	r29
    307a:	cf 91       	pop	r28
    307c:	1f 91       	pop	r17
    307e:	0f 91       	pop	r16
    3080:	ff 90       	pop	r15
    3082:	ef 90       	pop	r14
    3084:	08 95       	ret

00003086 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    3086:	cf 93       	push	r28
    3088:	df 93       	push	r29
    308a:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    308c:	88 8d       	ldd	r24, Y+24	; 0x18
    308e:	88 23       	and	r24, r24
    3090:	c9 f0       	breq	.+50     	; 0x30c4 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    3092:	ea 89       	ldd	r30, Y+18	; 0x12
    3094:	fb 89       	ldd	r31, Y+19	; 0x13
    3096:	80 81       	ld	r24, Z
    3098:	85 fd       	sbrc	r24, 5
    309a:	05 c0       	rjmp	.+10     	; 0x30a6 <_ZN14HardwareSerial5flushEv+0x20>
    309c:	a8 89       	ldd	r26, Y+16	; 0x10
    309e:	b9 89       	ldd	r27, Y+17	; 0x11
    30a0:	8c 91       	ld	r24, X
    30a2:	86 fd       	sbrc	r24, 6
    30a4:	0f c0       	rjmp	.+30     	; 0x30c4 <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    30a6:	0f b6       	in	r0, 0x3f	; 63
    30a8:	07 fc       	sbrc	r0, 7
    30aa:	f5 cf       	rjmp	.-22     	; 0x3096 <_ZN14HardwareSerial5flushEv+0x10>
    30ac:	80 81       	ld	r24, Z
    30ae:	85 ff       	sbrs	r24, 5
    30b0:	f2 cf       	rjmp	.-28     	; 0x3096 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    30b2:	a8 89       	ldd	r26, Y+16	; 0x10
    30b4:	b9 89       	ldd	r27, Y+17	; 0x11
    30b6:	8c 91       	ld	r24, X
    30b8:	85 ff       	sbrs	r24, 5
    30ba:	ed cf       	rjmp	.-38     	; 0x3096 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    30bc:	ce 01       	movw	r24, r28
    30be:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    30c2:	e7 cf       	rjmp	.-50     	; 0x3092 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    30c4:	df 91       	pop	r29
    30c6:	cf 91       	pop	r28
    30c8:	08 95       	ret

000030ca <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    30ca:	cf 92       	push	r12
    30cc:	df 92       	push	r13
    30ce:	ef 92       	push	r14
    30d0:	ff 92       	push	r15
    30d2:	1f 93       	push	r17
    30d4:	cf 93       	push	r28
    30d6:	df 93       	push	r29
    30d8:	ec 01       	movw	r28, r24
    30da:	6a 01       	movw	r12, r20
    30dc:	7b 01       	movw	r14, r22
    30de:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    30e0:	e8 89       	ldd	r30, Y+16	; 0x10
    30e2:	f9 89       	ldd	r31, Y+17	; 0x11
    30e4:	82 e0       	ldi	r24, 0x02	; 2
    30e6:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    30e8:	41 15       	cp	r20, r1
    30ea:	51 4e       	sbci	r21, 0xE1	; 225
    30ec:	61 05       	cpc	r22, r1
    30ee:	71 05       	cpc	r23, r1
    30f0:	b1 f0       	breq	.+44     	; 0x311e <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    30f2:	60 e0       	ldi	r22, 0x00	; 0
    30f4:	79 e0       	ldi	r23, 0x09	; 9
    30f6:	8d e3       	ldi	r24, 0x3D	; 61
    30f8:	90 e0       	ldi	r25, 0x00	; 0
    30fa:	a7 01       	movw	r20, r14
    30fc:	96 01       	movw	r18, r12
    30fe:	0e 94 a2 1c 	call	0x3944	; 0x3944 <__udivmodsi4>
    3102:	da 01       	movw	r26, r20
    3104:	c9 01       	movw	r24, r18
    3106:	01 97       	sbiw	r24, 0x01	; 1
    3108:	a1 09       	sbc	r26, r1
    310a:	b1 09       	sbc	r27, r1
    310c:	b6 95       	lsr	r27
    310e:	a7 95       	ror	r26
    3110:	97 95       	ror	r25
    3112:	87 95       	ror	r24
    3114:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    3116:	21 15       	cp	r18, r1
    3118:	80 e1       	ldi	r24, 0x10	; 16
    311a:	38 07       	cpc	r19, r24
    311c:	a8 f0       	brcs	.+42     	; 0x3148 <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
    311e:	e8 89       	ldd	r30, Y+16	; 0x10
    3120:	f9 89       	ldd	r31, Y+17	; 0x11
    3122:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    3124:	60 e8       	ldi	r22, 0x80	; 128
    3126:	74 e8       	ldi	r23, 0x84	; 132
    3128:	8e e1       	ldi	r24, 0x1E	; 30
    312a:	90 e0       	ldi	r25, 0x00	; 0
    312c:	a7 01       	movw	r20, r14
    312e:	96 01       	movw	r18, r12
    3130:	0e 94 a2 1c 	call	0x3944	; 0x3944 <__udivmodsi4>
    3134:	da 01       	movw	r26, r20
    3136:	c9 01       	movw	r24, r18
    3138:	01 97       	sbiw	r24, 0x01	; 1
    313a:	a1 09       	sbc	r26, r1
    313c:	b1 09       	sbc	r27, r1
    313e:	b6 95       	lsr	r27
    3140:	a7 95       	ror	r26
    3142:	97 95       	ror	r25
    3144:	87 95       	ror	r24
    3146:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    3148:	ec 85       	ldd	r30, Y+12	; 0x0c
    314a:	fd 85       	ldd	r31, Y+13	; 0x0d
    314c:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    314e:	ee 85       	ldd	r30, Y+14	; 0x0e
    3150:	ff 85       	ldd	r31, Y+15	; 0x0f
    3152:	20 83       	st	Z, r18

  _written = false;
    3154:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    3156:	ec 89       	ldd	r30, Y+20	; 0x14
    3158:	fd 89       	ldd	r31, Y+21	; 0x15
    315a:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    315c:	ea 89       	ldd	r30, Y+18	; 0x12
    315e:	fb 89       	ldd	r31, Y+19	; 0x13
    3160:	80 81       	ld	r24, Z
    3162:	80 61       	ori	r24, 0x10	; 16
    3164:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    3166:	ea 89       	ldd	r30, Y+18	; 0x12
    3168:	fb 89       	ldd	r31, Y+19	; 0x13
    316a:	80 81       	ld	r24, Z
    316c:	88 60       	ori	r24, 0x08	; 8
    316e:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    3170:	ea 89       	ldd	r30, Y+18	; 0x12
    3172:	fb 89       	ldd	r31, Y+19	; 0x13
    3174:	80 81       	ld	r24, Z
    3176:	80 68       	ori	r24, 0x80	; 128
    3178:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    317a:	ea 89       	ldd	r30, Y+18	; 0x12
    317c:	fb 89       	ldd	r31, Y+19	; 0x13
    317e:	80 81       	ld	r24, Z
    3180:	8f 7d       	andi	r24, 0xDF	; 223
    3182:	80 83       	st	Z, r24
}
    3184:	df 91       	pop	r29
    3186:	cf 91       	pop	r28
    3188:	1f 91       	pop	r17
    318a:	ff 90       	pop	r15
    318c:	ef 90       	pop	r14
    318e:	df 90       	pop	r13
    3190:	cf 90       	pop	r12
    3192:	08 95       	ret

00003194 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    3194:	1f 92       	push	r1
    3196:	0f 92       	push	r0
    3198:	0f b6       	in	r0, 0x3f	; 63
    319a:	0f 92       	push	r0
    319c:	11 24       	eor	r1, r1
    319e:	2f 93       	push	r18
    31a0:	8f 93       	push	r24
    31a2:	9f 93       	push	r25
    31a4:	ef 93       	push	r30
    31a6:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    31a8:	e0 91 47 05 	lds	r30, 0x0547	; 0x800547 <Serial+0x10>
    31ac:	f0 91 48 05 	lds	r31, 0x0548	; 0x800548 <Serial+0x11>
    31b0:	80 81       	ld	r24, Z
    31b2:	e0 91 4d 05 	lds	r30, 0x054D	; 0x80054d <Serial+0x16>
    31b6:	f0 91 4e 05 	lds	r31, 0x054E	; 0x80054e <Serial+0x17>
    31ba:	82 fd       	sbrc	r24, 2
    31bc:	12 c0       	rjmp	.+36     	; 0x31e2 <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    31be:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    31c0:	80 91 50 05 	lds	r24, 0x0550	; 0x800550 <Serial+0x19>
    31c4:	8f 5f       	subi	r24, 0xFF	; 255
    31c6:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    31c8:	20 91 51 05 	lds	r18, 0x0551	; 0x800551 <Serial+0x1a>
    31cc:	82 17       	cp	r24, r18
    31ce:	51 f0       	breq	.+20     	; 0x31e4 <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
    31d0:	e0 91 50 05 	lds	r30, 0x0550	; 0x800550 <Serial+0x19>
    31d4:	f0 e0       	ldi	r31, 0x00	; 0
    31d6:	e9 5c       	subi	r30, 0xC9	; 201
    31d8:	fa 4f       	sbci	r31, 0xFA	; 250
    31da:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    31dc:	80 93 50 05 	sts	0x0550, r24	; 0x800550 <Serial+0x19>
    31e0:	01 c0       	rjmp	.+2      	; 0x31e4 <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    31e2:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    31e4:	ff 91       	pop	r31
    31e6:	ef 91       	pop	r30
    31e8:	9f 91       	pop	r25
    31ea:	8f 91       	pop	r24
    31ec:	2f 91       	pop	r18
    31ee:	0f 90       	pop	r0
    31f0:	0f be       	out	0x3f, r0	; 63
    31f2:	0f 90       	pop	r0
    31f4:	1f 90       	pop	r1
    31f6:	18 95       	reti

000031f8 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    31f8:	1f 92       	push	r1
    31fa:	0f 92       	push	r0
    31fc:	0f b6       	in	r0, 0x3f	; 63
    31fe:	0f 92       	push	r0
    3200:	11 24       	eor	r1, r1
    3202:	2f 93       	push	r18
    3204:	3f 93       	push	r19
    3206:	4f 93       	push	r20
    3208:	5f 93       	push	r21
    320a:	6f 93       	push	r22
    320c:	7f 93       	push	r23
    320e:	8f 93       	push	r24
    3210:	9f 93       	push	r25
    3212:	af 93       	push	r26
    3214:	bf 93       	push	r27
    3216:	ef 93       	push	r30
    3218:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    321a:	87 e3       	ldi	r24, 0x37	; 55
    321c:	95 e0       	ldi	r25, 0x05	; 5
    321e:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    3222:	ff 91       	pop	r31
    3224:	ef 91       	pop	r30
    3226:	bf 91       	pop	r27
    3228:	af 91       	pop	r26
    322a:	9f 91       	pop	r25
    322c:	8f 91       	pop	r24
    322e:	7f 91       	pop	r23
    3230:	6f 91       	pop	r22
    3232:	5f 91       	pop	r21
    3234:	4f 91       	pop	r20
    3236:	3f 91       	pop	r19
    3238:	2f 91       	pop	r18
    323a:	0f 90       	pop	r0
    323c:	0f be       	out	0x3f, r0	; 63
    323e:	0f 90       	pop	r0
    3240:	1f 90       	pop	r1
    3242:	18 95       	reti

00003244 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    3244:	87 e3       	ldi	r24, 0x37	; 55
    3246:	95 e0       	ldi	r25, 0x05	; 5
    3248:	0e 94 90 17 	call	0x2f20	; 0x2f20 <_ZN14HardwareSerial9availableEv>
    324c:	21 e0       	ldi	r18, 0x01	; 1
    324e:	89 2b       	or	r24, r25
    3250:	09 f4       	brne	.+2      	; 0x3254 <_Z17Serial0_availablev+0x10>
    3252:	20 e0       	ldi	r18, 0x00	; 0
}
    3254:	82 2f       	mov	r24, r18
    3256:	08 95       	ret

00003258 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    3258:	e7 e3       	ldi	r30, 0x37	; 55
    325a:	f5 e0       	ldi	r31, 0x05	; 5
    325c:	13 82       	std	Z+3, r1	; 0x03
    325e:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    3260:	88 ee       	ldi	r24, 0xE8	; 232
    3262:	93 e0       	ldi	r25, 0x03	; 3
    3264:	a0 e0       	ldi	r26, 0x00	; 0
    3266:	b0 e0       	ldi	r27, 0x00	; 0
    3268:	84 83       	std	Z+4, r24	; 0x04
    326a:	95 83       	std	Z+5, r25	; 0x05
    326c:	a6 83       	std	Z+6, r26	; 0x06
    326e:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    3270:	8c e7       	ldi	r24, 0x7C	; 124
    3272:	92 e0       	ldi	r25, 0x02	; 2
    3274:	91 83       	std	Z+1, r25	; 0x01
    3276:	80 83       	st	Z, r24
    3278:	85 ec       	ldi	r24, 0xC5	; 197
    327a:	90 e0       	ldi	r25, 0x00	; 0
    327c:	95 87       	std	Z+13, r25	; 0x0d
    327e:	84 87       	std	Z+12, r24	; 0x0c
    3280:	84 ec       	ldi	r24, 0xC4	; 196
    3282:	90 e0       	ldi	r25, 0x00	; 0
    3284:	97 87       	std	Z+15, r25	; 0x0f
    3286:	86 87       	std	Z+14, r24	; 0x0e
    3288:	80 ec       	ldi	r24, 0xC0	; 192
    328a:	90 e0       	ldi	r25, 0x00	; 0
    328c:	91 8b       	std	Z+17, r25	; 0x11
    328e:	80 8b       	std	Z+16, r24	; 0x10
    3290:	81 ec       	ldi	r24, 0xC1	; 193
    3292:	90 e0       	ldi	r25, 0x00	; 0
    3294:	93 8b       	std	Z+19, r25	; 0x13
    3296:	82 8b       	std	Z+18, r24	; 0x12
    3298:	82 ec       	ldi	r24, 0xC2	; 194
    329a:	90 e0       	ldi	r25, 0x00	; 0
    329c:	95 8b       	std	Z+21, r25	; 0x15
    329e:	84 8b       	std	Z+20, r24	; 0x14
    32a0:	86 ec       	ldi	r24, 0xC6	; 198
    32a2:	90 e0       	ldi	r25, 0x00	; 0
    32a4:	97 8b       	std	Z+23, r25	; 0x17
    32a6:	86 8b       	std	Z+22, r24	; 0x16
    32a8:	11 8e       	std	Z+25, r1	; 0x19
    32aa:	12 8e       	std	Z+26, r1	; 0x1a
    32ac:	13 8e       	std	Z+27, r1	; 0x1b
    32ae:	14 8e       	std	Z+28, r1	; 0x1c
    32b0:	08 95       	ret

000032b2 <initVariant>:
    32b2:	08 95       	ret

000032b4 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    32b4:	0e 94 d5 1b 	call	0x37aa	; 0x37aa <init>

	initVariant();
    32b8:	0e 94 59 19 	call	0x32b2	; 0x32b2 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    32bc:	0e 94 1d 05 	call	0xa3a	; 0xa3a <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    32c0:	cd ec       	ldi	r28, 0xCD	; 205
    32c2:	d7 e1       	ldi	r29, 0x17	; 23
#endif
	
	setup();
    
	for (;;) {
		loop();
    32c4:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <loop>
		if (serialEventRun) serialEventRun();
    32c8:	20 97       	sbiw	r28, 0x00	; 0
    32ca:	e1 f3       	breq	.-8      	; 0x32c4 <main+0x10>
    32cc:	0e 94 cd 17 	call	0x2f9a	; 0x2f9a <_Z14serialEventRunv>
    32d0:	f9 cf       	rjmp	.-14     	; 0x32c4 <main+0x10>

000032d2 <_ZN5Print5writeEPKhj>:
size_t Print::println(long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
    32d2:	cf 92       	push	r12
    32d4:	df 92       	push	r13
    32d6:	ef 92       	push	r14
    32d8:	ff 92       	push	r15
    32da:	0f 93       	push	r16
    32dc:	1f 93       	push	r17
    32de:	cf 93       	push	r28
    32e0:	df 93       	push	r29
    32e2:	6c 01       	movw	r12, r24
    32e4:	7a 01       	movw	r14, r20
    32e6:	8b 01       	movw	r16, r22
    32e8:	c0 e0       	ldi	r28, 0x00	; 0
    32ea:	d0 e0       	ldi	r29, 0x00	; 0
    32ec:	ce 15       	cp	r28, r14
    32ee:	df 05       	cpc	r29, r15
    32f0:	81 f0       	breq	.+32     	; 0x3312 <_ZN5Print5writeEPKhj+0x40>
    32f2:	d8 01       	movw	r26, r16
    32f4:	6d 91       	ld	r22, X+
    32f6:	8d 01       	movw	r16, r26
    32f8:	d6 01       	movw	r26, r12
    32fa:	ed 91       	ld	r30, X+
    32fc:	fc 91       	ld	r31, X
    32fe:	01 90       	ld	r0, Z+
    3300:	f0 81       	ld	r31, Z
    3302:	e0 2d       	mov	r30, r0
    3304:	c6 01       	movw	r24, r12
    3306:	09 95       	icall
    3308:	89 2b       	or	r24, r25
    330a:	11 f0       	breq	.+4      	; 0x3310 <_ZN5Print5writeEPKhj+0x3e>
    330c:	21 96       	adiw	r28, 0x01	; 1
    330e:	ee cf       	rjmp	.-36     	; 0x32ec <_ZN5Print5writeEPKhj+0x1a>
    3310:	7e 01       	movw	r14, r28
    3312:	c7 01       	movw	r24, r14
    3314:	df 91       	pop	r29
    3316:	cf 91       	pop	r28
    3318:	1f 91       	pop	r17
    331a:	0f 91       	pop	r16
    331c:	ff 90       	pop	r15
    331e:	ef 90       	pop	r14
    3320:	df 90       	pop	r13
    3322:	cf 90       	pop	r12
    3324:	08 95       	ret

00003326 <_ZN5Print5writeEPKc>:
    3326:	61 15       	cp	r22, r1
    3328:	71 05       	cpc	r23, r1
    332a:	79 f0       	breq	.+30     	; 0x334a <_ZN5Print5writeEPKc+0x24>
    332c:	fb 01       	movw	r30, r22
    332e:	01 90       	ld	r0, Z+
    3330:	00 20       	and	r0, r0
    3332:	e9 f7       	brne	.-6      	; 0x332e <_ZN5Print5writeEPKc+0x8>
    3334:	31 97       	sbiw	r30, 0x01	; 1
    3336:	af 01       	movw	r20, r30
    3338:	46 1b       	sub	r20, r22
    333a:	57 0b       	sbc	r21, r23
    333c:	dc 01       	movw	r26, r24
    333e:	ed 91       	ld	r30, X+
    3340:	fc 91       	ld	r31, X
    3342:	02 80       	ldd	r0, Z+2	; 0x02
    3344:	f3 81       	ldd	r31, Z+3	; 0x03
    3346:	e0 2d       	mov	r30, r0
    3348:	09 94       	ijmp
    334a:	80 e0       	ldi	r24, 0x00	; 0
    334c:	90 e0       	ldi	r25, 0x00	; 0
    334e:	08 95       	ret

00003350 <_ZN5Print5printEPKc>:
    3350:	0c 94 93 19 	jmp	0x3326	; 0x3326 <_ZN5Print5writeEPKc>

00003354 <_ZN5Print5printEc>:
    3354:	dc 01       	movw	r26, r24
    3356:	ed 91       	ld	r30, X+
    3358:	fc 91       	ld	r31, X
    335a:	01 90       	ld	r0, Z+
    335c:	f0 81       	ld	r31, Z
    335e:	e0 2d       	mov	r30, r0
    3360:	09 94       	ijmp

00003362 <_ZN5Print7printlnEv>:
    3362:	6a e8       	ldi	r22, 0x8A	; 138
    3364:	72 e0       	ldi	r23, 0x02	; 2
    3366:	0c 94 93 19 	jmp	0x3326	; 0x3326 <_ZN5Print5writeEPKc>

0000336a <_ZN5Print7printlnEPKc>:
    336a:	0f 93       	push	r16
    336c:	1f 93       	push	r17
    336e:	cf 93       	push	r28
    3370:	df 93       	push	r29
    3372:	ec 01       	movw	r28, r24
    3374:	0e 94 93 19 	call	0x3326	; 0x3326 <_ZN5Print5writeEPKc>
    3378:	8c 01       	movw	r16, r24
    337a:	ce 01       	movw	r24, r28
    337c:	0e 94 b1 19 	call	0x3362	; 0x3362 <_ZN5Print7printlnEv>
    3380:	80 0f       	add	r24, r16
    3382:	91 1f       	adc	r25, r17
    3384:	df 91       	pop	r29
    3386:	cf 91       	pop	r28
    3388:	1f 91       	pop	r17
    338a:	0f 91       	pop	r16
    338c:	08 95       	ret

0000338e <_ZN5Print11printNumberEmh>:
    338e:	8f 92       	push	r8
    3390:	9f 92       	push	r9
    3392:	af 92       	push	r10
    3394:	bf 92       	push	r11
    3396:	ef 92       	push	r14
    3398:	ff 92       	push	r15
    339a:	0f 93       	push	r16
    339c:	1f 93       	push	r17
    339e:	cf 93       	push	r28
    33a0:	df 93       	push	r29
    33a2:	cd b7       	in	r28, 0x3d	; 61
    33a4:	de b7       	in	r29, 0x3e	; 62
    33a6:	a1 97       	sbiw	r28, 0x21	; 33
    33a8:	0f b6       	in	r0, 0x3f	; 63
    33aa:	f8 94       	cli
    33ac:	de bf       	out	0x3e, r29	; 62
    33ae:	0f be       	out	0x3f, r0	; 63
    33b0:	cd bf       	out	0x3d, r28	; 61
    33b2:	7c 01       	movw	r14, r24
    33b4:	fa 01       	movw	r30, r20
    33b6:	cb 01       	movw	r24, r22
    33b8:	19 a2       	std	Y+33, r1	; 0x21
    33ba:	22 30       	cpi	r18, 0x02	; 2
    33bc:	08 f4       	brcc	.+2      	; 0x33c0 <_ZN5Print11printNumberEmh+0x32>
    33be:	2a e0       	ldi	r18, 0x0A	; 10
    33c0:	8e 01       	movw	r16, r28
    33c2:	0f 5d       	subi	r16, 0xDF	; 223
    33c4:	1f 4f       	sbci	r17, 0xFF	; 255
    33c6:	82 2e       	mov	r8, r18
    33c8:	91 2c       	mov	r9, r1
    33ca:	a1 2c       	mov	r10, r1
    33cc:	b1 2c       	mov	r11, r1
    33ce:	bf 01       	movw	r22, r30
    33d0:	a5 01       	movw	r20, r10
    33d2:	94 01       	movw	r18, r8
    33d4:	0e 94 a2 1c 	call	0x3944	; 0x3944 <__udivmodsi4>
    33d8:	f9 01       	movw	r30, r18
    33da:	ca 01       	movw	r24, r20
    33dc:	01 50       	subi	r16, 0x01	; 1
    33de:	11 09       	sbc	r17, r1
    33e0:	6a 30       	cpi	r22, 0x0A	; 10
    33e2:	10 f4       	brcc	.+4      	; 0x33e8 <_ZN5Print11printNumberEmh+0x5a>
    33e4:	60 5d       	subi	r22, 0xD0	; 208
    33e6:	01 c0       	rjmp	.+2      	; 0x33ea <_ZN5Print11printNumberEmh+0x5c>
    33e8:	69 5c       	subi	r22, 0xC9	; 201
    33ea:	d8 01       	movw	r26, r16
    33ec:	6c 93       	st	X, r22
    33ee:	23 2b       	or	r18, r19
    33f0:	24 2b       	or	r18, r20
    33f2:	25 2b       	or	r18, r21
    33f4:	61 f7       	brne	.-40     	; 0x33ce <_ZN5Print11printNumberEmh+0x40>
    33f6:	b8 01       	movw	r22, r16
    33f8:	c7 01       	movw	r24, r14
    33fa:	0e 94 93 19 	call	0x3326	; 0x3326 <_ZN5Print5writeEPKc>
    33fe:	a1 96       	adiw	r28, 0x21	; 33
    3400:	0f b6       	in	r0, 0x3f	; 63
    3402:	f8 94       	cli
    3404:	de bf       	out	0x3e, r29	; 62
    3406:	0f be       	out	0x3f, r0	; 63
    3408:	cd bf       	out	0x3d, r28	; 61
    340a:	df 91       	pop	r29
    340c:	cf 91       	pop	r28
    340e:	1f 91       	pop	r17
    3410:	0f 91       	pop	r16
    3412:	ff 90       	pop	r15
    3414:	ef 90       	pop	r14
    3416:	bf 90       	pop	r11
    3418:	af 90       	pop	r10
    341a:	9f 90       	pop	r9
    341c:	8f 90       	pop	r8
    341e:	08 95       	ret

00003420 <_ZN5Print5printEmi>:
    3420:	21 15       	cp	r18, r1
    3422:	31 05       	cpc	r19, r1
    3424:	41 f4       	brne	.+16     	; 0x3436 <_ZN5Print5printEmi+0x16>
    3426:	dc 01       	movw	r26, r24
    3428:	ed 91       	ld	r30, X+
    342a:	fc 91       	ld	r31, X
    342c:	01 90       	ld	r0, Z+
    342e:	f0 81       	ld	r31, Z
    3430:	e0 2d       	mov	r30, r0
    3432:	64 2f       	mov	r22, r20
    3434:	09 94       	ijmp
    3436:	0c 94 c7 19 	jmp	0x338e	; 0x338e <_ZN5Print11printNumberEmh>

0000343a <_ZN5Print5printEji>:
    343a:	9a 01       	movw	r18, r20
    343c:	ab 01       	movw	r20, r22
    343e:	60 e0       	ldi	r22, 0x00	; 0
    3440:	70 e0       	ldi	r23, 0x00	; 0
    3442:	0c 94 10 1a 	jmp	0x3420	; 0x3420 <_ZN5Print5printEmi>

00003446 <_ZN5Print7printlnEmi>:
    3446:	0f 93       	push	r16
    3448:	1f 93       	push	r17
    344a:	cf 93       	push	r28
    344c:	df 93       	push	r29
    344e:	ec 01       	movw	r28, r24
    3450:	0e 94 10 1a 	call	0x3420	; 0x3420 <_ZN5Print5printEmi>
    3454:	8c 01       	movw	r16, r24
    3456:	ce 01       	movw	r24, r28
    3458:	0e 94 b1 19 	call	0x3362	; 0x3362 <_ZN5Print7printlnEv>
    345c:	80 0f       	add	r24, r16
    345e:	91 1f       	adc	r25, r17
    3460:	df 91       	pop	r29
    3462:	cf 91       	pop	r28
    3464:	1f 91       	pop	r17
    3466:	0f 91       	pop	r16
    3468:	08 95       	ret

0000346a <_ZN5Print5printEli>:
    346a:	cf 92       	push	r12
    346c:	df 92       	push	r13
    346e:	ef 92       	push	r14
    3470:	ff 92       	push	r15
    3472:	0f 93       	push	r16
    3474:	1f 93       	push	r17
    3476:	cf 93       	push	r28
    3478:	df 93       	push	r29
    347a:	21 15       	cp	r18, r1
    347c:	31 05       	cpc	r19, r1
    347e:	81 f4       	brne	.+32     	; 0x34a0 <_ZN5Print5printEli+0x36>
    3480:	dc 01       	movw	r26, r24
    3482:	ed 91       	ld	r30, X+
    3484:	fc 91       	ld	r31, X
    3486:	01 90       	ld	r0, Z+
    3488:	f0 81       	ld	r31, Z
    348a:	e0 2d       	mov	r30, r0
    348c:	64 2f       	mov	r22, r20
    348e:	df 91       	pop	r29
    3490:	cf 91       	pop	r28
    3492:	1f 91       	pop	r17
    3494:	0f 91       	pop	r16
    3496:	ff 90       	pop	r15
    3498:	ef 90       	pop	r14
    349a:	df 90       	pop	r13
    349c:	cf 90       	pop	r12
    349e:	09 94       	ijmp
    34a0:	2a 30       	cpi	r18, 0x0A	; 10
    34a2:	31 05       	cpc	r19, r1
    34a4:	01 f5       	brne	.+64     	; 0x34e6 <_ZN5Print5printEli+0x7c>
    34a6:	77 ff       	sbrs	r23, 7
    34a8:	1d c0       	rjmp	.+58     	; 0x34e4 <_ZN5Print5printEli+0x7a>
    34aa:	6a 01       	movw	r12, r20
    34ac:	7b 01       	movw	r14, r22
    34ae:	ec 01       	movw	r28, r24
    34b0:	6d e2       	ldi	r22, 0x2D	; 45
    34b2:	0e 94 aa 19 	call	0x3354	; 0x3354 <_ZN5Print5printEc>
    34b6:	8c 01       	movw	r16, r24
    34b8:	44 27       	eor	r20, r20
    34ba:	55 27       	eor	r21, r21
    34bc:	ba 01       	movw	r22, r20
    34be:	4c 19       	sub	r20, r12
    34c0:	5d 09       	sbc	r21, r13
    34c2:	6e 09       	sbc	r22, r14
    34c4:	7f 09       	sbc	r23, r15
    34c6:	2a e0       	ldi	r18, 0x0A	; 10
    34c8:	ce 01       	movw	r24, r28
    34ca:	0e 94 c7 19 	call	0x338e	; 0x338e <_ZN5Print11printNumberEmh>
    34ce:	80 0f       	add	r24, r16
    34d0:	91 1f       	adc	r25, r17
    34d2:	df 91       	pop	r29
    34d4:	cf 91       	pop	r28
    34d6:	1f 91       	pop	r17
    34d8:	0f 91       	pop	r16
    34da:	ff 90       	pop	r15
    34dc:	ef 90       	pop	r14
    34de:	df 90       	pop	r13
    34e0:	cf 90       	pop	r12
    34e2:	08 95       	ret
    34e4:	2a e0       	ldi	r18, 0x0A	; 10
    34e6:	df 91       	pop	r29
    34e8:	cf 91       	pop	r28
    34ea:	1f 91       	pop	r17
    34ec:	0f 91       	pop	r16
    34ee:	ff 90       	pop	r15
    34f0:	ef 90       	pop	r14
    34f2:	df 90       	pop	r13
    34f4:	cf 90       	pop	r12
    34f6:	0c 94 c7 19 	jmp	0x338e	; 0x338e <_ZN5Print11printNumberEmh>

000034fa <_ZN5Print5printEii>:
    34fa:	9a 01       	movw	r18, r20
    34fc:	ab 01       	movw	r20, r22
    34fe:	77 0f       	add	r23, r23
    3500:	66 0b       	sbc	r22, r22
    3502:	77 0b       	sbc	r23, r23
    3504:	0c 94 35 1a 	jmp	0x346a	; 0x346a <_ZN5Print5printEli>

00003508 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
    3508:	7f 92       	push	r7
    350a:	8f 92       	push	r8
    350c:	9f 92       	push	r9
    350e:	af 92       	push	r10
    3510:	bf 92       	push	r11
    3512:	cf 92       	push	r12
    3514:	df 92       	push	r13
    3516:	ef 92       	push	r14
    3518:	ff 92       	push	r15
    351a:	0f 93       	push	r16
    351c:	1f 93       	push	r17
    351e:	cf 93       	push	r28
    3520:	df 93       	push	r29
    3522:	8c 01       	movw	r16, r24
    3524:	6a 01       	movw	r12, r20
    3526:	7b 01       	movw	r14, r22
    3528:	72 2e       	mov	r7, r18
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
    352a:	9a 01       	movw	r18, r20
    352c:	ab 01       	movw	r20, r22
    352e:	c7 01       	movw	r24, r14
    3530:	b6 01       	movw	r22, r12
    3532:	0e 94 8d 1c 	call	0x391a	; 0x391a <__unordsf2>
    3536:	88 23       	and	r24, r24
    3538:	19 f0       	breq	.+6      	; 0x3540 <_ZN5Print10printFloatEdh+0x38>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    353a:	6d e8       	ldi	r22, 0x8D	; 141
    353c:	72 e0       	ldi	r23, 0x02	; 2
    353e:	27 c0       	rjmp	.+78     	; 0x358e <_ZN5Print10printFloatEdh+0x86>
size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
    3540:	46 01       	movw	r8, r12
    3542:	57 01       	movw	r10, r14
    3544:	e8 94       	clt
    3546:	b7 f8       	bld	r11, 7
    3548:	2f ef       	ldi	r18, 0xFF	; 255
    354a:	3f ef       	ldi	r19, 0xFF	; 255
    354c:	4f e7       	ldi	r20, 0x7F	; 127
    354e:	5f e7       	ldi	r21, 0x7F	; 127
    3550:	c5 01       	movw	r24, r10
    3552:	b4 01       	movw	r22, r8
    3554:	0e 94 8d 1c 	call	0x391a	; 0x391a <__unordsf2>
    3558:	81 11       	cpse	r24, r1
    355a:	0d c0       	rjmp	.+26     	; 0x3576 <_ZN5Print10printFloatEdh+0x6e>
    355c:	2f ef       	ldi	r18, 0xFF	; 255
    355e:	3f ef       	ldi	r19, 0xFF	; 255
    3560:	4f e7       	ldi	r20, 0x7F	; 127
    3562:	5f e7       	ldi	r21, 0x7F	; 127
    3564:	c5 01       	movw	r24, r10
    3566:	b4 01       	movw	r22, r8
    3568:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <__cmpsf2>
    356c:	18 16       	cp	r1, r24
    356e:	1c f4       	brge	.+6      	; 0x3576 <_ZN5Print10printFloatEdh+0x6e>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    3570:	61 e9       	ldi	r22, 0x91	; 145
    3572:	72 e0       	ldi	r23, 0x02	; 2
    3574:	0c c0       	rjmp	.+24     	; 0x358e <_ZN5Print10printFloatEdh+0x86>
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
    3576:	2f ef       	ldi	r18, 0xFF	; 255
    3578:	3f ef       	ldi	r19, 0xFF	; 255
    357a:	4f e7       	ldi	r20, 0x7F	; 127
    357c:	5f e4       	ldi	r21, 0x4F	; 79
    357e:	c7 01       	movw	r24, r14
    3580:	b6 01       	movw	r22, r12
    3582:	0e 94 12 17 	call	0x2e24	; 0x2e24 <__gesf2>
    3586:	18 16       	cp	r1, r24
    3588:	94 f4       	brge	.+36     	; 0x35ae <_ZN5Print10printFloatEdh+0xa6>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    358a:	65 e9       	ldi	r22, 0x95	; 149
    358c:	72 e0       	ldi	r23, 0x02	; 2
    358e:	c8 01       	movw	r24, r16
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    3590:	df 91       	pop	r29
    3592:	cf 91       	pop	r28
    3594:	1f 91       	pop	r17
    3596:	0f 91       	pop	r16
    3598:	ff 90       	pop	r15
    359a:	ef 90       	pop	r14
    359c:	df 90       	pop	r13
    359e:	cf 90       	pop	r12
    35a0:	bf 90       	pop	r11
    35a2:	af 90       	pop	r10
    35a4:	9f 90       	pop	r9
    35a6:	8f 90       	pop	r8
    35a8:	7f 90       	pop	r7
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    35aa:	0c 94 93 19 	jmp	0x3326	; 0x3326 <_ZN5Print5writeEPKc>
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
    35ae:	2f ef       	ldi	r18, 0xFF	; 255
    35b0:	3f ef       	ldi	r19, 0xFF	; 255
    35b2:	4f e7       	ldi	r20, 0x7F	; 127
    35b4:	5f ec       	ldi	r21, 0xCF	; 207
    35b6:	c7 01       	movw	r24, r14
    35b8:	b6 01       	movw	r22, r12
    35ba:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <__cmpsf2>
    35be:	87 fd       	sbrc	r24, 7
    35c0:	e4 cf       	rjmp	.-56     	; 0x358a <_ZN5Print10printFloatEdh+0x82>
  
  // Handle negative numbers
  if (number < 0.0)
    35c2:	20 e0       	ldi	r18, 0x00	; 0
    35c4:	30 e0       	ldi	r19, 0x00	; 0
    35c6:	a9 01       	movw	r20, r18
    35c8:	c7 01       	movw	r24, r14
    35ca:	b6 01       	movw	r22, r12
    35cc:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <__cmpsf2>
    35d0:	87 ff       	sbrs	r24, 7
    35d2:	0a c0       	rjmp	.+20     	; 0x35e8 <_ZN5Print10printFloatEdh+0xe0>
  {
     n += print('-');
    35d4:	6d e2       	ldi	r22, 0x2D	; 45
    35d6:	c8 01       	movw	r24, r16
    35d8:	0e 94 aa 19 	call	0x3354	; 0x3354 <_ZN5Print5printEc>
    35dc:	ec 01       	movw	r28, r24
     number = -number;
    35de:	f7 fa       	bst	r15, 7
    35e0:	f0 94       	com	r15
    35e2:	f7 f8       	bld	r15, 7
    35e4:	f0 94       	com	r15
    35e6:	02 c0       	rjmp	.+4      	; 0x35ec <_ZN5Print10printFloatEdh+0xe4>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
    35e8:	c0 e0       	ldi	r28, 0x00	; 0
    35ea:	d0 e0       	ldi	r29, 0x00	; 0
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    35ec:	b1 2c       	mov	r11, r1
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
    35ee:	60 e0       	ldi	r22, 0x00	; 0
    35f0:	70 e0       	ldi	r23, 0x00	; 0
    35f2:	80 e0       	ldi	r24, 0x00	; 0
    35f4:	9f e3       	ldi	r25, 0x3F	; 63
  for (uint8_t i=0; i<digits; ++i)
    35f6:	7b 14       	cp	r7, r11
    35f8:	41 f0       	breq	.+16     	; 0x360a <_ZN5Print10printFloatEdh+0x102>
    rounding /= 10.0;
    35fa:	20 e0       	ldi	r18, 0x00	; 0
    35fc:	30 e0       	ldi	r19, 0x00	; 0
    35fe:	40 e2       	ldi	r20, 0x20	; 32
    3600:	51 e4       	ldi	r21, 0x41	; 65
    3602:	0e 94 91 15 	call	0x2b22	; 0x2b22 <__divsf3>
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    3606:	b3 94       	inc	r11
    3608:	f6 cf       	rjmp	.-20     	; 0x35f6 <_ZN5Print10printFloatEdh+0xee>
    rounding /= 10.0;
  
  number += rounding;
    360a:	a7 01       	movw	r20, r14
    360c:	96 01       	movw	r18, r12
    360e:	0e 94 ae 14 	call	0x295c	; 0x295c <__addsf3>
    3612:	6b 01       	movw	r12, r22
    3614:	7c 01       	movw	r14, r24

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
    3616:	0e 94 0a 16 	call	0x2c14	; 0x2c14 <__fixunssfsi>
    361a:	4b 01       	movw	r8, r22
    361c:	5c 01       	movw	r10, r24
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
    361e:	2a e0       	ldi	r18, 0x0A	; 10
    3620:	ab 01       	movw	r20, r22
    3622:	bc 01       	movw	r22, r24
    3624:	c8 01       	movw	r24, r16
    3626:	0e 94 c7 19 	call	0x338e	; 0x338e <_ZN5Print11printNumberEmh>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    362a:	c8 0f       	add	r28, r24
    362c:	d9 1f       	adc	r29, r25

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    362e:	77 20       	and	r7, r7
    3630:	b9 f1       	breq	.+110    	; 0x36a0 <_ZN5Print10printFloatEdh+0x198>
  
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
    3632:	c5 01       	movw	r24, r10
    3634:	b4 01       	movw	r22, r8
    3636:	0e 94 39 16 	call	0x2c72	; 0x2c72 <__floatunsisf>
    363a:	9b 01       	movw	r18, r22
    363c:	ac 01       	movw	r20, r24
    363e:	c7 01       	movw	r24, r14
    3640:	b6 01       	movw	r22, r12
    3642:	0e 94 ad 14 	call	0x295a	; 0x295a <__subsf3>
    3646:	6b 01       	movw	r12, r22
    3648:	7c 01       	movw	r14, r24
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print('.'); 
    364a:	6e e2       	ldi	r22, 0x2E	; 46
    364c:	c8 01       	movw	r24, r16
    364e:	0e 94 aa 19 	call	0x3354	; 0x3354 <_ZN5Print5printEc>
    3652:	c8 0f       	add	r28, r24
    3654:	d9 1f       	adc	r29, r25
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    3656:	20 e0       	ldi	r18, 0x00	; 0
    3658:	30 e0       	ldi	r19, 0x00	; 0
    365a:	40 e2       	ldi	r20, 0x20	; 32
    365c:	51 e4       	ldi	r21, 0x41	; 65
    365e:	c7 01       	movw	r24, r14
    3660:	b6 01       	movw	r22, r12
    3662:	0e 94 1f 17 	call	0x2e3e	; 0x2e3e <__mulsf3>
    3666:	4b 01       	movw	r8, r22
    3668:	5c 01       	movw	r10, r24
    unsigned int toPrint = (unsigned int)(remainder);
    366a:	0e 94 0a 16 	call	0x2c14	; 0x2c14 <__fixunssfsi>
    366e:	6b 01       	movw	r12, r22
    3670:	7c 01       	movw	r14, r24
    n += print(toPrint);
    3672:	4a e0       	ldi	r20, 0x0A	; 10
    3674:	50 e0       	ldi	r21, 0x00	; 0
    3676:	c8 01       	movw	r24, r16
    3678:	0e 94 1d 1a 	call	0x343a	; 0x343a <_ZN5Print5printEji>
    367c:	c8 0f       	add	r28, r24
    367e:	d9 1f       	adc	r29, r25
    remainder -= toPrint; 
    3680:	b6 01       	movw	r22, r12
    3682:	80 e0       	ldi	r24, 0x00	; 0
    3684:	90 e0       	ldi	r25, 0x00	; 0
    3686:	0e 94 39 16 	call	0x2c72	; 0x2c72 <__floatunsisf>
    368a:	9b 01       	movw	r18, r22
    368c:	ac 01       	movw	r20, r24
    368e:	c5 01       	movw	r24, r10
    3690:	b4 01       	movw	r22, r8
    3692:	0e 94 ad 14 	call	0x295a	; 0x295a <__subsf3>
    3696:	6b 01       	movw	r12, r22
    3698:	7c 01       	movw	r14, r24
    369a:	7a 94       	dec	r7
  if (digits > 0) {
    n += print('.'); 
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
    369c:	71 10       	cpse	r7, r1
    369e:	db cf       	rjmp	.-74     	; 0x3656 <_ZN5Print10printFloatEdh+0x14e>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    36a0:	ce 01       	movw	r24, r28
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    36a2:	df 91       	pop	r29
    36a4:	cf 91       	pop	r28
    36a6:	1f 91       	pop	r17
    36a8:	0f 91       	pop	r16
    36aa:	ff 90       	pop	r15
    36ac:	ef 90       	pop	r14
    36ae:	df 90       	pop	r13
    36b0:	cf 90       	pop	r12
    36b2:	bf 90       	pop	r11
    36b4:	af 90       	pop	r10
    36b6:	9f 90       	pop	r9
    36b8:	8f 90       	pop	r8
    36ba:	7f 90       	pop	r7
    36bc:	08 95       	ret

000036be <_ZN5Print5printEdi>:
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    36be:	0c 94 84 1a 	jmp	0x3508	; 0x3508 <_ZN5Print10printFloatEdh>

000036c2 <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
    36c2:	1f 92       	push	r1
    36c4:	0f 92       	push	r0
    36c6:	0f b6       	in	r0, 0x3f	; 63
    36c8:	0f 92       	push	r0
    36ca:	11 24       	eor	r1, r1
    36cc:	2f 93       	push	r18
    36ce:	3f 93       	push	r19
    36d0:	8f 93       	push	r24
    36d2:	9f 93       	push	r25
    36d4:	af 93       	push	r26
    36d6:	bf 93       	push	r27
    36d8:	80 91 d5 05 	lds	r24, 0x05D5	; 0x8005d5 <timer0_millis>
    36dc:	90 91 d6 05 	lds	r25, 0x05D6	; 0x8005d6 <timer0_millis+0x1>
    36e0:	a0 91 d7 05 	lds	r26, 0x05D7	; 0x8005d7 <timer0_millis+0x2>
    36e4:	b0 91 d8 05 	lds	r27, 0x05D8	; 0x8005d8 <timer0_millis+0x3>
    36e8:	30 91 d4 05 	lds	r19, 0x05D4	; 0x8005d4 <timer0_fract>
    36ec:	20 e1       	ldi	r18, 0x10	; 16
    36ee:	23 0f       	add	r18, r19
    36f0:	2d 37       	cpi	r18, 0x7D	; 125
    36f2:	28 f0       	brcs	.+10     	; 0x36fe <__vector_16+0x3c>
    36f4:	23 e9       	ldi	r18, 0x93	; 147
    36f6:	23 0f       	add	r18, r19
    36f8:	01 96       	adiw	r24, 0x01	; 1
    36fa:	a1 1d       	adc	r26, r1
    36fc:	b1 1d       	adc	r27, r1
    36fe:	20 93 d4 05 	sts	0x05D4, r18	; 0x8005d4 <timer0_fract>
    3702:	80 93 d5 05 	sts	0x05D5, r24	; 0x8005d5 <timer0_millis>
    3706:	90 93 d6 05 	sts	0x05D6, r25	; 0x8005d6 <timer0_millis+0x1>
    370a:	a0 93 d7 05 	sts	0x05D7, r26	; 0x8005d7 <timer0_millis+0x2>
    370e:	b0 93 d8 05 	sts	0x05D8, r27	; 0x8005d8 <timer0_millis+0x3>
    3712:	80 91 d9 05 	lds	r24, 0x05D9	; 0x8005d9 <timer0_overflow_count>
    3716:	90 91 da 05 	lds	r25, 0x05DA	; 0x8005da <timer0_overflow_count+0x1>
    371a:	a0 91 db 05 	lds	r26, 0x05DB	; 0x8005db <timer0_overflow_count+0x2>
    371e:	b0 91 dc 05 	lds	r27, 0x05DC	; 0x8005dc <timer0_overflow_count+0x3>
    3722:	01 96       	adiw	r24, 0x01	; 1
    3724:	a1 1d       	adc	r26, r1
    3726:	b1 1d       	adc	r27, r1
    3728:	80 93 d9 05 	sts	0x05D9, r24	; 0x8005d9 <timer0_overflow_count>
    372c:	90 93 da 05 	sts	0x05DA, r25	; 0x8005da <timer0_overflow_count+0x1>
    3730:	a0 93 db 05 	sts	0x05DB, r26	; 0x8005db <timer0_overflow_count+0x2>
    3734:	b0 93 dc 05 	sts	0x05DC, r27	; 0x8005dc <timer0_overflow_count+0x3>
    3738:	bf 91       	pop	r27
    373a:	af 91       	pop	r26
    373c:	9f 91       	pop	r25
    373e:	8f 91       	pop	r24
    3740:	3f 91       	pop	r19
    3742:	2f 91       	pop	r18
    3744:	0f 90       	pop	r0
    3746:	0f be       	out	0x3f, r0	; 63
    3748:	0f 90       	pop	r0
    374a:	1f 90       	pop	r1
    374c:	18 95       	reti

0000374e <millis>:
    374e:	2f b7       	in	r18, 0x3f	; 63
    3750:	f8 94       	cli
    3752:	60 91 d5 05 	lds	r22, 0x05D5	; 0x8005d5 <timer0_millis>
    3756:	70 91 d6 05 	lds	r23, 0x05D6	; 0x8005d6 <timer0_millis+0x1>
    375a:	80 91 d7 05 	lds	r24, 0x05D7	; 0x8005d7 <timer0_millis+0x2>
    375e:	90 91 d8 05 	lds	r25, 0x05D8	; 0x8005d8 <timer0_millis+0x3>
    3762:	2f bf       	out	0x3f, r18	; 63
    3764:	08 95       	ret

00003766 <micros>:
    3766:	3f b7       	in	r19, 0x3f	; 63
    3768:	f8 94       	cli
    376a:	80 91 d9 05 	lds	r24, 0x05D9	; 0x8005d9 <timer0_overflow_count>
    376e:	90 91 da 05 	lds	r25, 0x05DA	; 0x8005da <timer0_overflow_count+0x1>
    3772:	a0 91 db 05 	lds	r26, 0x05DB	; 0x8005db <timer0_overflow_count+0x2>
    3776:	b0 91 dc 05 	lds	r27, 0x05DC	; 0x8005dc <timer0_overflow_count+0x3>
    377a:	26 b5       	in	r18, 0x26	; 38
    377c:	a8 9b       	sbis	0x15, 0	; 21
    377e:	05 c0       	rjmp	.+10     	; 0x378a <micros+0x24>
    3780:	2f 3f       	cpi	r18, 0xFF	; 255
    3782:	19 f0       	breq	.+6      	; 0x378a <micros+0x24>
    3784:	01 96       	adiw	r24, 0x01	; 1
    3786:	a1 1d       	adc	r26, r1
    3788:	b1 1d       	adc	r27, r1
    378a:	3f bf       	out	0x3f, r19	; 63
    378c:	ba 2f       	mov	r27, r26
    378e:	a9 2f       	mov	r26, r25
    3790:	98 2f       	mov	r25, r24
    3792:	88 27       	eor	r24, r24
    3794:	82 0f       	add	r24, r18
    3796:	91 1d       	adc	r25, r1
    3798:	a1 1d       	adc	r26, r1
    379a:	b1 1d       	adc	r27, r1
    379c:	bc 01       	movw	r22, r24
    379e:	cd 01       	movw	r24, r26
    37a0:	96 95       	lsr	r25
    37a2:	87 95       	ror	r24
    37a4:	77 95       	ror	r23
    37a6:	67 95       	ror	r22
    37a8:	08 95       	ret

000037aa <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    37aa:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    37ac:	84 b5       	in	r24, 0x24	; 36
    37ae:	82 60       	ori	r24, 0x02	; 2
    37b0:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    37b2:	84 b5       	in	r24, 0x24	; 36
    37b4:	81 60       	ori	r24, 0x01	; 1
    37b6:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    37b8:	85 b5       	in	r24, 0x25	; 37
    37ba:	82 60       	ori	r24, 0x02	; 2
    37bc:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    37be:	85 b5       	in	r24, 0x25	; 37
    37c0:	81 60       	ori	r24, 0x01	; 1
    37c2:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    37c4:	ee e6       	ldi	r30, 0x6E	; 110
    37c6:	f0 e0       	ldi	r31, 0x00	; 0
    37c8:	80 81       	ld	r24, Z
    37ca:	81 60       	ori	r24, 0x01	; 1
    37cc:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    37ce:	e1 e8       	ldi	r30, 0x81	; 129
    37d0:	f0 e0       	ldi	r31, 0x00	; 0
    37d2:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    37d4:	80 81       	ld	r24, Z
    37d6:	82 60       	ori	r24, 0x02	; 2
    37d8:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    37da:	80 81       	ld	r24, Z
    37dc:	81 60       	ori	r24, 0x01	; 1
    37de:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    37e0:	e0 e8       	ldi	r30, 0x80	; 128
    37e2:	f0 e0       	ldi	r31, 0x00	; 0
    37e4:	80 81       	ld	r24, Z
    37e6:	81 60       	ori	r24, 0x01	; 1
    37e8:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    37ea:	e1 eb       	ldi	r30, 0xB1	; 177
    37ec:	f0 e0       	ldi	r31, 0x00	; 0
    37ee:	80 81       	ld	r24, Z
    37f0:	84 60       	ori	r24, 0x04	; 4
    37f2:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    37f4:	e0 eb       	ldi	r30, 0xB0	; 176
    37f6:	f0 e0       	ldi	r31, 0x00	; 0
    37f8:	80 81       	ld	r24, Z
    37fa:	81 60       	ori	r24, 0x01	; 1
    37fc:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    37fe:	ea e7       	ldi	r30, 0x7A	; 122
    3800:	f0 e0       	ldi	r31, 0x00	; 0
    3802:	80 81       	ld	r24, Z
    3804:	84 60       	ori	r24, 0x04	; 4
    3806:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    3808:	80 81       	ld	r24, Z
    380a:	82 60       	ori	r24, 0x02	; 2
    380c:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    380e:	80 81       	ld	r24, Z
    3810:	81 60       	ori	r24, 0x01	; 1
    3812:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    3814:	80 81       	ld	r24, Z
    3816:	80 68       	ori	r24, 0x80	; 128
    3818:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    381a:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    381e:	08 95       	ret

00003820 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    3820:	cf 93       	push	r28
    3822:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    3824:	90 e0       	ldi	r25, 0x00	; 0
    3826:	fc 01       	movw	r30, r24
    3828:	e7 5f       	subi	r30, 0xF7	; 247
    382a:	fe 4f       	sbci	r31, 0xFE	; 254
    382c:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    382e:	fc 01       	movw	r30, r24
    3830:	e3 5e       	subi	r30, 0xE3	; 227
    3832:	fe 4f       	sbci	r31, 0xFE	; 254
    3834:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    3836:	88 23       	and	r24, r24
    3838:	61 f1       	breq	.+88     	; 0x3892 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    383a:	90 e0       	ldi	r25, 0x00	; 0
    383c:	88 0f       	add	r24, r24
    383e:	99 1f       	adc	r25, r25
    3840:	fc 01       	movw	r30, r24
    3842:	eb 5b       	subi	r30, 0xBB	; 187
    3844:	fe 4f       	sbci	r31, 0xFE	; 254
    3846:	c5 91       	lpm	r28, Z+
    3848:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    384a:	fc 01       	movw	r30, r24
    384c:	e5 5c       	subi	r30, 0xC5	; 197
    384e:	fe 4f       	sbci	r31, 0xFE	; 254
    3850:	a5 91       	lpm	r26, Z+
    3852:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    3854:	61 11       	cpse	r22, r1
    3856:	09 c0       	rjmp	.+18     	; 0x386a <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    3858:	9f b7       	in	r25, 0x3f	; 63
                cli();
    385a:	f8 94       	cli
		*reg &= ~bit;
    385c:	88 81       	ld	r24, Y
    385e:	20 95       	com	r18
    3860:	82 23       	and	r24, r18
    3862:	88 83       	st	Y, r24
		*out &= ~bit;
    3864:	ec 91       	ld	r30, X
    3866:	2e 23       	and	r18, r30
    3868:	0b c0       	rjmp	.+22     	; 0x3880 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    386a:	62 30       	cpi	r22, 0x02	; 2
    386c:	61 f4       	brne	.+24     	; 0x3886 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    386e:	9f b7       	in	r25, 0x3f	; 63
                cli();
    3870:	f8 94       	cli
		*reg &= ~bit;
    3872:	88 81       	ld	r24, Y
    3874:	32 2f       	mov	r19, r18
    3876:	30 95       	com	r19
    3878:	83 23       	and	r24, r19
    387a:	88 83       	st	Y, r24
		*out |= bit;
    387c:	ec 91       	ld	r30, X
    387e:	2e 2b       	or	r18, r30
    3880:	2c 93       	st	X, r18
		SREG = oldSREG;
    3882:	9f bf       	out	0x3f, r25	; 63
    3884:	06 c0       	rjmp	.+12     	; 0x3892 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    3886:	8f b7       	in	r24, 0x3f	; 63
                cli();
    3888:	f8 94       	cli
		*reg |= bit;
    388a:	e8 81       	ld	r30, Y
    388c:	2e 2b       	or	r18, r30
    388e:	28 83       	st	Y, r18
		SREG = oldSREG;
    3890:	8f bf       	out	0x3f, r24	; 63
	}
}
    3892:	df 91       	pop	r29
    3894:	cf 91       	pop	r28
    3896:	08 95       	ret

00003898 <_Z3maplllll>:
  long diff = howbig - howsmall;
  return random(diff) + howsmall;
}

long map(long x, long in_min, long in_max, long out_min, long out_max)
{
    3898:	4f 92       	push	r4
    389a:	5f 92       	push	r5
    389c:	6f 92       	push	r6
    389e:	7f 92       	push	r7
    38a0:	af 92       	push	r10
    38a2:	bf 92       	push	r11
    38a4:	cf 92       	push	r12
    38a6:	df 92       	push	r13
    38a8:	ef 92       	push	r14
    38aa:	ff 92       	push	r15
    38ac:	0f 93       	push	r16
    38ae:	1f 93       	push	r17
    38b0:	cf 93       	push	r28
    38b2:	df 93       	push	r29
    38b4:	cd b7       	in	r28, 0x3d	; 61
    38b6:	de b7       	in	r29, 0x3e	; 62
    38b8:	29 01       	movw	r4, r18
    38ba:	3a 01       	movw	r6, r20
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    38bc:	9b 01       	movw	r18, r22
    38be:	ac 01       	movw	r20, r24
    38c0:	24 19       	sub	r18, r4
    38c2:	35 09       	sbc	r19, r5
    38c4:	46 09       	sbc	r20, r6
    38c6:	57 09       	sbc	r21, r7
    38c8:	89 89       	ldd	r24, Y+17	; 0x11
    38ca:	9a 89       	ldd	r25, Y+18	; 0x12
    38cc:	ab 89       	ldd	r26, Y+19	; 0x13
    38ce:	bc 89       	ldd	r27, Y+20	; 0x14
    38d0:	bc 01       	movw	r22, r24
    38d2:	cd 01       	movw	r24, r26
    38d4:	6a 19       	sub	r22, r10
    38d6:	7b 09       	sbc	r23, r11
    38d8:	8c 09       	sbc	r24, r12
    38da:	9d 09       	sbc	r25, r13
    38dc:	0e 94 92 1c 	call	0x3924	; 0x3924 <__mulsi3>
    38e0:	a8 01       	movw	r20, r16
    38e2:	97 01       	movw	r18, r14
    38e4:	24 19       	sub	r18, r4
    38e6:	35 09       	sbc	r19, r5
    38e8:	46 09       	sbc	r20, r6
    38ea:	57 09       	sbc	r21, r7
    38ec:	0e 94 c4 1c 	call	0x3988	; 0x3988 <__divmodsi4>
    38f0:	ca 01       	movw	r24, r20
    38f2:	b9 01       	movw	r22, r18
    38f4:	6a 0d       	add	r22, r10
    38f6:	7b 1d       	adc	r23, r11
    38f8:	8c 1d       	adc	r24, r12
    38fa:	9d 1d       	adc	r25, r13
}
    38fc:	df 91       	pop	r29
    38fe:	cf 91       	pop	r28
    3900:	1f 91       	pop	r17
    3902:	0f 91       	pop	r16
    3904:	ff 90       	pop	r15
    3906:	ef 90       	pop	r14
    3908:	df 90       	pop	r13
    390a:	cf 90       	pop	r12
    390c:	bf 90       	pop	r11
    390e:	af 90       	pop	r10
    3910:	7f 90       	pop	r7
    3912:	6f 90       	pop	r6
    3914:	5f 90       	pop	r5
    3916:	4f 90       	pop	r4
    3918:	08 95       	ret

0000391a <__unordsf2>:
    391a:	0e 94 76 16 	call	0x2cec	; 0x2cec <__fp_cmp>
    391e:	88 0b       	sbc	r24, r24
    3920:	99 0b       	sbc	r25, r25
    3922:	08 95       	ret

00003924 <__mulsi3>:
    3924:	db 01       	movw	r26, r22
    3926:	8f 93       	push	r24
    3928:	9f 93       	push	r25
    392a:	0e 94 e9 1c 	call	0x39d2	; 0x39d2 <__muluhisi3>
    392e:	bf 91       	pop	r27
    3930:	af 91       	pop	r26
    3932:	a2 9f       	mul	r26, r18
    3934:	80 0d       	add	r24, r0
    3936:	91 1d       	adc	r25, r1
    3938:	a3 9f       	mul	r26, r19
    393a:	90 0d       	add	r25, r0
    393c:	b2 9f       	mul	r27, r18
    393e:	90 0d       	add	r25, r0
    3940:	11 24       	eor	r1, r1
    3942:	08 95       	ret

00003944 <__udivmodsi4>:
    3944:	a1 e2       	ldi	r26, 0x21	; 33
    3946:	1a 2e       	mov	r1, r26
    3948:	aa 1b       	sub	r26, r26
    394a:	bb 1b       	sub	r27, r27
    394c:	fd 01       	movw	r30, r26
    394e:	0d c0       	rjmp	.+26     	; 0x396a <__udivmodsi4_ep>

00003950 <__udivmodsi4_loop>:
    3950:	aa 1f       	adc	r26, r26
    3952:	bb 1f       	adc	r27, r27
    3954:	ee 1f       	adc	r30, r30
    3956:	ff 1f       	adc	r31, r31
    3958:	a2 17       	cp	r26, r18
    395a:	b3 07       	cpc	r27, r19
    395c:	e4 07       	cpc	r30, r20
    395e:	f5 07       	cpc	r31, r21
    3960:	20 f0       	brcs	.+8      	; 0x396a <__udivmodsi4_ep>
    3962:	a2 1b       	sub	r26, r18
    3964:	b3 0b       	sbc	r27, r19
    3966:	e4 0b       	sbc	r30, r20
    3968:	f5 0b       	sbc	r31, r21

0000396a <__udivmodsi4_ep>:
    396a:	66 1f       	adc	r22, r22
    396c:	77 1f       	adc	r23, r23
    396e:	88 1f       	adc	r24, r24
    3970:	99 1f       	adc	r25, r25
    3972:	1a 94       	dec	r1
    3974:	69 f7       	brne	.-38     	; 0x3950 <__udivmodsi4_loop>
    3976:	60 95       	com	r22
    3978:	70 95       	com	r23
    397a:	80 95       	com	r24
    397c:	90 95       	com	r25
    397e:	9b 01       	movw	r18, r22
    3980:	ac 01       	movw	r20, r24
    3982:	bd 01       	movw	r22, r26
    3984:	cf 01       	movw	r24, r30
    3986:	08 95       	ret

00003988 <__divmodsi4>:
    3988:	05 2e       	mov	r0, r21
    398a:	97 fb       	bst	r25, 7
    398c:	1e f4       	brtc	.+6      	; 0x3994 <__divmodsi4+0xc>
    398e:	00 94       	com	r0
    3990:	0e 94 db 1c 	call	0x39b6	; 0x39b6 <__negsi2>
    3994:	57 fd       	sbrc	r21, 7
    3996:	07 d0       	rcall	.+14     	; 0x39a6 <__divmodsi4_neg2>
    3998:	0e 94 a2 1c 	call	0x3944	; 0x3944 <__udivmodsi4>
    399c:	07 fc       	sbrc	r0, 7
    399e:	03 d0       	rcall	.+6      	; 0x39a6 <__divmodsi4_neg2>
    39a0:	4e f4       	brtc	.+18     	; 0x39b4 <__divmodsi4_exit>
    39a2:	0c 94 db 1c 	jmp	0x39b6	; 0x39b6 <__negsi2>

000039a6 <__divmodsi4_neg2>:
    39a6:	50 95       	com	r21
    39a8:	40 95       	com	r20
    39aa:	30 95       	com	r19
    39ac:	21 95       	neg	r18
    39ae:	3f 4f       	sbci	r19, 0xFF	; 255
    39b0:	4f 4f       	sbci	r20, 0xFF	; 255
    39b2:	5f 4f       	sbci	r21, 0xFF	; 255

000039b4 <__divmodsi4_exit>:
    39b4:	08 95       	ret

000039b6 <__negsi2>:
    39b6:	90 95       	com	r25
    39b8:	80 95       	com	r24
    39ba:	70 95       	com	r23
    39bc:	61 95       	neg	r22
    39be:	7f 4f       	sbci	r23, 0xFF	; 255
    39c0:	8f 4f       	sbci	r24, 0xFF	; 255
    39c2:	9f 4f       	sbci	r25, 0xFF	; 255
    39c4:	08 95       	ret

000039c6 <__tablejump2__>:
    39c6:	ee 0f       	add	r30, r30
    39c8:	ff 1f       	adc	r31, r31
    39ca:	05 90       	lpm	r0, Z+
    39cc:	f4 91       	lpm	r31, Z
    39ce:	e0 2d       	mov	r30, r0
    39d0:	09 94       	ijmp

000039d2 <__muluhisi3>:
    39d2:	0e 94 f4 1c 	call	0x39e8	; 0x39e8 <__umulhisi3>
    39d6:	a5 9f       	mul	r26, r21
    39d8:	90 0d       	add	r25, r0
    39da:	b4 9f       	mul	r27, r20
    39dc:	90 0d       	add	r25, r0
    39de:	a4 9f       	mul	r26, r20
    39e0:	80 0d       	add	r24, r0
    39e2:	91 1d       	adc	r25, r1
    39e4:	11 24       	eor	r1, r1
    39e6:	08 95       	ret

000039e8 <__umulhisi3>:
    39e8:	a2 9f       	mul	r26, r18
    39ea:	b0 01       	movw	r22, r0
    39ec:	b3 9f       	mul	r27, r19
    39ee:	c0 01       	movw	r24, r0
    39f0:	a3 9f       	mul	r26, r19
    39f2:	70 0d       	add	r23, r0
    39f4:	81 1d       	adc	r24, r1
    39f6:	11 24       	eor	r1, r1
    39f8:	91 1d       	adc	r25, r1
    39fa:	b2 9f       	mul	r27, r18
    39fc:	70 0d       	add	r23, r0
    39fe:	81 1d       	adc	r24, r1
    3a00:	11 24       	eor	r1, r1
    3a02:	91 1d       	adc	r25, r1
    3a04:	08 95       	ret

00003a06 <atof>:
    3a06:	66 27       	eor	r22, r22
    3a08:	77 27       	eor	r23, r23
    3a0a:	0c 94 43 1d 	jmp	0x3a86	; 0x3a86 <strtod>

00003a0e <strtok>:
    3a0e:	4a e9       	ldi	r20, 0x9A	; 154
    3a10:	52 e0       	ldi	r21, 0x02	; 2
    3a12:	0e 94 1c 1d 	call	0x3a38	; 0x3a38 <strtok_r>
    3a16:	08 95       	ret

00003a18 <strcmp>:
    3a18:	fb 01       	movw	r30, r22
    3a1a:	dc 01       	movw	r26, r24
    3a1c:	8d 91       	ld	r24, X+
    3a1e:	01 90       	ld	r0, Z+
    3a20:	80 19       	sub	r24, r0
    3a22:	01 10       	cpse	r0, r1
    3a24:	d9 f3       	breq	.-10     	; 0x3a1c <strcmp+0x4>
    3a26:	99 0b       	sbc	r25, r25
    3a28:	08 95       	ret

00003a2a <strcpy>:
    3a2a:	fb 01       	movw	r30, r22
    3a2c:	dc 01       	movw	r26, r24
    3a2e:	01 90       	ld	r0, Z+
    3a30:	0d 92       	st	X+, r0
    3a32:	00 20       	and	r0, r0
    3a34:	e1 f7       	brne	.-8      	; 0x3a2e <strcpy+0x4>
    3a36:	08 95       	ret

00003a38 <strtok_r>:
    3a38:	fa 01       	movw	r30, r20
    3a3a:	a1 91       	ld	r26, Z+
    3a3c:	b0 81       	ld	r27, Z
    3a3e:	00 97       	sbiw	r24, 0x00	; 0
    3a40:	19 f4       	brne	.+6      	; 0x3a48 <strtok_r+0x10>
    3a42:	10 97       	sbiw	r26, 0x00	; 0
    3a44:	e1 f0       	breq	.+56     	; 0x3a7e <strtok_r+0x46>
    3a46:	cd 01       	movw	r24, r26
    3a48:	dc 01       	movw	r26, r24
    3a4a:	cd 01       	movw	r24, r26
    3a4c:	0d 90       	ld	r0, X+
    3a4e:	00 20       	and	r0, r0
    3a50:	11 f4       	brne	.+4      	; 0x3a56 <strtok_r+0x1e>
    3a52:	c0 01       	movw	r24, r0
    3a54:	13 c0       	rjmp	.+38     	; 0x3a7c <strtok_r+0x44>
    3a56:	fb 01       	movw	r30, r22
    3a58:	21 91       	ld	r18, Z+
    3a5a:	22 23       	and	r18, r18
    3a5c:	19 f0       	breq	.+6      	; 0x3a64 <strtok_r+0x2c>
    3a5e:	20 15       	cp	r18, r0
    3a60:	d9 f7       	brne	.-10     	; 0x3a58 <strtok_r+0x20>
    3a62:	f3 cf       	rjmp	.-26     	; 0x3a4a <strtok_r+0x12>
    3a64:	fb 01       	movw	r30, r22
    3a66:	21 91       	ld	r18, Z+
    3a68:	20 15       	cp	r18, r0
    3a6a:	19 f4       	brne	.+6      	; 0x3a72 <strtok_r+0x3a>
    3a6c:	1e 92       	st	-X, r1
    3a6e:	11 96       	adiw	r26, 0x01	; 1
    3a70:	06 c0       	rjmp	.+12     	; 0x3a7e <strtok_r+0x46>
    3a72:	22 23       	and	r18, r18
    3a74:	c1 f7       	brne	.-16     	; 0x3a66 <strtok_r+0x2e>
    3a76:	0d 90       	ld	r0, X+
    3a78:	00 20       	and	r0, r0
    3a7a:	a1 f7       	brne	.-24     	; 0x3a64 <strtok_r+0x2c>
    3a7c:	d0 01       	movw	r26, r0
    3a7e:	fa 01       	movw	r30, r20
    3a80:	a1 93       	st	Z+, r26
    3a82:	b0 83       	st	Z, r27
    3a84:	08 95       	ret

00003a86 <strtod>:
    3a86:	a0 e0       	ldi	r26, 0x00	; 0
    3a88:	b0 e0       	ldi	r27, 0x00	; 0
    3a8a:	e9 e4       	ldi	r30, 0x49	; 73
    3a8c:	fd e1       	ldi	r31, 0x1D	; 29
    3a8e:	0c 94 bb 1e 	jmp	0x3d76	; 0x3d76 <__prologue_saves__+0xc>
    3a92:	ec 01       	movw	r28, r24
    3a94:	6b 01       	movw	r12, r22
    3a96:	61 15       	cp	r22, r1
    3a98:	71 05       	cpc	r23, r1
    3a9a:	19 f0       	breq	.+6      	; 0x3aa2 <strtod+0x1c>
    3a9c:	fb 01       	movw	r30, r22
    3a9e:	91 83       	std	Z+1, r25	; 0x01
    3aa0:	80 83       	st	Z, r24
    3aa2:	7e 01       	movw	r14, r28
    3aa4:	ff ef       	ldi	r31, 0xFF	; 255
    3aa6:	ef 1a       	sub	r14, r31
    3aa8:	ff 0a       	sbc	r15, r31
    3aaa:	08 81       	ld	r16, Y
    3aac:	80 2f       	mov	r24, r16
    3aae:	90 e0       	ldi	r25, 0x00	; 0
    3ab0:	0e 94 91 1e 	call	0x3d22	; 0x3d22 <isspace>
    3ab4:	89 2b       	or	r24, r25
    3ab6:	11 f0       	breq	.+4      	; 0x3abc <strtod+0x36>
    3ab8:	e7 01       	movw	r28, r14
    3aba:	f3 cf       	rjmp	.-26     	; 0x3aa2 <strtod+0x1c>
    3abc:	0d 32       	cpi	r16, 0x2D	; 45
    3abe:	39 f4       	brne	.+14     	; 0x3ace <strtod+0x48>
    3ac0:	7e 01       	movw	r14, r28
    3ac2:	82 e0       	ldi	r24, 0x02	; 2
    3ac4:	e8 0e       	add	r14, r24
    3ac6:	f1 1c       	adc	r15, r1
    3ac8:	09 81       	ldd	r16, Y+1	; 0x01
    3aca:	11 e0       	ldi	r17, 0x01	; 1
    3acc:	08 c0       	rjmp	.+16     	; 0x3ade <strtod+0x58>
    3ace:	0b 32       	cpi	r16, 0x2B	; 43
    3ad0:	29 f4       	brne	.+10     	; 0x3adc <strtod+0x56>
    3ad2:	7e 01       	movw	r14, r28
    3ad4:	92 e0       	ldi	r25, 0x02	; 2
    3ad6:	e9 0e       	add	r14, r25
    3ad8:	f1 1c       	adc	r15, r1
    3ada:	09 81       	ldd	r16, Y+1	; 0x01
    3adc:	10 e0       	ldi	r17, 0x00	; 0
    3ade:	e7 01       	movw	r28, r14
    3ae0:	21 97       	sbiw	r28, 0x01	; 1
    3ae2:	43 e0       	ldi	r20, 0x03	; 3
    3ae4:	50 e0       	ldi	r21, 0x00	; 0
    3ae6:	66 ed       	ldi	r22, 0xD6	; 214
    3ae8:	70 e0       	ldi	r23, 0x00	; 0
    3aea:	ce 01       	movw	r24, r28
    3aec:	0e 94 9a 1e 	call	0x3d34	; 0x3d34 <strncasecmp_P>
    3af0:	89 2b       	or	r24, r25
    3af2:	c1 f4       	brne	.+48     	; 0x3b24 <strtod+0x9e>
    3af4:	23 96       	adiw	r28, 0x03	; 3
    3af6:	45 e0       	ldi	r20, 0x05	; 5
    3af8:	50 e0       	ldi	r21, 0x00	; 0
    3afa:	61 ed       	ldi	r22, 0xD1	; 209
    3afc:	70 e0       	ldi	r23, 0x00	; 0
    3afe:	ce 01       	movw	r24, r28
    3b00:	0e 94 9a 1e 	call	0x3d34	; 0x3d34 <strncasecmp_P>
    3b04:	89 2b       	or	r24, r25
    3b06:	09 f4       	brne	.+2      	; 0x3b0a <strtod+0x84>
    3b08:	25 96       	adiw	r28, 0x05	; 5
    3b0a:	c1 14       	cp	r12, r1
    3b0c:	d1 04       	cpc	r13, r1
    3b0e:	19 f0       	breq	.+6      	; 0x3b16 <strtod+0x90>
    3b10:	f6 01       	movw	r30, r12
    3b12:	d1 83       	std	Z+1, r29	; 0x01
    3b14:	c0 83       	st	Z, r28
    3b16:	11 11       	cpse	r17, r1
    3b18:	f6 c0       	rjmp	.+492    	; 0x3d06 <strtod+0x280>
    3b1a:	60 e0       	ldi	r22, 0x00	; 0
    3b1c:	70 e0       	ldi	r23, 0x00	; 0
    3b1e:	80 e8       	ldi	r24, 0x80	; 128
    3b20:	9f e7       	ldi	r25, 0x7F	; 127
    3b22:	fa c0       	rjmp	.+500    	; 0x3d18 <strtod+0x292>
    3b24:	43 e0       	ldi	r20, 0x03	; 3
    3b26:	50 e0       	ldi	r21, 0x00	; 0
    3b28:	6e ec       	ldi	r22, 0xCE	; 206
    3b2a:	70 e0       	ldi	r23, 0x00	; 0
    3b2c:	ce 01       	movw	r24, r28
    3b2e:	0e 94 9a 1e 	call	0x3d34	; 0x3d34 <strncasecmp_P>
    3b32:	89 2b       	or	r24, r25
    3b34:	59 f4       	brne	.+22     	; 0x3b4c <strtod+0xc6>
    3b36:	c1 14       	cp	r12, r1
    3b38:	d1 04       	cpc	r13, r1
    3b3a:	09 f4       	brne	.+2      	; 0x3b3e <strtod+0xb8>
    3b3c:	e9 c0       	rjmp	.+466    	; 0x3d10 <strtod+0x28a>
    3b3e:	f2 e0       	ldi	r31, 0x02	; 2
    3b40:	ef 0e       	add	r14, r31
    3b42:	f1 1c       	adc	r15, r1
    3b44:	f6 01       	movw	r30, r12
    3b46:	f1 82       	std	Z+1, r15	; 0x01
    3b48:	e0 82       	st	Z, r14
    3b4a:	e2 c0       	rjmp	.+452    	; 0x3d10 <strtod+0x28a>
    3b4c:	20 e0       	ldi	r18, 0x00	; 0
    3b4e:	30 e0       	ldi	r19, 0x00	; 0
    3b50:	a9 01       	movw	r20, r18
    3b52:	c0 e0       	ldi	r28, 0x00	; 0
    3b54:	d0 e0       	ldi	r29, 0x00	; 0
    3b56:	f7 01       	movw	r30, r14
    3b58:	80 ed       	ldi	r24, 0xD0	; 208
    3b5a:	a8 2e       	mov	r10, r24
    3b5c:	a0 0e       	add	r10, r16
    3b5e:	89 e0       	ldi	r24, 0x09	; 9
    3b60:	8a 15       	cp	r24, r10
    3b62:	30 f1       	brcs	.+76     	; 0x3bb0 <strtod+0x12a>
    3b64:	91 2f       	mov	r25, r17
    3b66:	92 60       	ori	r25, 0x02	; 2
    3b68:	b9 2e       	mov	r11, r25
    3b6a:	81 2f       	mov	r24, r17
    3b6c:	88 70       	andi	r24, 0x08	; 8
    3b6e:	12 ff       	sbrs	r17, 2
    3b70:	04 c0       	rjmp	.+8      	; 0x3b7a <strtod+0xf4>
    3b72:	81 11       	cpse	r24, r1
    3b74:	24 c0       	rjmp	.+72     	; 0x3bbe <strtod+0x138>
    3b76:	21 96       	adiw	r28, 0x01	; 1
    3b78:	22 c0       	rjmp	.+68     	; 0x3bbe <strtod+0x138>
    3b7a:	81 11       	cpse	r24, r1
    3b7c:	21 97       	sbiw	r28, 0x01	; 1
    3b7e:	a5 e0       	ldi	r26, 0x05	; 5
    3b80:	b0 e0       	ldi	r27, 0x00	; 0
    3b82:	0e 94 e9 1c 	call	0x39d2	; 0x39d2 <__muluhisi3>
    3b86:	dc 01       	movw	r26, r24
    3b88:	cb 01       	movw	r24, r22
    3b8a:	88 0f       	add	r24, r24
    3b8c:	99 1f       	adc	r25, r25
    3b8e:	aa 1f       	adc	r26, r26
    3b90:	bb 1f       	adc	r27, r27
    3b92:	9c 01       	movw	r18, r24
    3b94:	ad 01       	movw	r20, r26
    3b96:	2a 0d       	add	r18, r10
    3b98:	31 1d       	adc	r19, r1
    3b9a:	41 1d       	adc	r20, r1
    3b9c:	51 1d       	adc	r21, r1
    3b9e:	28 39       	cpi	r18, 0x98	; 152
    3ba0:	89 e9       	ldi	r24, 0x99	; 153
    3ba2:	38 07       	cpc	r19, r24
    3ba4:	48 07       	cpc	r20, r24
    3ba6:	89 e1       	ldi	r24, 0x19	; 25
    3ba8:	58 07       	cpc	r21, r24
    3baa:	48 f0       	brcs	.+18     	; 0x3bbe <strtod+0x138>
    3bac:	16 60       	ori	r17, 0x06	; 6
    3bae:	06 c0       	rjmp	.+12     	; 0x3bbc <strtod+0x136>
    3bb0:	9e ef       	ldi	r25, 0xFE	; 254
    3bb2:	a9 12       	cpse	r10, r25
    3bb4:	0a c0       	rjmp	.+20     	; 0x3bca <strtod+0x144>
    3bb6:	13 fd       	sbrc	r17, 3
    3bb8:	40 c0       	rjmp	.+128    	; 0x3c3a <strtod+0x1b4>
    3bba:	18 60       	ori	r17, 0x08	; 8
    3bbc:	b1 2e       	mov	r11, r17
    3bbe:	8f ef       	ldi	r24, 0xFF	; 255
    3bc0:	e8 1a       	sub	r14, r24
    3bc2:	f8 0a       	sbc	r15, r24
    3bc4:	00 81       	ld	r16, Z
    3bc6:	1b 2d       	mov	r17, r11
    3bc8:	c6 cf       	rjmp	.-116    	; 0x3b56 <strtod+0xd0>
    3bca:	80 2f       	mov	r24, r16
    3bcc:	8f 7d       	andi	r24, 0xDF	; 223
    3bce:	85 34       	cpi	r24, 0x45	; 69
    3bd0:	a1 f5       	brne	.+104    	; 0x3c3a <strtod+0x1b4>
    3bd2:	80 81       	ld	r24, Z
    3bd4:	8d 32       	cpi	r24, 0x2D	; 45
    3bd6:	11 f4       	brne	.+4      	; 0x3bdc <strtod+0x156>
    3bd8:	10 61       	ori	r17, 0x10	; 16
    3bda:	06 c0       	rjmp	.+12     	; 0x3be8 <strtod+0x162>
    3bdc:	8b 32       	cpi	r24, 0x2B	; 43
    3bde:	21 f0       	breq	.+8      	; 0x3be8 <strtod+0x162>
    3be0:	31 96       	adiw	r30, 0x01	; 1
    3be2:	61 e0       	ldi	r22, 0x01	; 1
    3be4:	70 e0       	ldi	r23, 0x00	; 0
    3be6:	04 c0       	rjmp	.+8      	; 0x3bf0 <strtod+0x16a>
    3be8:	81 81       	ldd	r24, Z+1	; 0x01
    3bea:	32 96       	adiw	r30, 0x02	; 2
    3bec:	62 e0       	ldi	r22, 0x02	; 2
    3bee:	70 e0       	ldi	r23, 0x00	; 0
    3bf0:	80 53       	subi	r24, 0x30	; 48
    3bf2:	8a 30       	cpi	r24, 0x0A	; 10
    3bf4:	18 f0       	brcs	.+6      	; 0x3bfc <strtod+0x176>
    3bf6:	e6 1b       	sub	r30, r22
    3bf8:	f7 0b       	sbc	r31, r23
    3bfa:	1f c0       	rjmp	.+62     	; 0x3c3a <strtod+0x1b4>
    3bfc:	60 e0       	ldi	r22, 0x00	; 0
    3bfe:	70 e0       	ldi	r23, 0x00	; 0
    3c00:	60 38       	cpi	r22, 0x80	; 128
    3c02:	9c e0       	ldi	r25, 0x0C	; 12
    3c04:	79 07       	cpc	r23, r25
    3c06:	5c f4       	brge	.+22     	; 0x3c1e <strtod+0x198>
    3c08:	db 01       	movw	r26, r22
    3c0a:	aa 0f       	add	r26, r26
    3c0c:	bb 1f       	adc	r27, r27
    3c0e:	aa 0f       	add	r26, r26
    3c10:	bb 1f       	adc	r27, r27
    3c12:	6a 0f       	add	r22, r26
    3c14:	7b 1f       	adc	r23, r27
    3c16:	66 0f       	add	r22, r22
    3c18:	77 1f       	adc	r23, r23
    3c1a:	68 0f       	add	r22, r24
    3c1c:	71 1d       	adc	r23, r1
    3c1e:	31 96       	adiw	r30, 0x01	; 1
    3c20:	df 01       	movw	r26, r30
    3c22:	11 97       	sbiw	r26, 0x01	; 1
    3c24:	8c 91       	ld	r24, X
    3c26:	80 53       	subi	r24, 0x30	; 48
    3c28:	8a 30       	cpi	r24, 0x0A	; 10
    3c2a:	50 f3       	brcs	.-44     	; 0x3c00 <strtod+0x17a>
    3c2c:	14 ff       	sbrs	r17, 4
    3c2e:	03 c0       	rjmp	.+6      	; 0x3c36 <strtod+0x1b0>
    3c30:	71 95       	neg	r23
    3c32:	61 95       	neg	r22
    3c34:	71 09       	sbc	r23, r1
    3c36:	c6 0f       	add	r28, r22
    3c38:	d7 1f       	adc	r29, r23
    3c3a:	11 ff       	sbrs	r17, 1
    3c3c:	08 c0       	rjmp	.+16     	; 0x3c4e <strtod+0x1c8>
    3c3e:	c1 14       	cp	r12, r1
    3c40:	d1 04       	cpc	r13, r1
    3c42:	29 f0       	breq	.+10     	; 0x3c4e <strtod+0x1c8>
    3c44:	cf 01       	movw	r24, r30
    3c46:	01 97       	sbiw	r24, 0x01	; 1
    3c48:	f6 01       	movw	r30, r12
    3c4a:	91 83       	std	Z+1, r25	; 0x01
    3c4c:	80 83       	st	Z, r24
    3c4e:	ca 01       	movw	r24, r20
    3c50:	b9 01       	movw	r22, r18
    3c52:	0e 94 39 16 	call	0x2c72	; 0x2c72 <__floatunsisf>
    3c56:	21 2f       	mov	r18, r17
    3c58:	23 70       	andi	r18, 0x03	; 3
    3c5a:	23 30       	cpi	r18, 0x03	; 3
    3c5c:	19 f0       	breq	.+6      	; 0x3c64 <strtod+0x1de>
    3c5e:	4b 01       	movw	r8, r22
    3c60:	5c 01       	movw	r10, r24
    3c62:	06 c0       	rjmp	.+12     	; 0x3c70 <strtod+0x1ea>
    3c64:	4b 01       	movw	r8, r22
    3c66:	5c 01       	movw	r10, r24
    3c68:	b7 fa       	bst	r11, 7
    3c6a:	b0 94       	com	r11
    3c6c:	b7 f8       	bld	r11, 7
    3c6e:	b0 94       	com	r11
    3c70:	20 e0       	ldi	r18, 0x00	; 0
    3c72:	30 e0       	ldi	r19, 0x00	; 0
    3c74:	a9 01       	movw	r20, r18
    3c76:	c5 01       	movw	r24, r10
    3c78:	b4 01       	movw	r22, r8
    3c7a:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <__cmpsf2>
    3c7e:	88 23       	and	r24, r24
    3c80:	09 f4       	brne	.+2      	; 0x3c84 <strtod+0x1fe>
    3c82:	3e c0       	rjmp	.+124    	; 0x3d00 <strtod+0x27a>
    3c84:	d7 ff       	sbrs	r29, 7
    3c86:	06 c0       	rjmp	.+12     	; 0x3c94 <strtod+0x20e>
    3c88:	d1 95       	neg	r29
    3c8a:	c1 95       	neg	r28
    3c8c:	d1 09       	sbc	r29, r1
    3c8e:	0d ee       	ldi	r16, 0xED	; 237
    3c90:	10 e0       	ldi	r17, 0x00	; 0
    3c92:	02 c0       	rjmp	.+4      	; 0x3c98 <strtod+0x212>
    3c94:	05 e0       	ldi	r16, 0x05	; 5
    3c96:	11 e0       	ldi	r17, 0x01	; 1
    3c98:	68 01       	movw	r12, r16
    3c9a:	f8 e1       	ldi	r31, 0x18	; 24
    3c9c:	cf 1a       	sub	r12, r31
    3c9e:	d1 08       	sbc	r13, r1
    3ca0:	90 e2       	ldi	r25, 0x20	; 32
    3ca2:	e9 2e       	mov	r14, r25
    3ca4:	f1 2c       	mov	r15, r1
    3ca6:	ce 15       	cp	r28, r14
    3ca8:	df 05       	cpc	r29, r15
    3caa:	74 f0       	brlt	.+28     	; 0x3cc8 <strtod+0x242>
    3cac:	f8 01       	movw	r30, r16
    3cae:	25 91       	lpm	r18, Z+
    3cb0:	35 91       	lpm	r19, Z+
    3cb2:	45 91       	lpm	r20, Z+
    3cb4:	54 91       	lpm	r21, Z
    3cb6:	c5 01       	movw	r24, r10
    3cb8:	b4 01       	movw	r22, r8
    3cba:	0e 94 1f 17 	call	0x2e3e	; 0x2e3e <__mulsf3>
    3cbe:	4b 01       	movw	r8, r22
    3cc0:	5c 01       	movw	r10, r24
    3cc2:	ce 19       	sub	r28, r14
    3cc4:	df 09       	sbc	r29, r15
    3cc6:	ef cf       	rjmp	.-34     	; 0x3ca6 <strtod+0x220>
    3cc8:	04 50       	subi	r16, 0x04	; 4
    3cca:	11 09       	sbc	r17, r1
    3ccc:	f5 94       	asr	r15
    3cce:	e7 94       	ror	r14
    3cd0:	0c 15       	cp	r16, r12
    3cd2:	1d 05       	cpc	r17, r13
    3cd4:	41 f7       	brne	.-48     	; 0x3ca6 <strtod+0x220>
    3cd6:	8a 2d       	mov	r24, r10
    3cd8:	88 0f       	add	r24, r24
    3cda:	8b 2d       	mov	r24, r11
    3cdc:	88 1f       	adc	r24, r24
    3cde:	8f 3f       	cpi	r24, 0xFF	; 255
    3ce0:	49 f0       	breq	.+18     	; 0x3cf4 <strtod+0x26e>
    3ce2:	20 e0       	ldi	r18, 0x00	; 0
    3ce4:	30 e0       	ldi	r19, 0x00	; 0
    3ce6:	a9 01       	movw	r20, r18
    3ce8:	c5 01       	movw	r24, r10
    3cea:	b4 01       	movw	r22, r8
    3cec:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <__cmpsf2>
    3cf0:	81 11       	cpse	r24, r1
    3cf2:	06 c0       	rjmp	.+12     	; 0x3d00 <strtod+0x27a>
    3cf4:	82 e2       	ldi	r24, 0x22	; 34
    3cf6:	90 e0       	ldi	r25, 0x00	; 0
    3cf8:	90 93 de 05 	sts	0x05DE, r25	; 0x8005de <errno+0x1>
    3cfc:	80 93 dd 05 	sts	0x05DD, r24	; 0x8005dd <errno>
    3d00:	c5 01       	movw	r24, r10
    3d02:	b4 01       	movw	r22, r8
    3d04:	09 c0       	rjmp	.+18     	; 0x3d18 <strtod+0x292>
    3d06:	60 e0       	ldi	r22, 0x00	; 0
    3d08:	70 e0       	ldi	r23, 0x00	; 0
    3d0a:	80 e8       	ldi	r24, 0x80	; 128
    3d0c:	9f ef       	ldi	r25, 0xFF	; 255
    3d0e:	04 c0       	rjmp	.+8      	; 0x3d18 <strtod+0x292>
    3d10:	60 e0       	ldi	r22, 0x00	; 0
    3d12:	70 e0       	ldi	r23, 0x00	; 0
    3d14:	80 ec       	ldi	r24, 0xC0	; 192
    3d16:	9f e7       	ldi	r25, 0x7F	; 127
    3d18:	cd b7       	in	r28, 0x3d	; 61
    3d1a:	de b7       	in	r29, 0x3e	; 62
    3d1c:	ec e0       	ldi	r30, 0x0C	; 12
    3d1e:	0c 94 d7 1e 	jmp	0x3dae	; 0x3dae <__epilogue_restores__+0xc>

00003d22 <isspace>:
    3d22:	91 11       	cpse	r25, r1
    3d24:	0c 94 b2 1e 	jmp	0x3d64	; 0x3d64 <__ctype_isfalse>
    3d28:	80 32       	cpi	r24, 0x20	; 32
    3d2a:	19 f0       	breq	.+6      	; 0x3d32 <isspace+0x10>
    3d2c:	89 50       	subi	r24, 0x09	; 9
    3d2e:	85 50       	subi	r24, 0x05	; 5
    3d30:	c8 f7       	brcc	.-14     	; 0x3d24 <isspace+0x2>
    3d32:	08 95       	ret

00003d34 <strncasecmp_P>:
    3d34:	fb 01       	movw	r30, r22
    3d36:	dc 01       	movw	r26, r24
    3d38:	41 50       	subi	r20, 0x01	; 1
    3d3a:	50 40       	sbci	r21, 0x00	; 0
    3d3c:	88 f0       	brcs	.+34     	; 0x3d60 <strncasecmp_P+0x2c>
    3d3e:	8d 91       	ld	r24, X+
    3d40:	81 34       	cpi	r24, 0x41	; 65
    3d42:	1c f0       	brlt	.+6      	; 0x3d4a <strncasecmp_P+0x16>
    3d44:	8b 35       	cpi	r24, 0x5B	; 91
    3d46:	0c f4       	brge	.+2      	; 0x3d4a <strncasecmp_P+0x16>
    3d48:	80 5e       	subi	r24, 0xE0	; 224
    3d4a:	65 91       	lpm	r22, Z+
    3d4c:	61 34       	cpi	r22, 0x41	; 65
    3d4e:	1c f0       	brlt	.+6      	; 0x3d56 <strncasecmp_P+0x22>
    3d50:	6b 35       	cpi	r22, 0x5B	; 91
    3d52:	0c f4       	brge	.+2      	; 0x3d56 <strncasecmp_P+0x22>
    3d54:	60 5e       	subi	r22, 0xE0	; 224
    3d56:	86 1b       	sub	r24, r22
    3d58:	61 11       	cpse	r22, r1
    3d5a:	71 f3       	breq	.-36     	; 0x3d38 <strncasecmp_P+0x4>
    3d5c:	99 0b       	sbc	r25, r25
    3d5e:	08 95       	ret
    3d60:	88 1b       	sub	r24, r24
    3d62:	fc cf       	rjmp	.-8      	; 0x3d5c <strncasecmp_P+0x28>

00003d64 <__ctype_isfalse>:
    3d64:	99 27       	eor	r25, r25
    3d66:	88 27       	eor	r24, r24

00003d68 <__ctype_istrue>:
    3d68:	08 95       	ret

00003d6a <__prologue_saves__>:
    3d6a:	2f 92       	push	r2
    3d6c:	3f 92       	push	r3
    3d6e:	4f 92       	push	r4
    3d70:	5f 92       	push	r5
    3d72:	6f 92       	push	r6
    3d74:	7f 92       	push	r7
    3d76:	8f 92       	push	r8
    3d78:	9f 92       	push	r9
    3d7a:	af 92       	push	r10
    3d7c:	bf 92       	push	r11
    3d7e:	cf 92       	push	r12
    3d80:	df 92       	push	r13
    3d82:	ef 92       	push	r14
    3d84:	ff 92       	push	r15
    3d86:	0f 93       	push	r16
    3d88:	1f 93       	push	r17
    3d8a:	cf 93       	push	r28
    3d8c:	df 93       	push	r29
    3d8e:	cd b7       	in	r28, 0x3d	; 61
    3d90:	de b7       	in	r29, 0x3e	; 62
    3d92:	ca 1b       	sub	r28, r26
    3d94:	db 0b       	sbc	r29, r27
    3d96:	0f b6       	in	r0, 0x3f	; 63
    3d98:	f8 94       	cli
    3d9a:	de bf       	out	0x3e, r29	; 62
    3d9c:	0f be       	out	0x3f, r0	; 63
    3d9e:	cd bf       	out	0x3d, r28	; 61
    3da0:	09 94       	ijmp

00003da2 <__epilogue_restores__>:
    3da2:	2a 88       	ldd	r2, Y+18	; 0x12
    3da4:	39 88       	ldd	r3, Y+17	; 0x11
    3da6:	48 88       	ldd	r4, Y+16	; 0x10
    3da8:	5f 84       	ldd	r5, Y+15	; 0x0f
    3daa:	6e 84       	ldd	r6, Y+14	; 0x0e
    3dac:	7d 84       	ldd	r7, Y+13	; 0x0d
    3dae:	8c 84       	ldd	r8, Y+12	; 0x0c
    3db0:	9b 84       	ldd	r9, Y+11	; 0x0b
    3db2:	aa 84       	ldd	r10, Y+10	; 0x0a
    3db4:	b9 84       	ldd	r11, Y+9	; 0x09
    3db6:	c8 84       	ldd	r12, Y+8	; 0x08
    3db8:	df 80       	ldd	r13, Y+7	; 0x07
    3dba:	ee 80       	ldd	r14, Y+6	; 0x06
    3dbc:	fd 80       	ldd	r15, Y+5	; 0x05
    3dbe:	0c 81       	ldd	r16, Y+4	; 0x04
    3dc0:	1b 81       	ldd	r17, Y+3	; 0x03
    3dc2:	aa 81       	ldd	r26, Y+2	; 0x02
    3dc4:	b9 81       	ldd	r27, Y+1	; 0x01
    3dc6:	ce 0f       	add	r28, r30
    3dc8:	d1 1d       	adc	r29, r1
    3dca:	0f b6       	in	r0, 0x3f	; 63
    3dcc:	f8 94       	cli
    3dce:	de bf       	out	0x3e, r29	; 62
    3dd0:	0f be       	out	0x3f, r0	; 63
    3dd2:	cd bf       	out	0x3d, r28	; 61
    3dd4:	ed 01       	movw	r28, r26
    3dd6:	08 95       	ret

00003dd8 <_exit>:
    3dd8:	f8 94       	cli

00003dda <__stop_program>:
    3dda:	ff cf       	rjmp	.-2      	; 0x3dda <__stop_program>
