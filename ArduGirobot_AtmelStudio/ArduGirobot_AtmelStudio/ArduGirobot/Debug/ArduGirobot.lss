
ArduGirobot.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001a2  00800100  000041bc  00004250  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000041bc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000242  008002a2  008002a2  000043f2  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000043f2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004450  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00001080  00000000  00000000  00004490  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0001dfe3  00000000  00000000  00005510  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000037fa  00000000  00000000  000234f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00006cc2  00000000  00000000  00026ced  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00003a10  00000000  00000000  0002d9b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00007413  00000000  00000000  000313c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00011129  00000000  00000000  000387d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001020  00000000  00000000  000498fc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 ac 00 	jmp	0x158	; 0x158 <__ctors_end>
       4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
       8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
       c:	0c 94 b4 13 	jmp	0x2768	; 0x2768 <__vector_3>
      10:	0c 94 31 14 	jmp	0x2862	; 0x2862 <__vector_4>
      14:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      18:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      1c:	0c 94 3d 10 	jmp	0x207a	; 0x207a <__vector_7>
      20:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      24:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      28:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      2c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      30:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      34:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      38:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      3c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      40:	0c 94 30 1c 	jmp	0x3860	; 0x3860 <__vector_16>
      44:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      48:	0c 94 a9 19 	jmp	0x3352	; 0x3352 <__vector_18>
      4c:	0c 94 db 19 	jmp	0x33b6	; 0x33b6 <__vector_19>
      50:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      54:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      58:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      5c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      60:	0c 94 3a 11 	jmp	0x2274	; 0x2274 <__vector_24>
      64:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      68:	ee 13       	cpse	r30, r30
      6a:	fa 13       	cpse	r31, r26
      6c:	06 14       	cp	r0, r6
      6e:	fa 13       	cpse	r31, r26
      70:	25 14       	cp	r2, r5
      72:	12 14       	cp	r1, r2
      74:	ee 13       	cpse	r30, r30
      76:	ee 13       	cpse	r30, r30
      78:	12 14       	cp	r1, r2
      7a:	25 14       	cp	r2, r5
      7c:	fa 13       	cpse	r31, r26
      7e:	06 14       	cp	r0, r6
      80:	fa 13       	cpse	r31, r26
      82:	ee 13       	cpse	r30, r30
      84:	69 14       	cp	r6, r9
      86:	75 14       	cp	r7, r5
      88:	81 14       	cp	r8, r1
      8a:	75 14       	cp	r7, r5
      8c:	a0 14       	cp	r10, r0
      8e:	8d 14       	cp	r8, r13
      90:	69 14       	cp	r6, r9
      92:	69 14       	cp	r6, r9
      94:	8d 14       	cp	r8, r13
      96:	a0 14       	cp	r10, r0
      98:	75 14       	cp	r7, r5
      9a:	81 14       	cp	r8, r1
      9c:	75 14       	cp	r7, r5
      9e:	69 14       	cp	r6, r9
      a0:	08 4a       	sbci	r16, 0xA8	; 168
      a2:	d7 3b       	cpi	r29, 0xB7	; 183
      a4:	3b ce       	rjmp	.-906    	; 0xfffffd1c <__eeprom_end+0xff7efd1c>
      a6:	01 6e       	ori	r16, 0xE1	; 225
      a8:	84 bc       	out	0x24, r8	; 36
      aa:	bf fd       	.word	0xfdbf	; ????
      ac:	c1 2f       	mov	r28, r17
      ae:	3d 6c       	ori	r19, 0xCD	; 205
      b0:	74 31       	cpi	r23, 0x14	; 20
      b2:	9a bd       	out	0x2a, r25	; 42
      b4:	56 83       	std	Z+6, r21	; 0x06
      b6:	3d da       	rcall	.-2950   	; 0xfffff532 <__eeprom_end+0xff7ef532>
      b8:	3d 00       	.word	0x003d	; ????
      ba:	c7 7f       	andi	r28, 0xF7	; 247
      bc:	11 be       	out	0x31, r1	; 49
      be:	d9 e4       	ldi	r29, 0x49	; 73
      c0:	bb 4c       	sbci	r27, 0xCB	; 203
      c2:	3e 91       	ld	r19, -X
      c4:	6b aa       	std	Y+51, r6	; 0x33
      c6:	aa be       	out	0x3a, r10	; 58
      c8:	00 00       	nop
      ca:	00 80       	ld	r0, Z
      cc:	3f 00       	.word	0x003f	; ????

000000ce <__trampolines_end>:
      ce:	4e 41       	sbci	r20, 0x1E	; 30
      d0:	4e 49       	Address 0x000000d0 is out of bounds.
.word	0xffff	; ????

000000d1 <pstr_inity>:
      d1:	49 4e 49 54 59                                      INITY

000000d6 <pstr_inf>:
      d6:	49 4e 46                                            INF

000000d9 <pwr_m10>:
      d9:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
      e9:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

000000f1 <pwr_p10>:
      f1:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
     101:	ca 1b 0e 5a ae c5 9d 74                             ...Z...t

00000109 <digital_pin_to_bit_mask_PGM>:
     109:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     119:	04 08 10 20                                         ... 

0000011d <digital_pin_to_port_PGM>:
     11d:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     12d:	03 03 03 03                                         ....

00000131 <port_to_input_PGM>:
     131:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

0000013b <port_to_output_PGM>:
     13b:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

00000145 <port_to_mode_PGM>:
     145:	00 00 00 00 24 00 27 00 2a 00 00                    ....$.'.*..

00000150 <__ctors_start>:
     150:	4a 07       	cpc	r20, r26
     152:	89 13       	cpse	r24, r25
     154:	8d 13       	cpse	r24, r29
     156:	0b 1a       	sub	r0, r27

00000158 <__ctors_end>:
     158:	11 24       	eor	r1, r1
     15a:	1f be       	out	0x3f, r1	; 63
     15c:	cf ef       	ldi	r28, 0xFF	; 255
     15e:	d8 e0       	ldi	r29, 0x08	; 8
     160:	de bf       	out	0x3e, r29	; 62
     162:	cd bf       	out	0x3d, r28	; 61

00000164 <__do_copy_data>:
     164:	12 e0       	ldi	r17, 0x02	; 2
     166:	a0 e0       	ldi	r26, 0x00	; 0
     168:	b1 e0       	ldi	r27, 0x01	; 1
     16a:	ec eb       	ldi	r30, 0xBC	; 188
     16c:	f1 e4       	ldi	r31, 0x41	; 65
     16e:	02 c0       	rjmp	.+4      	; 0x174 <__do_copy_data+0x10>
     170:	05 90       	lpm	r0, Z+
     172:	0d 92       	st	X+, r0
     174:	a2 3a       	cpi	r26, 0xA2	; 162
     176:	b1 07       	cpc	r27, r17
     178:	d9 f7       	brne	.-10     	; 0x170 <__do_copy_data+0xc>

0000017a <__do_clear_bss>:
     17a:	24 e0       	ldi	r18, 0x04	; 4
     17c:	a2 ea       	ldi	r26, 0xA2	; 162
     17e:	b2 e0       	ldi	r27, 0x02	; 2
     180:	01 c0       	rjmp	.+2      	; 0x184 <.do_clear_bss_start>

00000182 <.do_clear_bss_loop>:
     182:	1d 92       	st	X+, r1

00000184 <.do_clear_bss_start>:
     184:	a4 3e       	cpi	r26, 0xE4	; 228
     186:	b2 07       	cpc	r27, r18
     188:	e1 f7       	brne	.-8      	; 0x182 <.do_clear_bss_loop>

0000018a <__do_global_ctors>:
     18a:	10 e0       	ldi	r17, 0x00	; 0
     18c:	cc ea       	ldi	r28, 0xAC	; 172
     18e:	d0 e0       	ldi	r29, 0x00	; 0
     190:	04 c0       	rjmp	.+8      	; 0x19a <__do_global_ctors+0x10>
     192:	21 97       	sbiw	r28, 0x01	; 1
     194:	fe 01       	movw	r30, r28
     196:	0e 94 b2 1d 	call	0x3b64	; 0x3b64 <__tablejump2__>
     19a:	c8 3a       	cpi	r28, 0xA8	; 168
     19c:	d1 07       	cpc	r29, r17
     19e:	c9 f7       	brne	.-14     	; 0x192 <__do_global_ctors+0x8>
     1a0:	0e 94 39 1a 	call	0x3472	; 0x3472 <main>
     1a4:	0c 94 dc 20 	jmp	0x41b8	; 0x41b8 <_exit>

000001a8 <__bad_interrupt>:
     1a8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001ac <_Z15initPidControlsv>:

PID *Mot0_Pid;
PID *Mot1_Pid;
PID *Giro_Pid;

void initPidControls() {
     1ac:	8f 92       	push	r8
     1ae:	9f 92       	push	r9
     1b0:	af 92       	push	r10
     1b2:	bf 92       	push	r11
     1b4:	cf 92       	push	r12
     1b6:	df 92       	push	r13
     1b8:	ef 92       	push	r14
     1ba:	ff 92       	push	r15
     1bc:	0f 93       	push	r16
     1be:	1f 93       	push	r17
     1c0:	cf 93       	push	r28
     1c2:	df 93       	push	r29
    Mot0_PidCtl= new PIDConfig_e("M0",MOT0__KP,MOT0__KI,MOT0__KD,0);
     1c4:	8d e1       	ldi	r24, 0x1D	; 29
     1c6:	90 e0       	ldi	r25, 0x00	; 0
     1c8:	0e 94 48 1a 	call	0x3490	; 0x3490 <_Znwj>
     1cc:	ec 01       	movw	r28, r24
    double Input;
    double Output;

    PIDConfig_e(char* name, double kp, double ki, double kd, double setpoint)
    {
        strcpy(Name, name);
     1ce:	69 e0       	ldi	r22, 0x09	; 9
     1d0:	71 e0       	ldi	r23, 0x01	; 1
     1d2:	0e 94 05 1f 	call	0x3e0a	; 0x3e0a <strcpy>
        Kp=kp;
     1d6:	c1 2c       	mov	r12, r1
     1d8:	d1 2c       	mov	r13, r1
     1da:	80 e2       	ldi	r24, 0x20	; 32
     1dc:	e8 2e       	mov	r14, r24
     1de:	82 e4       	ldi	r24, 0x42	; 66
     1e0:	f8 2e       	mov	r15, r24
     1e2:	cd 82       	std	Y+5, r12	; 0x05
     1e4:	de 82       	std	Y+6, r13	; 0x06
     1e6:	ef 82       	std	Y+7, r14	; 0x07
     1e8:	f8 86       	std	Y+8, r15	; 0x08
        Kd=kd;
     1ea:	1d 86       	std	Y+13, r1	; 0x0d
     1ec:	1e 86       	std	Y+14, r1	; 0x0e
     1ee:	1f 86       	std	Y+15, r1	; 0x0f
     1f0:	18 8a       	std	Y+16, r1	; 0x10
        Ki=ki;
     1f2:	81 2c       	mov	r8, r1
     1f4:	91 2c       	mov	r9, r1
     1f6:	98 ec       	ldi	r25, 0xC8	; 200
     1f8:	a9 2e       	mov	r10, r25
     1fa:	92 e4       	ldi	r25, 0x42	; 66
     1fc:	b9 2e       	mov	r11, r25
     1fe:	89 86       	std	Y+9, r8	; 0x09
     200:	9a 86       	std	Y+10, r9	; 0x0a
     202:	ab 86       	std	Y+11, r10	; 0x0b
     204:	bc 86       	std	Y+12, r11	; 0x0c
        Setpoint=setpoint;
     206:	19 8a       	std	Y+17, r1	; 0x11
     208:	1a 8a       	std	Y+18, r1	; 0x12
     20a:	1b 8a       	std	Y+19, r1	; 0x13
     20c:	1c 8a       	std	Y+20, r1	; 0x14
     20e:	d0 93 14 03 	sts	0x0314, r29	; 0x800314 <Mot0_PidCtl+0x1>
     212:	c0 93 13 03 	sts	0x0313, r28	; 0x800313 <Mot0_PidCtl>
    Mot1_PidCtl= new PIDConfig_e("M1",MOT1__KP,MOT1__KI,MOT1__KD,0);
     216:	8d e1       	ldi	r24, 0x1D	; 29
     218:	90 e0       	ldi	r25, 0x00	; 0
     21a:	0e 94 48 1a 	call	0x3490	; 0x3490 <_Znwj>
     21e:	ec 01       	movw	r28, r24
    double Input;
    double Output;

    PIDConfig_e(char* name, double kp, double ki, double kd, double setpoint)
    {
        strcpy(Name, name);
     220:	6c e0       	ldi	r22, 0x0C	; 12
     222:	71 e0       	ldi	r23, 0x01	; 1
     224:	0e 94 05 1f 	call	0x3e0a	; 0x3e0a <strcpy>
        Kp=kp;
     228:	cd 82       	std	Y+5, r12	; 0x05
     22a:	de 82       	std	Y+6, r13	; 0x06
     22c:	ef 82       	std	Y+7, r14	; 0x07
     22e:	f8 86       	std	Y+8, r15	; 0x08
        Kd=kd;
     230:	1d 86       	std	Y+13, r1	; 0x0d
     232:	1e 86       	std	Y+14, r1	; 0x0e
     234:	1f 86       	std	Y+15, r1	; 0x0f
     236:	18 8a       	std	Y+16, r1	; 0x10
        Ki=ki;
     238:	89 86       	std	Y+9, r8	; 0x09
     23a:	9a 86       	std	Y+10, r9	; 0x0a
     23c:	ab 86       	std	Y+11, r10	; 0x0b
     23e:	bc 86       	std	Y+12, r11	; 0x0c
        Setpoint=setpoint;
     240:	19 8a       	std	Y+17, r1	; 0x11
     242:	1a 8a       	std	Y+18, r1	; 0x12
     244:	1b 8a       	std	Y+19, r1	; 0x13
     246:	1c 8a       	std	Y+20, r1	; 0x14
     248:	d0 93 12 03 	sts	0x0312, r29	; 0x800312 <Mot1_PidCtl+0x1>
     24c:	c0 93 11 03 	sts	0x0311, r28	; 0x800311 <Mot1_PidCtl>
    Giro_PidCtl= new PIDConfig_e("Gi",GIRO__KP,GIRO__KI,GIRO__KD,GIRO__TARGET_ANGLE);
     250:	8d e1       	ldi	r24, 0x1D	; 29
     252:	90 e0       	ldi	r25, 0x00	; 0
     254:	0e 94 48 1a 	call	0x3490	; 0x3490 <_Znwj>
     258:	ec 01       	movw	r28, r24
    double Input;
    double Output;

    PIDConfig_e(char* name, double kp, double ki, double kd, double setpoint)
    {
        strcpy(Name, name);
     25a:	6f e0       	ldi	r22, 0x0F	; 15
     25c:	71 e0       	ldi	r23, 0x01	; 1
     25e:	0e 94 05 1f 	call	0x3e0a	; 0x3e0a <strcpy>
        Kp=kp;
     262:	8d ec       	ldi	r24, 0xCD	; 205
     264:	9c ec       	ldi	r25, 0xCC	; 204
     266:	ac e4       	ldi	r26, 0x4C	; 76
     268:	bf e3       	ldi	r27, 0x3F	; 63
     26a:	8d 83       	std	Y+5, r24	; 0x05
     26c:	9e 83       	std	Y+6, r25	; 0x06
     26e:	af 83       	std	Y+7, r26	; 0x07
     270:	b8 87       	std	Y+8, r27	; 0x08
        Kd=kd;
     272:	1d 86       	std	Y+13, r1	; 0x0d
     274:	1e 86       	std	Y+14, r1	; 0x0e
     276:	1f 86       	std	Y+15, r1	; 0x0f
     278:	18 8a       	std	Y+16, r1	; 0x10
        Ki=ki;
     27a:	89 87       	std	Y+9, r24	; 0x09
     27c:	9a 87       	std	Y+10, r25	; 0x0a
     27e:	ab 87       	std	Y+11, r26	; 0x0b
     280:	bc 87       	std	Y+12, r27	; 0x0c
        Setpoint=setpoint;
     282:	80 e0       	ldi	r24, 0x00	; 0
     284:	90 e0       	ldi	r25, 0x00	; 0
     286:	a0 e4       	ldi	r26, 0x40	; 64
     288:	b0 ec       	ldi	r27, 0xC0	; 192
     28a:	89 8b       	std	Y+17, r24	; 0x11
     28c:	9a 8b       	std	Y+18, r25	; 0x12
     28e:	ab 8b       	std	Y+19, r26	; 0x13
     290:	bc 8b       	std	Y+20, r27	; 0x14
     292:	d0 93 10 03 	sts	0x0310, r29	; 0x800310 <Giro_PidCtl+0x1>
     296:	c0 93 0f 03 	sts	0x030F, r28	; 0x80030f <Giro_PidCtl>

    Mot0_Pid= new PID(&Mot0_PidCtl->Input, &Mot0_PidCtl->Output, &Mot0_PidCtl->Setpoint, Mot0_PidCtl->Kp, Mot0_PidCtl->Ki, Mot0_PidCtl->Kd, P_ON_E, DIRECT);
     29a:	8c e3       	ldi	r24, 0x3C	; 60
     29c:	90 e0       	ldi	r25, 0x00	; 0
     29e:	0e 94 48 1a 	call	0x3490	; 0x3490 <_Znwj>
     2a2:	4c 01       	movw	r8, r24
     2a4:	e0 91 13 03 	lds	r30, 0x0313	; 0x800313 <Mot0_PidCtl>
     2a8:	f0 91 14 03 	lds	r31, 0x0314	; 0x800314 <Mot0_PidCtl+0x1>
     2ac:	a1 84       	ldd	r10, Z+9	; 0x09
     2ae:	b2 84       	ldd	r11, Z+10	; 0x0a
     2b0:	c3 84       	ldd	r12, Z+11	; 0x0b
     2b2:	d4 84       	ldd	r13, Z+12	; 0x0c
     2b4:	e5 80       	ldd	r14, Z+5	; 0x05
     2b6:	f6 80       	ldd	r15, Z+6	; 0x06
     2b8:	07 81       	ldd	r16, Z+7	; 0x07
     2ba:	10 85       	ldd	r17, Z+8	; 0x08
     2bc:	9f 01       	movw	r18, r30
     2be:	2f 5e       	subi	r18, 0xEF	; 239
     2c0:	3f 4f       	sbci	r19, 0xFF	; 255
     2c2:	af 01       	movw	r20, r30
     2c4:	47 5e       	subi	r20, 0xE7	; 231
     2c6:	5f 4f       	sbci	r21, 0xFF	; 255
     2c8:	bf 01       	movw	r22, r30
     2ca:	6b 5e       	subi	r22, 0xEB	; 235
     2cc:	7f 4f       	sbci	r23, 0xFF	; 255
     2ce:	1f 92       	push	r1
     2d0:	1f 92       	push	r1
     2d2:	1f 92       	push	r1
     2d4:	c1 e0       	ldi	r28, 0x01	; 1
     2d6:	cf 93       	push	r28
     2d8:	80 89       	ldd	r24, Z+16	; 0x10
     2da:	8f 93       	push	r24
     2dc:	87 85       	ldd	r24, Z+15	; 0x0f
     2de:	8f 93       	push	r24
     2e0:	86 85       	ldd	r24, Z+14	; 0x0e
     2e2:	8f 93       	push	r24
     2e4:	85 85       	ldd	r24, Z+13	; 0x0d
     2e6:	8f 93       	push	r24
     2e8:	c4 01       	movw	r24, r8
     2ea:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <_ZN3PIDC1EPdS0_S0_dddii>
     2ee:	90 92 0e 03 	sts	0x030E, r9	; 0x80030e <Mot0_Pid+0x1>
     2f2:	80 92 0d 03 	sts	0x030D, r8	; 0x80030d <Mot0_Pid>
    Mot1_Pid= new PID(&Mot1_PidCtl->Input, &Mot1_PidCtl->Output, &Mot1_PidCtl->Setpoint, Mot1_PidCtl->Kp, Mot1_PidCtl->Ki, Mot1_PidCtl->Kd, P_ON_E, DIRECT);
     2f6:	8c e3       	ldi	r24, 0x3C	; 60
     2f8:	90 e0       	ldi	r25, 0x00	; 0
     2fa:	0e 94 48 1a 	call	0x3490	; 0x3490 <_Znwj>
     2fe:	4c 01       	movw	r8, r24
     300:	e0 91 11 03 	lds	r30, 0x0311	; 0x800311 <Mot1_PidCtl>
     304:	f0 91 12 03 	lds	r31, 0x0312	; 0x800312 <Mot1_PidCtl+0x1>
     308:	a1 84       	ldd	r10, Z+9	; 0x09
     30a:	b2 84       	ldd	r11, Z+10	; 0x0a
     30c:	c3 84       	ldd	r12, Z+11	; 0x0b
     30e:	d4 84       	ldd	r13, Z+12	; 0x0c
     310:	e5 80       	ldd	r14, Z+5	; 0x05
     312:	f6 80       	ldd	r15, Z+6	; 0x06
     314:	07 81       	ldd	r16, Z+7	; 0x07
     316:	10 85       	ldd	r17, Z+8	; 0x08
     318:	9f 01       	movw	r18, r30
     31a:	2f 5e       	subi	r18, 0xEF	; 239
     31c:	3f 4f       	sbci	r19, 0xFF	; 255
     31e:	af 01       	movw	r20, r30
     320:	47 5e       	subi	r20, 0xE7	; 231
     322:	5f 4f       	sbci	r21, 0xFF	; 255
     324:	bf 01       	movw	r22, r30
     326:	6b 5e       	subi	r22, 0xEB	; 235
     328:	7f 4f       	sbci	r23, 0xFF	; 255
     32a:	1f 92       	push	r1
     32c:	1f 92       	push	r1
     32e:	1f 92       	push	r1
     330:	cf 93       	push	r28
     332:	80 89       	ldd	r24, Z+16	; 0x10
     334:	8f 93       	push	r24
     336:	87 85       	ldd	r24, Z+15	; 0x0f
     338:	8f 93       	push	r24
     33a:	86 85       	ldd	r24, Z+14	; 0x0e
     33c:	8f 93       	push	r24
     33e:	85 85       	ldd	r24, Z+13	; 0x0d
     340:	8f 93       	push	r24
     342:	c4 01       	movw	r24, r8
     344:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <_ZN3PIDC1EPdS0_S0_dddii>
     348:	90 92 0c 03 	sts	0x030C, r9	; 0x80030c <Mot1_Pid+0x1>
     34c:	80 92 0b 03 	sts	0x030B, r8	; 0x80030b <Mot1_Pid>
    Giro_Pid= new PID(&Giro_PidCtl->Input, &Giro_PidCtl->Output, &Giro_PidCtl->Setpoint, Giro_PidCtl->Kp, Giro_PidCtl->Ki, Giro_PidCtl->Kd, P_ON_E, DIRECT);
     350:	8c e3       	ldi	r24, 0x3C	; 60
     352:	90 e0       	ldi	r25, 0x00	; 0
     354:	0e 94 48 1a 	call	0x3490	; 0x3490 <_Znwj>
     358:	4c 01       	movw	r8, r24
     35a:	e0 91 0f 03 	lds	r30, 0x030F	; 0x80030f <Giro_PidCtl>
     35e:	f0 91 10 03 	lds	r31, 0x0310	; 0x800310 <Giro_PidCtl+0x1>
     362:	a1 84       	ldd	r10, Z+9	; 0x09
     364:	b2 84       	ldd	r11, Z+10	; 0x0a
     366:	c3 84       	ldd	r12, Z+11	; 0x0b
     368:	d4 84       	ldd	r13, Z+12	; 0x0c
     36a:	e5 80       	ldd	r14, Z+5	; 0x05
     36c:	f6 80       	ldd	r15, Z+6	; 0x06
     36e:	07 81       	ldd	r16, Z+7	; 0x07
     370:	10 85       	ldd	r17, Z+8	; 0x08
     372:	9f 01       	movw	r18, r30
     374:	2f 5e       	subi	r18, 0xEF	; 239
     376:	3f 4f       	sbci	r19, 0xFF	; 255
     378:	af 01       	movw	r20, r30
     37a:	47 5e       	subi	r20, 0xE7	; 231
     37c:	5f 4f       	sbci	r21, 0xFF	; 255
     37e:	bf 01       	movw	r22, r30
     380:	6b 5e       	subi	r22, 0xEB	; 235
     382:	7f 4f       	sbci	r23, 0xFF	; 255
     384:	1f 92       	push	r1
     386:	1f 92       	push	r1
     388:	1f 92       	push	r1
     38a:	cf 93       	push	r28
     38c:	80 89       	ldd	r24, Z+16	; 0x10
     38e:	8f 93       	push	r24
     390:	87 85       	ldd	r24, Z+15	; 0x0f
     392:	8f 93       	push	r24
     394:	86 85       	ldd	r24, Z+14	; 0x0e
     396:	8f 93       	push	r24
     398:	85 85       	ldd	r24, Z+13	; 0x0d
     39a:	8f 93       	push	r24
     39c:	c4 01       	movw	r24, r8
     39e:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <_ZN3PIDC1EPdS0_S0_dddii>
     3a2:	90 92 0a 03 	sts	0x030A, r9	; 0x80030a <Giro_Pid+0x1>
     3a6:	80 92 09 03 	sts	0x0309, r8	; 0x800309 <Giro_Pid>

    Mot0_Pid->SetSampleTime(MOT0__SAMPLE_TIME);
     3aa:	65 e0       	ldi	r22, 0x05	; 5
     3ac:	70 e0       	ldi	r23, 0x00	; 0
     3ae:	80 91 0d 03 	lds	r24, 0x030D	; 0x80030d <Mot0_Pid>
     3b2:	90 91 0e 03 	lds	r25, 0x030E	; 0x80030e <Mot0_Pid+0x1>
     3b6:	0e 94 90 0b 	call	0x1720	; 0x1720 <_ZN3PID13SetSampleTimeEi>
    Mot1_Pid->SetSampleTime(MOT1__SAMPLE_TIME);
     3ba:	65 e0       	ldi	r22, 0x05	; 5
     3bc:	70 e0       	ldi	r23, 0x00	; 0
     3be:	80 91 0b 03 	lds	r24, 0x030B	; 0x80030b <Mot1_Pid>
     3c2:	90 91 0c 03 	lds	r25, 0x030C	; 0x80030c <Mot1_Pid+0x1>
     3c6:	0e 94 90 0b 	call	0x1720	; 0x1720 <_ZN3PID13SetSampleTimeEi>
    Giro_Pid->SetSampleTime(GIRO__SAMPLE_TIME);
     3ca:	65 e0       	ldi	r22, 0x05	; 5
     3cc:	70 e0       	ldi	r23, 0x00	; 0
     3ce:	80 91 09 03 	lds	r24, 0x0309	; 0x800309 <Giro_Pid>
     3d2:	90 91 0a 03 	lds	r25, 0x030A	; 0x80030a <Giro_Pid+0x1>
     3d6:	0e 94 90 0b 	call	0x1720	; 0x1720 <_ZN3PID13SetSampleTimeEi>

    Mot0_Pid->SetOutputLimits(MOT0__OUT_MIN,MOT0__OUT_MAX);
     3da:	00 e0       	ldi	r16, 0x00	; 0
     3dc:	10 e0       	ldi	r17, 0x00	; 0
     3de:	2f e7       	ldi	r18, 0x7F	; 127
     3e0:	33 e4       	ldi	r19, 0x43	; 67
     3e2:	40 e0       	ldi	r20, 0x00	; 0
     3e4:	50 e0       	ldi	r21, 0x00	; 0
     3e6:	6f e7       	ldi	r22, 0x7F	; 127
     3e8:	73 ec       	ldi	r23, 0xC3	; 195
     3ea:	80 91 0d 03 	lds	r24, 0x030D	; 0x80030d <Mot0_Pid>
     3ee:	90 91 0e 03 	lds	r25, 0x030E	; 0x80030e <Mot0_Pid+0x1>
     3f2:	0e 94 de 0b 	call	0x17bc	; 0x17bc <_ZN3PID15SetOutputLimitsEdd>
    Mot1_Pid->SetOutputLimits(MOT1__OUT_MIN,MOT1__OUT_MAX);
     3f6:	00 e0       	ldi	r16, 0x00	; 0
     3f8:	10 e0       	ldi	r17, 0x00	; 0
     3fa:	2f e7       	ldi	r18, 0x7F	; 127
     3fc:	33 e4       	ldi	r19, 0x43	; 67
     3fe:	40 e0       	ldi	r20, 0x00	; 0
     400:	50 e0       	ldi	r21, 0x00	; 0
     402:	6f e7       	ldi	r22, 0x7F	; 127
     404:	73 ec       	ldi	r23, 0xC3	; 195
     406:	80 91 0b 03 	lds	r24, 0x030B	; 0x80030b <Mot1_Pid>
     40a:	90 91 0c 03 	lds	r25, 0x030C	; 0x80030c <Mot1_Pid+0x1>
     40e:	0e 94 de 0b 	call	0x17bc	; 0x17bc <_ZN3PID15SetOutputLimitsEdd>
    Giro_Pid->SetOutputLimits(GIRO__OUT_MIN,GIRO__OUT_MAX); //min and max enc speed for a sample time of 10 ms
     412:	00 e0       	ldi	r16, 0x00	; 0
     414:	10 e0       	ldi	r17, 0x00	; 0
     416:	2c e0       	ldi	r18, 0x0C	; 12
     418:	32 e4       	ldi	r19, 0x42	; 66
     41a:	40 e0       	ldi	r20, 0x00	; 0
     41c:	50 e0       	ldi	r21, 0x00	; 0
     41e:	6c e0       	ldi	r22, 0x0C	; 12
     420:	72 ec       	ldi	r23, 0xC2	; 194
     422:	80 91 09 03 	lds	r24, 0x0309	; 0x800309 <Giro_Pid>
     426:	90 91 0a 03 	lds	r25, 0x030A	; 0x80030a <Giro_Pid+0x1>
     42a:	0e 94 de 0b 	call	0x17bc	; 0x17bc <_ZN3PID15SetOutputLimitsEdd>

    Mot0_Pid->SetMode(AUTOMATIC);
     42e:	61 e0       	ldi	r22, 0x01	; 1
     430:	70 e0       	ldi	r23, 0x00	; 0
     432:	80 91 0d 03 	lds	r24, 0x030D	; 0x80030d <Mot0_Pid>
     436:	90 91 0e 03 	lds	r25, 0x030E	; 0x80030e <Mot0_Pid+0x1>
     43a:	0e 94 a4 0c 	call	0x1948	; 0x1948 <_ZN3PID7SetModeEi>
    Mot1_Pid->SetMode(AUTOMATIC);
     43e:	61 e0       	ldi	r22, 0x01	; 1
     440:	70 e0       	ldi	r23, 0x00	; 0
     442:	80 91 0b 03 	lds	r24, 0x030B	; 0x80030b <Mot1_Pid>
     446:	90 91 0c 03 	lds	r25, 0x030C	; 0x80030c <Mot1_Pid+0x1>
     44a:	0e 94 a4 0c 	call	0x1948	; 0x1948 <_ZN3PID7SetModeEi>
    Giro_Pid->SetMode(AUTOMATIC);
     44e:	8d b7       	in	r24, 0x3d	; 61
     450:	9e b7       	in	r25, 0x3e	; 62
     452:	48 96       	adiw	r24, 0x18	; 24
     454:	0f b6       	in	r0, 0x3f	; 63
     456:	f8 94       	cli
     458:	9e bf       	out	0x3e, r25	; 62
     45a:	0f be       	out	0x3f, r0	; 63
     45c:	8d bf       	out	0x3d, r24	; 61
     45e:	61 e0       	ldi	r22, 0x01	; 1
     460:	70 e0       	ldi	r23, 0x00	; 0
     462:	80 91 09 03 	lds	r24, 0x0309	; 0x800309 <Giro_Pid>
     466:	90 91 0a 03 	lds	r25, 0x030A	; 0x80030a <Giro_Pid+0x1>

}
     46a:	df 91       	pop	r29
     46c:	cf 91       	pop	r28
     46e:	1f 91       	pop	r17
     470:	0f 91       	pop	r16
     472:	ff 90       	pop	r15
     474:	ef 90       	pop	r14
     476:	df 90       	pop	r13
     478:	cf 90       	pop	r12
     47a:	bf 90       	pop	r11
     47c:	af 90       	pop	r10
     47e:	9f 90       	pop	r9
     480:	8f 90       	pop	r8
    Mot1_Pid->SetOutputLimits(MOT1__OUT_MIN,MOT1__OUT_MAX);
    Giro_Pid->SetOutputLimits(GIRO__OUT_MIN,GIRO__OUT_MAX); //min and max enc speed for a sample time of 10 ms

    Mot0_Pid->SetMode(AUTOMATIC);
    Mot1_Pid->SetMode(AUTOMATIC);
    Giro_Pid->SetMode(AUTOMATIC);
     482:	0c 94 a4 0c 	jmp	0x1948	; 0x1948 <_ZN3PID7SetModeEi>

00000486 <_Z11PrintPidCfgP11PIDConfig_e>:
<-ENC: M0val M0dir M1val M2dir

*/


void PrintPidCfg(PIDConfig_e *cfg) {
     486:	cf 93       	push	r28
     488:	df 93       	push	r29
     48a:	ec 01       	movw	r28, r24
    Serial.print("DD: ");
     48c:	62 e1       	ldi	r22, 0x12	; 18
     48e:	71 e0       	ldi	r23, 0x01	; 1
     490:	88 e3       	ldi	r24, 0x38	; 56
     492:	94 e0       	ldi	r25, 0x04	; 4
     494:	0e 94 89 1a 	call	0x3512	; 0x3512 <_ZN5Print5printEPKc>
    Serial.print(cfg->Name);
     498:	be 01       	movw	r22, r28
     49a:	88 e3       	ldi	r24, 0x38	; 56
     49c:	94 e0       	ldi	r25, 0x04	; 4
     49e:	0e 94 89 1a 	call	0x3512	; 0x3512 <_ZN5Print5printEPKc>
    Serial.print(" ");
     4a2:	6f e1       	ldi	r22, 0x1F	; 31
     4a4:	71 e0       	ldi	r23, 0x01	; 1
     4a6:	88 e3       	ldi	r24, 0x38	; 56
     4a8:	94 e0       	ldi	r25, 0x04	; 4
     4aa:	0e 94 89 1a 	call	0x3512	; 0x3512 <_ZN5Print5printEPKc>
    Serial.print(cfg->Kp);
     4ae:	4d 81       	ldd	r20, Y+5	; 0x05
     4b0:	5e 81       	ldd	r21, Y+6	; 0x06
     4b2:	6f 81       	ldd	r22, Y+7	; 0x07
     4b4:	78 85       	ldd	r23, Y+8	; 0x08
     4b6:	22 e0       	ldi	r18, 0x02	; 2
     4b8:	30 e0       	ldi	r19, 0x00	; 0
     4ba:	88 e3       	ldi	r24, 0x38	; 56
     4bc:	94 e0       	ldi	r25, 0x04	; 4
     4be:	0e 94 2e 1c 	call	0x385c	; 0x385c <_ZN5Print5printEdi>
    Serial.print(" ");
     4c2:	6f e1       	ldi	r22, 0x1F	; 31
     4c4:	71 e0       	ldi	r23, 0x01	; 1
     4c6:	88 e3       	ldi	r24, 0x38	; 56
     4c8:	94 e0       	ldi	r25, 0x04	; 4
     4ca:	0e 94 89 1a 	call	0x3512	; 0x3512 <_ZN5Print5printEPKc>
    Serial.print(cfg->Ki);
     4ce:	49 85       	ldd	r20, Y+9	; 0x09
     4d0:	5a 85       	ldd	r21, Y+10	; 0x0a
     4d2:	6b 85       	ldd	r22, Y+11	; 0x0b
     4d4:	7c 85       	ldd	r23, Y+12	; 0x0c
     4d6:	22 e0       	ldi	r18, 0x02	; 2
     4d8:	30 e0       	ldi	r19, 0x00	; 0
     4da:	88 e3       	ldi	r24, 0x38	; 56
     4dc:	94 e0       	ldi	r25, 0x04	; 4
     4de:	0e 94 2e 1c 	call	0x385c	; 0x385c <_ZN5Print5printEdi>
    Serial.print(" ");
     4e2:	6f e1       	ldi	r22, 0x1F	; 31
     4e4:	71 e0       	ldi	r23, 0x01	; 1
     4e6:	88 e3       	ldi	r24, 0x38	; 56
     4e8:	94 e0       	ldi	r25, 0x04	; 4
     4ea:	0e 94 89 1a 	call	0x3512	; 0x3512 <_ZN5Print5printEPKc>
    Serial.print(cfg->Kd);
     4ee:	4d 85       	ldd	r20, Y+13	; 0x0d
     4f0:	5e 85       	ldd	r21, Y+14	; 0x0e
     4f2:	6f 85       	ldd	r22, Y+15	; 0x0f
     4f4:	78 89       	ldd	r23, Y+16	; 0x10
     4f6:	22 e0       	ldi	r18, 0x02	; 2
     4f8:	30 e0       	ldi	r19, 0x00	; 0
     4fa:	88 e3       	ldi	r24, 0x38	; 56
     4fc:	94 e0       	ldi	r25, 0x04	; 4
     4fe:	0e 94 2e 1c 	call	0x385c	; 0x385c <_ZN5Print5printEdi>
    Serial.print(" ");
     502:	6f e1       	ldi	r22, 0x1F	; 31
     504:	71 e0       	ldi	r23, 0x01	; 1
     506:	88 e3       	ldi	r24, 0x38	; 56
     508:	94 e0       	ldi	r25, 0x04	; 4
     50a:	0e 94 89 1a 	call	0x3512	; 0x3512 <_ZN5Print5printEPKc>
    Serial.print(cfg->Setpoint);
     50e:	49 89       	ldd	r20, Y+17	; 0x11
     510:	5a 89       	ldd	r21, Y+18	; 0x12
     512:	6b 89       	ldd	r22, Y+19	; 0x13
     514:	7c 89       	ldd	r23, Y+20	; 0x14
     516:	22 e0       	ldi	r18, 0x02	; 2
     518:	30 e0       	ldi	r19, 0x00	; 0
     51a:	88 e3       	ldi	r24, 0x38	; 56
     51c:	94 e0       	ldi	r25, 0x04	; 4
     51e:	0e 94 2e 1c 	call	0x385c	; 0x385c <_ZN5Print5printEdi>
    Serial.println(" ");
     522:	6f e1       	ldi	r22, 0x1F	; 31
     524:	71 e0       	ldi	r23, 0x01	; 1
     526:	88 e3       	ldi	r24, 0x38	; 56
     528:	94 e0       	ldi	r25, 0x04	; 4
}
     52a:	df 91       	pop	r29
     52c:	cf 91       	pop	r28
    Serial.print(cfg->Ki);
    Serial.print(" ");
    Serial.print(cfg->Kd);
    Serial.print(" ");
    Serial.print(cfg->Setpoint);
    Serial.println(" ");
     52e:	0c 94 96 1a 	jmp	0x352c	; 0x352c <_ZN5Print7printlnEPKc>

00000532 <_Z18PrintEncoderValuesv>:
}

void PrintEncoderValues() {
    Serial.print("ENC: ");
     532:	67 e1       	ldi	r22, 0x17	; 23
     534:	71 e0       	ldi	r23, 0x01	; 1
     536:	88 e3       	ldi	r24, 0x38	; 56
     538:	94 e0       	ldi	r25, 0x04	; 4
     53a:	0e 94 89 1a 	call	0x3512	; 0x3512 <_ZN5Print5printEPKc>
    Serial.print(Mot0_PidCtl->Input);
     53e:	e0 91 13 03 	lds	r30, 0x0313	; 0x800313 <Mot0_PidCtl>
     542:	f0 91 14 03 	lds	r31, 0x0314	; 0x800314 <Mot0_PidCtl+0x1>
     546:	45 89       	ldd	r20, Z+21	; 0x15
     548:	56 89       	ldd	r21, Z+22	; 0x16
     54a:	67 89       	ldd	r22, Z+23	; 0x17
     54c:	70 8d       	ldd	r23, Z+24	; 0x18
     54e:	22 e0       	ldi	r18, 0x02	; 2
     550:	30 e0       	ldi	r19, 0x00	; 0
     552:	88 e3       	ldi	r24, 0x38	; 56
     554:	94 e0       	ldi	r25, 0x04	; 4
     556:	0e 94 2e 1c 	call	0x385c	; 0x385c <_ZN5Print5printEdi>
    (Mot0_Dir==0xFFFF)?Serial.print(" 1 "):Serial.print(" 0 ");
     55a:	6d e1       	ldi	r22, 0x1D	; 29
     55c:	71 e0       	ldi	r23, 0x01	; 1
     55e:	88 e3       	ldi	r24, 0x38	; 56
     560:	94 e0       	ldi	r25, 0x04	; 4
     562:	0e 94 89 1a 	call	0x3512	; 0x3512 <_ZN5Print5printEPKc>

    Serial.print(Mot1_PidCtl->Input);
     566:	e0 91 11 03 	lds	r30, 0x0311	; 0x800311 <Mot1_PidCtl>
     56a:	f0 91 12 03 	lds	r31, 0x0312	; 0x800312 <Mot1_PidCtl+0x1>
     56e:	45 89       	ldd	r20, Z+21	; 0x15
     570:	56 89       	ldd	r21, Z+22	; 0x16
     572:	67 89       	ldd	r22, Z+23	; 0x17
     574:	70 8d       	ldd	r23, Z+24	; 0x18
     576:	22 e0       	ldi	r18, 0x02	; 2
     578:	30 e0       	ldi	r19, 0x00	; 0
     57a:	88 e3       	ldi	r24, 0x38	; 56
     57c:	94 e0       	ldi	r25, 0x04	; 4
     57e:	0e 94 2e 1c 	call	0x385c	; 0x385c <_ZN5Print5printEdi>
    (Mot1_Dir==0xFFFF)?Serial.print(" 1 "):Serial.print(" 0 ");
     582:	6d e1       	ldi	r22, 0x1D	; 29
     584:	71 e0       	ldi	r23, 0x01	; 1
     586:	88 e3       	ldi	r24, 0x38	; 56
     588:	94 e0       	ldi	r25, 0x04	; 4
     58a:	0e 94 89 1a 	call	0x3512	; 0x3512 <_ZN5Print5printEPKc>
    Serial.println(" ");
     58e:	6f e1       	ldi	r22, 0x1F	; 31
     590:	71 e0       	ldi	r23, 0x01	; 1
     592:	88 e3       	ldi	r24, 0x38	; 56
     594:	94 e0       	ldi	r25, 0x04	; 4
     596:	0c 94 96 1a 	jmp	0x352c	; 0x352c <_ZN5Print7printlnEPKc>

0000059a <_Z20PrintPidOutputValuesv>:
}

void PrintPidOutputValues() {
    Serial.print("PID: ");
     59a:	61 e2       	ldi	r22, 0x21	; 33
     59c:	71 e0       	ldi	r23, 0x01	; 1
     59e:	88 e3       	ldi	r24, 0x38	; 56
     5a0:	94 e0       	ldi	r25, 0x04	; 4
     5a2:	0e 94 89 1a 	call	0x3512	; 0x3512 <_ZN5Print5printEPKc>
    Serial.print(Mot0_PidCtl->Output);
     5a6:	e0 91 13 03 	lds	r30, 0x0313	; 0x800313 <Mot0_PidCtl>
     5aa:	f0 91 14 03 	lds	r31, 0x0314	; 0x800314 <Mot0_PidCtl+0x1>
     5ae:	41 8d       	ldd	r20, Z+25	; 0x19
     5b0:	52 8d       	ldd	r21, Z+26	; 0x1a
     5b2:	63 8d       	ldd	r22, Z+27	; 0x1b
     5b4:	74 8d       	ldd	r23, Z+28	; 0x1c
     5b6:	22 e0       	ldi	r18, 0x02	; 2
     5b8:	30 e0       	ldi	r19, 0x00	; 0
     5ba:	88 e3       	ldi	r24, 0x38	; 56
     5bc:	94 e0       	ldi	r25, 0x04	; 4
     5be:	0e 94 2e 1c 	call	0x385c	; 0x385c <_ZN5Print5printEdi>

    Serial.print(" ");
     5c2:	6f e1       	ldi	r22, 0x1F	; 31
     5c4:	71 e0       	ldi	r23, 0x01	; 1
     5c6:	88 e3       	ldi	r24, 0x38	; 56
     5c8:	94 e0       	ldi	r25, 0x04	; 4
     5ca:	0e 94 89 1a 	call	0x3512	; 0x3512 <_ZN5Print5printEPKc>
    Serial.print(Mot1_PidCtl->Output);
     5ce:	e0 91 11 03 	lds	r30, 0x0311	; 0x800311 <Mot1_PidCtl>
     5d2:	f0 91 12 03 	lds	r31, 0x0312	; 0x800312 <Mot1_PidCtl+0x1>
     5d6:	41 8d       	ldd	r20, Z+25	; 0x19
     5d8:	52 8d       	ldd	r21, Z+26	; 0x1a
     5da:	63 8d       	ldd	r22, Z+27	; 0x1b
     5dc:	74 8d       	ldd	r23, Z+28	; 0x1c
     5de:	22 e0       	ldi	r18, 0x02	; 2
     5e0:	30 e0       	ldi	r19, 0x00	; 0
     5e2:	88 e3       	ldi	r24, 0x38	; 56
     5e4:	94 e0       	ldi	r25, 0x04	; 4
     5e6:	0e 94 2e 1c 	call	0x385c	; 0x385c <_ZN5Print5printEdi>

    Serial.println(" ");
     5ea:	6f e1       	ldi	r22, 0x1F	; 31
     5ec:	71 e0       	ldi	r23, 0x01	; 1
     5ee:	88 e3       	ldi	r24, 0x38	; 56
     5f0:	94 e0       	ldi	r25, 0x04	; 4
     5f2:	0e 94 96 1a 	call	0x352c	; 0x352c <_ZN5Print7printlnEPKc>

    Serial.print("SET: ");
     5f6:	67 e2       	ldi	r22, 0x27	; 39
     5f8:	71 e0       	ldi	r23, 0x01	; 1
     5fa:	88 e3       	ldi	r24, 0x38	; 56
     5fc:	94 e0       	ldi	r25, 0x04	; 4
     5fe:	0e 94 89 1a 	call	0x3512	; 0x3512 <_ZN5Print5printEPKc>
    Serial.print(Mot0_PidCtl->Setpoint);
     602:	e0 91 13 03 	lds	r30, 0x0313	; 0x800313 <Mot0_PidCtl>
     606:	f0 91 14 03 	lds	r31, 0x0314	; 0x800314 <Mot0_PidCtl+0x1>
     60a:	41 89       	ldd	r20, Z+17	; 0x11
     60c:	52 89       	ldd	r21, Z+18	; 0x12
     60e:	63 89       	ldd	r22, Z+19	; 0x13
     610:	74 89       	ldd	r23, Z+20	; 0x14
     612:	22 e0       	ldi	r18, 0x02	; 2
     614:	30 e0       	ldi	r19, 0x00	; 0
     616:	88 e3       	ldi	r24, 0x38	; 56
     618:	94 e0       	ldi	r25, 0x04	; 4
     61a:	0e 94 2e 1c 	call	0x385c	; 0x385c <_ZN5Print5printEdi>

    Serial.print(" ");
     61e:	6f e1       	ldi	r22, 0x1F	; 31
     620:	71 e0       	ldi	r23, 0x01	; 1
     622:	88 e3       	ldi	r24, 0x38	; 56
     624:	94 e0       	ldi	r25, 0x04	; 4
     626:	0e 94 89 1a 	call	0x3512	; 0x3512 <_ZN5Print5printEPKc>
    Serial.print(Mot1_PidCtl->Setpoint);
     62a:	e0 91 11 03 	lds	r30, 0x0311	; 0x800311 <Mot1_PidCtl>
     62e:	f0 91 12 03 	lds	r31, 0x0312	; 0x800312 <Mot1_PidCtl+0x1>
     632:	41 89       	ldd	r20, Z+17	; 0x11
     634:	52 89       	ldd	r21, Z+18	; 0x12
     636:	63 89       	ldd	r22, Z+19	; 0x13
     638:	74 89       	ldd	r23, Z+20	; 0x14
     63a:	22 e0       	ldi	r18, 0x02	; 2
     63c:	30 e0       	ldi	r19, 0x00	; 0
     63e:	88 e3       	ldi	r24, 0x38	; 56
     640:	94 e0       	ldi	r25, 0x04	; 4
     642:	0e 94 2e 1c 	call	0x385c	; 0x385c <_ZN5Print5printEdi>

    Serial.println(" ");
     646:	6f e1       	ldi	r22, 0x1F	; 31
     648:	71 e0       	ldi	r23, 0x01	; 1
     64a:	88 e3       	ldi	r24, 0x38	; 56
     64c:	94 e0       	ldi	r25, 0x04	; 4
     64e:	0c 94 96 1a 	jmp	0x352c	; 0x352c <_ZN5Print7printlnEPKc>

00000652 <_Z13Ser_ParseDatav>:
bool DirUp=false;
bool DirDn=false;
bool DirRight=false;
bool DirLeft=false;

void Ser_ParseData() {
     652:	cf 92       	push	r12
     654:	df 92       	push	r13
     656:	ef 92       	push	r14
     658:	ff 92       	push	r15
     65a:	0f 93       	push	r16
     65c:	1f 93       	push	r17
     65e:	cf 93       	push	r28
     660:	df 93       	push	r29
    if (Ser_NewData==false) return;
     662:	80 91 c8 02 	lds	r24, 0x02C8	; 0x8002c8 <Ser_NewData>
     666:	88 23       	and	r24, r24
     668:	09 f4       	brne	.+2      	; 0x66c <_Z13Ser_ParseDatav+0x1a>
     66a:	d1 c1       	rjmp	.+930    	; 0xa0e <__stack+0x10f>

    char *pch;

    pch=strtok(Ser_Buffer, " ");
     66c:	6f e1       	ldi	r22, 0x1F	; 31
     66e:	71 e0       	ldi	r23, 0x01	; 1
     670:	89 ec       	ldi	r24, 0xC9	; 201
     672:	92 e0       	ldi	r25, 0x02	; 2
     674:	0e 94 f7 1e 	call	0x3dee	; 0x3dee <strtok>
     678:	ec 01       	movw	r28, r24

    if(strcmp(pch,"SP")==0) { //Set Pid
     67a:	6d e2       	ldi	r22, 0x2D	; 45
     67c:	71 e0       	ldi	r23, 0x01	; 1
     67e:	0e 94 fc 1e 	call	0x3df8	; 0x3df8 <strcmp>
     682:	89 2b       	or	r24, r25
     684:	09 f0       	breq	.+2      	; 0x688 <_Z13Ser_ParseDatav+0x36>
     686:	94 c0       	rjmp	.+296    	; 0x7b0 <_Z13Ser_ParseDatav+0x15e>
        Serial.println("Debug: SP Start");
     688:	60 e3       	ldi	r22, 0x30	; 48
     68a:	71 e0       	ldi	r23, 0x01	; 1
     68c:	88 e3       	ldi	r24, 0x38	; 56
     68e:	94 e0       	ldi	r25, 0x04	; 4
     690:	0e 94 96 1a 	call	0x352c	; 0x352c <_ZN5Print7printlnEPKc>

        pch=strtok(NULL, " ");
     694:	6f e1       	ldi	r22, 0x1F	; 31
     696:	71 e0       	ldi	r23, 0x01	; 1
     698:	80 e0       	ldi	r24, 0x00	; 0
     69a:	90 e0       	ldi	r25, 0x00	; 0
     69c:	0e 94 f7 1e 	call	0x3dee	; 0x3dee <strtok>
     6a0:	ec 01       	movw	r28, r24
        if(strcmp(pch,"M0")==0) {
     6a2:	69 e0       	ldi	r22, 0x09	; 9
     6a4:	71 e0       	ldi	r23, 0x01	; 1
     6a6:	0e 94 fc 1e 	call	0x3df8	; 0x3df8 <strcmp>
     6aa:	89 2b       	or	r24, r25
     6ac:	69 f4       	brne	.+26     	; 0x6c8 <_Z13Ser_ParseDatav+0x76>
            CfgPtr = Mot0_PidCtl;
     6ae:	80 91 13 03 	lds	r24, 0x0313	; 0x800313 <Mot0_PidCtl>
     6b2:	90 91 14 03 	lds	r25, 0x0314	; 0x800314 <Mot0_PidCtl+0x1>
     6b6:	90 93 c7 02 	sts	0x02C7, r25	; 0x8002c7 <CfgPtr+0x1>
     6ba:	80 93 c6 02 	sts	0x02C6, r24	; 0x8002c6 <CfgPtr>
            PidPtr = Mot0_Pid;
     6be:	80 91 0d 03 	lds	r24, 0x030D	; 0x80030d <Mot0_Pid>
     6c2:	90 91 0e 03 	lds	r25, 0x030E	; 0x80030e <Mot0_Pid+0x1>
     6c6:	27 c0       	rjmp	.+78     	; 0x716 <_Z13Ser_ParseDatav+0xc4>
        } else if(strcmp(pch,"M1")==0) {
     6c8:	6c e0       	ldi	r22, 0x0C	; 12
     6ca:	71 e0       	ldi	r23, 0x01	; 1
     6cc:	ce 01       	movw	r24, r28
     6ce:	0e 94 fc 1e 	call	0x3df8	; 0x3df8 <strcmp>
     6d2:	89 2b       	or	r24, r25
     6d4:	69 f4       	brne	.+26     	; 0x6f0 <_Z13Ser_ParseDatav+0x9e>
            CfgPtr = Mot1_PidCtl;
     6d6:	80 91 11 03 	lds	r24, 0x0311	; 0x800311 <Mot1_PidCtl>
     6da:	90 91 12 03 	lds	r25, 0x0312	; 0x800312 <Mot1_PidCtl+0x1>
     6de:	90 93 c7 02 	sts	0x02C7, r25	; 0x8002c7 <CfgPtr+0x1>
     6e2:	80 93 c6 02 	sts	0x02C6, r24	; 0x8002c6 <CfgPtr>
            PidPtr = Mot1_Pid;
     6e6:	80 91 0b 03 	lds	r24, 0x030B	; 0x80030b <Mot1_Pid>
     6ea:	90 91 0c 03 	lds	r25, 0x030C	; 0x80030c <Mot1_Pid+0x1>
     6ee:	13 c0       	rjmp	.+38     	; 0x716 <_Z13Ser_ParseDatav+0xc4>
        } else if(strcmp(pch,"Gi")==0) {
     6f0:	6f e0       	ldi	r22, 0x0F	; 15
     6f2:	71 e0       	ldi	r23, 0x01	; 1
     6f4:	ce 01       	movw	r24, r28
     6f6:	0e 94 fc 1e 	call	0x3df8	; 0x3df8 <strcmp>
     6fa:	89 2b       	or	r24, r25
     6fc:	81 f4       	brne	.+32     	; 0x71e <_Z13Ser_ParseDatav+0xcc>
            CfgPtr = Giro_PidCtl;
     6fe:	80 91 0f 03 	lds	r24, 0x030F	; 0x80030f <Giro_PidCtl>
     702:	90 91 10 03 	lds	r25, 0x0310	; 0x800310 <Giro_PidCtl+0x1>
     706:	90 93 c7 02 	sts	0x02C7, r25	; 0x8002c7 <CfgPtr+0x1>
     70a:	80 93 c6 02 	sts	0x02C6, r24	; 0x8002c6 <CfgPtr>
            PidPtr =  Giro_Pid;
     70e:	80 91 09 03 	lds	r24, 0x0309	; 0x800309 <Giro_Pid>
     712:	90 91 0a 03 	lds	r25, 0x030A	; 0x80030a <Giro_Pid+0x1>
     716:	90 93 c5 02 	sts	0x02C5, r25	; 0x8002c5 <PidPtr+0x1>
     71a:	80 93 c4 02 	sts	0x02C4, r24	; 0x8002c4 <PidPtr>
        }

        pch=strtok(NULL, " ");
     71e:	6f e1       	ldi	r22, 0x1F	; 31
     720:	71 e0       	ldi	r23, 0x01	; 1
     722:	80 e0       	ldi	r24, 0x00	; 0
     724:	90 e0       	ldi	r25, 0x00	; 0
     726:	0e 94 f7 1e 	call	0x3dee	; 0x3dee <strtok>
        CfgPtr->Kp=atof(pch);
     72a:	c0 91 c6 02 	lds	r28, 0x02C6	; 0x8002c6 <CfgPtr>
     72e:	d0 91 c7 02 	lds	r29, 0x02C7	; 0x8002c7 <CfgPtr+0x1>
     732:	0e 94 f3 1e 	call	0x3de6	; 0x3de6 <atof>
     736:	6d 83       	std	Y+5, r22	; 0x05
     738:	7e 83       	std	Y+6, r23	; 0x06
     73a:	8f 83       	std	Y+7, r24	; 0x07
     73c:	98 87       	std	Y+8, r25	; 0x08

        pch=strtok(NULL, " ");
     73e:	6f e1       	ldi	r22, 0x1F	; 31
     740:	71 e0       	ldi	r23, 0x01	; 1
     742:	80 e0       	ldi	r24, 0x00	; 0
     744:	90 e0       	ldi	r25, 0x00	; 0
     746:	0e 94 f7 1e 	call	0x3dee	; 0x3dee <strtok>
        CfgPtr->Ki=atof(pch);
     74a:	c0 91 c6 02 	lds	r28, 0x02C6	; 0x8002c6 <CfgPtr>
     74e:	d0 91 c7 02 	lds	r29, 0x02C7	; 0x8002c7 <CfgPtr+0x1>
     752:	0e 94 f3 1e 	call	0x3de6	; 0x3de6 <atof>
     756:	69 87       	std	Y+9, r22	; 0x09
     758:	7a 87       	std	Y+10, r23	; 0x0a
     75a:	8b 87       	std	Y+11, r24	; 0x0b
     75c:	9c 87       	std	Y+12, r25	; 0x0c

        pch=strtok(NULL, " ");
     75e:	6f e1       	ldi	r22, 0x1F	; 31
     760:	71 e0       	ldi	r23, 0x01	; 1
     762:	80 e0       	ldi	r24, 0x00	; 0
     764:	90 e0       	ldi	r25, 0x00	; 0
     766:	0e 94 f7 1e 	call	0x3dee	; 0x3dee <strtok>
        CfgPtr->Kd=atof(pch);
     76a:	c0 91 c6 02 	lds	r28, 0x02C6	; 0x8002c6 <CfgPtr>
     76e:	d0 91 c7 02 	lds	r29, 0x02C7	; 0x8002c7 <CfgPtr+0x1>
     772:	0e 94 f3 1e 	call	0x3de6	; 0x3de6 <atof>
     776:	6d 87       	std	Y+13, r22	; 0x0d
     778:	7e 87       	std	Y+14, r23	; 0x0e
     77a:	8f 87       	std	Y+15, r24	; 0x0f
     77c:	98 8b       	std	Y+16, r25	; 0x10

        PidPtr->SetTunings(CfgPtr->Kp,CfgPtr->Ki,CfgPtr->Kd);
     77e:	e0 91 c6 02 	lds	r30, 0x02C6	; 0x8002c6 <CfgPtr>
     782:	f0 91 c7 02 	lds	r31, 0x02C7	; 0x8002c7 <CfgPtr+0x1>
     786:	c5 84       	ldd	r12, Z+13	; 0x0d
     788:	d6 84       	ldd	r13, Z+14	; 0x0e
     78a:	e7 84       	ldd	r14, Z+15	; 0x0f
     78c:	f0 88       	ldd	r15, Z+16	; 0x10
     78e:	01 85       	ldd	r16, Z+9	; 0x09
     790:	12 85       	ldd	r17, Z+10	; 0x0a
     792:	23 85       	ldd	r18, Z+11	; 0x0b
     794:	34 85       	ldd	r19, Z+12	; 0x0c
     796:	45 81       	ldd	r20, Z+5	; 0x05
     798:	56 81       	ldd	r21, Z+6	; 0x06
     79a:	67 81       	ldd	r22, Z+7	; 0x07
     79c:	70 85       	ldd	r23, Z+8	; 0x08
     79e:	80 91 c4 02 	lds	r24, 0x02C4	; 0x8002c4 <PidPtr>
     7a2:	90 91 c5 02 	lds	r25, 0x02C5	; 0x8002c5 <PidPtr+0x1>
     7a6:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <_ZN3PID10SetTuningsEddd>

        Serial.println("Debug: SP Done");
     7aa:	60 e4       	ldi	r22, 0x40	; 64
     7ac:	71 e0       	ldi	r23, 0x01	; 1
     7ae:	43 c0       	rjmp	.+134    	; 0x836 <_Z13Ser_ParseDatav+0x1e4>
    } else  if(strcmp(pch,"GD")==0) { //Get Pid Data
     7b0:	6f e4       	ldi	r22, 0x4F	; 79
     7b2:	71 e0       	ldi	r23, 0x01	; 1
     7b4:	ce 01       	movw	r24, r28
     7b6:	0e 94 fc 1e 	call	0x3df8	; 0x3df8 <strcmp>
     7ba:	89 2b       	or	r24, r25
     7bc:	09 f0       	breq	.+2      	; 0x7c0 <_Z13Ser_ParseDatav+0x16e>
     7be:	40 c0       	rjmp	.+128    	; 0x840 <_Z13Ser_ParseDatav+0x1ee>
        Serial.println("Debug: GD Start");
     7c0:	62 e5       	ldi	r22, 0x52	; 82
     7c2:	71 e0       	ldi	r23, 0x01	; 1
     7c4:	88 e3       	ldi	r24, 0x38	; 56
     7c6:	94 e0       	ldi	r25, 0x04	; 4
     7c8:	0e 94 96 1a 	call	0x352c	; 0x352c <_ZN5Print7printlnEPKc>

        pch=strtok(NULL, " ");
     7cc:	6f e1       	ldi	r22, 0x1F	; 31
     7ce:	71 e0       	ldi	r23, 0x01	; 1
     7d0:	80 e0       	ldi	r24, 0x00	; 0
     7d2:	90 e0       	ldi	r25, 0x00	; 0
     7d4:	0e 94 f7 1e 	call	0x3dee	; 0x3dee <strtok>
     7d8:	ec 01       	movw	r28, r24

        if(strcmp(pch,"M0")==0) {
     7da:	69 e0       	ldi	r22, 0x09	; 9
     7dc:	71 e0       	ldi	r23, 0x01	; 1
     7de:	0e 94 fc 1e 	call	0x3df8	; 0x3df8 <strcmp>
     7e2:	89 2b       	or	r24, r25
     7e4:	29 f4       	brne	.+10     	; 0x7f0 <_Z13Ser_ParseDatav+0x19e>
            CfgPtr = Mot0_PidCtl;
     7e6:	80 91 13 03 	lds	r24, 0x0313	; 0x800313 <Mot0_PidCtl>
     7ea:	90 91 14 03 	lds	r25, 0x0314	; 0x800314 <Mot0_PidCtl+0x1>
     7ee:	17 c0       	rjmp	.+46     	; 0x81e <_Z13Ser_ParseDatav+0x1cc>
        } else if(strcmp(pch,"M1")==0) {
     7f0:	6c e0       	ldi	r22, 0x0C	; 12
     7f2:	71 e0       	ldi	r23, 0x01	; 1
     7f4:	ce 01       	movw	r24, r28
     7f6:	0e 94 fc 1e 	call	0x3df8	; 0x3df8 <strcmp>
     7fa:	89 2b       	or	r24, r25
     7fc:	29 f4       	brne	.+10     	; 0x808 <_Z13Ser_ParseDatav+0x1b6>
            CfgPtr = Mot1_PidCtl;
     7fe:	80 91 11 03 	lds	r24, 0x0311	; 0x800311 <Mot1_PidCtl>
     802:	90 91 12 03 	lds	r25, 0x0312	; 0x800312 <Mot1_PidCtl+0x1>
     806:	0b c0       	rjmp	.+22     	; 0x81e <_Z13Ser_ParseDatav+0x1cc>
        } else if(strcmp(pch,"Gi")==0) {
     808:	6f e0       	ldi	r22, 0x0F	; 15
     80a:	71 e0       	ldi	r23, 0x01	; 1
     80c:	ce 01       	movw	r24, r28
     80e:	0e 94 fc 1e 	call	0x3df8	; 0x3df8 <strcmp>
     812:	89 2b       	or	r24, r25
     814:	41 f4       	brne	.+16     	; 0x826 <_Z13Ser_ParseDatav+0x1d4>
            CfgPtr = Giro_PidCtl;
     816:	80 91 0f 03 	lds	r24, 0x030F	; 0x80030f <Giro_PidCtl>
     81a:	90 91 10 03 	lds	r25, 0x0310	; 0x800310 <Giro_PidCtl+0x1>
     81e:	90 93 c7 02 	sts	0x02C7, r25	; 0x8002c7 <CfgPtr+0x1>
     822:	80 93 c6 02 	sts	0x02C6, r24	; 0x8002c6 <CfgPtr>
        }

        PrintPidCfg(CfgPtr);
     826:	80 91 c6 02 	lds	r24, 0x02C6	; 0x8002c6 <CfgPtr>
     82a:	90 91 c7 02 	lds	r25, 0x02C7	; 0x8002c7 <CfgPtr+0x1>
     82e:	0e 94 43 02 	call	0x486	; 0x486 <_Z11PrintPidCfgP11PIDConfig_e>

        Serial.println("Debug: GD Done");
     832:	62 e6       	ldi	r22, 0x62	; 98
     834:	71 e0       	ldi	r23, 0x01	; 1
     836:	88 e3       	ldi	r24, 0x38	; 56
     838:	94 e0       	ldi	r25, 0x04	; 4
     83a:	0e 94 96 1a 	call	0x352c	; 0x352c <_ZN5Print7printlnEPKc>
     83e:	e5 c0       	rjmp	.+458    	; 0xa0a <__stack+0x10b>
    } else if(strcmp(pch,"SS")==0) { //Set  setpoint
     840:	61 e7       	ldi	r22, 0x71	; 113
     842:	71 e0       	ldi	r23, 0x01	; 1
     844:	ce 01       	movw	r24, r28
     846:	0e 94 fc 1e 	call	0x3df8	; 0x3df8 <strcmp>
     84a:	89 2b       	or	r24, r25
     84c:	09 f0       	breq	.+2      	; 0x850 <_Z13Ser_ParseDatav+0x1fe>
     84e:	4e c0       	rjmp	.+156    	; 0x8ec <_Z13Ser_ParseDatav+0x29a>
        Serial.println("Debug: SS Start");
     850:	64 e7       	ldi	r22, 0x74	; 116
     852:	71 e0       	ldi	r23, 0x01	; 1
     854:	88 e3       	ldi	r24, 0x38	; 56
     856:	94 e0       	ldi	r25, 0x04	; 4
     858:	0e 94 96 1a 	call	0x352c	; 0x352c <_ZN5Print7printlnEPKc>
        pch=strtok(NULL, " ");
     85c:	6f e1       	ldi	r22, 0x1F	; 31
     85e:	71 e0       	ldi	r23, 0x01	; 1
     860:	80 e0       	ldi	r24, 0x00	; 0
     862:	90 e0       	ldi	r25, 0x00	; 0
     864:	0e 94 f7 1e 	call	0x3dee	; 0x3dee <strtok>
     868:	ec 01       	movw	r28, r24

        if(strcmp(pch,"M0")==0) {
     86a:	69 e0       	ldi	r22, 0x09	; 9
     86c:	71 e0       	ldi	r23, 0x01	; 1
     86e:	0e 94 fc 1e 	call	0x3df8	; 0x3df8 <strcmp>
     872:	89 2b       	or	r24, r25
     874:	29 f4       	brne	.+10     	; 0x880 <_Z13Ser_ParseDatav+0x22e>
            CfgPtr = Mot0_PidCtl;
     876:	80 91 13 03 	lds	r24, 0x0313	; 0x800313 <Mot0_PidCtl>
     87a:	90 91 14 03 	lds	r25, 0x0314	; 0x800314 <Mot0_PidCtl+0x1>
     87e:	17 c0       	rjmp	.+46     	; 0x8ae <_Z13Ser_ParseDatav+0x25c>
            PidPtr = Mot0_Pid;
        } else if(strcmp(pch,"M1")==0) {
     880:	6c e0       	ldi	r22, 0x0C	; 12
     882:	71 e0       	ldi	r23, 0x01	; 1
     884:	ce 01       	movw	r24, r28
     886:	0e 94 fc 1e 	call	0x3df8	; 0x3df8 <strcmp>
     88a:	89 2b       	or	r24, r25
     88c:	29 f4       	brne	.+10     	; 0x898 <_Z13Ser_ParseDatav+0x246>
            CfgPtr = Mot1_PidCtl;
     88e:	80 91 11 03 	lds	r24, 0x0311	; 0x800311 <Mot1_PidCtl>
     892:	90 91 12 03 	lds	r25, 0x0312	; 0x800312 <Mot1_PidCtl+0x1>
     896:	0b c0       	rjmp	.+22     	; 0x8ae <_Z13Ser_ParseDatav+0x25c>
            PidPtr = Mot0_Pid;
        } else if(strcmp(pch,"Gi")==0) {
     898:	6f e0       	ldi	r22, 0x0F	; 15
     89a:	71 e0       	ldi	r23, 0x01	; 1
     89c:	ce 01       	movw	r24, r28
     89e:	0e 94 fc 1e 	call	0x3df8	; 0x3df8 <strcmp>
     8a2:	89 2b       	or	r24, r25
     8a4:	81 f4       	brne	.+32     	; 0x8c6 <_Z13Ser_ParseDatav+0x274>
            CfgPtr = Giro_PidCtl;
     8a6:	80 91 0f 03 	lds	r24, 0x030F	; 0x80030f <Giro_PidCtl>
     8aa:	90 91 10 03 	lds	r25, 0x0310	; 0x800310 <Giro_PidCtl+0x1>
     8ae:	90 93 c7 02 	sts	0x02C7, r25	; 0x8002c7 <CfgPtr+0x1>
     8b2:	80 93 c6 02 	sts	0x02C6, r24	; 0x8002c6 <CfgPtr>
            PidPtr = Mot0_Pid;
     8b6:	80 91 0d 03 	lds	r24, 0x030D	; 0x80030d <Mot0_Pid>
     8ba:	90 91 0e 03 	lds	r25, 0x030E	; 0x80030e <Mot0_Pid+0x1>
     8be:	90 93 c5 02 	sts	0x02C5, r25	; 0x8002c5 <PidPtr+0x1>
     8c2:	80 93 c4 02 	sts	0x02C4, r24	; 0x8002c4 <PidPtr>
        }

        pch=strtok(NULL, " ");
     8c6:	6f e1       	ldi	r22, 0x1F	; 31
     8c8:	71 e0       	ldi	r23, 0x01	; 1
     8ca:	80 e0       	ldi	r24, 0x00	; 0
     8cc:	90 e0       	ldi	r25, 0x00	; 0
     8ce:	0e 94 f7 1e 	call	0x3dee	; 0x3dee <strtok>

        CfgPtr->Setpoint=atof(pch);
     8d2:	c0 91 c6 02 	lds	r28, 0x02C6	; 0x8002c6 <CfgPtr>
     8d6:	d0 91 c7 02 	lds	r29, 0x02C7	; 0x8002c7 <CfgPtr+0x1>
     8da:	0e 94 f3 1e 	call	0x3de6	; 0x3de6 <atof>
     8de:	69 8b       	std	Y+17, r22	; 0x11
     8e0:	7a 8b       	std	Y+18, r23	; 0x12
     8e2:	8b 8b       	std	Y+19, r24	; 0x13
     8e4:	9c 8b       	std	Y+20, r25	; 0x14
        Serial.println("Debug: SS Done");
     8e6:	64 e8       	ldi	r22, 0x84	; 132
     8e8:	71 e0       	ldi	r23, 0x01	; 1
     8ea:	a5 cf       	rjmp	.-182    	; 0x836 <_Z13Ser_ParseDatav+0x1e4>

    }

    else if (strcmp(pch,"GC_ON")==0) {
     8ec:	63 e9       	ldi	r22, 0x93	; 147
     8ee:	71 e0       	ldi	r23, 0x01	; 1
     8f0:	ce 01       	movw	r24, r28
     8f2:	0e 94 fc 1e 	call	0x3df8	; 0x3df8 <strcmp>
     8f6:	89 2b       	or	r24, r25
     8f8:	21 f4       	brne	.+8      	; 0x902 <__stack+0x3>
        connectGiroToMot=true;
     8fa:	81 e0       	ldi	r24, 0x01	; 1
     8fc:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <connectGiroToMot>
     900:	84 c0       	rjmp	.+264    	; 0xa0a <__stack+0x10b>
    } else if (strcmp(pch,"GC_OFF")==0) {
     902:	69 e9       	ldi	r22, 0x99	; 153
     904:	71 e0       	ldi	r23, 0x01	; 1
     906:	ce 01       	movw	r24, r28
     908:	0e 94 fc 1e 	call	0x3df8	; 0x3df8 <strcmp>
     90c:	89 2b       	or	r24, r25
     90e:	99 f4       	brne	.+38     	; 0x936 <__stack+0x37>
        connectGiroToMot=false;
     910:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <connectGiroToMot>
        Mot0_PidCtl->Setpoint=0;
     914:	e0 91 13 03 	lds	r30, 0x0313	; 0x800313 <Mot0_PidCtl>
     918:	f0 91 14 03 	lds	r31, 0x0314	; 0x800314 <Mot0_PidCtl+0x1>
     91c:	11 8a       	std	Z+17, r1	; 0x11
     91e:	12 8a       	std	Z+18, r1	; 0x12
     920:	13 8a       	std	Z+19, r1	; 0x13
     922:	14 8a       	std	Z+20, r1	; 0x14
        Mot1_PidCtl->Setpoint=0;
     924:	e0 91 11 03 	lds	r30, 0x0311	; 0x800311 <Mot1_PidCtl>
     928:	f0 91 12 03 	lds	r31, 0x0312	; 0x800312 <Mot1_PidCtl+0x1>
     92c:	11 8a       	std	Z+17, r1	; 0x11
     92e:	12 8a       	std	Z+18, r1	; 0x12
     930:	13 8a       	std	Z+19, r1	; 0x13
     932:	14 8a       	std	Z+20, r1	; 0x14
     934:	6a c0       	rjmp	.+212    	; 0xa0a <__stack+0x10b>
    } else if (strcmp(pch,"GRP_ON")==0) {
     936:	60 ea       	ldi	r22, 0xA0	; 160
     938:	71 e0       	ldi	r23, 0x01	; 1
     93a:	ce 01       	movw	r24, r28
     93c:	0e 94 fc 1e 	call	0x3df8	; 0x3df8 <strcmp>
     940:	89 2b       	or	r24, r25
     942:	21 f4       	brne	.+8      	; 0x94c <__stack+0x4d>
        printRawGiro=true;
     944:	81 e0       	ldi	r24, 0x01	; 1
     946:	80 93 c3 02 	sts	0x02C3, r24	; 0x8002c3 <printRawGiro>
     94a:	5f c0       	rjmp	.+190    	; 0xa0a <__stack+0x10b>
    } else if (strcmp(pch,"GRP_OFF")==0) {
     94c:	67 ea       	ldi	r22, 0xA7	; 167
     94e:	71 e0       	ldi	r23, 0x01	; 1
     950:	ce 01       	movw	r24, r28
     952:	0e 94 fc 1e 	call	0x3df8	; 0x3df8 <strcmp>
     956:	89 2b       	or	r24, r25
     958:	19 f4       	brne	.+6      	; 0x960 <__stack+0x61>
        printRawGiro=false;
     95a:	10 92 c3 02 	sts	0x02C3, r1	; 0x8002c3 <printRawGiro>
     95e:	55 c0       	rjmp	.+170    	; 0xa0a <__stack+0x10b>
    } else if (strcmp(pch,"MP_ON")==0) {
     960:	6f ea       	ldi	r22, 0xAF	; 175
     962:	71 e0       	ldi	r23, 0x01	; 1
     964:	ce 01       	movw	r24, r28
     966:	0e 94 fc 1e 	call	0x3df8	; 0x3df8 <strcmp>
     96a:	89 2b       	or	r24, r25
     96c:	21 f4       	brne	.+8      	; 0x976 <__stack+0x77>
        printMotPid=true;
     96e:	81 e0       	ldi	r24, 0x01	; 1
     970:	80 93 c2 02 	sts	0x02C2, r24	; 0x8002c2 <printMotPid>
     974:	4a c0       	rjmp	.+148    	; 0xa0a <__stack+0x10b>
    } else if (strcmp(pch,"MP_OFF")==0) {
     976:	65 eb       	ldi	r22, 0xB5	; 181
     978:	71 e0       	ldi	r23, 0x01	; 1
     97a:	ce 01       	movw	r24, r28
     97c:	0e 94 fc 1e 	call	0x3df8	; 0x3df8 <strcmp>
     980:	89 2b       	or	r24, r25
     982:	19 f4       	brne	.+6      	; 0x98a <__stack+0x8b>
        printMotPid=false;
     984:	10 92 c2 02 	sts	0x02C2, r1	; 0x8002c2 <printMotPid>
     988:	40 c0       	rjmp	.+128    	; 0xa0a <__stack+0x10b>
    } else if (strcmp(pch,"GP_ON")==0) {
     98a:	6c eb       	ldi	r22, 0xBC	; 188
     98c:	71 e0       	ldi	r23, 0x01	; 1
     98e:	ce 01       	movw	r24, r28
     990:	0e 94 fc 1e 	call	0x3df8	; 0x3df8 <strcmp>
     994:	89 2b       	or	r24, r25
     996:	21 f4       	brne	.+8      	; 0x9a0 <__stack+0xa1>
        printGiroPid=true;
     998:	81 e0       	ldi	r24, 0x01	; 1
     99a:	80 93 c1 02 	sts	0x02C1, r24	; 0x8002c1 <printGiroPid>
     99e:	35 c0       	rjmp	.+106    	; 0xa0a <__stack+0x10b>
    } else if (strcmp(pch,"GP_OFF")==0) {
     9a0:	62 ec       	ldi	r22, 0xC2	; 194
     9a2:	71 e0       	ldi	r23, 0x01	; 1
     9a4:	ce 01       	movw	r24, r28
     9a6:	0e 94 fc 1e 	call	0x3df8	; 0x3df8 <strcmp>
     9aa:	89 2b       	or	r24, r25
     9ac:	19 f4       	brne	.+6      	; 0x9b4 <__stack+0xb5>
        printGiroPid=false;
     9ae:	10 92 c1 02 	sts	0x02C1, r1	; 0x8002c1 <printGiroPid>
     9b2:	2b c0       	rjmp	.+86     	; 0xa0a <__stack+0x10b>
    }

    else if (strcmp(pch,"XU")==0) {
     9b4:	69 ec       	ldi	r22, 0xC9	; 201
     9b6:	71 e0       	ldi	r23, 0x01	; 1
     9b8:	ce 01       	movw	r24, r28
     9ba:	0e 94 fc 1e 	call	0x3df8	; 0x3df8 <strcmp>
     9be:	89 2b       	or	r24, r25
     9c0:	21 f4       	brne	.+8      	; 0x9ca <__stack+0xcb>
        DirUp=true;
     9c2:	81 e0       	ldi	r24, 0x01	; 1
     9c4:	80 93 c0 02 	sts	0x02C0, r24	; 0x8002c0 <DirUp>
     9c8:	20 c0       	rjmp	.+64     	; 0xa0a <__stack+0x10b>
    } else if (strcmp(pch,"XD")==0) {
     9ca:	6c ec       	ldi	r22, 0xCC	; 204
     9cc:	71 e0       	ldi	r23, 0x01	; 1
     9ce:	ce 01       	movw	r24, r28
     9d0:	0e 94 fc 1e 	call	0x3df8	; 0x3df8 <strcmp>
     9d4:	89 2b       	or	r24, r25
     9d6:	21 f4       	brne	.+8      	; 0x9e0 <__stack+0xe1>
        DirDn=true;
     9d8:	81 e0       	ldi	r24, 0x01	; 1
     9da:	80 93 bf 02 	sts	0x02BF, r24	; 0x8002bf <DirDn>
     9de:	15 c0       	rjmp	.+42     	; 0xa0a <__stack+0x10b>
    } else if (strcmp(pch,"XR")==0) {
     9e0:	6f ec       	ldi	r22, 0xCF	; 207
     9e2:	71 e0       	ldi	r23, 0x01	; 1
     9e4:	ce 01       	movw	r24, r28
     9e6:	0e 94 fc 1e 	call	0x3df8	; 0x3df8 <strcmp>
     9ea:	89 2b       	or	r24, r25
     9ec:	21 f4       	brne	.+8      	; 0x9f6 <__stack+0xf7>
        DirRight=true;
     9ee:	81 e0       	ldi	r24, 0x01	; 1
     9f0:	80 93 be 02 	sts	0x02BE, r24	; 0x8002be <DirRight>
     9f4:	0a c0       	rjmp	.+20     	; 0xa0a <__stack+0x10b>
    } else if (strcmp(pch,"XL")==0) {
     9f6:	62 ed       	ldi	r22, 0xD2	; 210
     9f8:	71 e0       	ldi	r23, 0x01	; 1
     9fa:	ce 01       	movw	r24, r28
     9fc:	0e 94 fc 1e 	call	0x3df8	; 0x3df8 <strcmp>
     a00:	89 2b       	or	r24, r25
     a02:	19 f4       	brne	.+6      	; 0xa0a <__stack+0x10b>
        DirLeft=true;
     a04:	81 e0       	ldi	r24, 0x01	; 1
     a06:	80 93 bd 02 	sts	0x02BD, r24	; 0x8002bd <DirLeft>
    }


    Ser_NewData=false;
     a0a:	10 92 c8 02 	sts	0x02C8, r1	; 0x8002c8 <Ser_NewData>
}
     a0e:	df 91       	pop	r29
     a10:	cf 91       	pop	r28
     a12:	1f 91       	pop	r17
     a14:	0f 91       	pop	r16
     a16:	ff 90       	pop	r15
     a18:	ef 90       	pop	r14
     a1a:	df 90       	pop	r13
     a1c:	cf 90       	pop	r12
     a1e:	08 95       	ret

00000a20 <_Z19UpdateEncoderValuesv>:


void UpdateEncoderValues() {
     a20:	cf 93       	push	r28
     a22:	df 93       	push	r29
    Mot0_PidCtl->Input=Mot0_Enc;
     a24:	c0 91 13 03 	lds	r28, 0x0313	; 0x800313 <Mot0_PidCtl>
     a28:	d0 91 14 03 	lds	r29, 0x0314	; 0x800314 <Mot0_PidCtl+0x1>
     a2c:	60 91 34 04 	lds	r22, 0x0434	; 0x800434 <Mot0_Enc>
     a30:	70 91 35 04 	lds	r23, 0x0435	; 0x800435 <Mot0_Enc+0x1>
     a34:	80 91 36 04 	lds	r24, 0x0436	; 0x800436 <Mot0_Enc+0x2>
     a38:	90 91 37 04 	lds	r25, 0x0437	; 0x800437 <Mot0_Enc+0x3>
     a3c:	0e 94 1a 17 	call	0x2e34	; 0x2e34 <__floatsisf>
     a40:	6d 8b       	std	Y+21, r22	; 0x15
     a42:	7e 8b       	std	Y+22, r23	; 0x16
     a44:	8f 8b       	std	Y+23, r24	; 0x17
     a46:	98 8f       	std	Y+24, r25	; 0x18
    Mot1_PidCtl->Input=Mot1_Enc;
     a48:	c0 91 11 03 	lds	r28, 0x0311	; 0x800311 <Mot1_PidCtl>
     a4c:	d0 91 12 03 	lds	r29, 0x0312	; 0x800312 <Mot1_PidCtl+0x1>
     a50:	60 91 30 04 	lds	r22, 0x0430	; 0x800430 <Mot1_Enc>
     a54:	70 91 31 04 	lds	r23, 0x0431	; 0x800431 <Mot1_Enc+0x1>
     a58:	80 91 32 04 	lds	r24, 0x0432	; 0x800432 <Mot1_Enc+0x2>
     a5c:	90 91 33 04 	lds	r25, 0x0433	; 0x800433 <Mot1_Enc+0x3>
     a60:	0e 94 1a 17 	call	0x2e34	; 0x2e34 <__floatsisf>
     a64:	6d 8b       	std	Y+21, r22	; 0x15
     a66:	7e 8b       	std	Y+22, r23	; 0x16
     a68:	8f 8b       	std	Y+23, r24	; 0x17
     a6a:	98 8f       	std	Y+24, r25	; 0x18

    Mot0_Enc=0;
     a6c:	10 92 34 04 	sts	0x0434, r1	; 0x800434 <Mot0_Enc>
     a70:	10 92 35 04 	sts	0x0435, r1	; 0x800435 <Mot0_Enc+0x1>
     a74:	10 92 36 04 	sts	0x0436, r1	; 0x800436 <Mot0_Enc+0x2>
     a78:	10 92 37 04 	sts	0x0437, r1	; 0x800437 <Mot0_Enc+0x3>
    Mot1_Enc=0;
     a7c:	10 92 30 04 	sts	0x0430, r1	; 0x800430 <Mot1_Enc>
     a80:	10 92 31 04 	sts	0x0431, r1	; 0x800431 <Mot1_Enc+0x1>
     a84:	10 92 32 04 	sts	0x0432, r1	; 0x800432 <Mot1_Enc+0x2>
     a88:	10 92 33 04 	sts	0x0433, r1	; 0x800433 <Mot1_Enc+0x3>
}
     a8c:	df 91       	pop	r29
     a8e:	cf 91       	pop	r28
     a90:	08 95       	ret

00000a92 <_Z13Giro_ReadDatav>:

unsigned long Giro_currTime;
unsigned long Giro_loopTime;
unsigned long Giro_prevTime;

void Giro_ReadData() {
     a92:	8f 92       	push	r8
     a94:	9f 92       	push	r9
     a96:	af 92       	push	r10
     a98:	bf 92       	push	r11
     a9a:	cf 92       	push	r12
     a9c:	df 92       	push	r13
     a9e:	ef 92       	push	r14
     aa0:	ff 92       	push	r15
     aa2:	0f 93       	push	r16
     aa4:	1f 93       	push	r17
     aa6:	cf 93       	push	r28
     aa8:	df 93       	push	r29

    Giro_currTime = millis();
     aaa:	0e 94 76 1c 	call	0x38ec	; 0x38ec <millis>
     aae:	60 93 b9 02 	sts	0x02B9, r22	; 0x8002b9 <Giro_currTime>
     ab2:	70 93 ba 02 	sts	0x02BA, r23	; 0x8002ba <Giro_currTime+0x1>
     ab6:	80 93 bb 02 	sts	0x02BB, r24	; 0x8002bb <Giro_currTime+0x2>
     aba:	90 93 bc 02 	sts	0x02BC, r25	; 0x8002bc <Giro_currTime+0x3>
    Giro_loopTime = Giro_currTime - Giro_prevTime;
     abe:	c0 90 b1 02 	lds	r12, 0x02B1	; 0x8002b1 <Giro_prevTime>
     ac2:	d0 90 b2 02 	lds	r13, 0x02B2	; 0x8002b2 <Giro_prevTime+0x1>
     ac6:	e0 90 b3 02 	lds	r14, 0x02B3	; 0x8002b3 <Giro_prevTime+0x2>
     aca:	f0 90 b4 02 	lds	r15, 0x02B4	; 0x8002b4 <Giro_prevTime+0x3>
     ace:	9b 01       	movw	r18, r22
     ad0:	ac 01       	movw	r20, r24
     ad2:	2c 19       	sub	r18, r12
     ad4:	3d 09       	sbc	r19, r13
     ad6:	4e 09       	sbc	r20, r14
     ad8:	5f 09       	sbc	r21, r15
     ada:	20 93 b5 02 	sts	0x02B5, r18	; 0x8002b5 <Giro_loopTime>
     ade:	30 93 b6 02 	sts	0x02B6, r19	; 0x8002b6 <Giro_loopTime+0x1>
     ae2:	40 93 b7 02 	sts	0x02B7, r20	; 0x8002b7 <Giro_loopTime+0x2>
     ae6:	50 93 b8 02 	sts	0x02B8, r21	; 0x8002b8 <Giro_loopTime+0x3>
    Giro_prevTime = Giro_currTime;
     aea:	60 93 b1 02 	sts	0x02B1, r22	; 0x8002b1 <Giro_prevTime>
     aee:	70 93 b2 02 	sts	0x02B2, r23	; 0x8002b2 <Giro_prevTime+0x1>
     af2:	80 93 b3 02 	sts	0x02B3, r24	; 0x8002b3 <Giro_prevTime+0x2>
     af6:	90 93 b4 02 	sts	0x02B4, r25	; 0x8002b4 <Giro_prevTime+0x3>

    // read acceleration and gyroscope values
    Giro_AccY = mpu.getAccelerationY();
     afa:	86 e3       	ldi	r24, 0x36	; 54
     afc:	93 e0       	ldi	r25, 0x03	; 3
     afe:	0e 94 4e 0f 	call	0x1e9c	; 0x1e9c <_ZN7MPU605016getAccelerationYEv>
     b02:	90 93 35 03 	sts	0x0335, r25	; 0x800335 <Giro_AccY+0x1>
     b06:	80 93 34 03 	sts	0x0334, r24	; 0x800334 <Giro_AccY>
    Giro_AccZ = mpu.getAccelerationZ();
     b0a:	86 e3       	ldi	r24, 0x36	; 54
     b0c:	93 e0       	ldi	r25, 0x03	; 3
     b0e:	0e 94 69 0f 	call	0x1ed2	; 0x1ed2 <_ZN7MPU605016getAccelerationZEv>
     b12:	90 93 33 03 	sts	0x0333, r25	; 0x800333 <Giro_AccZ+0x1>
     b16:	80 93 32 03 	sts	0x0332, r24	; 0x800332 <Giro_AccZ>
    Giro_RotX = mpu.getRotationX();
     b1a:	86 e3       	ldi	r24, 0x36	; 54
     b1c:	93 e0       	ldi	r25, 0x03	; 3
     b1e:	0e 94 84 0f 	call	0x1f08	; 0x1f08 <_ZN7MPU605012getRotationXEv>
     b22:	ec 01       	movw	r28, r24
     b24:	90 93 31 03 	sts	0x0331, r25	; 0x800331 <Giro_RotX+0x1>
     b28:	80 93 30 03 	sts	0x0330, r24	; 0x800330 <Giro_RotX>


    Giro_AccAngle = atan2(Giro_AccY, Giro_AccZ)*RAD_TO_DEG;
     b2c:	60 91 32 03 	lds	r22, 0x0332	; 0x800332 <Giro_AccZ>
     b30:	70 91 33 03 	lds	r23, 0x0333	; 0x800333 <Giro_AccZ+0x1>
     b34:	07 2e       	mov	r0, r23
     b36:	00 0c       	add	r0, r0
     b38:	88 0b       	sbc	r24, r24
     b3a:	99 0b       	sbc	r25, r25
     b3c:	0e 94 1a 17 	call	0x2e34	; 0x2e34 <__floatsisf>
     b40:	6b 01       	movw	r12, r22
     b42:	7c 01       	movw	r14, r24
     b44:	60 91 34 03 	lds	r22, 0x0334	; 0x800334 <Giro_AccY>
     b48:	70 91 35 03 	lds	r23, 0x0335	; 0x800335 <Giro_AccY+0x1>
     b4c:	07 2e       	mov	r0, r23
     b4e:	00 0c       	add	r0, r0
     b50:	88 0b       	sbc	r24, r24
     b52:	99 0b       	sbc	r25, r25
     b54:	0e 94 1a 17 	call	0x2e34	; 0x2e34 <__floatsisf>
     b58:	a7 01       	movw	r20, r14
     b5a:	96 01       	movw	r18, r12
     b5c:	0e 94 0c 16 	call	0x2c18	; 0x2c18 <atan2>
     b60:	21 ee       	ldi	r18, 0xE1	; 225
     b62:	3e e2       	ldi	r19, 0x2E	; 46
     b64:	45 e6       	ldi	r20, 0x65	; 101
     b66:	52 e4       	ldi	r21, 0x42	; 66
     b68:	0e 94 fe 17 	call	0x2ffc	; 0x2ffc <__mulsf3>
     b6c:	60 93 2a 03 	sts	0x032A, r22	; 0x80032a <Giro_AccAngle>
     b70:	70 93 2b 03 	sts	0x032B, r23	; 0x80032b <Giro_AccAngle+0x1>
     b74:	80 93 2c 03 	sts	0x032C, r24	; 0x80032c <Giro_AccAngle+0x2>
     b78:	90 93 2d 03 	sts	0x032D, r25	; 0x80032d <Giro_AccAngle+0x3>

    Giro_Rate = map(Giro_RotX, -32768, 32767, -250, 250);
     b7c:	be 01       	movw	r22, r28
     b7e:	dd 0f       	add	r29, r29
     b80:	88 0b       	sbc	r24, r24
     b82:	99 0b       	sbc	r25, r25
     b84:	1f 92       	push	r1
     b86:	1f 92       	push	r1
     b88:	1f 92       	push	r1
     b8a:	2a ef       	ldi	r18, 0xFA	; 250
     b8c:	2f 93       	push	r18
     b8e:	26 e0       	ldi	r18, 0x06	; 6
     b90:	a2 2e       	mov	r10, r18
     b92:	bb 24       	eor	r11, r11
     b94:	ba 94       	dec	r11
     b96:	cb 2c       	mov	r12, r11
     b98:	db 2c       	mov	r13, r11
     b9a:	ee 24       	eor	r14, r14
     b9c:	ea 94       	dec	r14
     b9e:	1f e7       	ldi	r17, 0x7F	; 127
     ba0:	f1 2e       	mov	r15, r17
     ba2:	00 e0       	ldi	r16, 0x00	; 0
     ba4:	10 e0       	ldi	r17, 0x00	; 0
     ba6:	20 e0       	ldi	r18, 0x00	; 0
     ba8:	30 e8       	ldi	r19, 0x80	; 128
     baa:	4f ef       	ldi	r20, 0xFF	; 255
     bac:	5f ef       	ldi	r21, 0xFF	; 255
     bae:	0e 94 1b 1d 	call	0x3a36	; 0x3a36 <_Z3maplllll>
     bb2:	70 93 2f 03 	sts	0x032F, r23	; 0x80032f <Giro_Rate+0x1>
     bb6:	60 93 2e 03 	sts	0x032E, r22	; 0x80032e <Giro_Rate>
    Giro_Angle = (float)Giro_Rate*Giro_loopTime/1000;
     bba:	c0 91 2e 03 	lds	r28, 0x032E	; 0x80032e <Giro_Rate>
     bbe:	d0 91 2f 03 	lds	r29, 0x032F	; 0x80032f <Giro_Rate+0x1>
     bc2:	60 91 b5 02 	lds	r22, 0x02B5	; 0x8002b5 <Giro_loopTime>
     bc6:	70 91 b6 02 	lds	r23, 0x02B6	; 0x8002b6 <Giro_loopTime+0x1>
     bca:	80 91 b7 02 	lds	r24, 0x02B7	; 0x8002b7 <Giro_loopTime+0x2>
     bce:	90 91 b8 02 	lds	r25, 0x02B8	; 0x8002b8 <Giro_loopTime+0x3>
     bd2:	0e 94 18 17 	call	0x2e30	; 0x2e30 <__floatunsisf>
     bd6:	6b 01       	movw	r12, r22
     bd8:	7c 01       	movw	r14, r24
     bda:	be 01       	movw	r22, r28
     bdc:	dd 0f       	add	r29, r29
     bde:	88 0b       	sbc	r24, r24
     be0:	99 0b       	sbc	r25, r25
     be2:	0e 94 1a 17 	call	0x2e34	; 0x2e34 <__floatsisf>
     be6:	9b 01       	movw	r18, r22
     be8:	ac 01       	movw	r20, r24
     bea:	c7 01       	movw	r24, r14
     bec:	b6 01       	movw	r22, r12
     bee:	0e 94 fe 17 	call	0x2ffc	; 0x2ffc <__mulsf3>
     bf2:	20 e0       	ldi	r18, 0x00	; 0
     bf4:	30 e0       	ldi	r19, 0x00	; 0
     bf6:	4a e7       	ldi	r20, 0x7A	; 122
     bf8:	54 e4       	ldi	r21, 0x44	; 68
     bfa:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <__divsf3>
     bfe:	60 93 26 03 	sts	0x0326, r22	; 0x800326 <Giro_Angle>
     c02:	70 93 27 03 	sts	0x0327, r23	; 0x800327 <Giro_Angle+0x1>
     c06:	80 93 28 03 	sts	0x0328, r24	; 0x800328 <Giro_Angle+0x2>
     c0a:	90 93 29 03 	sts	0x0329, r25	; 0x800329 <Giro_Angle+0x3>

    Giro_FilteredAngle = 0.9934*(Giro_PrevAngle + Giro_Angle) + 0.0066*(Giro_AccAngle);
     c0e:	60 91 1e 03 	lds	r22, 0x031E	; 0x80031e <Giro_PrevAngle>
     c12:	70 91 1f 03 	lds	r23, 0x031F	; 0x80031f <Giro_PrevAngle+0x1>
     c16:	80 91 20 03 	lds	r24, 0x0320	; 0x800320 <Giro_PrevAngle+0x2>
     c1a:	90 91 21 03 	lds	r25, 0x0321	; 0x800321 <Giro_PrevAngle+0x3>
     c1e:	20 91 26 03 	lds	r18, 0x0326	; 0x800326 <Giro_Angle>
     c22:	30 91 27 03 	lds	r19, 0x0327	; 0x800327 <Giro_Angle+0x1>
     c26:	40 91 28 03 	lds	r20, 0x0328	; 0x800328 <Giro_Angle+0x2>
     c2a:	50 91 29 03 	lds	r21, 0x0329	; 0x800329 <Giro_Angle+0x3>
     c2e:	80 90 2a 03 	lds	r8, 0x032A	; 0x80032a <Giro_AccAngle>
     c32:	90 90 2b 03 	lds	r9, 0x032B	; 0x80032b <Giro_AccAngle+0x1>
     c36:	a0 90 2c 03 	lds	r10, 0x032C	; 0x80032c <Giro_AccAngle+0x2>
     c3a:	b0 90 2d 03 	lds	r11, 0x032D	; 0x80032d <Giro_AccAngle+0x3>
     c3e:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <__addsf3>
     c42:	26 e7       	ldi	r18, 0x76	; 118
     c44:	3f e4       	ldi	r19, 0x4F	; 79
     c46:	4e e7       	ldi	r20, 0x7E	; 126
     c48:	5f e3       	ldi	r21, 0x3F	; 63
     c4a:	0e 94 fe 17 	call	0x2ffc	; 0x2ffc <__mulsf3>
     c4e:	6b 01       	movw	r12, r22
     c50:	7c 01       	movw	r14, r24
     c52:	20 ed       	ldi	r18, 0xD0	; 208
     c54:	34 e4       	ldi	r19, 0x44	; 68
     c56:	48 ed       	ldi	r20, 0xD8	; 216
     c58:	5b e3       	ldi	r21, 0x3B	; 59
     c5a:	c5 01       	movw	r24, r10
     c5c:	b4 01       	movw	r22, r8
     c5e:	0e 94 fe 17 	call	0x2ffc	; 0x2ffc <__mulsf3>
     c62:	9b 01       	movw	r18, r22
     c64:	ac 01       	movw	r20, r24
     c66:	c7 01       	movw	r24, r14
     c68:	b6 01       	movw	r22, r12
     c6a:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <__addsf3>
     c6e:	60 93 22 03 	sts	0x0322, r22	; 0x800322 <Giro_FilteredAngle>
     c72:	70 93 23 03 	sts	0x0323, r23	; 0x800323 <Giro_FilteredAngle+0x1>
     c76:	80 93 24 03 	sts	0x0324, r24	; 0x800324 <Giro_FilteredAngle+0x2>
     c7a:	90 93 25 03 	sts	0x0325, r25	; 0x800325 <Giro_FilteredAngle+0x3>

    Giro_PrevAngle = Giro_FilteredAngle;
     c7e:	80 91 22 03 	lds	r24, 0x0322	; 0x800322 <Giro_FilteredAngle>
     c82:	90 91 23 03 	lds	r25, 0x0323	; 0x800323 <Giro_FilteredAngle+0x1>
     c86:	a0 91 24 03 	lds	r26, 0x0324	; 0x800324 <Giro_FilteredAngle+0x2>
     c8a:	b0 91 25 03 	lds	r27, 0x0325	; 0x800325 <Giro_FilteredAngle+0x3>
     c8e:	80 93 1e 03 	sts	0x031E, r24	; 0x80031e <Giro_PrevAngle>
     c92:	90 93 1f 03 	sts	0x031F, r25	; 0x80031f <Giro_PrevAngle+0x1>
     c96:	a0 93 20 03 	sts	0x0320, r26	; 0x800320 <Giro_PrevAngle+0x2>
     c9a:	b0 93 21 03 	sts	0x0321, r27	; 0x800321 <Giro_PrevAngle+0x3>

    Giro_PidCtl->Input=-Giro_FilteredAngle;
     c9e:	80 91 22 03 	lds	r24, 0x0322	; 0x800322 <Giro_FilteredAngle>
     ca2:	90 91 23 03 	lds	r25, 0x0323	; 0x800323 <Giro_FilteredAngle+0x1>
     ca6:	a0 91 24 03 	lds	r26, 0x0324	; 0x800324 <Giro_FilteredAngle+0x2>
     caa:	b0 91 25 03 	lds	r27, 0x0325	; 0x800325 <Giro_FilteredAngle+0x3>
     cae:	e0 91 0f 03 	lds	r30, 0x030F	; 0x80030f <Giro_PidCtl>
     cb2:	f0 91 10 03 	lds	r31, 0x0310	; 0x800310 <Giro_PidCtl+0x1>
     cb6:	b0 58       	subi	r27, 0x80	; 128
     cb8:	85 8b       	std	Z+21, r24	; 0x15
     cba:	96 8b       	std	Z+22, r25	; 0x16
     cbc:	a7 8b       	std	Z+23, r26	; 0x17
     cbe:	b0 8f       	std	Z+24, r27	; 0x18

}
     cc0:	0f 90       	pop	r0
     cc2:	0f 90       	pop	r0
     cc4:	0f 90       	pop	r0
     cc6:	0f 90       	pop	r0
     cc8:	df 91       	pop	r29
     cca:	cf 91       	pop	r28
     ccc:	1f 91       	pop	r17
     cce:	0f 91       	pop	r16
     cd0:	ff 90       	pop	r15
     cd2:	ef 90       	pop	r14
     cd4:	df 90       	pop	r13
     cd6:	cf 90       	pop	r12
     cd8:	bf 90       	pop	r11
     cda:	af 90       	pop	r10
     cdc:	9f 90       	pop	r9
     cde:	8f 90       	pop	r8
     ce0:	08 95       	ret

00000ce2 <_Z16PrintGiroRawDatav>:

void PrintGiroRawData() {
    Serial.print("GRD: ");
     ce2:	65 ed       	ldi	r22, 0xD5	; 213
     ce4:	71 e0       	ldi	r23, 0x01	; 1
     ce6:	88 e3       	ldi	r24, 0x38	; 56
     ce8:	94 e0       	ldi	r25, 0x04	; 4
     cea:	0e 94 89 1a 	call	0x3512	; 0x3512 <_ZN5Print5printEPKc>
    Serial.print(Giro_AccY);
     cee:	60 91 34 03 	lds	r22, 0x0334	; 0x800334 <Giro_AccY>
     cf2:	70 91 35 03 	lds	r23, 0x0335	; 0x800335 <Giro_AccY+0x1>
     cf6:	4a e0       	ldi	r20, 0x0A	; 10
     cf8:	50 e0       	ldi	r21, 0x00	; 0
     cfa:	88 e3       	ldi	r24, 0x38	; 56
     cfc:	94 e0       	ldi	r25, 0x04	; 4
     cfe:	0e 94 4c 1b 	call	0x3698	; 0x3698 <_ZN5Print5printEii>
    Serial.print(" ");
     d02:	6f e1       	ldi	r22, 0x1F	; 31
     d04:	71 e0       	ldi	r23, 0x01	; 1
     d06:	88 e3       	ldi	r24, 0x38	; 56
     d08:	94 e0       	ldi	r25, 0x04	; 4
     d0a:	0e 94 89 1a 	call	0x3512	; 0x3512 <_ZN5Print5printEPKc>
    Serial.print(Giro_AccZ);
     d0e:	60 91 32 03 	lds	r22, 0x0332	; 0x800332 <Giro_AccZ>
     d12:	70 91 33 03 	lds	r23, 0x0333	; 0x800333 <Giro_AccZ+0x1>
     d16:	4a e0       	ldi	r20, 0x0A	; 10
     d18:	50 e0       	ldi	r21, 0x00	; 0
     d1a:	88 e3       	ldi	r24, 0x38	; 56
     d1c:	94 e0       	ldi	r25, 0x04	; 4
     d1e:	0e 94 4c 1b 	call	0x3698	; 0x3698 <_ZN5Print5printEii>
    Serial.print(" ");
     d22:	6f e1       	ldi	r22, 0x1F	; 31
     d24:	71 e0       	ldi	r23, 0x01	; 1
     d26:	88 e3       	ldi	r24, 0x38	; 56
     d28:	94 e0       	ldi	r25, 0x04	; 4
     d2a:	0e 94 89 1a 	call	0x3512	; 0x3512 <_ZN5Print5printEPKc>
    Serial.print(Giro_RotX);
     d2e:	60 91 30 03 	lds	r22, 0x0330	; 0x800330 <Giro_RotX>
     d32:	70 91 31 03 	lds	r23, 0x0331	; 0x800331 <Giro_RotX+0x1>
     d36:	4a e0       	ldi	r20, 0x0A	; 10
     d38:	50 e0       	ldi	r21, 0x00	; 0
     d3a:	88 e3       	ldi	r24, 0x38	; 56
     d3c:	94 e0       	ldi	r25, 0x04	; 4
     d3e:	0e 94 4c 1b 	call	0x3698	; 0x3698 <_ZN5Print5printEii>

    Serial.println(" ");
     d42:	6f e1       	ldi	r22, 0x1F	; 31
     d44:	71 e0       	ldi	r23, 0x01	; 1
     d46:	88 e3       	ldi	r24, 0x38	; 56
     d48:	94 e0       	ldi	r25, 0x04	; 4
     d4a:	0c 94 96 1a 	jmp	0x352c	; 0x352c <_ZN5Print7printlnEPKc>

00000d4e <_Z26PrintGiroInputOutputValuesv>:
}

void PrintGiroInputOutputValues() {
    Serial.print("GIO: ");
     d4e:	6b ed       	ldi	r22, 0xDB	; 219
     d50:	71 e0       	ldi	r23, 0x01	; 1
     d52:	88 e3       	ldi	r24, 0x38	; 56
     d54:	94 e0       	ldi	r25, 0x04	; 4
     d56:	0e 94 89 1a 	call	0x3512	; 0x3512 <_ZN5Print5printEPKc>
    Serial.print(Giro_PidCtl->Input);
     d5a:	e0 91 0f 03 	lds	r30, 0x030F	; 0x80030f <Giro_PidCtl>
     d5e:	f0 91 10 03 	lds	r31, 0x0310	; 0x800310 <Giro_PidCtl+0x1>
     d62:	45 89       	ldd	r20, Z+21	; 0x15
     d64:	56 89       	ldd	r21, Z+22	; 0x16
     d66:	67 89       	ldd	r22, Z+23	; 0x17
     d68:	70 8d       	ldd	r23, Z+24	; 0x18
     d6a:	22 e0       	ldi	r18, 0x02	; 2
     d6c:	30 e0       	ldi	r19, 0x00	; 0
     d6e:	88 e3       	ldi	r24, 0x38	; 56
     d70:	94 e0       	ldi	r25, 0x04	; 4
     d72:	0e 94 2e 1c 	call	0x385c	; 0x385c <_ZN5Print5printEdi>
    Serial.print(" ");
     d76:	6f e1       	ldi	r22, 0x1F	; 31
     d78:	71 e0       	ldi	r23, 0x01	; 1
     d7a:	88 e3       	ldi	r24, 0x38	; 56
     d7c:	94 e0       	ldi	r25, 0x04	; 4
     d7e:	0e 94 89 1a 	call	0x3512	; 0x3512 <_ZN5Print5printEPKc>
    Serial.print(Giro_PidCtl->Output);
     d82:	e0 91 0f 03 	lds	r30, 0x030F	; 0x80030f <Giro_PidCtl>
     d86:	f0 91 10 03 	lds	r31, 0x0310	; 0x800310 <Giro_PidCtl+0x1>
     d8a:	41 8d       	ldd	r20, Z+25	; 0x19
     d8c:	52 8d       	ldd	r21, Z+26	; 0x1a
     d8e:	63 8d       	ldd	r22, Z+27	; 0x1b
     d90:	74 8d       	ldd	r23, Z+28	; 0x1c
     d92:	22 e0       	ldi	r18, 0x02	; 2
     d94:	30 e0       	ldi	r19, 0x00	; 0
     d96:	88 e3       	ldi	r24, 0x38	; 56
     d98:	94 e0       	ldi	r25, 0x04	; 4
     d9a:	0e 94 2e 1c 	call	0x385c	; 0x385c <_ZN5Print5printEdi>

    Serial.println(" ");
     d9e:	6f e1       	ldi	r22, 0x1F	; 31
     da0:	71 e0       	ldi	r23, 0x01	; 1
     da2:	88 e3       	ldi	r24, 0x38	; 56
     da4:	94 e0       	ldi	r25, 0x04	; 4
     da6:	0c 94 96 1a 	jmp	0x352c	; 0x352c <_ZN5Print7printlnEPKc>

00000daa <setup>:
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     daa:	26 e0       	ldi	r18, 0x06	; 6
     dac:	40 e0       	ldi	r20, 0x00	; 0
     dae:	52 ec       	ldi	r21, 0xC2	; 194
     db0:	61 e0       	ldi	r22, 0x01	; 1
     db2:	70 e0       	ldi	r23, 0x00	; 0
     db4:	88 e3       	ldi	r24, 0x38	; 56
     db6:	94 e0       	ldi	r25, 0x04	; 4
     db8:	0e 94 44 19 	call	0x3288	; 0x3288 <_ZN14HardwareSerial5beginEmh>



void setup() {
    Serial.begin(SERIAL__BAUD_RATE);
    Serial.println("Setup:Serial Initialized");
     dbc:	61 ee       	ldi	r22, 0xE1	; 225
     dbe:	71 e0       	ldi	r23, 0x01	; 1
     dc0:	88 e3       	ldi	r24, 0x38	; 56
     dc2:	94 e0       	ldi	r25, 0x04	; 4
     dc4:	0e 94 96 1a 	call	0x352c	; 0x352c <_ZN5Print7printlnEPKc>

    //CalibSetup();
    //Sensor readings with offsets:	-3	-5	16388	0	2	-1
    //Your offsets:	501	1553	1320	150	-6	19
    //Data is printed as: acelX acelY acelZ giroX giroY giroZ
    mpu.initialize();
     dc8:	86 e3       	ldi	r24, 0x36	; 54
     dca:	93 e0       	ldi	r25, 0x03	; 3
     dcc:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <_ZN7MPU605010initializeEv>
    mpu.setXAccelOffset(501);
     dd0:	65 ef       	ldi	r22, 0xF5	; 245
     dd2:	71 e0       	ldi	r23, 0x01	; 1
     dd4:	86 e3       	ldi	r24, 0x36	; 54
     dd6:	93 e0       	ldi	r25, 0x03	; 3
     dd8:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <_ZN7MPU605015setXAccelOffsetEi>
    mpu.setYAccelOffset(1553);
     ddc:	61 e1       	ldi	r22, 0x11	; 17
     dde:	76 e0       	ldi	r23, 0x06	; 6
     de0:	86 e3       	ldi	r24, 0x36	; 54
     de2:	93 e0       	ldi	r25, 0x03	; 3
     de4:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <_ZN7MPU605015setYAccelOffsetEi>
    mpu.setZAccelOffset(1320);
     de8:	68 e2       	ldi	r22, 0x28	; 40
     dea:	75 e0       	ldi	r23, 0x05	; 5
     dec:	86 e3       	ldi	r24, 0x36	; 54
     dee:	93 e0       	ldi	r25, 0x03	; 3
     df0:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <_ZN7MPU605015setZAccelOffsetEi>
    mpu.setXGyroOffset(150);
     df4:	66 e9       	ldi	r22, 0x96	; 150
     df6:	70 e0       	ldi	r23, 0x00	; 0
     df8:	86 e3       	ldi	r24, 0x36	; 54
     dfa:	93 e0       	ldi	r25, 0x03	; 3
     dfc:	0e 94 d7 0f 	call	0x1fae	; 0x1fae <_ZN7MPU605014setXGyroOffsetEi>
    mpu.setYGyroOffset(-6);
     e00:	6a ef       	ldi	r22, 0xFA	; 250
     e02:	7f ef       	ldi	r23, 0xFF	; 255
     e04:	86 e3       	ldi	r24, 0x36	; 54
     e06:	93 e0       	ldi	r25, 0x03	; 3
     e08:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <_ZN7MPU605014setYGyroOffsetEi>
    mpu.setZGyroOffset(19);
     e0c:	63 e1       	ldi	r22, 0x13	; 19
     e0e:	70 e0       	ldi	r23, 0x00	; 0
     e10:	86 e3       	ldi	r24, 0x36	; 54
     e12:	93 e0       	ldi	r25, 0x03	; 3
     e14:	0e 94 e3 0f 	call	0x1fc6	; 0x1fc6 <_ZN7MPU605014setZGyroOffsetEi>
    Serial.println("Setup: Mpu6050 Initialized");
     e18:	6a ef       	ldi	r22, 0xFA	; 250
     e1a:	71 e0       	ldi	r23, 0x01	; 1
     e1c:	88 e3       	ldi	r24, 0x38	; 56
     e1e:	94 e0       	ldi	r25, 0x04	; 4
     e20:	0e 94 96 1a 	call	0x352c	; 0x352c <_ZN5Print7printlnEPKc>

    Mot0_Init();
     e24:	0e 94 cd 14 	call	0x299a	; 0x299a <_Z9Mot0_Initv>
    Mot1_Init();
     e28:	0e 94 e0 14 	call	0x29c0	; 0x29c0 <_Z9Mot1_Initv>
    Motors_SetSpeed(0,0);
     e2c:	60 e0       	ldi	r22, 0x00	; 0
     e2e:	70 e0       	ldi	r23, 0x00	; 0
     e30:	80 e0       	ldi	r24, 0x00	; 0
     e32:	90 e0       	ldi	r25, 0x00	; 0
     e34:	0e 94 18 15 	call	0x2a30	; 0x2a30 <_Z15Motors_SetSpeedii>
    Serial.println("Setup: Motors Initialized");
     e38:	65 e1       	ldi	r22, 0x15	; 21
     e3a:	72 e0       	ldi	r23, 0x02	; 2
     e3c:	88 e3       	ldi	r24, 0x38	; 56
     e3e:	94 e0       	ldi	r25, 0x04	; 4
     e40:	0e 94 96 1a 	call	0x352c	; 0x352c <_ZN5Print7printlnEPKc>

    Enc_Init();
     e44:	0e 94 92 13 	call	0x2724	; 0x2724 <_Z8Enc_Initv>
    Serial.println("Setup: Encoders Initialized");
     e48:	6f e2       	ldi	r22, 0x2F	; 47
     e4a:	72 e0       	ldi	r23, 0x02	; 2
     e4c:	88 e3       	ldi	r24, 0x38	; 56
     e4e:	94 e0       	ldi	r25, 0x04	; 4
     e50:	0e 94 96 1a 	call	0x352c	; 0x352c <_ZN5Print7printlnEPKc>

    initPidControls();
     e54:	0e 94 d6 00 	call	0x1ac	; 0x1ac <_Z15initPidControlsv>
    PrintPidCfg(Mot0_PidCtl);
     e58:	80 91 13 03 	lds	r24, 0x0313	; 0x800313 <Mot0_PidCtl>
     e5c:	90 91 14 03 	lds	r25, 0x0314	; 0x800314 <Mot0_PidCtl+0x1>
     e60:	0e 94 43 02 	call	0x486	; 0x486 <_Z11PrintPidCfgP11PIDConfig_e>
    PrintPidCfg(Mot1_PidCtl);
     e64:	80 91 11 03 	lds	r24, 0x0311	; 0x800311 <Mot1_PidCtl>
     e68:	90 91 12 03 	lds	r25, 0x0312	; 0x800312 <Mot1_PidCtl+0x1>
     e6c:	0e 94 43 02 	call	0x486	; 0x486 <_Z11PrintPidCfgP11PIDConfig_e>
    PrintPidCfg(Giro_PidCtl);
     e70:	80 91 0f 03 	lds	r24, 0x030F	; 0x80030f <Giro_PidCtl>
     e74:	90 91 10 03 	lds	r25, 0x0310	; 0x800310 <Giro_PidCtl+0x1>
     e78:	0e 94 43 02 	call	0x486	; 0x486 <_Z11PrintPidCfgP11PIDConfig_e>
    Serial.println("Setup: Pids initialized");
     e7c:	6b e4       	ldi	r22, 0x4B	; 75
     e7e:	72 e0       	ldi	r23, 0x02	; 2
     e80:	88 e3       	ldi	r24, 0x38	; 56
     e82:	94 e0       	ldi	r25, 0x04	; 4
     e84:	0e 94 96 1a 	call	0x352c	; 0x352c <_ZN5Print7printlnEPKc>

    Serial.println("Setup: Done");
     e88:	63 e6       	ldi	r22, 0x63	; 99
     e8a:	72 e0       	ldi	r23, 0x02	; 2
     e8c:	88 e3       	ldi	r24, 0x38	; 56
     e8e:	94 e0       	ldi	r25, 0x04	; 4
     e90:	0c 94 96 1a 	jmp	0x352c	; 0x352c <_ZN5Print7printlnEPKc>

00000e94 <_GLOBAL__sub_I_sonar>:
#include "PID_v1.h"
#include "Configs.h"
#include "Utils.h"


NewPing sonar(TRIGGER_PIN, ECHO_PIN, MAX_DISTANCE);
     e94:	2b e4       	ldi	r18, 0x4B	; 75
     e96:	30 e0       	ldi	r19, 0x00	; 0
     e98:	48 e0       	ldi	r20, 0x08	; 8
     e9a:	69 e0       	ldi	r22, 0x09	; 9
     e9c:	85 e4       	ldi	r24, 0x45	; 69
     e9e:	93 e0       	ldi	r25, 0x03	; 3
     ea0:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <_ZN7NewPingC1Ehhj>
MPU6050 mpu;
     ea4:	86 e3       	ldi	r24, 0x36	; 54
     ea6:	93 e0       	ldi	r25, 0x03	; 3
     ea8:	0c 94 31 0f 	jmp	0x1e62	; 0x1e62 <_ZN7MPU6050C1Ev>

00000eac <_Z15Ser_ReceiveDatav>:

const char Ser_EndMarker = '\n';
char Ser_Buffer[SERIAL__MY_BUF_SIZE]; // an array to store the received data
boolean Ser_NewData = false;

void Ser_ReceiveData() {
     eac:	cf 93       	push	r28
     eae:	df 93       	push	r29
                ndx = SERIAL__MY_BUF_SIZE - 1;
            }
        } else {
            Ser_Buffer[ndx] = '\0'; // terminate the string
            ndx = 0;
            Ser_NewData = true;
     eb0:	c1 e0       	ldi	r28, 0x01	; 1

        if (rc != Ser_EndMarker) {
            Ser_Buffer[ndx] = rc;
            ndx++;
            if (ndx >= SERIAL__MY_BUF_SIZE) {
                ndx = SERIAL__MY_BUF_SIZE - 1;
     eb2:	df e3       	ldi	r29, 0x3F	; 63
void Ser_ReceiveData() {
    static byte ndx = 0;
    char rc;

    // if (Serial.available() > 0) {
    while (Serial.available() > 0 && Ser_NewData == false) {
     eb4:	88 e3       	ldi	r24, 0x38	; 56
     eb6:	94 e0       	ldi	r25, 0x04	; 4
     eb8:	0e 94 6f 18 	call	0x30de	; 0x30de <_ZN14HardwareSerial9availableEv>
     ebc:	18 16       	cp	r1, r24
     ebe:	19 06       	cpc	r1, r25
     ec0:	1c f5       	brge	.+70     	; 0xf08 <_Z15Ser_ReceiveDatav+0x5c>
     ec2:	80 91 c8 02 	lds	r24, 0x02C8	; 0x8002c8 <Ser_NewData>
     ec6:	81 11       	cpse	r24, r1
     ec8:	1f c0       	rjmp	.+62     	; 0xf08 <_Z15Ser_ReceiveDatav+0x5c>
        rc = Serial.read();
     eca:	88 e3       	ldi	r24, 0x38	; 56
     ecc:	94 e0       	ldi	r25, 0x04	; 4
     ece:	0e 94 89 18 	call	0x3112	; 0x3112 <_ZN14HardwareSerial4readEv>
     ed2:	e0 91 a4 02 	lds	r30, 0x02A4	; 0x8002a4 <_ZZ15Ser_ReceiveDatavE3ndx>

        if (rc != Ser_EndMarker) {
     ed6:	8a 30       	cpi	r24, 0x0A	; 10
     ed8:	71 f0       	breq	.+28     	; 0xef6 <_Z15Ser_ReceiveDatav+0x4a>
            Ser_Buffer[ndx] = rc;
     eda:	ae 2f       	mov	r26, r30
     edc:	b0 e0       	ldi	r27, 0x00	; 0
     ede:	a7 53       	subi	r26, 0x37	; 55
     ee0:	bd 4f       	sbci	r27, 0xFD	; 253
     ee2:	8c 93       	st	X, r24
            ndx++;
     ee4:	ef 5f       	subi	r30, 0xFF	; 255
            if (ndx >= SERIAL__MY_BUF_SIZE) {
     ee6:	e0 34       	cpi	r30, 0x40	; 64
     ee8:	18 f4       	brcc	.+6      	; 0xef0 <_Z15Ser_ReceiveDatav+0x44>
    while (Serial.available() > 0 && Ser_NewData == false) {
        rc = Serial.read();

        if (rc != Ser_EndMarker) {
            Ser_Buffer[ndx] = rc;
            ndx++;
     eea:	e0 93 a4 02 	sts	0x02A4, r30	; 0x8002a4 <_ZZ15Ser_ReceiveDatavE3ndx>
     eee:	e2 cf       	rjmp	.-60     	; 0xeb4 <_Z15Ser_ReceiveDatav+0x8>
            if (ndx >= SERIAL__MY_BUF_SIZE) {
                ndx = SERIAL__MY_BUF_SIZE - 1;
     ef0:	d0 93 a4 02 	sts	0x02A4, r29	; 0x8002a4 <_ZZ15Ser_ReceiveDatavE3ndx>
     ef4:	df cf       	rjmp	.-66     	; 0xeb4 <_Z15Ser_ReceiveDatav+0x8>
            }
        } else {
            Ser_Buffer[ndx] = '\0'; // terminate the string
     ef6:	f0 e0       	ldi	r31, 0x00	; 0
     ef8:	e7 53       	subi	r30, 0x37	; 55
     efa:	fd 4f       	sbci	r31, 0xFD	; 253
     efc:	10 82       	st	Z, r1
            ndx = 0;
     efe:	10 92 a4 02 	sts	0x02A4, r1	; 0x8002a4 <_ZZ15Ser_ReceiveDatavE3ndx>
            Ser_NewData = true;
     f02:	c0 93 c8 02 	sts	0x02C8, r28	; 0x8002c8 <Ser_NewData>
     f06:	d6 cf       	rjmp	.-84     	; 0xeb4 <_Z15Ser_ReceiveDatav+0x8>
        }
    }
}
     f08:	df 91       	pop	r29
     f0a:	cf 91       	pop	r28
     f0c:	08 95       	ret

00000f0e <loop>:

float self_balance_pid_setpoint=0;

unsigned long dirStart=0;

void loop() {
     f0e:	8f 92       	push	r8
     f10:	9f 92       	push	r9
     f12:	af 92       	push	r10
     f14:	bf 92       	push	r11
     f16:	cf 92       	push	r12
     f18:	df 92       	push	r13
     f1a:	ef 92       	push	r14
     f1c:	ff 92       	push	r15
     f1e:	cf 93       	push	r28
     f20:	df 93       	push	r29
    loopTime=micros();
     f22:	0e 94 82 1c 	call	0x3904	; 0x3904 <micros>
     f26:	60 93 ad 02 	sts	0x02AD, r22	; 0x8002ad <loopTime>
     f2a:	70 93 ae 02 	sts	0x02AE, r23	; 0x8002ae <loopTime+0x1>
     f2e:	80 93 af 02 	sts	0x02AF, r24	; 0x8002af <loopTime+0x2>
     f32:	90 93 b0 02 	sts	0x02B0, r25	; 0x8002b0 <loopTime+0x3>


    unsigned long currentMillis = millis();
     f36:	0e 94 76 1c 	call	0x38ec	; 0x38ec <millis>
     f3a:	6b 01       	movw	r12, r22
     f3c:	7c 01       	movw	r14, r24
    if (currentMillis - previousMilliEnc >= intervalEnc) {
     f3e:	80 91 1a 03 	lds	r24, 0x031A	; 0x80031a <previousMilliEnc>
     f42:	90 91 1b 03 	lds	r25, 0x031B	; 0x80031b <previousMilliEnc+0x1>
     f46:	a0 91 1c 03 	lds	r26, 0x031C	; 0x80031c <previousMilliEnc+0x2>
     f4a:	b0 91 1d 03 	lds	r27, 0x031D	; 0x80031d <previousMilliEnc+0x3>
     f4e:	a7 01       	movw	r20, r14
     f50:	96 01       	movw	r18, r12
     f52:	28 1b       	sub	r18, r24
     f54:	39 0b       	sbc	r19, r25
     f56:	4a 0b       	sbc	r20, r26
     f58:	5b 0b       	sbc	r21, r27
     f5a:	25 30       	cpi	r18, 0x05	; 5
     f5c:	31 05       	cpc	r19, r1
     f5e:	41 05       	cpc	r20, r1
     f60:	51 05       	cpc	r21, r1
     f62:	50 f0       	brcs	.+20     	; 0xf78 <loop+0x6a>
        previousMilliEnc=currentMillis;
     f64:	c0 92 1a 03 	sts	0x031A, r12	; 0x80031a <previousMilliEnc>
     f68:	d0 92 1b 03 	sts	0x031B, r13	; 0x80031b <previousMilliEnc+0x1>
     f6c:	e0 92 1c 03 	sts	0x031C, r14	; 0x80031c <previousMilliEnc+0x2>
     f70:	f0 92 1d 03 	sts	0x031D, r15	; 0x80031d <previousMilliEnc+0x3>
        UpdateEncoderValues();
     f74:	0e 94 10 05 	call	0xa20	; 0xa20 <_Z19UpdateEncoderValuesv>
    }

//---------------------------- GIRO---------------------------------------------
    Giro_ReadData();
     f78:	0e 94 49 05 	call	0xa92	; 0xa92 <_Z13Giro_ReadDatav>
// Remote go fwd/bck
    if (DirUp==true) {
     f7c:	80 91 c0 02 	lds	r24, 0x02C0	; 0x8002c0 <DirUp>
     f80:	88 23       	and	r24, r24
     f82:	f9 f0       	breq	.+62     	; 0xfc2 <loop+0xb4>
        dirStart=millis();
     f84:	0e 94 76 1c 	call	0x38ec	; 0x38ec <millis>
     f88:	60 93 a5 02 	sts	0x02A5, r22	; 0x8002a5 <dirStart>
     f8c:	70 93 a6 02 	sts	0x02A6, r23	; 0x8002a6 <dirStart+0x1>
     f90:	80 93 a7 02 	sts	0x02A7, r24	; 0x8002a7 <dirStart+0x2>
     f94:	90 93 a8 02 	sts	0x02A8, r25	; 0x8002a8 <dirStart+0x3>
        Giro_PidCtl->Setpoint+=10;
     f98:	c0 91 0f 03 	lds	r28, 0x030F	; 0x80030f <Giro_PidCtl>
     f9c:	d0 91 10 03 	lds	r29, 0x0310	; 0x800310 <Giro_PidCtl+0x1>
     fa0:	20 e0       	ldi	r18, 0x00	; 0
     fa2:	30 e0       	ldi	r19, 0x00	; 0
     fa4:	40 e2       	ldi	r20, 0x20	; 32
     fa6:	51 e4       	ldi	r21, 0x41	; 65
     fa8:	69 89       	ldd	r22, Y+17	; 0x11
     faa:	7a 89       	ldd	r23, Y+18	; 0x12
     fac:	8b 89       	ldd	r24, Y+19	; 0x13
     fae:	9c 89       	ldd	r25, Y+20	; 0x14
     fb0:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <__addsf3>
     fb4:	69 8b       	std	Y+17, r22	; 0x11
     fb6:	7a 8b       	std	Y+18, r23	; 0x12
     fb8:	8b 8b       	std	Y+19, r24	; 0x13
     fba:	9c 8b       	std	Y+20, r25	; 0x14
        DirUp=false;
     fbc:	10 92 c0 02 	sts	0x02C0, r1	; 0x8002c0 <DirUp>
     fc0:	22 c0       	rjmp	.+68     	; 0x1006 <loop+0xf8>
    } else if(DirDn==true) {
     fc2:	80 91 bf 02 	lds	r24, 0x02BF	; 0x8002bf <DirDn>
     fc6:	88 23       	and	r24, r24
     fc8:	f1 f0       	breq	.+60     	; 0x1006 <loop+0xf8>
        dirStart=millis();
     fca:	0e 94 76 1c 	call	0x38ec	; 0x38ec <millis>
     fce:	60 93 a5 02 	sts	0x02A5, r22	; 0x8002a5 <dirStart>
     fd2:	70 93 a6 02 	sts	0x02A6, r23	; 0x8002a6 <dirStart+0x1>
     fd6:	80 93 a7 02 	sts	0x02A7, r24	; 0x8002a7 <dirStart+0x2>
     fda:	90 93 a8 02 	sts	0x02A8, r25	; 0x8002a8 <dirStart+0x3>
        Giro_PidCtl->Setpoint-=10;
     fde:	c0 91 0f 03 	lds	r28, 0x030F	; 0x80030f <Giro_PidCtl>
     fe2:	d0 91 10 03 	lds	r29, 0x0310	; 0x800310 <Giro_PidCtl+0x1>
     fe6:	20 e0       	ldi	r18, 0x00	; 0
     fe8:	30 e0       	ldi	r19, 0x00	; 0
     fea:	40 e2       	ldi	r20, 0x20	; 32
     fec:	51 e4       	ldi	r21, 0x41	; 65
     fee:	69 89       	ldd	r22, Y+17	; 0x11
     ff0:	7a 89       	ldd	r23, Y+18	; 0x12
     ff2:	8b 89       	ldd	r24, Y+19	; 0x13
     ff4:	9c 89       	ldd	r25, Y+20	; 0x14
     ff6:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <__subsf3>
     ffa:	69 8b       	std	Y+17, r22	; 0x11
     ffc:	7a 8b       	std	Y+18, r23	; 0x12
     ffe:	8b 8b       	std	Y+19, r24	; 0x13
    1000:	9c 8b       	std	Y+20, r25	; 0x14
        DirDn=false;
    1002:	10 92 bf 02 	sts	0x02BF, r1	; 0x8002bf <DirDn>
    }

    if (millis()-dirStart>1500) {
    1006:	0e 94 76 1c 	call	0x38ec	; 0x38ec <millis>
    100a:	80 90 a5 02 	lds	r8, 0x02A5	; 0x8002a5 <dirStart>
    100e:	90 90 a6 02 	lds	r9, 0x02A6	; 0x8002a6 <dirStart+0x1>
    1012:	a0 90 a7 02 	lds	r10, 0x02A7	; 0x8002a7 <dirStart+0x2>
    1016:	b0 90 a8 02 	lds	r11, 0x02A8	; 0x8002a8 <dirStart+0x3>
    101a:	dc 01       	movw	r26, r24
    101c:	cb 01       	movw	r24, r22
    101e:	88 19       	sub	r24, r8
    1020:	99 09       	sbc	r25, r9
    1022:	aa 09       	sbc	r26, r10
    1024:	bb 09       	sbc	r27, r11
    1026:	c0 91 0f 03 	lds	r28, 0x030F	; 0x80030f <Giro_PidCtl>
    102a:	d0 91 10 03 	lds	r29, 0x0310	; 0x800310 <Giro_PidCtl+0x1>
    102e:	8d 3d       	cpi	r24, 0xDD	; 221
    1030:	95 40       	sbci	r25, 0x05	; 5
    1032:	a1 05       	cpc	r26, r1
    1034:	b1 05       	cpc	r27, r1
    1036:	80 f0       	brcs	.+32     	; 0x1058 <loop+0x14a>
        dirStart=0;
    1038:	10 92 a5 02 	sts	0x02A5, r1	; 0x8002a5 <dirStart>
    103c:	10 92 a6 02 	sts	0x02A6, r1	; 0x8002a6 <dirStart+0x1>
    1040:	10 92 a7 02 	sts	0x02A7, r1	; 0x8002a7 <dirStart+0x2>
    1044:	10 92 a8 02 	sts	0x02A8, r1	; 0x8002a8 <dirStart+0x3>
        Giro_PidCtl->Setpoint=GIRO__TARGET_ANGLE;
    1048:	80 e0       	ldi	r24, 0x00	; 0
    104a:	90 e0       	ldi	r25, 0x00	; 0
    104c:	a0 e4       	ldi	r26, 0x40	; 64
    104e:	b0 ec       	ldi	r27, 0xC0	; 192
    1050:	89 8b       	std	Y+17, r24	; 0x11
    1052:	9a 8b       	std	Y+18, r25	; 0x12
    1054:	ab 8b       	std	Y+19, r26	; 0x13
    1056:	bc 8b       	std	Y+20, r27	; 0x14
    }


    Giro_PidCtl->Input+=self_balance_pid_setpoint;
    1058:	20 91 a9 02 	lds	r18, 0x02A9	; 0x8002a9 <self_balance_pid_setpoint>
    105c:	30 91 aa 02 	lds	r19, 0x02AA	; 0x8002aa <self_balance_pid_setpoint+0x1>
    1060:	40 91 ab 02 	lds	r20, 0x02AB	; 0x8002ab <self_balance_pid_setpoint+0x2>
    1064:	50 91 ac 02 	lds	r21, 0x02AC	; 0x8002ac <self_balance_pid_setpoint+0x3>
    1068:	6d 89       	ldd	r22, Y+21	; 0x15
    106a:	7e 89       	ldd	r23, Y+22	; 0x16
    106c:	8f 89       	ldd	r24, Y+23	; 0x17
    106e:	98 8d       	ldd	r25, Y+24	; 0x18
    1070:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <__addsf3>
    1074:	6d 8b       	std	Y+21, r22	; 0x15
    1076:	7e 8b       	std	Y+22, r23	; 0x16
    1078:	8f 8b       	std	Y+23, r24	; 0x17
    107a:	98 8f       	std	Y+24, r25	; 0x18
    Giro_Pid->Compute();
    107c:	80 91 09 03 	lds	r24, 0x0309	; 0x800309 <Giro_Pid>
    1080:	90 91 0a 03 	lds	r25, 0x030A	; 0x80030a <Giro_Pid+0x1>
    1084:	0e 94 3d 09 	call	0x127a	; 0x127a <_ZN3PID7ComputeEv>

    if (connectGiroToMot==true) {
    1088:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <connectGiroToMot>
    108c:	88 23       	and	r24, r24
    108e:	c1 f0       	breq	.+48     	; 0x10c0 <loop+0x1b2>
        Mot0_PidCtl->Setpoint=Giro_PidCtl->Output;
    1090:	e0 91 0f 03 	lds	r30, 0x030F	; 0x80030f <Giro_PidCtl>
    1094:	f0 91 10 03 	lds	r31, 0x0310	; 0x800310 <Giro_PidCtl+0x1>
    1098:	81 8d       	ldd	r24, Z+25	; 0x19
    109a:	92 8d       	ldd	r25, Z+26	; 0x1a
    109c:	a3 8d       	ldd	r26, Z+27	; 0x1b
    109e:	b4 8d       	ldd	r27, Z+28	; 0x1c
    10a0:	e0 91 13 03 	lds	r30, 0x0313	; 0x800313 <Mot0_PidCtl>
    10a4:	f0 91 14 03 	lds	r31, 0x0314	; 0x800314 <Mot0_PidCtl+0x1>
    10a8:	81 8b       	std	Z+17, r24	; 0x11
    10aa:	92 8b       	std	Z+18, r25	; 0x12
    10ac:	a3 8b       	std	Z+19, r26	; 0x13
    10ae:	b4 8b       	std	Z+20, r27	; 0x14
        Mot1_PidCtl->Setpoint=Giro_PidCtl->Output;
    10b0:	e0 91 11 03 	lds	r30, 0x0311	; 0x800311 <Mot1_PidCtl>
    10b4:	f0 91 12 03 	lds	r31, 0x0312	; 0x800312 <Mot1_PidCtl+0x1>
    10b8:	81 8b       	std	Z+17, r24	; 0x11
    10ba:	92 8b       	std	Z+18, r25	; 0x12
    10bc:	a3 8b       	std	Z+19, r26	; 0x13
    10be:	b4 8b       	std	Z+20, r27	; 0x14
    }

//--------------------------- MOTORS --------------------------------------
    Mot0_Pid->Compute();
    10c0:	80 91 0d 03 	lds	r24, 0x030D	; 0x80030d <Mot0_Pid>
    10c4:	90 91 0e 03 	lds	r25, 0x030E	; 0x80030e <Mot0_Pid+0x1>
    10c8:	0e 94 3d 09 	call	0x127a	; 0x127a <_ZN3PID7ComputeEv>
    Mot1_Pid->Compute();
    10cc:	80 91 0b 03 	lds	r24, 0x030B	; 0x80030b <Mot1_Pid>
    10d0:	90 91 0c 03 	lds	r25, 0x030C	; 0x80030c <Mot1_Pid+0x1>
    10d4:	0e 94 3d 09 	call	0x127a	; 0x127a <_ZN3PID7ComputeEv>

    if  ( (running==false) &&
    10d8:	80 91 15 03 	lds	r24, 0x0315	; 0x800315 <running>
    10dc:	81 11       	cpse	r24, r1
    10de:	1e c0       	rjmp	.+60     	; 0x111c <loop+0x20e>
            (Giro_PidCtl->Input > GIRO__TARGET_ANGLE-3 ) &&
    10e0:	e0 91 0f 03 	lds	r30, 0x030F	; 0x80030f <Giro_PidCtl>
    10e4:	f0 91 10 03 	lds	r31, 0x0310	; 0x800310 <Giro_PidCtl+0x1>
    10e8:	85 88       	ldd	r8, Z+21	; 0x15
    10ea:	96 88       	ldd	r9, Z+22	; 0x16
    10ec:	a7 88       	ldd	r10, Z+23	; 0x17
    10ee:	b0 8c       	ldd	r11, Z+24	; 0x18

//--------------------------- MOTORS --------------------------------------
    Mot0_Pid->Compute();
    Mot1_Pid->Compute();

    if  ( (running==false) &&
    10f0:	20 e0       	ldi	r18, 0x00	; 0
    10f2:	30 e0       	ldi	r19, 0x00	; 0
    10f4:	40 ec       	ldi	r20, 0xC0	; 192
    10f6:	50 ec       	ldi	r21, 0xC0	; 192
    10f8:	c5 01       	movw	r24, r10
    10fa:	b4 01       	movw	r22, r8
    10fc:	0e 94 f1 17 	call	0x2fe2	; 0x2fe2 <__gesf2>
    1100:	18 16       	cp	r1, r24
    1102:	64 f4       	brge	.+24     	; 0x111c <loop+0x20e>
            (Giro_PidCtl->Input > GIRO__TARGET_ANGLE-3 ) &&
    1104:	20 e0       	ldi	r18, 0x00	; 0
    1106:	30 e0       	ldi	r19, 0x00	; 0
    1108:	a9 01       	movw	r20, r18
    110a:	c5 01       	movw	r24, r10
    110c:	b4 01       	movw	r22, r8
    110e:	0e 94 6b 16 	call	0x2cd6	; 0x2cd6 <__cmpsf2>
    1112:	87 ff       	sbrs	r24, 7
    1114:	03 c0       	rjmp	.+6      	; 0x111c <loop+0x20e>
            (Giro_PidCtl->Input < GIRO__TARGET_ANGLE+3 )
        ) {
        running = true;
    1116:	81 e0       	ldi	r24, 0x01	; 1
    1118:	80 93 15 03 	sts	0x0315, r24	; 0x800315 <running>





    if((connectGiroToMot==true) &&
    111c:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <connectGiroToMot>
    1120:	88 23       	and	r24, r24
    1122:	09 f4       	brne	.+2      	; 0x1126 <loop+0x218>
    1124:	49 c0       	rjmp	.+146    	; 0x11b8 <loop+0x2aa>
    1126:	80 91 15 03 	lds	r24, 0x0315	; 0x800315 <running>
    112a:	88 23       	and	r24, r24
    112c:	a1 f1       	breq	.+104    	; 0x1196 <loop+0x288>
            ((running==false) ||
             (Giro_PidCtl->Input > 50 || Giro_PidCtl->Input < -50) || //we fell
    112e:	c0 91 0f 03 	lds	r28, 0x030F	; 0x80030f <Giro_PidCtl>
    1132:	d0 91 10 03 	lds	r29, 0x0310	; 0x800310 <Giro_PidCtl+0x1>
    1136:	8d 88       	ldd	r8, Y+21	; 0x15
    1138:	9e 88       	ldd	r9, Y+22	; 0x16
    113a:	af 88       	ldd	r10, Y+23	; 0x17
    113c:	b8 8c       	ldd	r11, Y+24	; 0x18




    if((connectGiroToMot==true) &&
            ((running==false) ||
    113e:	20 e0       	ldi	r18, 0x00	; 0
    1140:	30 e0       	ldi	r19, 0x00	; 0
    1142:	48 e4       	ldi	r20, 0x48	; 72
    1144:	52 e4       	ldi	r21, 0x42	; 66
    1146:	c5 01       	movw	r24, r10
    1148:	b4 01       	movw	r22, r8
    114a:	0e 94 f1 17 	call	0x2fe2	; 0x2fe2 <__gesf2>
    114e:	18 16       	cp	r1, r24
    1150:	14 f1       	brlt	.+68     	; 0x1196 <loop+0x288>
             (Giro_PidCtl->Input > 50 || Giro_PidCtl->Input < -50) || //we fell
    1152:	20 e0       	ldi	r18, 0x00	; 0
    1154:	30 e0       	ldi	r19, 0x00	; 0
    1156:	48 e4       	ldi	r20, 0x48	; 72
    1158:	52 ec       	ldi	r21, 0xC2	; 194
    115a:	c5 01       	movw	r24, r10
    115c:	b4 01       	movw	r22, r8
    115e:	0e 94 6b 16 	call	0x2cd6	; 0x2cd6 <__cmpsf2>
    1162:	87 fd       	sbrc	r24, 7
    1164:	18 c0       	rjmp	.+48     	; 0x1196 <loop+0x288>
             ((Giro_PidCtl->Output >1) && (Giro_PidCtl->Output < 1))) //somewhat equilibrium
    1166:	89 8c       	ldd	r8, Y+25	; 0x19
    1168:	9a 8c       	ldd	r9, Y+26	; 0x1a
    116a:	ab 8c       	ldd	r10, Y+27	; 0x1b
    116c:	bc 8c       	ldd	r11, Y+28	; 0x1c



    if((connectGiroToMot==true) &&
            ((running==false) ||
             (Giro_PidCtl->Input > 50 || Giro_PidCtl->Input < -50) || //we fell
    116e:	20 e0       	ldi	r18, 0x00	; 0
    1170:	30 e0       	ldi	r19, 0x00	; 0
    1172:	40 e8       	ldi	r20, 0x80	; 128
    1174:	5f e3       	ldi	r21, 0x3F	; 63
    1176:	c5 01       	movw	r24, r10
    1178:	b4 01       	movw	r22, r8
    117a:	0e 94 f1 17 	call	0x2fe2	; 0x2fe2 <__gesf2>
    117e:	18 16       	cp	r1, r24
    1180:	dc f4       	brge	.+54     	; 0x11b8 <loop+0x2aa>
             ((Giro_PidCtl->Output >1) && (Giro_PidCtl->Output < 1))) //somewhat equilibrium
    1182:	20 e0       	ldi	r18, 0x00	; 0
    1184:	30 e0       	ldi	r19, 0x00	; 0
    1186:	40 e8       	ldi	r20, 0x80	; 128
    1188:	5f e3       	ldi	r21, 0x3F	; 63
    118a:	c5 01       	movw	r24, r10
    118c:	b4 01       	movw	r22, r8
    118e:	0e 94 6b 16 	call	0x2cd6	; 0x2cd6 <__cmpsf2>
    1192:	87 ff       	sbrs	r24, 7
    1194:	11 c0       	rjmp	.+34     	; 0x11b8 <loop+0x2aa>
      ) {
        Motors_SetSpeed(0,0);
    1196:	60 e0       	ldi	r22, 0x00	; 0
    1198:	70 e0       	ldi	r23, 0x00	; 0
    119a:	80 e0       	ldi	r24, 0x00	; 0
    119c:	90 e0       	ldi	r25, 0x00	; 0
    119e:	0e 94 18 15 	call	0x2a30	; 0x2a30 <_Z15Motors_SetSpeedii>
        running=false;
    11a2:	10 92 15 03 	sts	0x0315, r1	; 0x800315 <running>
        self_balance_pid_setpoint = 0;
    11a6:	10 92 a9 02 	sts	0x02A9, r1	; 0x8002a9 <self_balance_pid_setpoint>
    11aa:	10 92 aa 02 	sts	0x02AA, r1	; 0x8002aa <self_balance_pid_setpoint+0x1>
    11ae:	10 92 ab 02 	sts	0x02AB, r1	; 0x8002ab <self_balance_pid_setpoint+0x2>
    11b2:	10 92 ac 02 	sts	0x02AC, r1	; 0x8002ac <self_balance_pid_setpoint+0x3>
    11b6:	1b c0       	rjmp	.+54     	; 0x11ee <loop+0x2e0>
    } else {
        Motors_SetSpeed(Mot0_PidCtl->Output,Mot1_PidCtl->Output);
    11b8:	e0 91 11 03 	lds	r30, 0x0311	; 0x800311 <Mot1_PidCtl>
    11bc:	f0 91 12 03 	lds	r31, 0x0312	; 0x800312 <Mot1_PidCtl+0x1>
    11c0:	61 8d       	ldd	r22, Z+25	; 0x19
    11c2:	72 8d       	ldd	r23, Z+26	; 0x1a
    11c4:	83 8d       	ldd	r24, Z+27	; 0x1b
    11c6:	94 8d       	ldd	r25, Z+28	; 0x1c
    11c8:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <__fixsfsi>
    11cc:	4b 01       	movw	r8, r22
    11ce:	5c 01       	movw	r10, r24
    11d0:	e0 91 13 03 	lds	r30, 0x0313	; 0x800313 <Mot0_PidCtl>
    11d4:	f0 91 14 03 	lds	r31, 0x0314	; 0x800314 <Mot0_PidCtl+0x1>
    11d8:	61 8d       	ldd	r22, Z+25	; 0x19
    11da:	72 8d       	ldd	r23, Z+26	; 0x1a
    11dc:	83 8d       	ldd	r24, Z+27	; 0x1b
    11de:	94 8d       	ldd	r25, Z+28	; 0x1c
    11e0:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <__fixsfsi>
    11e4:	dc 01       	movw	r26, r24
    11e6:	cb 01       	movw	r24, r22
    11e8:	b4 01       	movw	r22, r8
    11ea:	0e 94 18 15 	call	0x2a30	; 0x2a30 <_Z15Motors_SetSpeedii>
    }




    if (currentMillis - previousMilliSerialLog >= intervalSerialLog) {
    11ee:	80 91 16 03 	lds	r24, 0x0316	; 0x800316 <previousMilliSerialLog>
    11f2:	90 91 17 03 	lds	r25, 0x0317	; 0x800317 <previousMilliSerialLog+0x1>
    11f6:	a0 91 18 03 	lds	r26, 0x0318	; 0x800318 <previousMilliSerialLog+0x2>
    11fa:	b0 91 19 03 	lds	r27, 0x0319	; 0x800319 <previousMilliSerialLog+0x3>
    11fe:	a7 01       	movw	r20, r14
    1200:	96 01       	movw	r18, r12
    1202:	28 1b       	sub	r18, r24
    1204:	39 0b       	sbc	r19, r25
    1206:	4a 0b       	sbc	r20, r26
    1208:	5b 0b       	sbc	r21, r27
    120a:	24 36       	cpi	r18, 0x64	; 100
    120c:	31 05       	cpc	r19, r1
    120e:	41 05       	cpc	r20, r1
    1210:	51 05       	cpc	r21, r1
    1212:	40 f1       	brcs	.+80     	; 0x1264 <loop+0x356>
        previousMilliSerialLog=currentMillis;
    1214:	c0 92 16 03 	sts	0x0316, r12	; 0x800316 <previousMilliSerialLog>
    1218:	d0 92 17 03 	sts	0x0317, r13	; 0x800317 <previousMilliSerialLog+0x1>
    121c:	e0 92 18 03 	sts	0x0318, r14	; 0x800318 <previousMilliSerialLog+0x2>
    1220:	f0 92 19 03 	sts	0x0319, r15	; 0x800319 <previousMilliSerialLog+0x3>

        if (printRawGiro==true) {
    1224:	80 91 c3 02 	lds	r24, 0x02C3	; 0x8002c3 <printRawGiro>
    1228:	81 11       	cpse	r24, r1
            PrintGiroRawData();
    122a:	0e 94 71 06 	call	0xce2	; 0xce2 <_Z16PrintGiroRawDatav>
        }

        if (printGiroPid==true) {
    122e:	80 91 c1 02 	lds	r24, 0x02C1	; 0x8002c1 <printGiroPid>
    1232:	81 11       	cpse	r24, r1
            PrintGiroInputOutputValues();
    1234:	0e 94 a7 06 	call	0xd4e	; 0xd4e <_Z26PrintGiroInputOutputValuesv>
        }

        if(printMotPid==true) {
    1238:	80 91 c2 02 	lds	r24, 0x02C2	; 0x8002c2 <printMotPid>
    123c:	88 23       	and	r24, r24
    123e:	21 f0       	breq	.+8      	; 0x1248 <loop+0x33a>
            PrintEncoderValues();
    1240:	0e 94 99 02 	call	0x532	; 0x532 <_Z18PrintEncoderValuesv>
            PrintPidOutputValues();
    1244:	0e 94 cd 02 	call	0x59a	; 0x59a <_Z20PrintPidOutputValuesv>
        }

        Ser_ReceiveData();
    1248:	0e 94 56 07 	call	0xeac	; 0xeac <_Z15Ser_ReceiveDatav>
           Serial.println(loopTime);
        */
    }


}
    124c:	df 91       	pop	r29
    124e:	cf 91       	pop	r28
    1250:	ff 90       	pop	r15
    1252:	ef 90       	pop	r14
    1254:	df 90       	pop	r13
    1256:	cf 90       	pop	r12
    1258:	bf 90       	pop	r11
    125a:	af 90       	pop	r10
    125c:	9f 90       	pop	r9
    125e:	8f 90       	pop	r8
            PrintEncoderValues();
            PrintPidOutputValues();
        }

        Ser_ReceiveData();
        Ser_ParseData();
    1260:	0c 94 29 03 	jmp	0x652	; 0x652 <_Z13Ser_ParseDatav>
           Serial.println(loopTime);
        */
    }


}
    1264:	df 91       	pop	r29
    1266:	cf 91       	pop	r28
    1268:	ff 90       	pop	r15
    126a:	ef 90       	pop	r14
    126c:	df 90       	pop	r13
    126e:	cf 90       	pop	r12
    1270:	bf 90       	pop	r11
    1272:	af 90       	pop	r10
    1274:	9f 90       	pop	r9
    1276:	8f 90       	pop	r8
    1278:	08 95       	ret

0000127a <_ZN3PID7ComputeEv>:
 *   every time "void loop()" executes.  the function will decide for itself whether a new
 *   pid Output needs to be computed.  returns true when the output is computed,
 *   false when nothing has been done.
 **********************************************************************************/
bool PID::Compute()
{
    127a:	2f 92       	push	r2
    127c:	3f 92       	push	r3
    127e:	4f 92       	push	r4
    1280:	5f 92       	push	r5
    1282:	6f 92       	push	r6
    1284:	7f 92       	push	r7
    1286:	8f 92       	push	r8
    1288:	9f 92       	push	r9
    128a:	af 92       	push	r10
    128c:	bf 92       	push	r11
    128e:	cf 92       	push	r12
    1290:	df 92       	push	r13
    1292:	ef 92       	push	r14
    1294:	ff 92       	push	r15
    1296:	0f 93       	push	r16
    1298:	1f 93       	push	r17
    129a:	cf 93       	push	r28
    129c:	df 93       	push	r29
    129e:	cd b7       	in	r28, 0x3d	; 61
    12a0:	de b7       	in	r29, 0x3e	; 62
    12a2:	60 97       	sbiw	r28, 0x10	; 16
    12a4:	0f b6       	in	r0, 0x3f	; 63
    12a6:	f8 94       	cli
    12a8:	de bf       	out	0x3e, r29	; 62
    12aa:	0f be       	out	0x3f, r0	; 63
    12ac:	cd bf       	out	0x3d, r28	; 61
   if(!inAuto) return false;
    12ae:	dc 01       	movw	r26, r24
    12b0:	da 96       	adiw	r26, 0x3a	; 58
    12b2:	bc 91       	ld	r27, X
    12b4:	b9 83       	std	Y+1, r27	; 0x01
    12b6:	b1 11       	cpse	r27, r1
    12b8:	02 c0       	rjmp	.+4      	; 0x12be <_ZN3PID7ComputeEv+0x44>
    12ba:	19 82       	std	Y+1, r1	; 0x01
    12bc:	2b c1       	rjmp	.+598    	; 0x1514 <_ZN3PID7ComputeEv+0x29a>
    12be:	98 8b       	std	Y+16, r25	; 0x10
    12c0:	8f 87       	std	Y+15, r24	; 0x0f
   unsigned long now = millis();
    12c2:	0e 94 76 1c 	call	0x38ec	; 0x38ec <millis>
    12c6:	6e 83       	std	Y+6, r22	; 0x06
    12c8:	7f 83       	std	Y+7, r23	; 0x07
    12ca:	88 87       	std	Y+8, r24	; 0x08
    12cc:	99 87       	std	Y+9, r25	; 0x09
   unsigned long timeChange = (now - lastTime);
   if(timeChange>=SampleTime)
    12ce:	ef 85       	ldd	r30, Y+15	; 0x0f
    12d0:	f8 89       	ldd	r31, Y+16	; 0x10
    12d2:	82 a1       	ldd	r24, Z+34	; 0x22
    12d4:	93 a1       	ldd	r25, Z+35	; 0x23
    12d6:	a4 a1       	ldd	r26, Z+36	; 0x24
    12d8:	b5 a1       	ldd	r27, Z+37	; 0x25
    12da:	4e 81       	ldd	r20, Y+6	; 0x06
    12dc:	5f 81       	ldd	r21, Y+7	; 0x07
    12de:	68 85       	ldd	r22, Y+8	; 0x08
    12e0:	79 85       	ldd	r23, Y+9	; 0x09
    12e2:	48 1b       	sub	r20, r24
    12e4:	59 0b       	sbc	r21, r25
    12e6:	6a 0b       	sbc	r22, r26
    12e8:	7b 0b       	sbc	r23, r27
    12ea:	86 a5       	ldd	r24, Z+46	; 0x2e
    12ec:	97 a5       	ldd	r25, Z+47	; 0x2f
    12ee:	a0 a9       	ldd	r26, Z+48	; 0x30
    12f0:	b1 a9       	ldd	r27, Z+49	; 0x31
    12f2:	48 17       	cp	r20, r24
    12f4:	59 07       	cpc	r21, r25
    12f6:	6a 07       	cpc	r22, r26
    12f8:	7b 07       	cpc	r23, r27
    12fa:	f8 f2       	brcs	.-66     	; 0x12ba <_ZN3PID7ComputeEv+0x40>
   {
      /*Compute all the working error variables*/
      double input = *myInput;
    12fc:	04 8c       	ldd	r0, Z+28	; 0x1c
    12fe:	f5 8d       	ldd	r31, Z+29	; 0x1d
    1300:	e0 2d       	mov	r30, r0
    1302:	80 81       	ld	r24, Z
    1304:	91 81       	ldd	r25, Z+1	; 0x01
    1306:	a2 81       	ldd	r26, Z+2	; 0x02
    1308:	b3 81       	ldd	r27, Z+3	; 0x03
    130a:	8a 83       	std	Y+2, r24	; 0x02
    130c:	9b 83       	std	Y+3, r25	; 0x03
    130e:	ac 83       	std	Y+4, r26	; 0x04
    1310:	bd 83       	std	Y+5, r27	; 0x05
      double error = *mySetpoint - input;
    1312:	af 85       	ldd	r26, Y+15	; 0x0f
    1314:	b8 89       	ldd	r27, Y+16	; 0x10
    1316:	90 96       	adiw	r26, 0x20	; 32
    1318:	ed 91       	ld	r30, X+
    131a:	fc 91       	ld	r31, X
    131c:	91 97       	sbiw	r26, 0x21	; 33
    131e:	2a 81       	ldd	r18, Y+2	; 0x02
    1320:	3b 81       	ldd	r19, Y+3	; 0x03
    1322:	4c 81       	ldd	r20, Y+4	; 0x04
    1324:	5d 81       	ldd	r21, Y+5	; 0x05
    1326:	60 81       	ld	r22, Z
    1328:	71 81       	ldd	r23, Z+1	; 0x01
    132a:	82 81       	ldd	r24, Z+2	; 0x02
    132c:	93 81       	ldd	r25, Z+3	; 0x03
    132e:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <__subsf3>
    1332:	4b 01       	movw	r8, r22
    1334:	5c 01       	movw	r10, r24
      double dInput = (input - lastInput);
    1336:	ef 85       	ldd	r30, Y+15	; 0x0f
    1338:	f8 89       	ldd	r31, Y+16	; 0x10
    133a:	22 a5       	ldd	r18, Z+42	; 0x2a
    133c:	33 a5       	ldd	r19, Z+43	; 0x2b
    133e:	44 a5       	ldd	r20, Z+44	; 0x2c
    1340:	55 a5       	ldd	r21, Z+45	; 0x2d
    1342:	6a 81       	ldd	r22, Y+2	; 0x02
    1344:	7b 81       	ldd	r23, Y+3	; 0x03
    1346:	8c 81       	ldd	r24, Y+4	; 0x04
    1348:	9d 81       	ldd	r25, Y+5	; 0x05
    134a:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <__subsf3>
    134e:	6b 01       	movw	r12, r22
    1350:	7c 01       	movw	r14, r24
      outputSum+= (ki * error);
    1352:	af 85       	ldd	r26, Y+15	; 0x0f
    1354:	b8 89       	ldd	r27, Y+16	; 0x10
    1356:	50 96       	adiw	r26, 0x10	; 16
    1358:	2d 91       	ld	r18, X+
    135a:	3d 91       	ld	r19, X+
    135c:	4d 91       	ld	r20, X+
    135e:	5c 91       	ld	r21, X
    1360:	53 97       	sbiw	r26, 0x13	; 19
    1362:	c5 01       	movw	r24, r10
    1364:	b4 01       	movw	r22, r8
    1366:	0e 94 fe 17 	call	0x2ffc	; 0x2ffc <__mulsf3>
    136a:	ef 85       	ldd	r30, Y+15	; 0x0f
    136c:	f8 89       	ldd	r31, Y+16	; 0x10
    136e:	26 a1       	ldd	r18, Z+38	; 0x26
    1370:	37 a1       	ldd	r19, Z+39	; 0x27
    1372:	40 a5       	ldd	r20, Z+40	; 0x28
    1374:	51 a5       	ldd	r21, Z+41	; 0x29
    1376:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <__addsf3>
    137a:	2b 01       	movw	r4, r22
    137c:	3c 01       	movw	r6, r24
    137e:	af 85       	ldd	r26, Y+15	; 0x0f
    1380:	b8 89       	ldd	r27, Y+16	; 0x10
    1382:	96 96       	adiw	r26, 0x26	; 38
    1384:	6d 93       	st	X+, r22
    1386:	7d 93       	st	X+, r23
    1388:	8d 93       	st	X+, r24
    138a:	9c 93       	st	X, r25
    138c:	99 97       	sbiw	r26, 0x29	; 41

      /*Add Proportional on Measurement, if P_ON_M is specified*/
      if(!pOnE) outputSum-= kp * dInput;
    138e:	db 96       	adiw	r26, 0x3b	; 59
    1390:	bc 91       	ld	r27, X
    1392:	ba 87       	std	Y+10, r27	; 0x0a
    1394:	b1 11       	cpse	r27, r1
    1396:	18 c0       	rjmp	.+48     	; 0x13c8 <_ZN3PID7ComputeEv+0x14e>
    1398:	ef 85       	ldd	r30, Y+15	; 0x0f
    139a:	f8 89       	ldd	r31, Y+16	; 0x10
    139c:	24 85       	ldd	r18, Z+12	; 0x0c
    139e:	35 85       	ldd	r19, Z+13	; 0x0d
    13a0:	46 85       	ldd	r20, Z+14	; 0x0e
    13a2:	57 85       	ldd	r21, Z+15	; 0x0f
    13a4:	c7 01       	movw	r24, r14
    13a6:	b6 01       	movw	r22, r12
    13a8:	0e 94 fe 17 	call	0x2ffc	; 0x2ffc <__mulsf3>
    13ac:	9b 01       	movw	r18, r22
    13ae:	ac 01       	movw	r20, r24
    13b0:	c3 01       	movw	r24, r6
    13b2:	b2 01       	movw	r22, r4
    13b4:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <__subsf3>
    13b8:	af 85       	ldd	r26, Y+15	; 0x0f
    13ba:	b8 89       	ldd	r27, Y+16	; 0x10
    13bc:	96 96       	adiw	r26, 0x26	; 38
    13be:	6d 93       	st	X+, r22
    13c0:	7d 93       	st	X+, r23
    13c2:	8d 93       	st	X+, r24
    13c4:	9c 93       	st	X, r25
    13c6:	99 97       	sbiw	r26, 0x29	; 41

      if(outputSum > outMax) outputSum= outMax;
    13c8:	ef 85       	ldd	r30, Y+15	; 0x0f
    13ca:	f8 89       	ldd	r31, Y+16	; 0x10
    13cc:	46 a0       	ldd	r4, Z+38	; 0x26
    13ce:	57 a0       	ldd	r5, Z+39	; 0x27
    13d0:	60 a4       	ldd	r6, Z+40	; 0x28
    13d2:	71 a4       	ldd	r7, Z+41	; 0x29
    13d4:	16 a9       	ldd	r17, Z+54	; 0x36
    13d6:	07 a9       	ldd	r16, Z+55	; 0x37
    13d8:	30 ac       	ldd	r3, Z+56	; 0x38
    13da:	21 ac       	ldd	r2, Z+57	; 0x39
    13dc:	21 2f       	mov	r18, r17
    13de:	30 2f       	mov	r19, r16
    13e0:	43 2d       	mov	r20, r3
    13e2:	52 2d       	mov	r21, r2
    13e4:	c3 01       	movw	r24, r6
    13e6:	b2 01       	movw	r22, r4
    13e8:	0e 94 f1 17 	call	0x2fe2	; 0x2fe2 <__gesf2>
    13ec:	18 16       	cp	r1, r24
    13ee:	2c f4       	brge	.+10     	; 0x13fa <_ZN3PID7ComputeEv+0x180>
    13f0:	81 2f       	mov	r24, r17
    13f2:	90 2f       	mov	r25, r16
    13f4:	a3 2d       	mov	r26, r3
    13f6:	b2 2d       	mov	r27, r2
    13f8:	18 c0       	rjmp	.+48     	; 0x142a <_ZN3PID7ComputeEv+0x1b0>
      else if(outputSum < outMin) outputSum= outMin;
    13fa:	af 85       	ldd	r26, Y+15	; 0x0f
    13fc:	b8 89       	ldd	r27, Y+16	; 0x10
    13fe:	d2 96       	adiw	r26, 0x32	; 50
    1400:	8d 91       	ld	r24, X+
    1402:	9d 91       	ld	r25, X+
    1404:	0d 90       	ld	r0, X+
    1406:	bc 91       	ld	r27, X
    1408:	a0 2d       	mov	r26, r0
    140a:	8b 87       	std	Y+11, r24	; 0x0b
    140c:	9c 87       	std	Y+12, r25	; 0x0c
    140e:	ad 87       	std	Y+13, r26	; 0x0d
    1410:	be 87       	std	Y+14, r27	; 0x0e
    1412:	9c 01       	movw	r18, r24
    1414:	ad 01       	movw	r20, r26
    1416:	c3 01       	movw	r24, r6
    1418:	b2 01       	movw	r22, r4
    141a:	0e 94 6b 16 	call	0x2cd6	; 0x2cd6 <__cmpsf2>
    141e:	87 ff       	sbrs	r24, 7
    1420:	0a c0       	rjmp	.+20     	; 0x1436 <_ZN3PID7ComputeEv+0x1bc>
    1422:	8b 85       	ldd	r24, Y+11	; 0x0b
    1424:	9c 85       	ldd	r25, Y+12	; 0x0c
    1426:	ad 85       	ldd	r26, Y+13	; 0x0d
    1428:	be 85       	ldd	r27, Y+14	; 0x0e
    142a:	ef 85       	ldd	r30, Y+15	; 0x0f
    142c:	f8 89       	ldd	r31, Y+16	; 0x10
    142e:	86 a3       	std	Z+38, r24	; 0x26
    1430:	97 a3       	std	Z+39, r25	; 0x27
    1432:	a0 a7       	std	Z+40, r26	; 0x28
    1434:	b1 a7       	std	Z+41, r27	; 0x29

      /*Add Proportional on Error, if P_ON_E is specified*/
	   double output;
      if(pOnE) output = kp * error;
    1436:	fa 85       	ldd	r31, Y+10	; 0x0a
    1438:	ff 23       	and	r31, r31
    143a:	79 f0       	breq	.+30     	; 0x145a <_ZN3PID7ComputeEv+0x1e0>
    143c:	af 85       	ldd	r26, Y+15	; 0x0f
    143e:	b8 89       	ldd	r27, Y+16	; 0x10
    1440:	1c 96       	adiw	r26, 0x0c	; 12
    1442:	2d 91       	ld	r18, X+
    1444:	3d 91       	ld	r19, X+
    1446:	4d 91       	ld	r20, X+
    1448:	5c 91       	ld	r21, X
    144a:	1f 97       	sbiw	r26, 0x0f	; 15
    144c:	c5 01       	movw	r24, r10
    144e:	b4 01       	movw	r22, r8
    1450:	0e 94 fe 17 	call	0x2ffc	; 0x2ffc <__mulsf3>
    1454:	4b 01       	movw	r8, r22
    1456:	5c 01       	movw	r10, r24
    1458:	03 c0       	rjmp	.+6      	; 0x1460 <_ZN3PID7ComputeEv+0x1e6>
      else output = 0;
    145a:	81 2c       	mov	r8, r1
    145c:	91 2c       	mov	r9, r1
    145e:	54 01       	movw	r10, r8

      /*Compute Rest of PID Output*/
      output += outputSum - kd * dInput;
    1460:	ef 85       	ldd	r30, Y+15	; 0x0f
    1462:	f8 89       	ldd	r31, Y+16	; 0x10
    1464:	24 89       	ldd	r18, Z+20	; 0x14
    1466:	35 89       	ldd	r19, Z+21	; 0x15
    1468:	46 89       	ldd	r20, Z+22	; 0x16
    146a:	57 89       	ldd	r21, Z+23	; 0x17
    146c:	c7 01       	movw	r24, r14
    146e:	b6 01       	movw	r22, r12
    1470:	0e 94 fe 17 	call	0x2ffc	; 0x2ffc <__mulsf3>
    1474:	9b 01       	movw	r18, r22
    1476:	ac 01       	movw	r20, r24
    1478:	af 85       	ldd	r26, Y+15	; 0x0f
    147a:	b8 89       	ldd	r27, Y+16	; 0x10
    147c:	96 96       	adiw	r26, 0x26	; 38
    147e:	6d 91       	ld	r22, X+
    1480:	7d 91       	ld	r23, X+
    1482:	8d 91       	ld	r24, X+
    1484:	9c 91       	ld	r25, X
    1486:	99 97       	sbiw	r26, 0x29	; 41
    1488:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <__subsf3>
    148c:	a5 01       	movw	r20, r10
    148e:	94 01       	movw	r18, r8
    1490:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <__addsf3>
    1494:	6b 01       	movw	r12, r22
    1496:	7c 01       	movw	r14, r24

	    if(output > outMax) output = outMax;
    1498:	9b 01       	movw	r18, r22
    149a:	ac 01       	movw	r20, r24
    149c:	61 2f       	mov	r22, r17
    149e:	70 2f       	mov	r23, r16
    14a0:	83 2d       	mov	r24, r3
    14a2:	92 2d       	mov	r25, r2
    14a4:	0e 94 6b 16 	call	0x2cd6	; 0x2cd6 <__cmpsf2>
    14a8:	87 fd       	sbrc	r24, 7
    14aa:	14 c0       	rjmp	.+40     	; 0x14d4 <_ZN3PID7ComputeEv+0x25a>
      else if(output < outMin) output = outMin;
    14ac:	ef 85       	ldd	r30, Y+15	; 0x0f
    14ae:	f8 89       	ldd	r31, Y+16	; 0x10
    14b0:	12 a9       	ldd	r17, Z+50	; 0x32
    14b2:	03 a9       	ldd	r16, Z+51	; 0x33
    14b4:	34 a8       	ldd	r3, Z+52	; 0x34
    14b6:	25 a8       	ldd	r2, Z+53	; 0x35
    14b8:	21 2f       	mov	r18, r17
    14ba:	30 2f       	mov	r19, r16
    14bc:	43 2d       	mov	r20, r3
    14be:	52 2d       	mov	r21, r2
    14c0:	b6 01       	movw	r22, r12
    14c2:	c7 01       	movw	r24, r14
    14c4:	0e 94 6b 16 	call	0x2cd6	; 0x2cd6 <__cmpsf2>
    14c8:	87 fd       	sbrc	r24, 7
    14ca:	04 c0       	rjmp	.+8      	; 0x14d4 <_ZN3PID7ComputeEv+0x25a>
	   double output;
      if(pOnE) output = kp * error;
      else output = 0;

      /*Compute Rest of PID Output*/
      output += outputSum - kd * dInput;
    14cc:	1c 2d       	mov	r17, r12
    14ce:	0d 2d       	mov	r16, r13
    14d0:	3e 2c       	mov	r3, r14
    14d2:	2f 2c       	mov	r2, r15

	    if(output > outMax) output = outMax;
      else if(output < outMin) output = outMin;
	    *myOutput = output;
    14d4:	af 85       	ldd	r26, Y+15	; 0x0f
    14d6:	b8 89       	ldd	r27, Y+16	; 0x10
    14d8:	5e 96       	adiw	r26, 0x1e	; 30
    14da:	ed 91       	ld	r30, X+
    14dc:	fc 91       	ld	r31, X
    14de:	5f 97       	sbiw	r26, 0x1f	; 31
    14e0:	81 2f       	mov	r24, r17
    14e2:	90 2f       	mov	r25, r16
    14e4:	a3 2d       	mov	r26, r3
    14e6:	b2 2d       	mov	r27, r2
    14e8:	80 83       	st	Z, r24
    14ea:	91 83       	std	Z+1, r25	; 0x01
    14ec:	a2 83       	std	Z+2, r26	; 0x02
    14ee:	b3 83       	std	Z+3, r27	; 0x03

      /*Remember some variables for next time*/
      lastInput = input;
    14f0:	8a 81       	ldd	r24, Y+2	; 0x02
    14f2:	9b 81       	ldd	r25, Y+3	; 0x03
    14f4:	ac 81       	ldd	r26, Y+4	; 0x04
    14f6:	bd 81       	ldd	r27, Y+5	; 0x05
    14f8:	ef 85       	ldd	r30, Y+15	; 0x0f
    14fa:	f8 89       	ldd	r31, Y+16	; 0x10
    14fc:	82 a7       	std	Z+42, r24	; 0x2a
    14fe:	93 a7       	std	Z+43, r25	; 0x2b
    1500:	a4 a7       	std	Z+44, r26	; 0x2c
    1502:	b5 a7       	std	Z+45, r27	; 0x2d
      lastTime = now;
    1504:	8e 81       	ldd	r24, Y+6	; 0x06
    1506:	9f 81       	ldd	r25, Y+7	; 0x07
    1508:	a8 85       	ldd	r26, Y+8	; 0x08
    150a:	b9 85       	ldd	r27, Y+9	; 0x09
    150c:	82 a3       	std	Z+34, r24	; 0x22
    150e:	93 a3       	std	Z+35, r25	; 0x23
    1510:	a4 a3       	std	Z+36, r26	; 0x24
    1512:	b5 a3       	std	Z+37, r27	; 0x25
	    return true;
   }
   else return false;
}
    1514:	89 81       	ldd	r24, Y+1	; 0x01
    1516:	60 96       	adiw	r28, 0x10	; 16
    1518:	0f b6       	in	r0, 0x3f	; 63
    151a:	f8 94       	cli
    151c:	de bf       	out	0x3e, r29	; 62
    151e:	0f be       	out	0x3f, r0	; 63
    1520:	cd bf       	out	0x3d, r28	; 61
    1522:	df 91       	pop	r29
    1524:	cf 91       	pop	r28
    1526:	1f 91       	pop	r17
    1528:	0f 91       	pop	r16
    152a:	ff 90       	pop	r15
    152c:	ef 90       	pop	r14
    152e:	df 90       	pop	r13
    1530:	cf 90       	pop	r12
    1532:	bf 90       	pop	r11
    1534:	af 90       	pop	r10
    1536:	9f 90       	pop	r9
    1538:	8f 90       	pop	r8
    153a:	7f 90       	pop	r7
    153c:	6f 90       	pop	r6
    153e:	5f 90       	pop	r5
    1540:	4f 90       	pop	r4
    1542:	3f 90       	pop	r3
    1544:	2f 90       	pop	r2
    1546:	08 95       	ret

00001548 <_ZN3PID10SetTuningsEdddi>:
 * This function allows the controller's dynamic performance to be adjusted.
 * it's called automatically from the constructor, but tunings can also
 * be adjusted on the fly during normal operation
 ******************************************************************************/
void PID::SetTunings(double Kp, double Ki, double Kd, int POn)
{
    1548:	4f 92       	push	r4
    154a:	5f 92       	push	r5
    154c:	6f 92       	push	r6
    154e:	7f 92       	push	r7
    1550:	8f 92       	push	r8
    1552:	9f 92       	push	r9
    1554:	af 92       	push	r10
    1556:	bf 92       	push	r11
    1558:	cf 92       	push	r12
    155a:	df 92       	push	r13
    155c:	ef 92       	push	r14
    155e:	ff 92       	push	r15
    1560:	0f 93       	push	r16
    1562:	1f 93       	push	r17
    1564:	cf 93       	push	r28
    1566:	df 93       	push	r29
    1568:	00 d0       	rcall	.+0      	; 0x156a <_ZN3PID10SetTuningsEdddi+0x22>
    156a:	00 d0       	rcall	.+0      	; 0x156c <_ZN3PID10SetTuningsEdddi+0x24>
    156c:	00 d0       	rcall	.+0      	; 0x156e <_ZN3PID10SetTuningsEdddi+0x26>
    156e:	cd b7       	in	r28, 0x3d	; 61
    1570:	de b7       	in	r29, 0x3e	; 62
    1572:	9e 83       	std	Y+6, r25	; 0x06
    1574:	8d 83       	std	Y+5, r24	; 0x05
    1576:	49 83       	std	Y+1, r20	; 0x01
    1578:	5a 83       	std	Y+2, r21	; 0x02
    157a:	6b 83       	std	Y+3, r22	; 0x03
    157c:	7c 83       	std	Y+4, r23	; 0x04
    157e:	28 01       	movw	r4, r16
    1580:	39 01       	movw	r6, r18
   if (Kp<0 || Ki<0 || Kd<0) return;
    1582:	20 e0       	ldi	r18, 0x00	; 0
    1584:	30 e0       	ldi	r19, 0x00	; 0
    1586:	a9 01       	movw	r20, r18
    1588:	69 81       	ldd	r22, Y+1	; 0x01
    158a:	7a 81       	ldd	r23, Y+2	; 0x02
    158c:	8b 81       	ldd	r24, Y+3	; 0x03
    158e:	9c 81       	ldd	r25, Y+4	; 0x04
    1590:	0e 94 6b 16 	call	0x2cd6	; 0x2cd6 <__cmpsf2>
    1594:	87 fd       	sbrc	r24, 7
    1596:	97 c0       	rjmp	.+302    	; 0x16c6 <_ZN3PID10SetTuningsEdddi+0x17e>
    1598:	20 e0       	ldi	r18, 0x00	; 0
    159a:	30 e0       	ldi	r19, 0x00	; 0
    159c:	a9 01       	movw	r20, r18
    159e:	c3 01       	movw	r24, r6
    15a0:	b2 01       	movw	r22, r4
    15a2:	0e 94 6b 16 	call	0x2cd6	; 0x2cd6 <__cmpsf2>
    15a6:	87 fd       	sbrc	r24, 7
    15a8:	8e c0       	rjmp	.+284    	; 0x16c6 <_ZN3PID10SetTuningsEdddi+0x17e>
    15aa:	20 e0       	ldi	r18, 0x00	; 0
    15ac:	30 e0       	ldi	r19, 0x00	; 0
    15ae:	a9 01       	movw	r20, r18
    15b0:	c7 01       	movw	r24, r14
    15b2:	b6 01       	movw	r22, r12
    15b4:	0e 94 6b 16 	call	0x2cd6	; 0x2cd6 <__cmpsf2>
    15b8:	87 fd       	sbrc	r24, 7
    15ba:	85 c0       	rjmp	.+266    	; 0x16c6 <_ZN3PID10SetTuningsEdddi+0x17e>

   pOn = POn;
    15bc:	ad 81       	ldd	r26, Y+5	; 0x05
    15be:	be 81       	ldd	r27, Y+6	; 0x06
    15c0:	5b 96       	adiw	r26, 0x1b	; 27
    15c2:	bc 92       	st	X, r11
    15c4:	ae 92       	st	-X, r10
    15c6:	5a 97       	sbiw	r26, 0x1a	; 26
   pOnE = POn == P_ON_E;
    15c8:	81 e0       	ldi	r24, 0x01	; 1
    15ca:	aa 94       	dec	r10
    15cc:	ab 28       	or	r10, r11
    15ce:	09 f0       	breq	.+2      	; 0x15d2 <_ZN3PID10SetTuningsEdddi+0x8a>
    15d0:	80 e0       	ldi	r24, 0x00	; 0
    15d2:	ed 81       	ldd	r30, Y+5	; 0x05
    15d4:	fe 81       	ldd	r31, Y+6	; 0x06
    15d6:	83 af       	std	Z+59, r24	; 0x3b

   dispKp = Kp; dispKi = Ki; dispKd = Kd;
    15d8:	89 81       	ldd	r24, Y+1	; 0x01
    15da:	9a 81       	ldd	r25, Y+2	; 0x02
    15dc:	ab 81       	ldd	r26, Y+3	; 0x03
    15de:	bc 81       	ldd	r27, Y+4	; 0x04
    15e0:	80 83       	st	Z, r24
    15e2:	91 83       	std	Z+1, r25	; 0x01
    15e4:	a2 83       	std	Z+2, r26	; 0x02
    15e6:	b3 83       	std	Z+3, r27	; 0x03
    15e8:	44 82       	std	Z+4, r4	; 0x04
    15ea:	55 82       	std	Z+5, r5	; 0x05
    15ec:	66 82       	std	Z+6, r6	; 0x06
    15ee:	77 82       	std	Z+7, r7	; 0x07
    15f0:	c0 86       	std	Z+8, r12	; 0x08
    15f2:	d1 86       	std	Z+9, r13	; 0x09
    15f4:	e2 86       	std	Z+10, r14	; 0x0a
    15f6:	f3 86       	std	Z+11, r15	; 0x0b

   double SampleTimeInSec = ((double)SampleTime)/1000;
    15f8:	66 a5       	ldd	r22, Z+46	; 0x2e
    15fa:	77 a5       	ldd	r23, Z+47	; 0x2f
    15fc:	80 a9       	ldd	r24, Z+48	; 0x30
    15fe:	91 a9       	ldd	r25, Z+49	; 0x31
    1600:	0e 94 18 17 	call	0x2e30	; 0x2e30 <__floatunsisf>
    1604:	20 e0       	ldi	r18, 0x00	; 0
    1606:	30 e0       	ldi	r19, 0x00	; 0
    1608:	4a e7       	ldi	r20, 0x7A	; 122
    160a:	54 e4       	ldi	r21, 0x44	; 68
    160c:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <__divsf3>
    1610:	4b 01       	movw	r8, r22
    1612:	5c 01       	movw	r10, r24
   kp = Kp;
    1614:	89 81       	ldd	r24, Y+1	; 0x01
    1616:	9a 81       	ldd	r25, Y+2	; 0x02
    1618:	ab 81       	ldd	r26, Y+3	; 0x03
    161a:	bc 81       	ldd	r27, Y+4	; 0x04
    161c:	ed 81       	ldd	r30, Y+5	; 0x05
    161e:	fe 81       	ldd	r31, Y+6	; 0x06
    1620:	84 87       	std	Z+12, r24	; 0x0c
    1622:	95 87       	std	Z+13, r25	; 0x0d
    1624:	a6 87       	std	Z+14, r26	; 0x0e
    1626:	b7 87       	std	Z+15, r27	; 0x0f
   ki = Ki * SampleTimeInSec;
    1628:	a5 01       	movw	r20, r10
    162a:	94 01       	movw	r18, r8
    162c:	c3 01       	movw	r24, r6
    162e:	b2 01       	movw	r22, r4
    1630:	0e 94 fe 17 	call	0x2ffc	; 0x2ffc <__mulsf3>
    1634:	2b 01       	movw	r4, r22
    1636:	3c 01       	movw	r6, r24
    1638:	ad 81       	ldd	r26, Y+5	; 0x05
    163a:	be 81       	ldd	r27, Y+6	; 0x06
    163c:	50 96       	adiw	r26, 0x10	; 16
    163e:	6d 93       	st	X+, r22
    1640:	7d 93       	st	X+, r23
    1642:	8d 93       	st	X+, r24
    1644:	9c 93       	st	X, r25
    1646:	53 97       	sbiw	r26, 0x13	; 19
   kd = Kd / SampleTimeInSec;
    1648:	a5 01       	movw	r20, r10
    164a:	94 01       	movw	r18, r8
    164c:	c7 01       	movw	r24, r14
    164e:	b6 01       	movw	r22, r12
    1650:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <__divsf3>
    1654:	6b 01       	movw	r12, r22
    1656:	7c 01       	movw	r14, r24
    1658:	ed 81       	ldd	r30, Y+5	; 0x05
    165a:	fe 81       	ldd	r31, Y+6	; 0x06
    165c:	64 8b       	std	Z+20, r22	; 0x14
    165e:	75 8b       	std	Z+21, r23	; 0x15
    1660:	86 8b       	std	Z+22, r24	; 0x16
    1662:	97 8b       	std	Z+23, r25	; 0x17

  if(controllerDirection ==REVERSE)
    1664:	80 8d       	ldd	r24, Z+24	; 0x18
    1666:	91 8d       	ldd	r25, Z+25	; 0x19
    1668:	01 97       	sbiw	r24, 0x01	; 1
    166a:	69 f5       	brne	.+90     	; 0x16c6 <_ZN3PID10SetTuningsEdddi+0x17e>
   {
      kp = (0 - kp);
    166c:	29 81       	ldd	r18, Y+1	; 0x01
    166e:	3a 81       	ldd	r19, Y+2	; 0x02
    1670:	4b 81       	ldd	r20, Y+3	; 0x03
    1672:	5c 81       	ldd	r21, Y+4	; 0x04
    1674:	60 e0       	ldi	r22, 0x00	; 0
    1676:	70 e0       	ldi	r23, 0x00	; 0
    1678:	cb 01       	movw	r24, r22
    167a:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <__subsf3>
    167e:	ad 81       	ldd	r26, Y+5	; 0x05
    1680:	be 81       	ldd	r27, Y+6	; 0x06
    1682:	1c 96       	adiw	r26, 0x0c	; 12
    1684:	6d 93       	st	X+, r22
    1686:	7d 93       	st	X+, r23
    1688:	8d 93       	st	X+, r24
    168a:	9c 93       	st	X, r25
    168c:	1f 97       	sbiw	r26, 0x0f	; 15
      ki = (0 - ki);
    168e:	a3 01       	movw	r20, r6
    1690:	92 01       	movw	r18, r4
    1692:	60 e0       	ldi	r22, 0x00	; 0
    1694:	70 e0       	ldi	r23, 0x00	; 0
    1696:	cb 01       	movw	r24, r22
    1698:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <__subsf3>
    169c:	ed 81       	ldd	r30, Y+5	; 0x05
    169e:	fe 81       	ldd	r31, Y+6	; 0x06
    16a0:	60 8b       	std	Z+16, r22	; 0x10
    16a2:	71 8b       	std	Z+17, r23	; 0x11
    16a4:	82 8b       	std	Z+18, r24	; 0x12
    16a6:	93 8b       	std	Z+19, r25	; 0x13
      kd = (0 - kd);
    16a8:	a7 01       	movw	r20, r14
    16aa:	96 01       	movw	r18, r12
    16ac:	60 e0       	ldi	r22, 0x00	; 0
    16ae:	70 e0       	ldi	r23, 0x00	; 0
    16b0:	cb 01       	movw	r24, r22
    16b2:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <__subsf3>
    16b6:	ad 81       	ldd	r26, Y+5	; 0x05
    16b8:	be 81       	ldd	r27, Y+6	; 0x06
    16ba:	54 96       	adiw	r26, 0x14	; 20
    16bc:	6d 93       	st	X+, r22
    16be:	7d 93       	st	X+, r23
    16c0:	8d 93       	st	X+, r24
    16c2:	9c 93       	st	X, r25
    16c4:	57 97       	sbiw	r26, 0x17	; 23
   }
}
    16c6:	26 96       	adiw	r28, 0x06	; 6
    16c8:	0f b6       	in	r0, 0x3f	; 63
    16ca:	f8 94       	cli
    16cc:	de bf       	out	0x3e, r29	; 62
    16ce:	0f be       	out	0x3f, r0	; 63
    16d0:	cd bf       	out	0x3d, r28	; 61
    16d2:	df 91       	pop	r29
    16d4:	cf 91       	pop	r28
    16d6:	1f 91       	pop	r17
    16d8:	0f 91       	pop	r16
    16da:	ff 90       	pop	r15
    16dc:	ef 90       	pop	r14
    16de:	df 90       	pop	r13
    16e0:	cf 90       	pop	r12
    16e2:	bf 90       	pop	r11
    16e4:	af 90       	pop	r10
    16e6:	9f 90       	pop	r9
    16e8:	8f 90       	pop	r8
    16ea:	7f 90       	pop	r7
    16ec:	6f 90       	pop	r6
    16ee:	5f 90       	pop	r5
    16f0:	4f 90       	pop	r4
    16f2:	08 95       	ret

000016f4 <_ZN3PID10SetTuningsEddd>:

/* SetTunings(...)*************************************************************
 * Set Tunings using the last-rembered POn setting
 ******************************************************************************/
void PID::SetTunings(double Kp, double Ki, double Kd){
    16f4:	af 92       	push	r10
    16f6:	bf 92       	push	r11
    16f8:	cf 92       	push	r12
    16fa:	df 92       	push	r13
    16fc:	ef 92       	push	r14
    16fe:	ff 92       	push	r15
    1700:	0f 93       	push	r16
    1702:	1f 93       	push	r17
    SetTunings(Kp, Ki, Kd, pOn); 
    1704:	fc 01       	movw	r30, r24
    1706:	a2 8c       	ldd	r10, Z+26	; 0x1a
    1708:	b3 8c       	ldd	r11, Z+27	; 0x1b
    170a:	0e 94 a4 0a 	call	0x1548	; 0x1548 <_ZN3PID10SetTuningsEdddi>
}
    170e:	1f 91       	pop	r17
    1710:	0f 91       	pop	r16
    1712:	ff 90       	pop	r15
    1714:	ef 90       	pop	r14
    1716:	df 90       	pop	r13
    1718:	cf 90       	pop	r12
    171a:	bf 90       	pop	r11
    171c:	af 90       	pop	r10
    171e:	08 95       	ret

00001720 <_ZN3PID13SetSampleTimeEi>:

/* SetSampleTime(...) *********************************************************
 * sets the period, in Milliseconds, at which the calculation is performed
 ******************************************************************************/
void PID::SetSampleTime(int NewSampleTime)
{
    1720:	8f 92       	push	r8
    1722:	9f 92       	push	r9
    1724:	af 92       	push	r10
    1726:	bf 92       	push	r11
    1728:	cf 92       	push	r12
    172a:	df 92       	push	r13
    172c:	ef 92       	push	r14
    172e:	ff 92       	push	r15
    1730:	cf 93       	push	r28
    1732:	df 93       	push	r29
   if (NewSampleTime > 0)
    1734:	16 16       	cp	r1, r22
    1736:	17 06       	cpc	r1, r23
    1738:	b4 f5       	brge	.+108    	; 0x17a6 <_ZN3PID13SetSampleTimeEi+0x86>
    173a:	6b 01       	movw	r12, r22
    173c:	ec 01       	movw	r28, r24
   {
      double ratio  = (double)NewSampleTime
                      / (double)SampleTime;
    173e:	0d 2c       	mov	r0, r13
    1740:	00 0c       	add	r0, r0
    1742:	ee 08       	sbc	r14, r14
    1744:	ff 08       	sbc	r15, r15
    1746:	c7 01       	movw	r24, r14
    1748:	b6 01       	movw	r22, r12
    174a:	0e 94 1a 17 	call	0x2e34	; 0x2e34 <__floatsisf>
    174e:	4b 01       	movw	r8, r22
    1750:	5c 01       	movw	r10, r24
    1752:	6e a5       	ldd	r22, Y+46	; 0x2e
    1754:	7f a5       	ldd	r23, Y+47	; 0x2f
    1756:	88 a9       	ldd	r24, Y+48	; 0x30
    1758:	99 a9       	ldd	r25, Y+49	; 0x31
    175a:	0e 94 18 17 	call	0x2e30	; 0x2e30 <__floatunsisf>
    175e:	9b 01       	movw	r18, r22
    1760:	ac 01       	movw	r20, r24
    1762:	c5 01       	movw	r24, r10
    1764:	b4 01       	movw	r22, r8
    1766:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <__divsf3>
    176a:	4b 01       	movw	r8, r22
    176c:	5c 01       	movw	r10, r24
      ki *= ratio;
    176e:	9b 01       	movw	r18, r22
    1770:	ac 01       	movw	r20, r24
    1772:	68 89       	ldd	r22, Y+16	; 0x10
    1774:	79 89       	ldd	r23, Y+17	; 0x11
    1776:	8a 89       	ldd	r24, Y+18	; 0x12
    1778:	9b 89       	ldd	r25, Y+19	; 0x13
    177a:	0e 94 fe 17 	call	0x2ffc	; 0x2ffc <__mulsf3>
    177e:	68 8b       	std	Y+16, r22	; 0x10
    1780:	79 8b       	std	Y+17, r23	; 0x11
    1782:	8a 8b       	std	Y+18, r24	; 0x12
    1784:	9b 8b       	std	Y+19, r25	; 0x13
      kd /= ratio;
    1786:	a5 01       	movw	r20, r10
    1788:	94 01       	movw	r18, r8
    178a:	6c 89       	ldd	r22, Y+20	; 0x14
    178c:	7d 89       	ldd	r23, Y+21	; 0x15
    178e:	8e 89       	ldd	r24, Y+22	; 0x16
    1790:	9f 89       	ldd	r25, Y+23	; 0x17
    1792:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <__divsf3>
    1796:	6c 8b       	std	Y+20, r22	; 0x14
    1798:	7d 8b       	std	Y+21, r23	; 0x15
    179a:	8e 8b       	std	Y+22, r24	; 0x16
    179c:	9f 8b       	std	Y+23, r25	; 0x17
      SampleTime = (unsigned long)NewSampleTime;
    179e:	ce a6       	std	Y+46, r12	; 0x2e
    17a0:	df a6       	std	Y+47, r13	; 0x2f
    17a2:	e8 aa       	std	Y+48, r14	; 0x30
    17a4:	f9 aa       	std	Y+49, r15	; 0x31
   }
}
    17a6:	df 91       	pop	r29
    17a8:	cf 91       	pop	r28
    17aa:	ff 90       	pop	r15
    17ac:	ef 90       	pop	r14
    17ae:	df 90       	pop	r13
    17b0:	cf 90       	pop	r12
    17b2:	bf 90       	pop	r11
    17b4:	af 90       	pop	r10
    17b6:	9f 90       	pop	r9
    17b8:	8f 90       	pop	r8
    17ba:	08 95       	ret

000017bc <_ZN3PID15SetOutputLimitsEdd>:
 *  be doing a time window and will need 0-8000 or something.  or maybe they'll
 *  want to clamp it from 0-125.  who knows.  at any rate, that can all be done
 *  here.
 **************************************************************************/
void PID::SetOutputLimits(double Min, double Max)
{
    17bc:	2f 92       	push	r2
    17be:	3f 92       	push	r3
    17c0:	4f 92       	push	r4
    17c2:	5f 92       	push	r5
    17c4:	6f 92       	push	r6
    17c6:	7f 92       	push	r7
    17c8:	8f 92       	push	r8
    17ca:	9f 92       	push	r9
    17cc:	af 92       	push	r10
    17ce:	bf 92       	push	r11
    17d0:	cf 92       	push	r12
    17d2:	df 92       	push	r13
    17d4:	ef 92       	push	r14
    17d6:	ff 92       	push	r15
    17d8:	0f 93       	push	r16
    17da:	1f 93       	push	r17
    17dc:	cf 93       	push	r28
    17de:	df 93       	push	r29
    17e0:	ec 01       	movw	r28, r24
    17e2:	6a 01       	movw	r12, r20
    17e4:	7b 01       	movw	r14, r22
    17e6:	48 01       	movw	r8, r16
    17e8:	59 01       	movw	r10, r18
   if(Min >= Max) return;
    17ea:	a9 01       	movw	r20, r18
    17ec:	98 01       	movw	r18, r16
    17ee:	c7 01       	movw	r24, r14
    17f0:	b6 01       	movw	r22, r12
    17f2:	0e 94 f1 17 	call	0x2fe2	; 0x2fe2 <__gesf2>
    17f6:	87 ff       	sbrs	r24, 7
    17f8:	4e c0       	rjmp	.+156    	; 0x1896 <_ZN3PID15SetOutputLimitsEdd+0xda>
   outMin = Min;
    17fa:	ca aa       	std	Y+50, r12	; 0x32
    17fc:	db aa       	std	Y+51, r13	; 0x33
    17fe:	ec aa       	std	Y+52, r14	; 0x34
    1800:	fd aa       	std	Y+53, r15	; 0x35
   outMax = Max;
    1802:	8e aa       	std	Y+54, r8	; 0x36
    1804:	9f aa       	std	Y+55, r9	; 0x37
    1806:	a8 ae       	std	Y+56, r10	; 0x38
    1808:	b9 ae       	std	Y+57, r11	; 0x39

   if(inAuto)
    180a:	8a ad       	ldd	r24, Y+58	; 0x3a
    180c:	88 23       	and	r24, r24
    180e:	09 f4       	brne	.+2      	; 0x1812 <_ZN3PID15SetOutputLimitsEdd+0x56>
    1810:	42 c0       	rjmp	.+132    	; 0x1896 <_ZN3PID15SetOutputLimitsEdd+0xda>
   {
	   if(*myOutput > outMax) *myOutput = outMax;
    1812:	2e 8c       	ldd	r2, Y+30	; 0x1e
    1814:	3f 8c       	ldd	r3, Y+31	; 0x1f
    1816:	f1 01       	movw	r30, r2
    1818:	40 80       	ld	r4, Z
    181a:	51 80       	ldd	r5, Z+1	; 0x01
    181c:	62 80       	ldd	r6, Z+2	; 0x02
    181e:	73 80       	ldd	r7, Z+3	; 0x03
    1820:	a3 01       	movw	r20, r6
    1822:	92 01       	movw	r18, r4
    1824:	c5 01       	movw	r24, r10
    1826:	b4 01       	movw	r22, r8
    1828:	0e 94 6b 16 	call	0x2cd6	; 0x2cd6 <__cmpsf2>
    182c:	87 ff       	sbrs	r24, 7
    182e:	06 c0       	rjmp	.+12     	; 0x183c <_ZN3PID15SetOutputLimitsEdd+0x80>
    1830:	f1 01       	movw	r30, r2
    1832:	80 82       	st	Z, r8
    1834:	91 82       	std	Z+1, r9	; 0x01
    1836:	a2 82       	std	Z+2, r10	; 0x02
    1838:	b3 82       	std	Z+3, r11	; 0x03
    183a:	0d c0       	rjmp	.+26     	; 0x1856 <_ZN3PID15SetOutputLimitsEdd+0x9a>
	   else if(*myOutput < outMin) *myOutput = outMin;
    183c:	a3 01       	movw	r20, r6
    183e:	92 01       	movw	r18, r4
    1840:	c7 01       	movw	r24, r14
    1842:	b6 01       	movw	r22, r12
    1844:	0e 94 f1 17 	call	0x2fe2	; 0x2fe2 <__gesf2>
    1848:	18 16       	cp	r1, r24
    184a:	2c f4       	brge	.+10     	; 0x1856 <_ZN3PID15SetOutputLimitsEdd+0x9a>
    184c:	f1 01       	movw	r30, r2
    184e:	c0 82       	st	Z, r12
    1850:	d1 82       	std	Z+1, r13	; 0x01
    1852:	e2 82       	std	Z+2, r14	; 0x02
    1854:	f3 82       	std	Z+3, r15	; 0x03

	   if(outputSum > outMax) outputSum= outMax;
    1856:	8e a0       	ldd	r8, Y+38	; 0x26
    1858:	9f a0       	ldd	r9, Y+39	; 0x27
    185a:	a8 a4       	ldd	r10, Y+40	; 0x28
    185c:	b9 a4       	ldd	r11, Y+41	; 0x29
    185e:	ce a8       	ldd	r12, Y+54	; 0x36
    1860:	df a8       	ldd	r13, Y+55	; 0x37
    1862:	e8 ac       	ldd	r14, Y+56	; 0x38
    1864:	f9 ac       	ldd	r15, Y+57	; 0x39
    1866:	a7 01       	movw	r20, r14
    1868:	96 01       	movw	r18, r12
    186a:	c5 01       	movw	r24, r10
    186c:	b4 01       	movw	r22, r8
    186e:	0e 94 f1 17 	call	0x2fe2	; 0x2fe2 <__gesf2>
    1872:	18 16       	cp	r1, r24
    1874:	64 f0       	brlt	.+24     	; 0x188e <_ZN3PID15SetOutputLimitsEdd+0xd2>
	   else if(outputSum < outMin) outputSum= outMin;
    1876:	ca a8       	ldd	r12, Y+50	; 0x32
    1878:	db a8       	ldd	r13, Y+51	; 0x33
    187a:	ec a8       	ldd	r14, Y+52	; 0x34
    187c:	fd a8       	ldd	r15, Y+53	; 0x35
    187e:	a7 01       	movw	r20, r14
    1880:	96 01       	movw	r18, r12
    1882:	c5 01       	movw	r24, r10
    1884:	b4 01       	movw	r22, r8
    1886:	0e 94 6b 16 	call	0x2cd6	; 0x2cd6 <__cmpsf2>
    188a:	87 ff       	sbrs	r24, 7
    188c:	04 c0       	rjmp	.+8      	; 0x1896 <_ZN3PID15SetOutputLimitsEdd+0xda>
    188e:	ce a2       	std	Y+38, r12	; 0x26
    1890:	df a2       	std	Y+39, r13	; 0x27
    1892:	e8 a6       	std	Y+40, r14	; 0x28
    1894:	f9 a6       	std	Y+41, r15	; 0x29
   }
}
    1896:	df 91       	pop	r29
    1898:	cf 91       	pop	r28
    189a:	1f 91       	pop	r17
    189c:	0f 91       	pop	r16
    189e:	ff 90       	pop	r15
    18a0:	ef 90       	pop	r14
    18a2:	df 90       	pop	r13
    18a4:	cf 90       	pop	r12
    18a6:	bf 90       	pop	r11
    18a8:	af 90       	pop	r10
    18aa:	9f 90       	pop	r9
    18ac:	8f 90       	pop	r8
    18ae:	7f 90       	pop	r7
    18b0:	6f 90       	pop	r6
    18b2:	5f 90       	pop	r5
    18b4:	4f 90       	pop	r4
    18b6:	3f 90       	pop	r3
    18b8:	2f 90       	pop	r2
    18ba:	08 95       	ret

000018bc <_ZN3PID10InitializeEv>:
/* Initialize()****************************************************************
 *	does all the things that need to happen to ensure a bumpless transfer
 *  from manual to automatic mode.
 ******************************************************************************/
void PID::Initialize()
{
    18bc:	8f 92       	push	r8
    18be:	9f 92       	push	r9
    18c0:	af 92       	push	r10
    18c2:	bf 92       	push	r11
    18c4:	cf 92       	push	r12
    18c6:	df 92       	push	r13
    18c8:	ef 92       	push	r14
    18ca:	ff 92       	push	r15
    18cc:	cf 93       	push	r28
    18ce:	df 93       	push	r29
    18d0:	ec 01       	movw	r28, r24
   outputSum = *myOutput;
    18d2:	ee 8d       	ldd	r30, Y+30	; 0x1e
    18d4:	ff 8d       	ldd	r31, Y+31	; 0x1f
    18d6:	c0 80       	ld	r12, Z
    18d8:	d1 80       	ldd	r13, Z+1	; 0x01
    18da:	e2 80       	ldd	r14, Z+2	; 0x02
    18dc:	f3 80       	ldd	r15, Z+3	; 0x03
    18de:	ce a2       	std	Y+38, r12	; 0x26
    18e0:	df a2       	std	Y+39, r13	; 0x27
    18e2:	e8 a6       	std	Y+40, r14	; 0x28
    18e4:	f9 a6       	std	Y+41, r15	; 0x29
   lastInput = *myInput;
    18e6:	ec 8d       	ldd	r30, Y+28	; 0x1c
    18e8:	fd 8d       	ldd	r31, Y+29	; 0x1d
    18ea:	80 81       	ld	r24, Z
    18ec:	91 81       	ldd	r25, Z+1	; 0x01
    18ee:	a2 81       	ldd	r26, Z+2	; 0x02
    18f0:	b3 81       	ldd	r27, Z+3	; 0x03
    18f2:	8a a7       	std	Y+42, r24	; 0x2a
    18f4:	9b a7       	std	Y+43, r25	; 0x2b
    18f6:	ac a7       	std	Y+44, r26	; 0x2c
    18f8:	bd a7       	std	Y+45, r27	; 0x2d
   if(outputSum > outMax) outputSum = outMax;
    18fa:	8e a8       	ldd	r8, Y+54	; 0x36
    18fc:	9f a8       	ldd	r9, Y+55	; 0x37
    18fe:	a8 ac       	ldd	r10, Y+56	; 0x38
    1900:	b9 ac       	ldd	r11, Y+57	; 0x39
    1902:	a5 01       	movw	r20, r10
    1904:	94 01       	movw	r18, r8
    1906:	c7 01       	movw	r24, r14
    1908:	b6 01       	movw	r22, r12
    190a:	0e 94 f1 17 	call	0x2fe2	; 0x2fe2 <__gesf2>
    190e:	18 16       	cp	r1, r24
    1910:	64 f0       	brlt	.+24     	; 0x192a <_ZN3PID10InitializeEv+0x6e>
   else if(outputSum < outMin) outputSum = outMin;
    1912:	8a a8       	ldd	r8, Y+50	; 0x32
    1914:	9b a8       	ldd	r9, Y+51	; 0x33
    1916:	ac a8       	ldd	r10, Y+52	; 0x34
    1918:	bd a8       	ldd	r11, Y+53	; 0x35
    191a:	a5 01       	movw	r20, r10
    191c:	94 01       	movw	r18, r8
    191e:	c7 01       	movw	r24, r14
    1920:	b6 01       	movw	r22, r12
    1922:	0e 94 6b 16 	call	0x2cd6	; 0x2cd6 <__cmpsf2>
    1926:	87 ff       	sbrs	r24, 7
    1928:	04 c0       	rjmp	.+8      	; 0x1932 <_ZN3PID10InitializeEv+0x76>
    192a:	8e a2       	std	Y+38, r8	; 0x26
    192c:	9f a2       	std	Y+39, r9	; 0x27
    192e:	a8 a6       	std	Y+40, r10	; 0x28
    1930:	b9 a6       	std	Y+41, r11	; 0x29
}
    1932:	df 91       	pop	r29
    1934:	cf 91       	pop	r28
    1936:	ff 90       	pop	r15
    1938:	ef 90       	pop	r14
    193a:	df 90       	pop	r13
    193c:	cf 90       	pop	r12
    193e:	bf 90       	pop	r11
    1940:	af 90       	pop	r10
    1942:	9f 90       	pop	r9
    1944:	8f 90       	pop	r8
    1946:	08 95       	ret

00001948 <_ZN3PID7SetModeEi>:
 * Allows the controller Mode to be set to manual (0) or Automatic (non-zero)
 * when the transition from manual to auto occurs, the controller is
 * automatically initialized
 ******************************************************************************/
void PID::SetMode(int Mode)
{
    1948:	1f 93       	push	r17
    194a:	cf 93       	push	r28
    194c:	df 93       	push	r29
    194e:	ec 01       	movw	r28, r24
    bool newAuto = (Mode == AUTOMATIC);
    1950:	11 e0       	ldi	r17, 0x01	; 1
    1952:	61 30       	cpi	r22, 0x01	; 1
    1954:	71 05       	cpc	r23, r1
    1956:	09 f0       	breq	.+2      	; 0x195a <_ZN3PID7SetModeEi+0x12>
    1958:	10 e0       	ldi	r17, 0x00	; 0
    if(newAuto && !inAuto)
    195a:	61 30       	cpi	r22, 0x01	; 1
    195c:	71 05       	cpc	r23, r1
    195e:	31 f4       	brne	.+12     	; 0x196c <_ZN3PID7SetModeEi+0x24>
    1960:	8a ad       	ldd	r24, Y+58	; 0x3a
    1962:	81 11       	cpse	r24, r1
    1964:	03 c0       	rjmp	.+6      	; 0x196c <_ZN3PID7SetModeEi+0x24>
    {  /*we just went from manual to auto*/
        PID::Initialize();
    1966:	ce 01       	movw	r24, r28
    1968:	0e 94 5e 0c 	call	0x18bc	; 0x18bc <_ZN3PID10InitializeEv>
    }
    inAuto = newAuto;
    196c:	1a af       	std	Y+58, r17	; 0x3a
}
    196e:	df 91       	pop	r29
    1970:	cf 91       	pop	r28
    1972:	1f 91       	pop	r17
    1974:	08 95       	ret

00001976 <_ZN3PID22SetControllerDirectionEi>:
 * to +Input) or a REVERSE acting process(+Output leads to -Input.)  we need to
 * know which one, because otherwise we may increase the output when we should
 * be decreasing.  This is called from the constructor.
 ******************************************************************************/
void PID::SetControllerDirection(int Direction)
{
    1976:	0f 93       	push	r16
    1978:	1f 93       	push	r17
    197a:	cf 93       	push	r28
    197c:	df 93       	push	r29
    197e:	ec 01       	movw	r28, r24
    1980:	8b 01       	movw	r16, r22
   if(inAuto && Direction !=controllerDirection)
    1982:	8a ad       	ldd	r24, Y+58	; 0x3a
    1984:	88 23       	and	r24, r24
    1986:	61 f1       	breq	.+88     	; 0x19e0 <_ZN3PID22SetControllerDirectionEi+0x6a>
    1988:	88 8d       	ldd	r24, Y+24	; 0x18
    198a:	99 8d       	ldd	r25, Y+25	; 0x19
    198c:	86 17       	cp	r24, r22
    198e:	97 07       	cpc	r25, r23
    1990:	39 f1       	breq	.+78     	; 0x19e0 <_ZN3PID22SetControllerDirectionEi+0x6a>
   {
	    kp = (0 - kp);
    1992:	2c 85       	ldd	r18, Y+12	; 0x0c
    1994:	3d 85       	ldd	r19, Y+13	; 0x0d
    1996:	4e 85       	ldd	r20, Y+14	; 0x0e
    1998:	5f 85       	ldd	r21, Y+15	; 0x0f
    199a:	60 e0       	ldi	r22, 0x00	; 0
    199c:	70 e0       	ldi	r23, 0x00	; 0
    199e:	cb 01       	movw	r24, r22
    19a0:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <__subsf3>
    19a4:	6c 87       	std	Y+12, r22	; 0x0c
    19a6:	7d 87       	std	Y+13, r23	; 0x0d
    19a8:	8e 87       	std	Y+14, r24	; 0x0e
    19aa:	9f 87       	std	Y+15, r25	; 0x0f
      ki = (0 - ki);
    19ac:	28 89       	ldd	r18, Y+16	; 0x10
    19ae:	39 89       	ldd	r19, Y+17	; 0x11
    19b0:	4a 89       	ldd	r20, Y+18	; 0x12
    19b2:	5b 89       	ldd	r21, Y+19	; 0x13
    19b4:	60 e0       	ldi	r22, 0x00	; 0
    19b6:	70 e0       	ldi	r23, 0x00	; 0
    19b8:	cb 01       	movw	r24, r22
    19ba:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <__subsf3>
    19be:	68 8b       	std	Y+16, r22	; 0x10
    19c0:	79 8b       	std	Y+17, r23	; 0x11
    19c2:	8a 8b       	std	Y+18, r24	; 0x12
    19c4:	9b 8b       	std	Y+19, r25	; 0x13
      kd = (0 - kd);
    19c6:	2c 89       	ldd	r18, Y+20	; 0x14
    19c8:	3d 89       	ldd	r19, Y+21	; 0x15
    19ca:	4e 89       	ldd	r20, Y+22	; 0x16
    19cc:	5f 89       	ldd	r21, Y+23	; 0x17
    19ce:	60 e0       	ldi	r22, 0x00	; 0
    19d0:	70 e0       	ldi	r23, 0x00	; 0
    19d2:	cb 01       	movw	r24, r22
    19d4:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <__subsf3>
    19d8:	6c 8b       	std	Y+20, r22	; 0x14
    19da:	7d 8b       	std	Y+21, r23	; 0x15
    19dc:	8e 8b       	std	Y+22, r24	; 0x16
    19de:	9f 8b       	std	Y+23, r25	; 0x17
   }
   controllerDirection = Direction;
    19e0:	19 8f       	std	Y+25, r17	; 0x19
    19e2:	08 8f       	std	Y+24, r16	; 0x18
}
    19e4:	df 91       	pop	r29
    19e6:	cf 91       	pop	r28
    19e8:	1f 91       	pop	r17
    19ea:	0f 91       	pop	r16
    19ec:	08 95       	ret

000019ee <_ZN3PIDC1EPdS0_S0_dddii>:

/*Constructor (...)*********************************************************
 *    The parameters specified here are those for for which we can't set up
 *    reliable defaults, so we need to have the user set them.
 ***************************************************************************/
PID::PID(double* Input, double* Output, double* Setpoint,
    19ee:	4f 92       	push	r4
    19f0:	5f 92       	push	r5
    19f2:	6f 92       	push	r6
    19f4:	7f 92       	push	r7
    19f6:	8f 92       	push	r8
    19f8:	9f 92       	push	r9
    19fa:	af 92       	push	r10
    19fc:	bf 92       	push	r11
    19fe:	cf 92       	push	r12
    1a00:	df 92       	push	r13
    1a02:	ef 92       	push	r14
    1a04:	ff 92       	push	r15
    1a06:	0f 93       	push	r16
    1a08:	1f 93       	push	r17
    1a0a:	cf 93       	push	r28
    1a0c:	df 93       	push	r29
    1a0e:	00 d0       	rcall	.+0      	; 0x1a10 <_ZN3PIDC1EPdS0_S0_dddii+0x22>
    1a10:	00 d0       	rcall	.+0      	; 0x1a12 <_ZN3PIDC1EPdS0_S0_dddii+0x24>
    1a12:	cd b7       	in	r28, 0x3d	; 61
    1a14:	de b7       	in	r29, 0x3e	; 62
    1a16:	4c 01       	movw	r8, r24
    1a18:	27 01       	movw	r4, r14
    1a1a:	38 01       	movw	r6, r16
    1a1c:	a9 82       	std	Y+1, r10	; 0x01
    1a1e:	ba 82       	std	Y+2, r11	; 0x02
    1a20:	cb 82       	std	Y+3, r12	; 0x03
    1a22:	dc 82       	std	Y+4, r13	; 0x04
        double Kp, double Ki, double Kd, int POn, int ControllerDirection)
{
    myOutput = Output;
    1a24:	fc 01       	movw	r30, r24
    1a26:	57 8f       	std	Z+31, r21	; 0x1f
    1a28:	46 8f       	std	Z+30, r20	; 0x1e
    myInput = Input;
    1a2a:	75 8f       	std	Z+29, r23	; 0x1d
    1a2c:	64 8f       	std	Z+28, r22	; 0x1c
    mySetpoint = Setpoint;
    1a2e:	31 a3       	std	Z+33, r19	; 0x21
    1a30:	20 a3       	std	Z+32, r18	; 0x20
    inAuto = false;
    1a32:	12 ae       	std	Z+58, r1	; 0x3a
 *  here.
 **************************************************************************/
void PID::SetOutputLimits(double Min, double Max)
{
   if(Min >= Max) return;
   outMin = Min;
    1a34:	12 aa       	std	Z+50, r1	; 0x32
    1a36:	13 aa       	std	Z+51, r1	; 0x33
    1a38:	14 aa       	std	Z+52, r1	; 0x34
    1a3a:	15 aa       	std	Z+53, r1	; 0x35
   outMax = Max;
    1a3c:	80 e0       	ldi	r24, 0x00	; 0
    1a3e:	90 e0       	ldi	r25, 0x00	; 0
    1a40:	af e7       	ldi	r26, 0x7F	; 127
    1a42:	b3 e4       	ldi	r27, 0x43	; 67
    1a44:	86 ab       	std	Z+54, r24	; 0x36
    1a46:	97 ab       	std	Z+55, r25	; 0x37
    1a48:	a0 af       	std	Z+56, r26	; 0x38
    1a4a:	b1 af       	std	Z+57, r27	; 0x39
    inAuto = false;

    PID::SetOutputLimits(0, 255);				//default output limit corresponds to
												//the arduino pwm limits

    SampleTime = 100;							//default Controller Sample Time is 0.1 seconds
    1a4c:	84 e6       	ldi	r24, 0x64	; 100
    1a4e:	90 e0       	ldi	r25, 0x00	; 0
    1a50:	a0 e0       	ldi	r26, 0x00	; 0
    1a52:	b0 e0       	ldi	r27, 0x00	; 0
    1a54:	86 a7       	std	Z+46, r24	; 0x2e
    1a56:	97 a7       	std	Z+47, r25	; 0x2f
    1a58:	a0 ab       	std	Z+48, r26	; 0x30
    1a5a:	b1 ab       	std	Z+49, r27	; 0x31

    PID::SetControllerDirection(ControllerDirection);
    1a5c:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1a5e:	7e 8d       	ldd	r23, Y+30	; 0x1e
    1a60:	c4 01       	movw	r24, r8
    1a62:	0e 94 bb 0c 	call	0x1976	; 0x1976 <_ZN3PID22SetControllerDirectionEi>
    PID::SetTunings(Kp, Ki, Kd, POn);
    1a66:	ab 8c       	ldd	r10, Y+27	; 0x1b
    1a68:	bc 8c       	ldd	r11, Y+28	; 0x1c
    1a6a:	cf 88       	ldd	r12, Y+23	; 0x17
    1a6c:	d8 8c       	ldd	r13, Y+24	; 0x18
    1a6e:	e9 8c       	ldd	r14, Y+25	; 0x19
    1a70:	fa 8c       	ldd	r15, Y+26	; 0x1a
    1a72:	09 81       	ldd	r16, Y+1	; 0x01
    1a74:	1a 81       	ldd	r17, Y+2	; 0x02
    1a76:	2b 81       	ldd	r18, Y+3	; 0x03
    1a78:	3c 81       	ldd	r19, Y+4	; 0x04
    1a7a:	b3 01       	movw	r22, r6
    1a7c:	a2 01       	movw	r20, r4
    1a7e:	c4 01       	movw	r24, r8
    1a80:	0e 94 a4 0a 	call	0x1548	; 0x1548 <_ZN3PID10SetTuningsEdddi>

    lastTime = millis()-SampleTime;
    1a84:	0e 94 76 1c 	call	0x38ec	; 0x38ec <millis>
    1a88:	f4 01       	movw	r30, r8
    1a8a:	46 a4       	ldd	r4, Z+46	; 0x2e
    1a8c:	57 a4       	ldd	r5, Z+47	; 0x2f
    1a8e:	60 a8       	ldd	r6, Z+48	; 0x30
    1a90:	71 a8       	ldd	r7, Z+49	; 0x31
    1a92:	dc 01       	movw	r26, r24
    1a94:	cb 01       	movw	r24, r22
    1a96:	84 19       	sub	r24, r4
    1a98:	95 09       	sbc	r25, r5
    1a9a:	a6 09       	sbc	r26, r6
    1a9c:	b7 09       	sbc	r27, r7
    1a9e:	82 a3       	std	Z+34, r24	; 0x22
    1aa0:	93 a3       	std	Z+35, r25	; 0x23
    1aa2:	a4 a3       	std	Z+36, r26	; 0x24
    1aa4:	b5 a3       	std	Z+37, r27	; 0x25
}
    1aa6:	0f 90       	pop	r0
    1aa8:	0f 90       	pop	r0
    1aaa:	0f 90       	pop	r0
    1aac:	0f 90       	pop	r0
    1aae:	df 91       	pop	r29
    1ab0:	cf 91       	pop	r28
    1ab2:	1f 91       	pop	r17
    1ab4:	0f 91       	pop	r16
    1ab6:	ff 90       	pop	r15
    1ab8:	ef 90       	pop	r14
    1aba:	df 90       	pop	r13
    1abc:	cf 90       	pop	r12
    1abe:	bf 90       	pop	r11
    1ac0:	af 90       	pop	r10
    1ac2:	9f 90       	pop	r9
    1ac4:	8f 90       	pop	r8
    1ac6:	7f 90       	pop	r7
    1ac8:	6f 90       	pop	r6
    1aca:	5f 90       	pop	r5
    1acc:	4f 90       	pop	r4
    1ace:	08 95       	ret

00001ad0 <_ZN6I2Cdev10writeBytesEhhhPh>:
        b &= mask;
        b >>= (bitStart - length + 1);
        *data = b;
    }
    return count;
}
    1ad0:	ff 92       	push	r15
    1ad2:	0f 93       	push	r16
    1ad4:	1f 93       	push	r17
    1ad6:	cf 93       	push	r28
    1ad8:	df 93       	push	r29
    1ada:	c6 2f       	mov	r28, r22
    1adc:	14 2f       	mov	r17, r20
    1ade:	f2 2e       	mov	r15, r18
    1ae0:	03 2f       	mov	r16, r19
    1ae2:	68 2f       	mov	r22, r24
    1ae4:	87 ec       	ldi	r24, 0xC7	; 199
    1ae6:	93 e0       	ldi	r25, 0x03	; 3
    1ae8:	0e 94 02 13 	call	0x2604	; 0x2604 <_ZN7TwoWire17beginTransmissionEh>
    1aec:	6c 2f       	mov	r22, r28
    1aee:	87 ec       	ldi	r24, 0xC7	; 199
    1af0:	93 e0       	ldi	r25, 0x03	; 3
    1af2:	0e 94 c3 12 	call	0x2586	; 0x2586 <_ZN7TwoWire5writeEh>
    1af6:	cf 2d       	mov	r28, r15
    1af8:	d0 2f       	mov	r29, r16
    1afa:	ce 01       	movw	r24, r28
    1afc:	81 0f       	add	r24, r17
    1afe:	91 1d       	adc	r25, r1
    1b00:	8c 01       	movw	r16, r24
    1b02:	c0 17       	cp	r28, r16
    1b04:	d1 07       	cpc	r29, r17
    1b06:	31 f0       	breq	.+12     	; 0x1b14 <_ZN6I2Cdev10writeBytesEhhhPh+0x44>
    1b08:	69 91       	ld	r22, Y+
    1b0a:	87 ec       	ldi	r24, 0xC7	; 199
    1b0c:	93 e0       	ldi	r25, 0x03	; 3
    1b0e:	0e 94 c3 12 	call	0x2586	; 0x2586 <_ZN7TwoWire5writeEh>
    1b12:	f7 cf       	rjmp	.-18     	; 0x1b02 <_ZN6I2Cdev10writeBytesEhhhPh+0x32>
    1b14:	87 ec       	ldi	r24, 0xC7	; 199
    1b16:	93 e0       	ldi	r25, 0x03	; 3
    1b18:	0e 94 86 13 	call	0x270c	; 0x270c <_ZN7TwoWire15endTransmissionEv>
    1b1c:	91 e0       	ldi	r25, 0x01	; 1
    1b1e:	81 11       	cpse	r24, r1
    1b20:	90 e0       	ldi	r25, 0x00	; 0
    1b22:	89 2f       	mov	r24, r25
    1b24:	df 91       	pop	r29
    1b26:	cf 91       	pop	r28
    1b28:	1f 91       	pop	r17
    1b2a:	0f 91       	pop	r16
    1b2c:	ff 90       	pop	r15
    1b2e:	08 95       	ret

00001b30 <_ZN6I2Cdev9writeByteEhhh>:
    1b30:	cf 93       	push	r28
    1b32:	df 93       	push	r29
    1b34:	1f 92       	push	r1
    1b36:	cd b7       	in	r28, 0x3d	; 61
    1b38:	de b7       	in	r29, 0x3e	; 62
    1b3a:	49 83       	std	Y+1, r20	; 0x01
    1b3c:	9e 01       	movw	r18, r28
    1b3e:	2f 5f       	subi	r18, 0xFF	; 255
    1b40:	3f 4f       	sbci	r19, 0xFF	; 255
    1b42:	41 e0       	ldi	r20, 0x01	; 1
    1b44:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <_ZN6I2Cdev10writeBytesEhhhPh>
    1b48:	0f 90       	pop	r0
    1b4a:	df 91       	pop	r29
    1b4c:	cf 91       	pop	r28
    1b4e:	08 95       	ret

00001b50 <_ZN6I2Cdev10writeWordsEhhhPj>:
    1b50:	cf 92       	push	r12
    1b52:	df 92       	push	r13
    1b54:	ff 92       	push	r15
    1b56:	0f 93       	push	r16
    1b58:	1f 93       	push	r17
    1b5a:	cf 93       	push	r28
    1b5c:	df 93       	push	r29
    1b5e:	c6 2f       	mov	r28, r22
    1b60:	04 2f       	mov	r16, r20
    1b62:	69 01       	movw	r12, r18
    1b64:	68 2f       	mov	r22, r24
    1b66:	87 ec       	ldi	r24, 0xC7	; 199
    1b68:	93 e0       	ldi	r25, 0x03	; 3
    1b6a:	0e 94 02 13 	call	0x2604	; 0x2604 <_ZN7TwoWire17beginTransmissionEh>
    1b6e:	6c 2f       	mov	r22, r28
    1b70:	87 ec       	ldi	r24, 0xC7	; 199
    1b72:	93 e0       	ldi	r25, 0x03	; 3
    1b74:	0e 94 c3 12 	call	0x2586	; 0x2586 <_ZN7TwoWire5writeEh>
    1b78:	10 e0       	ldi	r17, 0x00	; 0
    1b7a:	00 0f       	add	r16, r16
    1b7c:	11 1f       	adc	r17, r17
    1b7e:	f1 2c       	mov	r15, r1
    1b80:	cf 2d       	mov	r28, r15
    1b82:	d0 e0       	ldi	r29, 0x00	; 0
    1b84:	c0 17       	cp	r28, r16
    1b86:	d1 07       	cpc	r29, r17
    1b88:	8c f4       	brge	.+34     	; 0x1bac <_ZN6I2Cdev10writeWordsEhhhPj+0x5c>
    1b8a:	cc 0f       	add	r28, r28
    1b8c:	dd 1f       	adc	r29, r29
    1b8e:	cc 0d       	add	r28, r12
    1b90:	dd 1d       	adc	r29, r13
    1b92:	69 81       	ldd	r22, Y+1	; 0x01
    1b94:	87 ec       	ldi	r24, 0xC7	; 199
    1b96:	93 e0       	ldi	r25, 0x03	; 3
    1b98:	0e 94 c3 12 	call	0x2586	; 0x2586 <_ZN7TwoWire5writeEh>
    1b9c:	68 81       	ld	r22, Y
    1b9e:	87 ec       	ldi	r24, 0xC7	; 199
    1ba0:	93 e0       	ldi	r25, 0x03	; 3
    1ba2:	0e 94 c3 12 	call	0x2586	; 0x2586 <_ZN7TwoWire5writeEh>
    1ba6:	f3 94       	inc	r15
    1ba8:	f3 94       	inc	r15
    1baa:	ea cf       	rjmp	.-44     	; 0x1b80 <_ZN6I2Cdev10writeWordsEhhhPj+0x30>
    1bac:	87 ec       	ldi	r24, 0xC7	; 199
    1bae:	93 e0       	ldi	r25, 0x03	; 3
    1bb0:	0e 94 86 13 	call	0x270c	; 0x270c <_ZN7TwoWire15endTransmissionEv>
    1bb4:	91 e0       	ldi	r25, 0x01	; 1
    1bb6:	81 11       	cpse	r24, r1
    1bb8:	90 e0       	ldi	r25, 0x00	; 0
    1bba:	89 2f       	mov	r24, r25
    1bbc:	df 91       	pop	r29
    1bbe:	cf 91       	pop	r28
    1bc0:	1f 91       	pop	r17
    1bc2:	0f 91       	pop	r16
    1bc4:	ff 90       	pop	r15
    1bc6:	df 90       	pop	r13
    1bc8:	cf 90       	pop	r12
    1bca:	08 95       	ret

00001bcc <_ZN6I2Cdev9writeWordEhhj>:
    1bcc:	cf 93       	push	r28
    1bce:	df 93       	push	r29
    1bd0:	00 d0       	rcall	.+0      	; 0x1bd2 <_ZN6I2Cdev9writeWordEhhj+0x6>
    1bd2:	cd b7       	in	r28, 0x3d	; 61
    1bd4:	de b7       	in	r29, 0x3e	; 62
    1bd6:	5a 83       	std	Y+2, r21	; 0x02
    1bd8:	49 83       	std	Y+1, r20	; 0x01
    1bda:	9e 01       	movw	r18, r28
    1bdc:	2f 5f       	subi	r18, 0xFF	; 255
    1bde:	3f 4f       	sbci	r19, 0xFF	; 255
    1be0:	41 e0       	ldi	r20, 0x01	; 1
    1be2:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <_ZN6I2Cdev10writeWordsEhhhPj>
    1be6:	0f 90       	pop	r0
    1be8:	0f 90       	pop	r0
    1bea:	df 91       	pop	r29
    1bec:	cf 91       	pop	r28
    1bee:	08 95       	ret

00001bf0 <_ZN6I2Cdev9readBytesEhhhPhj>:
    1bf0:	3f 92       	push	r3
    1bf2:	4f 92       	push	r4
    1bf4:	5f 92       	push	r5
    1bf6:	6f 92       	push	r6
    1bf8:	7f 92       	push	r7
    1bfa:	8f 92       	push	r8
    1bfc:	9f 92       	push	r9
    1bfe:	af 92       	push	r10
    1c00:	bf 92       	push	r11
    1c02:	cf 92       	push	r12
    1c04:	df 92       	push	r13
    1c06:	ef 92       	push	r14
    1c08:	ff 92       	push	r15
    1c0a:	0f 93       	push	r16
    1c0c:	1f 93       	push	r17
    1c0e:	cf 93       	push	r28
    1c10:	df 93       	push	r29
    1c12:	00 d0       	rcall	.+0      	; 0x1c14 <_ZN6I2Cdev9readBytesEhhhPhj+0x24>
    1c14:	00 d0       	rcall	.+0      	; 0x1c16 <_ZN6I2Cdev9readBytesEhhhPhj+0x26>
    1c16:	00 d0       	rcall	.+0      	; 0x1c18 <_ZN6I2Cdev9readBytesEhhhPhj+0x28>
    1c18:	cd b7       	in	r28, 0x3d	; 61
    1c1a:	de b7       	in	r29, 0x3e	; 62
    1c1c:	d8 2e       	mov	r13, r24
    1c1e:	c6 2e       	mov	r12, r22
    1c20:	4d 83       	std	Y+5, r20	; 0x05
    1c22:	79 01       	movw	r14, r18
    1c24:	0e 94 76 1c 	call	0x38ec	; 0x38ec <millis>
    1c28:	4b 01       	movw	r8, r22
    1c2a:	5c 01       	movw	r10, r24
    1c2c:	31 2c       	mov	r3, r1
    1c2e:	1e 82       	std	Y+6, r1	; 0x06
    1c30:	9d 81       	ldd	r25, Y+5	; 0x05
    1c32:	89 2f       	mov	r24, r25
    1c34:	90 e0       	ldi	r25, 0x00	; 0
    1c36:	9c 83       	std	Y+4, r25	; 0x04
    1c38:	8b 83       	std	Y+3, r24	; 0x03
    1c3a:	28 01       	movw	r4, r16
    1c3c:	61 2c       	mov	r6, r1
    1c3e:	71 2c       	mov	r7, r1
    1c40:	ed 81       	ldd	r30, Y+5	; 0x05
    1c42:	3e 16       	cp	r3, r30
    1c44:	c8 f5       	brcc	.+114    	; 0x1cb8 <_ZN6I2Cdev9readBytesEhhhPhj+0xc8>
    1c46:	6d 2d       	mov	r22, r13
    1c48:	87 ec       	ldi	r24, 0xC7	; 199
    1c4a:	93 e0       	ldi	r25, 0x03	; 3
    1c4c:	0e 94 02 13 	call	0x2604	; 0x2604 <_ZN7TwoWire17beginTransmissionEh>
    1c50:	6c 2d       	mov	r22, r12
    1c52:	87 ec       	ldi	r24, 0xC7	; 199
    1c54:	93 e0       	ldi	r25, 0x03	; 3
    1c56:	0e 94 c3 12 	call	0x2586	; 0x2586 <_ZN7TwoWire5writeEh>
    1c5a:	87 ec       	ldi	r24, 0xC7	; 199
    1c5c:	93 e0       	ldi	r25, 0x03	; 3
    1c5e:	0e 94 86 13 	call	0x270c	; 0x270c <_ZN7TwoWire15endTransmissionEv>
    1c62:	6d 2d       	mov	r22, r13
    1c64:	87 ec       	ldi	r24, 0xC7	; 199
    1c66:	93 e0       	ldi	r25, 0x03	; 3
    1c68:	0e 94 02 13 	call	0x2604	; 0x2604 <_ZN7TwoWire17beginTransmissionEh>
    1c6c:	4b 81       	ldd	r20, Y+3	; 0x03
    1c6e:	5c 81       	ldd	r21, Y+4	; 0x04
    1c70:	43 19       	sub	r20, r3
    1c72:	51 09       	sbc	r21, r1
    1c74:	41 32       	cpi	r20, 0x21	; 33
    1c76:	51 05       	cpc	r21, r1
    1c78:	14 f0       	brlt	.+4      	; 0x1c7e <_ZN6I2Cdev9readBytesEhhhPhj+0x8e>
    1c7a:	40 e2       	ldi	r20, 0x20	; 32
    1c7c:	50 e0       	ldi	r21, 0x00	; 0
    1c7e:	6d 2d       	mov	r22, r13
    1c80:	87 ec       	ldi	r24, 0xC7	; 199
    1c82:	93 e0       	ldi	r25, 0x03	; 3
    1c84:	0e 94 83 13 	call	0x2706	; 0x2706 <_ZN7TwoWire11requestFromEhh>
    1c88:	87 ec       	ldi	r24, 0xC7	; 199
    1c8a:	93 e0       	ldi	r25, 0x03	; 3
    1c8c:	0e 94 6a 12 	call	0x24d4	; 0x24d4 <_ZN7TwoWire9availableEv>
    1c90:	89 2b       	or	r24, r25
    1c92:	09 f4       	brne	.+2      	; 0x1c96 <_ZN6I2Cdev9readBytesEhhhPhj+0xa6>
    1c94:	43 c0       	rjmp	.+134    	; 0x1d1c <_ZN6I2Cdev9readBytesEhhhPhj+0x12c>
    1c96:	01 15       	cp	r16, r1
    1c98:	11 05       	cpc	r17, r1
    1c9a:	69 f1       	breq	.+90     	; 0x1cf6 <_ZN6I2Cdev9readBytesEhhhPhj+0x106>
    1c9c:	0e 94 76 1c 	call	0x38ec	; 0x38ec <millis>
    1ca0:	dc 01       	movw	r26, r24
    1ca2:	cb 01       	movw	r24, r22
    1ca4:	88 19       	sub	r24, r8
    1ca6:	99 09       	sbc	r25, r9
    1ca8:	aa 09       	sbc	r26, r10
    1caa:	bb 09       	sbc	r27, r11
    1cac:	84 15       	cp	r24, r4
    1cae:	95 05       	cpc	r25, r5
    1cb0:	a6 05       	cpc	r26, r6
    1cb2:	b7 05       	cpc	r27, r7
    1cb4:	00 f1       	brcs	.+64     	; 0x1cf6 <_ZN6I2Cdev9readBytesEhhhPhj+0x106>
    1cb6:	32 c0       	rjmp	.+100    	; 0x1d1c <_ZN6I2Cdev9readBytesEhhhPhj+0x12c>
    1cb8:	01 15       	cp	r16, r1
    1cba:	11 05       	cpc	r17, r1
    1cbc:	a9 f1       	breq	.+106    	; 0x1d28 <_ZN6I2Cdev9readBytesEhhhPhj+0x138>
    1cbe:	0e 94 76 1c 	call	0x38ec	; 0x38ec <millis>
    1cc2:	dc 01       	movw	r26, r24
    1cc4:	cb 01       	movw	r24, r22
    1cc6:	88 19       	sub	r24, r8
    1cc8:	99 09       	sbc	r25, r9
    1cca:	aa 09       	sbc	r26, r10
    1ccc:	bb 09       	sbc	r27, r11
    1cce:	20 e0       	ldi	r18, 0x00	; 0
    1cd0:	30 e0       	ldi	r19, 0x00	; 0
    1cd2:	80 17       	cp	r24, r16
    1cd4:	91 07       	cpc	r25, r17
    1cd6:	a2 07       	cpc	r26, r18
    1cd8:	b3 07       	cpc	r27, r19
    1cda:	30 f1       	brcs	.+76     	; 0x1d28 <_ZN6I2Cdev9readBytesEhhhPhj+0x138>
    1cdc:	fd 81       	ldd	r31, Y+5	; 0x05
    1cde:	2f 2f       	mov	r18, r31
    1ce0:	30 e0       	ldi	r19, 0x00	; 0
    1ce2:	4e 81       	ldd	r20, Y+6	; 0x06
    1ce4:	84 2f       	mov	r24, r20
    1ce6:	44 0f       	add	r20, r20
    1ce8:	99 0b       	sbc	r25, r25
    1cea:	82 17       	cp	r24, r18
    1cec:	93 07       	cpc	r25, r19
    1cee:	e4 f4       	brge	.+56     	; 0x1d28 <_ZN6I2Cdev9readBytesEhhhPhj+0x138>
    1cf0:	8f ef       	ldi	r24, 0xFF	; 255
    1cf2:	8e 83       	std	Y+6, r24	; 0x06
    1cf4:	19 c0       	rjmp	.+50     	; 0x1d28 <_ZN6I2Cdev9readBytesEhhhPhj+0x138>
    1cf6:	f7 01       	movw	r30, r14
    1cf8:	2e 81       	ldd	r18, Y+6	; 0x06
    1cfa:	e2 0f       	add	r30, r18
    1cfc:	f1 1d       	adc	r31, r1
    1cfe:	27 fd       	sbrc	r18, 7
    1d00:	fa 95       	dec	r31
    1d02:	fa 83       	std	Y+2, r31	; 0x02
    1d04:	e9 83       	std	Y+1, r30	; 0x01
    1d06:	87 ec       	ldi	r24, 0xC7	; 199
    1d08:	93 e0       	ldi	r25, 0x03	; 3
    1d0a:	0e 94 72 12 	call	0x24e4	; 0x24e4 <_ZN7TwoWire4readEv>
    1d0e:	e9 81       	ldd	r30, Y+1	; 0x01
    1d10:	fa 81       	ldd	r31, Y+2	; 0x02
    1d12:	80 83       	st	Z, r24
    1d14:	fe 81       	ldd	r31, Y+6	; 0x06
    1d16:	ff 5f       	subi	r31, 0xFF	; 255
    1d18:	fe 83       	std	Y+6, r31	; 0x06
    1d1a:	b6 cf       	rjmp	.-148    	; 0x1c88 <_ZN6I2Cdev9readBytesEhhhPhj+0x98>
    1d1c:	8d 81       	ldd	r24, Y+5	; 0x05
    1d1e:	81 32       	cpi	r24, 0x21	; 33
    1d20:	08 f0       	brcs	.+2      	; 0x1d24 <_ZN6I2Cdev9readBytesEhhhPhj+0x134>
    1d22:	80 e2       	ldi	r24, 0x20	; 32
    1d24:	38 0e       	add	r3, r24
    1d26:	8c cf       	rjmp	.-232    	; 0x1c40 <_ZN6I2Cdev9readBytesEhhhPhj+0x50>
    1d28:	8e 81       	ldd	r24, Y+6	; 0x06
    1d2a:	26 96       	adiw	r28, 0x06	; 6
    1d2c:	0f b6       	in	r0, 0x3f	; 63
    1d2e:	f8 94       	cli
    1d30:	de bf       	out	0x3e, r29	; 62
    1d32:	0f be       	out	0x3f, r0	; 63
    1d34:	cd bf       	out	0x3d, r28	; 61
    1d36:	df 91       	pop	r29
    1d38:	cf 91       	pop	r28
    1d3a:	1f 91       	pop	r17
    1d3c:	0f 91       	pop	r16
    1d3e:	ff 90       	pop	r15
    1d40:	ef 90       	pop	r14
    1d42:	df 90       	pop	r13
    1d44:	cf 90       	pop	r12
    1d46:	bf 90       	pop	r11
    1d48:	af 90       	pop	r10
    1d4a:	9f 90       	pop	r9
    1d4c:	8f 90       	pop	r8
    1d4e:	7f 90       	pop	r7
    1d50:	6f 90       	pop	r6
    1d52:	5f 90       	pop	r5
    1d54:	4f 90       	pop	r4
    1d56:	3f 90       	pop	r3
    1d58:	08 95       	ret

00001d5a <_ZN6I2Cdev8readByteEhhPhj>:
    1d5a:	0f 93       	push	r16
    1d5c:	1f 93       	push	r17
    1d5e:	89 01       	movw	r16, r18
    1d60:	9a 01       	movw	r18, r20
    1d62:	41 e0       	ldi	r20, 0x01	; 1
    1d64:	0e 94 f8 0d 	call	0x1bf0	; 0x1bf0 <_ZN6I2Cdev9readBytesEhhhPhj>
    1d68:	1f 91       	pop	r17
    1d6a:	0f 91       	pop	r16
    1d6c:	08 95       	ret

00001d6e <_ZN6I2Cdev8writeBitEhhhh>:
 * @param regAddr Register regAddr to write to
 * @param bitNum Bit position to write (0-7)
 * @param value New bit value to write
 * @return Status of operation (true = success)
 */
bool I2Cdev::writeBit(uint8_t devAddr, uint8_t regAddr, uint8_t bitNum, uint8_t data) {
    1d6e:	ef 92       	push	r14
    1d70:	ff 92       	push	r15
    1d72:	0f 93       	push	r16
    1d74:	1f 93       	push	r17
    1d76:	cf 93       	push	r28
    1d78:	df 93       	push	r29
    1d7a:	1f 92       	push	r1
    1d7c:	cd b7       	in	r28, 0x3d	; 61
    1d7e:	de b7       	in	r29, 0x3e	; 62
    1d80:	18 2f       	mov	r17, r24
    1d82:	06 2f       	mov	r16, r22
    1d84:	f4 2e       	mov	r15, r20
    1d86:	e2 2e       	mov	r14, r18
    uint8_t b;
    readByte(devAddr, regAddr, &b);
    1d88:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <_ZN6I2Cdev11readTimeoutE>
    1d8c:	30 91 08 01 	lds	r19, 0x0108	; 0x800108 <_ZN6I2Cdev11readTimeoutE+0x1>
    1d90:	ae 01       	movw	r20, r28
    1d92:	4f 5f       	subi	r20, 0xFF	; 255
    1d94:	5f 4f       	sbci	r21, 0xFF	; 255
    1d96:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <_ZN6I2Cdev8readByteEhhPhj>
    1d9a:	89 81       	ldd	r24, Y+1	; 0x01
    b = (data != 0) ? (b | (1 << bitNum)) : (b & ~(1 << bitNum));
    1d9c:	41 e0       	ldi	r20, 0x01	; 1
    1d9e:	50 e0       	ldi	r21, 0x00	; 0
    1da0:	01 c0       	rjmp	.+2      	; 0x1da4 <_ZN6I2Cdev8writeBitEhhhh+0x36>
    1da2:	44 0f       	add	r20, r20
    1da4:	fa 94       	dec	r15
    1da6:	ea f7       	brpl	.-6      	; 0x1da2 <_ZN6I2Cdev8writeBitEhhhh+0x34>
    1da8:	ee 20       	and	r14, r14
    1daa:	11 f0       	breq	.+4      	; 0x1db0 <_ZN6I2Cdev8writeBitEhhhh+0x42>
    1dac:	48 2b       	or	r20, r24
    1dae:	02 c0       	rjmp	.+4      	; 0x1db4 <_ZN6I2Cdev8writeBitEhhhh+0x46>
    1db0:	40 95       	com	r20
    1db2:	48 23       	and	r20, r24
    1db4:	49 83       	std	Y+1, r20	; 0x01
    return writeByte(devAddr, regAddr, b);
    1db6:	60 2f       	mov	r22, r16
    1db8:	81 2f       	mov	r24, r17
    1dba:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <_ZN6I2Cdev9writeByteEhhh>
}
    1dbe:	0f 90       	pop	r0
    1dc0:	df 91       	pop	r29
    1dc2:	cf 91       	pop	r28
    1dc4:	1f 91       	pop	r17
    1dc6:	0f 91       	pop	r16
    1dc8:	ff 90       	pop	r15
    1dca:	ef 90       	pop	r14
    1dcc:	08 95       	ret

00001dce <_ZN6I2Cdev9writeBitsEhhhhh>:
 * @param bitStart First bit position to write (0-7)
 * @param length Number of bits to write (not more than 8)
 * @param data Right-aligned value to write
 * @return Status of operation (true = success)
 */
bool I2Cdev::writeBits(uint8_t devAddr, uint8_t regAddr, uint8_t bitStart, uint8_t length, uint8_t data) {
    1dce:	df 92       	push	r13
    1dd0:	ef 92       	push	r14
    1dd2:	ff 92       	push	r15
    1dd4:	0f 93       	push	r16
    1dd6:	1f 93       	push	r17
    1dd8:	cf 93       	push	r28
    1dda:	df 93       	push	r29
    1ddc:	1f 92       	push	r1
    1dde:	cd b7       	in	r28, 0x3d	; 61
    1de0:	de b7       	in	r29, 0x3e	; 62
    1de2:	18 2f       	mov	r17, r24
    1de4:	f6 2e       	mov	r15, r22
    1de6:	e4 2e       	mov	r14, r20
    1de8:	d2 2e       	mov	r13, r18
    // 00011100 mask byte
    // 10101111 original value (sample)
    // 10100011 original & ~mask
    // 10101011 masked | value
    uint8_t b;
    if (readByte(devAddr, regAddr, &b) != 0) {
    1dea:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <_ZN6I2Cdev11readTimeoutE>
    1dee:	30 91 08 01 	lds	r19, 0x0108	; 0x800108 <_ZN6I2Cdev11readTimeoutE+0x1>
    1df2:	ae 01       	movw	r20, r28
    1df4:	4f 5f       	subi	r20, 0xFF	; 255
    1df6:	5f 4f       	sbci	r21, 0xFF	; 255
    1df8:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <_ZN6I2Cdev8readByteEhhPhj>
    1dfc:	88 23       	and	r24, r24
    1dfe:	39 f1       	breq	.+78     	; 0x1e4e <_ZN6I2Cdev9writeBitsEhhhhh+0x80>
        uint8_t mask = ((1 << length) - 1) << (bitStart - length + 1);
    1e00:	2e 2d       	mov	r18, r14
    1e02:	30 e0       	ldi	r19, 0x00	; 0
    1e04:	2d 19       	sub	r18, r13
    1e06:	31 09       	sbc	r19, r1
    1e08:	2f 5f       	subi	r18, 0xFF	; 255
    1e0a:	3f 4f       	sbci	r19, 0xFF	; 255
    1e0c:	81 e0       	ldi	r24, 0x01	; 1
    1e0e:	90 e0       	ldi	r25, 0x00	; 0
    1e10:	02 c0       	rjmp	.+4      	; 0x1e16 <_ZN6I2Cdev9writeBitsEhhhhh+0x48>
    1e12:	88 0f       	add	r24, r24
    1e14:	99 1f       	adc	r25, r25
    1e16:	da 94       	dec	r13
    1e18:	e2 f7       	brpl	.-8      	; 0x1e12 <_ZN6I2Cdev9writeBitsEhhhhh+0x44>
    1e1a:	01 97       	sbiw	r24, 0x01	; 1
    1e1c:	02 2e       	mov	r0, r18
    1e1e:	01 c0       	rjmp	.+2      	; 0x1e22 <_ZN6I2Cdev9writeBitsEhhhhh+0x54>
    1e20:	88 0f       	add	r24, r24
    1e22:	0a 94       	dec	r0
    1e24:	ea f7       	brpl	.-6      	; 0x1e20 <_ZN6I2Cdev9writeBitsEhhhhh+0x52>
        data <<= (bitStart - length + 1); // shift data into correct position
    1e26:	40 2f       	mov	r20, r16
    1e28:	50 e0       	ldi	r21, 0x00	; 0
    1e2a:	ba 01       	movw	r22, r20
    1e2c:	02 c0       	rjmp	.+4      	; 0x1e32 <_ZN6I2Cdev9writeBitsEhhhhh+0x64>
    1e2e:	66 0f       	add	r22, r22
    1e30:	77 1f       	adc	r23, r23
    1e32:	2a 95       	dec	r18
    1e34:	e2 f7       	brpl	.-8      	; 0x1e2e <_ZN6I2Cdev9writeBitsEhhhhh+0x60>
        data &= mask; // zero all non-important bits in data
        b &= ~(mask); // zero all important bits in existing byte
        b |= data; // combine data with existing byte
    1e36:	48 2f       	mov	r20, r24
    1e38:	40 95       	com	r20
    1e3a:	99 81       	ldd	r25, Y+1	; 0x01
    1e3c:	49 23       	and	r20, r25
    1e3e:	86 23       	and	r24, r22
    1e40:	48 2b       	or	r20, r24
    1e42:	49 83       	std	Y+1, r20	; 0x01
        return writeByte(devAddr, regAddr, b);
    1e44:	6f 2d       	mov	r22, r15
    1e46:	81 2f       	mov	r24, r17
    1e48:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <_ZN6I2Cdev9writeByteEhhh>
    1e4c:	01 c0       	rjmp	.+2      	; 0x1e50 <_ZN6I2Cdev9writeBitsEhhhhh+0x82>
    } else {
        return false;
    1e4e:	80 e0       	ldi	r24, 0x00	; 0
    }
}
    1e50:	0f 90       	pop	r0
    1e52:	df 91       	pop	r29
    1e54:	cf 91       	pop	r28
    1e56:	1f 91       	pop	r17
    1e58:	0f 91       	pop	r16
    1e5a:	ff 90       	pop	r15
    1e5c:	ef 90       	pop	r14
    1e5e:	df 90       	pop	r13
    1e60:	08 95       	ret

00001e62 <_ZN7MPU6050C1Ev>:
// ZG_OFFS_USR* register

int16_t MPU6050::getZGyroOffset() {
    I2Cdev::readBytes(devAddr, MPU6050_RA_ZG_OFFS_USRH, 2, buffer);
    return (((int16_t)buffer[0]) << 8) | buffer[1];
}
    1e62:	28 e6       	ldi	r18, 0x68	; 104
    1e64:	fc 01       	movw	r30, r24
    1e66:	20 83       	st	Z, r18
    1e68:	08 95       	ret

00001e6a <_ZN7MPU6050C1Eh>:
    1e6a:	fc 01       	movw	r30, r24
    1e6c:	60 83       	st	Z, r22
    1e6e:	08 95       	ret

00001e70 <_ZN7MPU605021setFullScaleGyroRangeEh>:
    1e70:	0f 93       	push	r16
    1e72:	06 2f       	mov	r16, r22
    1e74:	22 e0       	ldi	r18, 0x02	; 2
    1e76:	44 e0       	ldi	r20, 0x04	; 4
    1e78:	6b e1       	ldi	r22, 0x1B	; 27
    1e7a:	fc 01       	movw	r30, r24
    1e7c:	80 81       	ld	r24, Z
    1e7e:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <_ZN6I2Cdev9writeBitsEhhhhh>
    1e82:	0f 91       	pop	r16
    1e84:	08 95       	ret

00001e86 <_ZN7MPU605022setFullScaleAccelRangeEh>:
    1e86:	0f 93       	push	r16
    1e88:	06 2f       	mov	r16, r22
    1e8a:	22 e0       	ldi	r18, 0x02	; 2
    1e8c:	44 e0       	ldi	r20, 0x04	; 4
    1e8e:	6c e1       	ldi	r22, 0x1C	; 28
    1e90:	fc 01       	movw	r30, r24
    1e92:	80 81       	ld	r24, Z
    1e94:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <_ZN6I2Cdev9writeBitsEhhhhh>
    1e98:	0f 91       	pop	r16
    1e9a:	08 95       	ret

00001e9c <_ZN7MPU605016getAccelerationYEv>:
    1e9c:	0f 93       	push	r16
    1e9e:	1f 93       	push	r17
    1ea0:	cf 93       	push	r28
    1ea2:	df 93       	push	r29
    1ea4:	ec 01       	movw	r28, r24
    1ea6:	00 91 07 01 	lds	r16, 0x0107	; 0x800107 <_ZN6I2Cdev11readTimeoutE>
    1eaa:	10 91 08 01 	lds	r17, 0x0108	; 0x800108 <_ZN6I2Cdev11readTimeoutE+0x1>
    1eae:	9c 01       	movw	r18, r24
    1eb0:	2f 5f       	subi	r18, 0xFF	; 255
    1eb2:	3f 4f       	sbci	r19, 0xFF	; 255
    1eb4:	42 e0       	ldi	r20, 0x02	; 2
    1eb6:	6d e3       	ldi	r22, 0x3D	; 61
    1eb8:	88 81       	ld	r24, Y
    1eba:	0e 94 f8 0d 	call	0x1bf0	; 0x1bf0 <_ZN6I2Cdev9readBytesEhhhPhj>
    1ebe:	89 81       	ldd	r24, Y+1	; 0x01
    1ec0:	9a 81       	ldd	r25, Y+2	; 0x02
    1ec2:	98 27       	eor	r25, r24
    1ec4:	89 27       	eor	r24, r25
    1ec6:	98 27       	eor	r25, r24
    1ec8:	df 91       	pop	r29
    1eca:	cf 91       	pop	r28
    1ecc:	1f 91       	pop	r17
    1ece:	0f 91       	pop	r16
    1ed0:	08 95       	ret

00001ed2 <_ZN7MPU605016getAccelerationZEv>:
    1ed2:	0f 93       	push	r16
    1ed4:	1f 93       	push	r17
    1ed6:	cf 93       	push	r28
    1ed8:	df 93       	push	r29
    1eda:	ec 01       	movw	r28, r24
    1edc:	00 91 07 01 	lds	r16, 0x0107	; 0x800107 <_ZN6I2Cdev11readTimeoutE>
    1ee0:	10 91 08 01 	lds	r17, 0x0108	; 0x800108 <_ZN6I2Cdev11readTimeoutE+0x1>
    1ee4:	9c 01       	movw	r18, r24
    1ee6:	2f 5f       	subi	r18, 0xFF	; 255
    1ee8:	3f 4f       	sbci	r19, 0xFF	; 255
    1eea:	42 e0       	ldi	r20, 0x02	; 2
    1eec:	6f e3       	ldi	r22, 0x3F	; 63
    1eee:	88 81       	ld	r24, Y
    1ef0:	0e 94 f8 0d 	call	0x1bf0	; 0x1bf0 <_ZN6I2Cdev9readBytesEhhhPhj>
    1ef4:	89 81       	ldd	r24, Y+1	; 0x01
    1ef6:	9a 81       	ldd	r25, Y+2	; 0x02
    1ef8:	98 27       	eor	r25, r24
    1efa:	89 27       	eor	r24, r25
    1efc:	98 27       	eor	r25, r24
    1efe:	df 91       	pop	r29
    1f00:	cf 91       	pop	r28
    1f02:	1f 91       	pop	r17
    1f04:	0f 91       	pop	r16
    1f06:	08 95       	ret

00001f08 <_ZN7MPU605012getRotationXEv>:
    1f08:	0f 93       	push	r16
    1f0a:	1f 93       	push	r17
    1f0c:	cf 93       	push	r28
    1f0e:	df 93       	push	r29
    1f10:	ec 01       	movw	r28, r24
    1f12:	00 91 07 01 	lds	r16, 0x0107	; 0x800107 <_ZN6I2Cdev11readTimeoutE>
    1f16:	10 91 08 01 	lds	r17, 0x0108	; 0x800108 <_ZN6I2Cdev11readTimeoutE+0x1>
    1f1a:	9c 01       	movw	r18, r24
    1f1c:	2f 5f       	subi	r18, 0xFF	; 255
    1f1e:	3f 4f       	sbci	r19, 0xFF	; 255
    1f20:	42 e0       	ldi	r20, 0x02	; 2
    1f22:	63 e4       	ldi	r22, 0x43	; 67
    1f24:	88 81       	ld	r24, Y
    1f26:	0e 94 f8 0d 	call	0x1bf0	; 0x1bf0 <_ZN6I2Cdev9readBytesEhhhPhj>
    1f2a:	89 81       	ldd	r24, Y+1	; 0x01
    1f2c:	9a 81       	ldd	r25, Y+2	; 0x02
    1f2e:	98 27       	eor	r25, r24
    1f30:	89 27       	eor	r24, r25
    1f32:	98 27       	eor	r25, r24
    1f34:	df 91       	pop	r29
    1f36:	cf 91       	pop	r28
    1f38:	1f 91       	pop	r17
    1f3a:	0f 91       	pop	r16
    1f3c:	08 95       	ret

00001f3e <_ZN7MPU605015setSleepEnabledEb>:
    1f3e:	26 2f       	mov	r18, r22
    1f40:	46 e0       	ldi	r20, 0x06	; 6
    1f42:	6b e6       	ldi	r22, 0x6B	; 107
    1f44:	fc 01       	movw	r30, r24
    1f46:	80 81       	ld	r24, Z
    1f48:	0c 94 b7 0e 	jmp	0x1d6e	; 0x1d6e <_ZN6I2Cdev8writeBitEhhhh>

00001f4c <_ZN7MPU605014setClockSourceEh>:
    1f4c:	0f 93       	push	r16
    1f4e:	06 2f       	mov	r16, r22
    1f50:	23 e0       	ldi	r18, 0x03	; 3
    1f52:	42 e0       	ldi	r20, 0x02	; 2
    1f54:	6b e6       	ldi	r22, 0x6B	; 107
    1f56:	fc 01       	movw	r30, r24
    1f58:	80 81       	ld	r24, Z
    1f5a:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <_ZN6I2Cdev9writeBitsEhhhhh>
    1f5e:	0f 91       	pop	r16
    1f60:	08 95       	ret

00001f62 <_ZN7MPU605010initializeEv>:
    1f62:	cf 93       	push	r28
    1f64:	df 93       	push	r29
    1f66:	ec 01       	movw	r28, r24
    1f68:	61 e0       	ldi	r22, 0x01	; 1
    1f6a:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <_ZN7MPU605014setClockSourceEh>
    1f6e:	60 e0       	ldi	r22, 0x00	; 0
    1f70:	ce 01       	movw	r24, r28
    1f72:	0e 94 38 0f 	call	0x1e70	; 0x1e70 <_ZN7MPU605021setFullScaleGyroRangeEh>
    1f76:	60 e0       	ldi	r22, 0x00	; 0
    1f78:	ce 01       	movw	r24, r28
    1f7a:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <_ZN7MPU605022setFullScaleAccelRangeEh>
    1f7e:	60 e0       	ldi	r22, 0x00	; 0
    1f80:	ce 01       	movw	r24, r28
    1f82:	df 91       	pop	r29
    1f84:	cf 91       	pop	r28
    1f86:	0c 94 9f 0f 	jmp	0x1f3e	; 0x1f3e <_ZN7MPU605015setSleepEnabledEb>

00001f8a <_ZN7MPU605015setXAccelOffsetEi>:
    1f8a:	ab 01       	movw	r20, r22
    1f8c:	66 e0       	ldi	r22, 0x06	; 6
    1f8e:	fc 01       	movw	r30, r24
    1f90:	80 81       	ld	r24, Z
    1f92:	0c 94 e6 0d 	jmp	0x1bcc	; 0x1bcc <_ZN6I2Cdev9writeWordEhhj>

00001f96 <_ZN7MPU605015setYAccelOffsetEi>:
    1f96:	ab 01       	movw	r20, r22
    1f98:	68 e0       	ldi	r22, 0x08	; 8
    1f9a:	fc 01       	movw	r30, r24
    1f9c:	80 81       	ld	r24, Z
    1f9e:	0c 94 e6 0d 	jmp	0x1bcc	; 0x1bcc <_ZN6I2Cdev9writeWordEhhj>

00001fa2 <_ZN7MPU605015setZAccelOffsetEi>:
    1fa2:	ab 01       	movw	r20, r22
    1fa4:	6a e0       	ldi	r22, 0x0A	; 10
    1fa6:	fc 01       	movw	r30, r24
    1fa8:	80 81       	ld	r24, Z
    1faa:	0c 94 e6 0d 	jmp	0x1bcc	; 0x1bcc <_ZN6I2Cdev9writeWordEhhj>

00001fae <_ZN7MPU605014setXGyroOffsetEi>:
    1fae:	ab 01       	movw	r20, r22
    1fb0:	63 e1       	ldi	r22, 0x13	; 19
    1fb2:	fc 01       	movw	r30, r24
    1fb4:	80 81       	ld	r24, Z
    1fb6:	0c 94 e6 0d 	jmp	0x1bcc	; 0x1bcc <_ZN6I2Cdev9writeWordEhhj>

00001fba <_ZN7MPU605014setYGyroOffsetEi>:
    1fba:	ab 01       	movw	r20, r22
    1fbc:	65 e1       	ldi	r22, 0x15	; 21
    1fbe:	fc 01       	movw	r30, r24
    1fc0:	80 81       	ld	r24, Z
    1fc2:	0c 94 e6 0d 	jmp	0x1bcc	; 0x1bcc <_ZN6I2Cdev9writeWordEhhj>

00001fc6 <_ZN7MPU605014setZGyroOffsetEi>:
void MPU6050::setZGyroOffset(int16_t offset) {
    1fc6:	ab 01       	movw	r20, r22
    I2Cdev::writeWord(devAddr, MPU6050_RA_ZG_OFFS_USRH, offset);
    1fc8:	67 e1       	ldi	r22, 0x17	; 23
    1fca:	fc 01       	movw	r30, r24
    1fcc:	80 81       	ld	r24, Z
    1fce:	0c 94 e6 0d 	jmp	0x1bcc	; 0x1bcc <_ZN6I2Cdev9writeWordEhhj>

00001fd2 <_ZN7NewPing16set_max_distanceEj>:
	TIMSK4 = (1<<TOIE4);   // Enable Timer4 interrupt.
#elif defined (__arm__) && defined (TEENSYDUINO)  // Timer for Teensy 3.x
	itimer.begin(NewPing::timer_ms_cntdwn, 1000); // Set timer to 1ms (1000 uS).
#else
	OCR2A = 249;           // Every count is 4uS, so 1ms = 250 counts - 1.
	TIMSK2 |= (1<<OCIE2A); // Enable Timer2 interrupt.
    1fd2:	6f 5f       	subi	r22, 0xFF	; 255
    1fd4:	7f 4f       	sbci	r23, 0xFF	; 255
    1fd6:	49 e3       	ldi	r20, 0x39	; 57
    1fd8:	46 9f       	mul	r20, r22
    1fda:	90 01       	movw	r18, r0
    1fdc:	47 9f       	mul	r20, r23
    1fde:	30 0d       	add	r19, r0
    1fe0:	11 24       	eor	r1, r1
    1fe2:	2e 38       	cpi	r18, 0x8E	; 142
    1fe4:	4f e6       	ldi	r20, 0x6F	; 111
    1fe6:	34 07       	cpc	r19, r20
    1fe8:	10 f0       	brcs	.+4      	; 0x1fee <_ZN7NewPing16set_max_distanceEj+0x1c>
    1fea:	2d e8       	ldi	r18, 0x8D	; 141
    1fec:	3f e6       	ldi	r19, 0x6F	; 111
    1fee:	fc 01       	movw	r30, r24
    1ff0:	35 87       	std	Z+13, r19	; 0x0d
    1ff2:	24 87       	std	Z+12, r18	; 0x0c
    1ff4:	08 95       	ret

00001ff6 <_ZN7NewPingC1Ehhj>:
    1ff6:	dc 01       	movw	r26, r24
    1ff8:	70 e0       	ldi	r23, 0x00	; 0
    1ffa:	fb 01       	movw	r30, r22
    1ffc:	e7 5f       	subi	r30, 0xF7	; 247
    1ffe:	fe 4f       	sbci	r31, 0xFE	; 254
    2000:	e4 91       	lpm	r30, Z
    2002:	14 96       	adiw	r26, 0x04	; 4
    2004:	ec 93       	st	X, r30
    2006:	14 97       	sbiw	r26, 0x04	; 4
    2008:	50 e0       	ldi	r21, 0x00	; 0
    200a:	fa 01       	movw	r30, r20
    200c:	e7 5f       	subi	r30, 0xF7	; 247
    200e:	fe 4f       	sbci	r31, 0xFE	; 254
    2010:	e4 91       	lpm	r30, Z
    2012:	15 96       	adiw	r26, 0x05	; 5
    2014:	ec 93       	st	X, r30
    2016:	15 97       	sbiw	r26, 0x05	; 5
    2018:	63 5e       	subi	r22, 0xE3	; 227
    201a:	7e 4f       	sbci	r23, 0xFE	; 254
    201c:	fb 01       	movw	r30, r22
    201e:	84 91       	lpm	r24, Z
    2020:	e8 2f       	mov	r30, r24
    2022:	f0 e0       	ldi	r31, 0x00	; 0
    2024:	ee 0f       	add	r30, r30
    2026:	ff 1f       	adc	r31, r31
    2028:	e5 5c       	subi	r30, 0xC5	; 197
    202a:	fe 4f       	sbci	r31, 0xFE	; 254
    202c:	85 91       	lpm	r24, Z+
    202e:	94 91       	lpm	r25, Z
    2030:	17 96       	adiw	r26, 0x07	; 7
    2032:	9c 93       	st	X, r25
    2034:	8e 93       	st	-X, r24
    2036:	16 97       	sbiw	r26, 0x06	; 6
    2038:	fa 01       	movw	r30, r20
    203a:	e3 5e       	subi	r30, 0xE3	; 227
    203c:	fe 4f       	sbci	r31, 0xFE	; 254
    203e:	e4 91       	lpm	r30, Z
    2040:	f0 e0       	ldi	r31, 0x00	; 0
    2042:	ee 0f       	add	r30, r30
    2044:	ff 1f       	adc	r31, r31
    2046:	ef 5c       	subi	r30, 0xCF	; 207
    2048:	fe 4f       	sbci	r31, 0xFE	; 254
    204a:	85 91       	lpm	r24, Z+
    204c:	94 91       	lpm	r25, Z
    204e:	19 96       	adiw	r26, 0x09	; 9
    2050:	9c 93       	st	X, r25
    2052:	8e 93       	st	-X, r24
    2054:	18 97       	sbiw	r26, 0x08	; 8
    2056:	fb 01       	movw	r30, r22
    2058:	64 91       	lpm	r22, Z
    205a:	e6 2f       	mov	r30, r22
    205c:	f0 e0       	ldi	r31, 0x00	; 0
    205e:	ee 0f       	add	r30, r30
    2060:	ff 1f       	adc	r31, r31
    2062:	eb 5b       	subi	r30, 0xBB	; 187
    2064:	fe 4f       	sbci	r31, 0xFE	; 254
    2066:	85 91       	lpm	r24, Z+
    2068:	94 91       	lpm	r25, Z
    206a:	1b 96       	adiw	r26, 0x0b	; 11
    206c:	9c 93       	st	X, r25
    206e:	8e 93       	st	-X, r24
    2070:	1a 97       	sbiw	r26, 0x0a	; 10
    2072:	b9 01       	movw	r22, r18
    2074:	cd 01       	movw	r24, r26
    2076:	0c 94 e9 0f 	jmp	0x1fd2	; 0x1fd2 <_ZN7NewPing16set_max_distanceEj>

0000207a <__vector_7>:
	intFunc(); // Call wrapped function.
}
#elif defined (__arm__)
// Do nothing...
#else
ISR(TIMER2_COMPA_vect) {
    207a:	1f 92       	push	r1
    207c:	0f 92       	push	r0
    207e:	0f b6       	in	r0, 0x3f	; 63
    2080:	0f 92       	push	r0
    2082:	11 24       	eor	r1, r1
    2084:	2f 93       	push	r18
    2086:	3f 93       	push	r19
    2088:	4f 93       	push	r20
    208a:	5f 93       	push	r21
    208c:	6f 93       	push	r22
    208e:	7f 93       	push	r23
    2090:	8f 93       	push	r24
    2092:	9f 93       	push	r25
    2094:	af 93       	push	r26
    2096:	bf 93       	push	r27
    2098:	ef 93       	push	r30
    209a:	ff 93       	push	r31
	intFunc(); // Call wrapped function.
    209c:	e0 91 57 03 	lds	r30, 0x0357	; 0x800357 <intFunc>
    20a0:	f0 91 58 03 	lds	r31, 0x0358	; 0x800358 <intFunc+0x1>
    20a4:	09 95       	icall
}
    20a6:	ff 91       	pop	r31
    20a8:	ef 91       	pop	r30
    20aa:	bf 91       	pop	r27
    20ac:	af 91       	pop	r26
    20ae:	9f 91       	pop	r25
    20b0:	8f 91       	pop	r24
    20b2:	7f 91       	pop	r23
    20b4:	6f 91       	pop	r22
    20b6:	5f 91       	pop	r21
    20b8:	4f 91       	pop	r20
    20ba:	3f 91       	pop	r19
    20bc:	2f 91       	pop	r18
    20be:	0f 90       	pop	r0
    20c0:	0f be       	out	0x3f, r0	; 63
    20c2:	0f 90       	pop	r0
    20c4:	1f 90       	pop	r1
    20c6:	18 95       	reti

000020c8 <twi_readFrom>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    20c8:	41 32       	cpi	r20, 0x21	; 33
    20ca:	08 f0       	brcs	.+2      	; 0x20ce <twi_readFrom+0x6>
    20cc:	43 c0       	rjmp	.+134    	; 0x2154 <twi_readFrom+0x8c>
    20ce:	90 91 c6 03 	lds	r25, 0x03C6	; 0x8003c6 <twi_state>
    20d2:	91 11       	cpse	r25, r1
    20d4:	fc cf       	rjmp	.-8      	; 0x20ce <twi_readFrom+0x6>
    20d6:	91 e0       	ldi	r25, 0x01	; 1
    20d8:	90 93 c6 03 	sts	0x03C6, r25	; 0x8003c6 <twi_state>
    20dc:	20 93 c4 03 	sts	0x03C4, r18	; 0x8003c4 <twi_sendStop>
    20e0:	2f ef       	ldi	r18, 0xFF	; 255
    20e2:	20 93 59 03 	sts	0x0359, r18	; 0x800359 <twi_error>
    20e6:	10 92 9e 03 	sts	0x039E, r1	; 0x80039e <twi_masterBufferIndex>
    20ea:	24 0f       	add	r18, r20
    20ec:	20 93 9d 03 	sts	0x039D, r18	; 0x80039d <twi_masterBufferLength>
    20f0:	90 93 c5 03 	sts	0x03C5, r25	; 0x8003c5 <twi_slarw>
    20f4:	90 91 c5 03 	lds	r25, 0x03C5	; 0x8003c5 <twi_slarw>
    20f8:	88 0f       	add	r24, r24
    20fa:	89 2b       	or	r24, r25
    20fc:	80 93 c5 03 	sts	0x03C5, r24	; 0x8003c5 <twi_slarw>
    2100:	80 91 c3 03 	lds	r24, 0x03C3	; 0x8003c3 <twi_inRepStart>
    2104:	81 30       	cpi	r24, 0x01	; 1
    2106:	61 f4       	brne	.+24     	; 0x2120 <twi_readFrom+0x58>
    2108:	10 92 c3 03 	sts	0x03C3, r1	; 0x8003c3 <twi_inRepStart>
    210c:	80 91 c5 03 	lds	r24, 0x03C5	; 0x8003c5 <twi_slarw>
    2110:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    2114:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    2118:	83 fd       	sbrc	r24, 3
    211a:	f8 cf       	rjmp	.-16     	; 0x210c <twi_readFrom+0x44>
    211c:	85 ec       	ldi	r24, 0xC5	; 197
    211e:	01 c0       	rjmp	.+2      	; 0x2122 <twi_readFrom+0x5a>
    2120:	85 ee       	ldi	r24, 0xE5	; 229
    2122:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    2126:	80 91 c6 03 	lds	r24, 0x03C6	; 0x8003c6 <twi_state>
    212a:	81 30       	cpi	r24, 0x01	; 1
    212c:	e1 f3       	breq	.-8      	; 0x2126 <twi_readFrom+0x5e>
    212e:	80 91 9e 03 	lds	r24, 0x039E	; 0x80039e <twi_masterBufferIndex>
    2132:	84 17       	cp	r24, r20
    2134:	10 f4       	brcc	.+4      	; 0x213a <twi_readFrom+0x72>
    2136:	40 91 9e 03 	lds	r20, 0x039E	; 0x80039e <twi_masterBufferIndex>
    213a:	af e9       	ldi	r26, 0x9F	; 159
    213c:	b3 e0       	ldi	r27, 0x03	; 3
    213e:	96 2f       	mov	r25, r22
    2140:	fb 01       	movw	r30, r22
    2142:	8e 2f       	mov	r24, r30
    2144:	89 1b       	sub	r24, r25
    2146:	84 17       	cp	r24, r20
    2148:	18 f4       	brcc	.+6      	; 0x2150 <twi_readFrom+0x88>
    214a:	8d 91       	ld	r24, X+
    214c:	81 93       	st	Z+, r24
    214e:	f9 cf       	rjmp	.-14     	; 0x2142 <twi_readFrom+0x7a>
    2150:	84 2f       	mov	r24, r20
    2152:	08 95       	ret
    2154:	80 e0       	ldi	r24, 0x00	; 0
    2156:	08 95       	ret

00002158 <twi_writeTo>:
    2158:	0f 93       	push	r16
    215a:	41 32       	cpi	r20, 0x21	; 33
    215c:	08 f0       	brcs	.+2      	; 0x2160 <twi_writeTo+0x8>
    215e:	4a c0       	rjmp	.+148    	; 0x21f4 <twi_writeTo+0x9c>
    2160:	90 91 c6 03 	lds	r25, 0x03C6	; 0x8003c6 <twi_state>
    2164:	91 11       	cpse	r25, r1
    2166:	fc cf       	rjmp	.-8      	; 0x2160 <twi_writeTo+0x8>
    2168:	32 e0       	ldi	r19, 0x02	; 2
    216a:	30 93 c6 03 	sts	0x03C6, r19	; 0x8003c6 <twi_state>
    216e:	00 93 c4 03 	sts	0x03C4, r16	; 0x8003c4 <twi_sendStop>
    2172:	3f ef       	ldi	r19, 0xFF	; 255
    2174:	30 93 59 03 	sts	0x0359, r19	; 0x800359 <twi_error>
    2178:	10 92 9e 03 	sts	0x039E, r1	; 0x80039e <twi_masterBufferIndex>
    217c:	40 93 9d 03 	sts	0x039D, r20	; 0x80039d <twi_masterBufferLength>
    2180:	56 2f       	mov	r21, r22
    2182:	af e9       	ldi	r26, 0x9F	; 159
    2184:	b3 e0       	ldi	r27, 0x03	; 3
    2186:	fb 01       	movw	r30, r22
    2188:	3e 2f       	mov	r19, r30
    218a:	35 1b       	sub	r19, r21
    218c:	34 17       	cp	r19, r20
    218e:	18 f4       	brcc	.+6      	; 0x2196 <twi_writeTo+0x3e>
    2190:	31 91       	ld	r19, Z+
    2192:	3d 93       	st	X+, r19
    2194:	f9 cf       	rjmp	.-14     	; 0x2188 <twi_writeTo+0x30>
    2196:	10 92 c5 03 	sts	0x03C5, r1	; 0x8003c5 <twi_slarw>
    219a:	30 91 c5 03 	lds	r19, 0x03C5	; 0x8003c5 <twi_slarw>
    219e:	88 0f       	add	r24, r24
    21a0:	83 2b       	or	r24, r19
    21a2:	80 93 c5 03 	sts	0x03C5, r24	; 0x8003c5 <twi_slarw>
    21a6:	80 91 c3 03 	lds	r24, 0x03C3	; 0x8003c3 <twi_inRepStart>
    21aa:	81 30       	cpi	r24, 0x01	; 1
    21ac:	61 f4       	brne	.+24     	; 0x21c6 <twi_writeTo+0x6e>
    21ae:	10 92 c3 03 	sts	0x03C3, r1	; 0x8003c3 <twi_inRepStart>
    21b2:	80 91 c5 03 	lds	r24, 0x03C5	; 0x8003c5 <twi_slarw>
    21b6:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    21ba:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    21be:	83 fd       	sbrc	r24, 3
    21c0:	f8 cf       	rjmp	.-16     	; 0x21b2 <twi_writeTo+0x5a>
    21c2:	85 ec       	ldi	r24, 0xC5	; 197
    21c4:	01 c0       	rjmp	.+2      	; 0x21c8 <twi_writeTo+0x70>
    21c6:	85 ee       	ldi	r24, 0xE5	; 229
    21c8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    21cc:	22 23       	and	r18, r18
    21ce:	21 f0       	breq	.+8      	; 0x21d8 <twi_writeTo+0x80>
    21d0:	80 91 c6 03 	lds	r24, 0x03C6	; 0x8003c6 <twi_state>
    21d4:	82 30       	cpi	r24, 0x02	; 2
    21d6:	d1 f3       	breq	.-12     	; 0x21cc <twi_writeTo+0x74>
    21d8:	80 91 59 03 	lds	r24, 0x0359	; 0x800359 <twi_error>
    21dc:	8f 3f       	cpi	r24, 0xFF	; 255
    21de:	79 f0       	breq	.+30     	; 0x21fe <twi_writeTo+0xa6>
    21e0:	80 91 59 03 	lds	r24, 0x0359	; 0x800359 <twi_error>
    21e4:	80 32       	cpi	r24, 0x20	; 32
    21e6:	41 f0       	breq	.+16     	; 0x21f8 <twi_writeTo+0xa0>
    21e8:	80 91 59 03 	lds	r24, 0x0359	; 0x800359 <twi_error>
    21ec:	80 33       	cpi	r24, 0x30	; 48
    21ee:	31 f0       	breq	.+12     	; 0x21fc <twi_writeTo+0xa4>
    21f0:	94 e0       	ldi	r25, 0x04	; 4
    21f2:	05 c0       	rjmp	.+10     	; 0x21fe <twi_writeTo+0xa6>
    21f4:	91 e0       	ldi	r25, 0x01	; 1
    21f6:	03 c0       	rjmp	.+6      	; 0x21fe <twi_writeTo+0xa6>
    21f8:	92 e0       	ldi	r25, 0x02	; 2
    21fa:	01 c0       	rjmp	.+2      	; 0x21fe <twi_writeTo+0xa6>
    21fc:	93 e0       	ldi	r25, 0x03	; 3
    21fe:	89 2f       	mov	r24, r25
    2200:	0f 91       	pop	r16
    2202:	08 95       	ret

00002204 <twi_transmit>:
    2204:	40 91 7b 03 	lds	r20, 0x037B	; 0x80037b <twi_txBufferLength>
    2208:	26 2f       	mov	r18, r22
    220a:	30 e0       	ldi	r19, 0x00	; 0
    220c:	24 0f       	add	r18, r20
    220e:	31 1d       	adc	r19, r1
    2210:	21 32       	cpi	r18, 0x21	; 33
    2212:	31 05       	cpc	r19, r1
    2214:	dc f4       	brge	.+54     	; 0x224c <twi_transmit+0x48>
    2216:	20 91 c6 03 	lds	r18, 0x03C6	; 0x8003c6 <twi_state>
    221a:	24 30       	cpi	r18, 0x04	; 4
    221c:	c9 f4       	brne	.+50     	; 0x2250 <twi_transmit+0x4c>
    221e:	fc 01       	movw	r30, r24
    2220:	80 e0       	ldi	r24, 0x00	; 0
    2222:	90 e0       	ldi	r25, 0x00	; 0
    2224:	86 17       	cp	r24, r22
    2226:	58 f4       	brcc	.+22     	; 0x223e <twi_transmit+0x3a>
    2228:	30 91 7b 03 	lds	r19, 0x037B	; 0x80037b <twi_txBufferLength>
    222c:	21 91       	ld	r18, Z+
    222e:	dc 01       	movw	r26, r24
    2230:	a3 58       	subi	r26, 0x83	; 131
    2232:	bc 4f       	sbci	r27, 0xFC	; 252
    2234:	a3 0f       	add	r26, r19
    2236:	b1 1d       	adc	r27, r1
    2238:	2c 93       	st	X, r18
    223a:	01 96       	adiw	r24, 0x01	; 1
    223c:	f3 cf       	rjmp	.-26     	; 0x2224 <twi_transmit+0x20>
    223e:	80 91 7b 03 	lds	r24, 0x037B	; 0x80037b <twi_txBufferLength>
    2242:	68 0f       	add	r22, r24
    2244:	60 93 7b 03 	sts	0x037B, r22	; 0x80037b <twi_txBufferLength>
    2248:	80 e0       	ldi	r24, 0x00	; 0
    224a:	08 95       	ret
    224c:	81 e0       	ldi	r24, 0x01	; 1
    224e:	08 95       	ret
    2250:	82 e0       	ldi	r24, 0x02	; 2
    2252:	08 95       	ret

00002254 <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    2254:	85 ed       	ldi	r24, 0xD5	; 213
    2256:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    225a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    225e:	84 fd       	sbrc	r24, 4
    2260:	fc cf       	rjmp	.-8      	; 0x225a <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    2262:	10 92 c6 03 	sts	0x03C6, r1	; 0x8003c6 <twi_state>
    2266:	08 95       	ret

00002268 <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    2268:	85 ec       	ldi	r24, 0xC5	; 197
    226a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // update twi state
  twi_state = TWI_READY;
    226e:	10 92 c6 03 	sts	0x03C6, r1	; 0x8003c6 <twi_state>
    2272:	08 95       	ret

00002274 <__vector_24>:
}

ISR(TWI_vect)
{
    2274:	1f 92       	push	r1
    2276:	0f 92       	push	r0
    2278:	0f b6       	in	r0, 0x3f	; 63
    227a:	0f 92       	push	r0
    227c:	11 24       	eor	r1, r1
    227e:	2f 93       	push	r18
    2280:	3f 93       	push	r19
    2282:	4f 93       	push	r20
    2284:	5f 93       	push	r21
    2286:	6f 93       	push	r22
    2288:	7f 93       	push	r23
    228a:	8f 93       	push	r24
    228c:	9f 93       	push	r25
    228e:	af 93       	push	r26
    2290:	bf 93       	push	r27
    2292:	ef 93       	push	r30
    2294:	ff 93       	push	r31
  switch(TW_STATUS){
    2296:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    229a:	88 7f       	andi	r24, 0xF8	; 248
    229c:	80 36       	cpi	r24, 0x60	; 96
    229e:	09 f4       	brne	.+2      	; 0x22a2 <__vector_24+0x2e>
    22a0:	9e c0       	rjmp	.+316    	; 0x23de <__vector_24+0x16a>
    22a2:	78 f5       	brcc	.+94     	; 0x2302 <__vector_24+0x8e>
    22a4:	88 32       	cpi	r24, 0x28	; 40
    22a6:	09 f4       	brne	.+2      	; 0x22aa <__vector_24+0x36>
    22a8:	5d c0       	rjmp	.+186    	; 0x2364 <__vector_24+0xf0>
    22aa:	90 f4       	brcc	.+36     	; 0x22d0 <__vector_24+0x5c>
    22ac:	80 31       	cpi	r24, 0x10	; 16
    22ae:	09 f4       	brne	.+2      	; 0x22b2 <__vector_24+0x3e>
    22b0:	56 c0       	rjmp	.+172    	; 0x235e <__vector_24+0xea>
    22b2:	38 f4       	brcc	.+14     	; 0x22c2 <__vector_24+0x4e>
    22b4:	88 23       	and	r24, r24
    22b6:	09 f4       	brne	.+2      	; 0x22ba <__vector_24+0x46>
    22b8:	f5 c0       	rjmp	.+490    	; 0x24a4 <__vector_24+0x230>
    22ba:	88 30       	cpi	r24, 0x08	; 8
    22bc:	09 f4       	brne	.+2      	; 0x22c0 <__vector_24+0x4c>
    22be:	4f c0       	rjmp	.+158    	; 0x235e <__vector_24+0xea>
    22c0:	f5 c0       	rjmp	.+490    	; 0x24ac <__vector_24+0x238>
    22c2:	88 31       	cpi	r24, 0x18	; 24
    22c4:	09 f4       	brne	.+2      	; 0x22c8 <__vector_24+0x54>
    22c6:	4e c0       	rjmp	.+156    	; 0x2364 <__vector_24+0xf0>
    22c8:	80 32       	cpi	r24, 0x20	; 32
    22ca:	09 f4       	brne	.+2      	; 0x22ce <__vector_24+0x5a>
    22cc:	5f c0       	rjmp	.+190    	; 0x238c <__vector_24+0x118>
    22ce:	ee c0       	rjmp	.+476    	; 0x24ac <__vector_24+0x238>
    22d0:	80 34       	cpi	r24, 0x40	; 64
    22d2:	09 f4       	brne	.+2      	; 0x22d6 <__vector_24+0x62>
    22d4:	6a c0       	rjmp	.+212    	; 0x23aa <__vector_24+0x136>
    22d6:	58 f4       	brcc	.+22     	; 0x22ee <__vector_24+0x7a>
    22d8:	80 33       	cpi	r24, 0x30	; 48
    22da:	09 f4       	brne	.+2      	; 0x22de <__vector_24+0x6a>
    22dc:	57 c0       	rjmp	.+174    	; 0x238c <__vector_24+0x118>
    22de:	88 33       	cpi	r24, 0x38	; 56
    22e0:	09 f0       	breq	.+2      	; 0x22e4 <__vector_24+0x70>
    22e2:	e4 c0       	rjmp	.+456    	; 0x24ac <__vector_24+0x238>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    22e4:	80 93 59 03 	sts	0x0359, r24	; 0x800359 <twi_error>
      twi_releaseBus();
    22e8:	0e 94 34 11 	call	0x2268	; 0x2268 <twi_releaseBus>
      break;
    22ec:	df c0       	rjmp	.+446    	; 0x24ac <__vector_24+0x238>
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    22ee:	80 35       	cpi	r24, 0x50	; 80
    22f0:	09 f4       	brne	.+2      	; 0x22f4 <__vector_24+0x80>
    22f2:	4f c0       	rjmp	.+158    	; 0x2392 <__vector_24+0x11e>
    22f4:	88 35       	cpi	r24, 0x58	; 88
    22f6:	09 f4       	brne	.+2      	; 0x22fa <__vector_24+0x86>
    22f8:	5d c0       	rjmp	.+186    	; 0x23b4 <__vector_24+0x140>
    22fa:	88 34       	cpi	r24, 0x48	; 72
    22fc:	09 f0       	breq	.+2      	; 0x2300 <__vector_24+0x8c>
    22fe:	d6 c0       	rjmp	.+428    	; 0x24ac <__vector_24+0x238>
    2300:	d3 c0       	rjmp	.+422    	; 0x24a8 <__vector_24+0x234>
    2302:	88 39       	cpi	r24, 0x98	; 152
    2304:	09 f4       	brne	.+2      	; 0x2308 <__vector_24+0x94>
    2306:	c4 c0       	rjmp	.+392    	; 0x2490 <__vector_24+0x21c>
    2308:	a8 f4       	brcc	.+42     	; 0x2334 <__vector_24+0xc0>
    230a:	88 37       	cpi	r24, 0x78	; 120
    230c:	09 f4       	brne	.+2      	; 0x2310 <__vector_24+0x9c>
    230e:	67 c0       	rjmp	.+206    	; 0x23de <__vector_24+0x16a>
    2310:	38 f4       	brcc	.+14     	; 0x2320 <__vector_24+0xac>
    2312:	88 36       	cpi	r24, 0x68	; 104
    2314:	09 f4       	brne	.+2      	; 0x2318 <__vector_24+0xa4>
    2316:	63 c0       	rjmp	.+198    	; 0x23de <__vector_24+0x16a>
    2318:	80 37       	cpi	r24, 0x70	; 112
    231a:	09 f4       	brne	.+2      	; 0x231e <__vector_24+0xaa>
    231c:	60 c0       	rjmp	.+192    	; 0x23de <__vector_24+0x16a>
    231e:	c6 c0       	rjmp	.+396    	; 0x24ac <__vector_24+0x238>
    2320:	88 38       	cpi	r24, 0x88	; 136
    2322:	09 f4       	brne	.+2      	; 0x2326 <__vector_24+0xb2>
    2324:	b5 c0       	rjmp	.+362    	; 0x2490 <__vector_24+0x21c>
    2326:	80 39       	cpi	r24, 0x90	; 144
    2328:	09 f4       	brne	.+2      	; 0x232c <__vector_24+0xb8>
    232a:	5f c0       	rjmp	.+190    	; 0x23ea <__vector_24+0x176>
    232c:	80 38       	cpi	r24, 0x80	; 128
    232e:	09 f0       	breq	.+2      	; 0x2332 <__vector_24+0xbe>
    2330:	bd c0       	rjmp	.+378    	; 0x24ac <__vector_24+0x238>
    2332:	5b c0       	rjmp	.+182    	; 0x23ea <__vector_24+0x176>
    2334:	80 3b       	cpi	r24, 0xB0	; 176
    2336:	09 f4       	brne	.+2      	; 0x233a <__vector_24+0xc6>
    2338:	83 c0       	rjmp	.+262    	; 0x2440 <__vector_24+0x1cc>
    233a:	38 f4       	brcc	.+14     	; 0x234a <__vector_24+0xd6>
    233c:	80 3a       	cpi	r24, 0xA0	; 160
    233e:	09 f4       	brne	.+2      	; 0x2342 <__vector_24+0xce>
    2340:	66 c0       	rjmp	.+204    	; 0x240e <__vector_24+0x19a>
    2342:	88 3a       	cpi	r24, 0xA8	; 168
    2344:	09 f4       	brne	.+2      	; 0x2348 <__vector_24+0xd4>
    2346:	7c c0       	rjmp	.+248    	; 0x2440 <__vector_24+0x1cc>
    2348:	b1 c0       	rjmp	.+354    	; 0x24ac <__vector_24+0x238>
    234a:	80 3c       	cpi	r24, 0xC0	; 192
    234c:	09 f4       	brne	.+2      	; 0x2350 <__vector_24+0xdc>
    234e:	a4 c0       	rjmp	.+328    	; 0x2498 <__vector_24+0x224>
    2350:	88 3c       	cpi	r24, 0xC8	; 200
    2352:	09 f4       	brne	.+2      	; 0x2356 <__vector_24+0xe2>
    2354:	a1 c0       	rjmp	.+322    	; 0x2498 <__vector_24+0x224>
    2356:	88 3b       	cpi	r24, 0xB8	; 184
    2358:	09 f4       	brne	.+2      	; 0x235c <__vector_24+0xe8>
    235a:	87 c0       	rjmp	.+270    	; 0x246a <__vector_24+0x1f6>
    235c:	a7 c0       	rjmp	.+334    	; 0x24ac <__vector_24+0x238>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    235e:	80 91 c5 03 	lds	r24, 0x03C5	; 0x8003c5 <twi_slarw>
    2362:	10 c0       	rjmp	.+32     	; 0x2384 <__vector_24+0x110>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    2364:	90 91 9e 03 	lds	r25, 0x039E	; 0x80039e <twi_masterBufferIndex>
    2368:	80 91 9d 03 	lds	r24, 0x039D	; 0x80039d <twi_masterBufferLength>
    236c:	98 17       	cp	r25, r24
    236e:	70 f5       	brcc	.+92     	; 0x23cc <__vector_24+0x158>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    2370:	e0 91 9e 03 	lds	r30, 0x039E	; 0x80039e <twi_masterBufferIndex>
    2374:	81 e0       	ldi	r24, 0x01	; 1
    2376:	8e 0f       	add	r24, r30
    2378:	80 93 9e 03 	sts	0x039E, r24	; 0x80039e <twi_masterBufferIndex>
    237c:	f0 e0       	ldi	r31, 0x00	; 0
    237e:	e1 56       	subi	r30, 0x61	; 97
    2380:	fc 4f       	sbci	r31, 0xFC	; 252
    2382:	80 81       	ld	r24, Z
    2384:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    2388:	85 ec       	ldi	r24, 0xC5	; 197
    238a:	83 c0       	rjmp	.+262    	; 0x2492 <__vector_24+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    238c:	80 93 59 03 	sts	0x0359, r24	; 0x800359 <twi_error>
    2390:	8b c0       	rjmp	.+278    	; 0x24a8 <__vector_24+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    2392:	e0 91 9e 03 	lds	r30, 0x039E	; 0x80039e <twi_masterBufferIndex>
    2396:	81 e0       	ldi	r24, 0x01	; 1
    2398:	8e 0f       	add	r24, r30
    239a:	80 93 9e 03 	sts	0x039E, r24	; 0x80039e <twi_masterBufferIndex>
    239e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    23a2:	f0 e0       	ldi	r31, 0x00	; 0
    23a4:	e1 56       	subi	r30, 0x61	; 97
    23a6:	fc 4f       	sbci	r31, 0xFC	; 252
    23a8:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    23aa:	90 91 9e 03 	lds	r25, 0x039E	; 0x80039e <twi_masterBufferIndex>
    23ae:	80 91 9d 03 	lds	r24, 0x039D	; 0x80039d <twi_masterBufferLength>
    23b2:	6b c0       	rjmp	.+214    	; 0x248a <__vector_24+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    23b4:	e0 91 9e 03 	lds	r30, 0x039E	; 0x80039e <twi_masterBufferIndex>
    23b8:	81 e0       	ldi	r24, 0x01	; 1
    23ba:	8e 0f       	add	r24, r30
    23bc:	80 93 9e 03 	sts	0x039E, r24	; 0x80039e <twi_masterBufferIndex>
    23c0:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    23c4:	f0 e0       	ldi	r31, 0x00	; 0
    23c6:	e1 56       	subi	r30, 0x61	; 97
    23c8:	fc 4f       	sbci	r31, 0xFC	; 252
    23ca:	80 83       	st	Z, r24
	if (twi_sendStop)
    23cc:	80 91 c4 03 	lds	r24, 0x03C4	; 0x8003c4 <twi_sendStop>
    23d0:	81 11       	cpse	r24, r1
    23d2:	6a c0       	rjmp	.+212    	; 0x24a8 <__vector_24+0x234>
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    23d4:	81 e0       	ldi	r24, 0x01	; 1
    23d6:	80 93 c3 03 	sts	0x03C3, r24	; 0x8003c3 <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    23da:	84 ea       	ldi	r24, 0xA4	; 164
    23dc:	5e c0       	rjmp	.+188    	; 0x249a <__vector_24+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    23de:	83 e0       	ldi	r24, 0x03	; 3
    23e0:	80 93 c6 03 	sts	0x03C6, r24	; 0x8003c6 <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    23e4:	10 92 5a 03 	sts	0x035A, r1	; 0x80035a <twi_rxBufferIndex>
    23e8:	cf cf       	rjmp	.-98     	; 0x2388 <__vector_24+0x114>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    23ea:	80 91 5a 03 	lds	r24, 0x035A	; 0x80035a <twi_rxBufferIndex>
    23ee:	80 32       	cpi	r24, 0x20	; 32
    23f0:	08 f0       	brcs	.+2      	; 0x23f4 <__vector_24+0x180>
    23f2:	4e c0       	rjmp	.+156    	; 0x2490 <__vector_24+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    23f4:	e0 91 5a 03 	lds	r30, 0x035A	; 0x80035a <twi_rxBufferIndex>
    23f8:	81 e0       	ldi	r24, 0x01	; 1
    23fa:	8e 0f       	add	r24, r30
    23fc:	80 93 5a 03 	sts	0x035A, r24	; 0x80035a <twi_rxBufferIndex>
    2400:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    2404:	f0 e0       	ldi	r31, 0x00	; 0
    2406:	e5 5a       	subi	r30, 0xA5	; 165
    2408:	fc 4f       	sbci	r31, 0xFC	; 252
    240a:	80 83       	st	Z, r24
    240c:	bd cf       	rjmp	.-134    	; 0x2388 <__vector_24+0x114>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    240e:	0e 94 34 11 	call	0x2268	; 0x2268 <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    2412:	80 91 5a 03 	lds	r24, 0x035A	; 0x80035a <twi_rxBufferIndex>
    2416:	80 32       	cpi	r24, 0x20	; 32
    2418:	30 f4       	brcc	.+12     	; 0x2426 <__vector_24+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    241a:	e0 91 5a 03 	lds	r30, 0x035A	; 0x80035a <twi_rxBufferIndex>
    241e:	f0 e0       	ldi	r31, 0x00	; 0
    2420:	e5 5a       	subi	r30, 0xA5	; 165
    2422:	fc 4f       	sbci	r31, 0xFC	; 252
    2424:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    2426:	60 91 5a 03 	lds	r22, 0x035A	; 0x80035a <twi_rxBufferIndex>
    242a:	70 e0       	ldi	r23, 0x00	; 0
    242c:	e0 91 bf 03 	lds	r30, 0x03BF	; 0x8003bf <twi_onSlaveReceive>
    2430:	f0 91 c0 03 	lds	r31, 0x03C0	; 0x8003c0 <twi_onSlaveReceive+0x1>
    2434:	8b e5       	ldi	r24, 0x5B	; 91
    2436:	93 e0       	ldi	r25, 0x03	; 3
    2438:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    243a:	10 92 5a 03 	sts	0x035A, r1	; 0x80035a <twi_rxBufferIndex>
      break;
    243e:	36 c0       	rjmp	.+108    	; 0x24ac <__vector_24+0x238>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    2440:	84 e0       	ldi	r24, 0x04	; 4
    2442:	80 93 c6 03 	sts	0x03C6, r24	; 0x8003c6 <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    2446:	10 92 7c 03 	sts	0x037C, r1	; 0x80037c <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    244a:	10 92 7b 03 	sts	0x037B, r1	; 0x80037b <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    244e:	e0 91 c1 03 	lds	r30, 0x03C1	; 0x8003c1 <twi_onSlaveTransmit>
    2452:	f0 91 c2 03 	lds	r31, 0x03C2	; 0x8003c2 <twi_onSlaveTransmit+0x1>
    2456:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    2458:	80 91 7b 03 	lds	r24, 0x037B	; 0x80037b <twi_txBufferLength>
    245c:	81 11       	cpse	r24, r1
    245e:	05 c0       	rjmp	.+10     	; 0x246a <__vector_24+0x1f6>
        twi_txBufferLength = 1;
    2460:	81 e0       	ldi	r24, 0x01	; 1
    2462:	80 93 7b 03 	sts	0x037B, r24	; 0x80037b <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    2466:	10 92 7d 03 	sts	0x037D, r1	; 0x80037d <twi_txBuffer>
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    246a:	e0 91 7c 03 	lds	r30, 0x037C	; 0x80037c <twi_txBufferIndex>
    246e:	81 e0       	ldi	r24, 0x01	; 1
    2470:	8e 0f       	add	r24, r30
    2472:	80 93 7c 03 	sts	0x037C, r24	; 0x80037c <twi_txBufferIndex>
    2476:	f0 e0       	ldi	r31, 0x00	; 0
    2478:	e3 58       	subi	r30, 0x83	; 131
    247a:	fc 4f       	sbci	r31, 0xFC	; 252
    247c:	80 81       	ld	r24, Z
    247e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    2482:	90 91 7c 03 	lds	r25, 0x037C	; 0x80037c <twi_txBufferIndex>
    2486:	80 91 7b 03 	lds	r24, 0x037B	; 0x80037b <twi_txBufferLength>
    248a:	98 17       	cp	r25, r24
    248c:	08 f4       	brcc	.+2      	; 0x2490 <__vector_24+0x21c>
    248e:	7c cf       	rjmp	.-264    	; 0x2388 <__vector_24+0x114>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    2490:	85 e8       	ldi	r24, 0x85	; 133
    2492:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    2496:	0a c0       	rjmp	.+20     	; 0x24ac <__vector_24+0x238>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    2498:	85 ec       	ldi	r24, 0xC5	; 197
    249a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    249e:	10 92 c6 03 	sts	0x03C6, r1	; 0x8003c6 <twi_state>
      break;
    24a2:	04 c0       	rjmp	.+8      	; 0x24ac <__vector_24+0x238>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    24a4:	10 92 59 03 	sts	0x0359, r1	; 0x800359 <twi_error>
      twi_stop();
    24a8:	0e 94 2a 11 	call	0x2254	; 0x2254 <twi_stop>
      break;
  }
}
    24ac:	ff 91       	pop	r31
    24ae:	ef 91       	pop	r30
    24b0:	bf 91       	pop	r27
    24b2:	af 91       	pop	r26
    24b4:	9f 91       	pop	r25
    24b6:	8f 91       	pop	r24
    24b8:	7f 91       	pop	r23
    24ba:	6f 91       	pop	r22
    24bc:	5f 91       	pop	r21
    24be:	4f 91       	pop	r20
    24c0:	3f 91       	pop	r19
    24c2:	2f 91       	pop	r18
    24c4:	0f 90       	pop	r0
    24c6:	0f be       	out	0x3f, r0	; 63
    24c8:	0f 90       	pop	r0
    24ca:	1f 90       	pop	r1
    24cc:	18 95       	reti

000024ce <_ZN5Print17availableForWriteEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    24ce:	80 e0       	ldi	r24, 0x00	; 0
    24d0:	90 e0       	ldi	r25, 0x00	; 0
    24d2:	08 95       	ret

000024d4 <_ZN7TwoWire9availableEv>:
    24d4:	80 91 f7 03 	lds	r24, 0x03F7	; 0x8003f7 <_ZN7TwoWire14rxBufferLengthE>
    24d8:	90 e0       	ldi	r25, 0x00	; 0
    24da:	20 91 f8 03 	lds	r18, 0x03F8	; 0x8003f8 <_ZN7TwoWire13rxBufferIndexE>
    24de:	82 1b       	sub	r24, r18
    24e0:	91 09       	sbc	r25, r1
    24e2:	08 95       	ret

000024e4 <_ZN7TwoWire4readEv>:
    24e4:	90 91 f8 03 	lds	r25, 0x03F8	; 0x8003f8 <_ZN7TwoWire13rxBufferIndexE>
    24e8:	80 91 f7 03 	lds	r24, 0x03F7	; 0x8003f7 <_ZN7TwoWire14rxBufferLengthE>
    24ec:	98 17       	cp	r25, r24
    24ee:	50 f4       	brcc	.+20     	; 0x2504 <_ZN7TwoWire4readEv+0x20>
    24f0:	e9 2f       	mov	r30, r25
    24f2:	f0 e0       	ldi	r31, 0x00	; 0
    24f4:	e7 50       	subi	r30, 0x07	; 7
    24f6:	fc 4f       	sbci	r31, 0xFC	; 252
    24f8:	20 81       	ld	r18, Z
    24fa:	30 e0       	ldi	r19, 0x00	; 0
    24fc:	9f 5f       	subi	r25, 0xFF	; 255
    24fe:	90 93 f8 03 	sts	0x03F8, r25	; 0x8003f8 <_ZN7TwoWire13rxBufferIndexE>
    2502:	02 c0       	rjmp	.+4      	; 0x2508 <_ZN7TwoWire4readEv+0x24>
    2504:	2f ef       	ldi	r18, 0xFF	; 255
    2506:	3f ef       	ldi	r19, 0xFF	; 255
    2508:	c9 01       	movw	r24, r18
    250a:	08 95       	ret

0000250c <_ZN7TwoWire4peekEv>:
    250c:	e0 91 f8 03 	lds	r30, 0x03F8	; 0x8003f8 <_ZN7TwoWire13rxBufferIndexE>
    2510:	80 91 f7 03 	lds	r24, 0x03F7	; 0x8003f7 <_ZN7TwoWire14rxBufferLengthE>
    2514:	e8 17       	cp	r30, r24
    2516:	30 f4       	brcc	.+12     	; 0x2524 <_ZN7TwoWire4peekEv+0x18>
    2518:	f0 e0       	ldi	r31, 0x00	; 0
    251a:	e7 50       	subi	r30, 0x07	; 7
    251c:	fc 4f       	sbci	r31, 0xFC	; 252
    251e:	80 81       	ld	r24, Z
    2520:	90 e0       	ldi	r25, 0x00	; 0
    2522:	08 95       	ret
    2524:	8f ef       	ldi	r24, 0xFF	; 255
    2526:	9f ef       	ldi	r25, 0xFF	; 255
    2528:	08 95       	ret

0000252a <_ZN7TwoWire5flushEv>:
    252a:	08 95       	ret

0000252c <_ZN7TwoWire5writeEPKhj>:
    252c:	cf 92       	push	r12
    252e:	df 92       	push	r13
    2530:	ef 92       	push	r14
    2532:	ff 92       	push	r15
    2534:	0f 93       	push	r16
    2536:	1f 93       	push	r17
    2538:	cf 93       	push	r28
    253a:	df 93       	push	r29
    253c:	7c 01       	movw	r14, r24
    253e:	cb 01       	movw	r24, r22
    2540:	8a 01       	movw	r16, r20
    2542:	20 91 d3 03 	lds	r18, 0x03D3	; 0x8003d3 <_ZN7TwoWire12transmittingE>
    2546:	22 23       	and	r18, r18
    2548:	89 f0       	breq	.+34     	; 0x256c <_ZN7TwoWire5writeEPKhj+0x40>
    254a:	eb 01       	movw	r28, r22
    254c:	6b 01       	movw	r12, r22
    254e:	c4 0e       	add	r12, r20
    2550:	d5 1e       	adc	r13, r21
    2552:	cc 15       	cp	r28, r12
    2554:	dd 05       	cpc	r29, r13
    2556:	69 f0       	breq	.+26     	; 0x2572 <_ZN7TwoWire5writeEPKhj+0x46>
    2558:	69 91       	ld	r22, Y+
    255a:	d7 01       	movw	r26, r14
    255c:	ed 91       	ld	r30, X+
    255e:	fc 91       	ld	r31, X
    2560:	01 90       	ld	r0, Z+
    2562:	f0 81       	ld	r31, Z
    2564:	e0 2d       	mov	r30, r0
    2566:	c7 01       	movw	r24, r14
    2568:	09 95       	icall
    256a:	f3 cf       	rjmp	.-26     	; 0x2552 <_ZN7TwoWire5writeEPKhj+0x26>
    256c:	64 2f       	mov	r22, r20
    256e:	0e 94 02 11 	call	0x2204	; 0x2204 <twi_transmit>
    2572:	c8 01       	movw	r24, r16
    2574:	df 91       	pop	r29
    2576:	cf 91       	pop	r28
    2578:	1f 91       	pop	r17
    257a:	0f 91       	pop	r16
    257c:	ff 90       	pop	r15
    257e:	ef 90       	pop	r14
    2580:	df 90       	pop	r13
    2582:	cf 90       	pop	r12
    2584:	08 95       	ret

00002586 <_ZN7TwoWire5writeEh>:
    2586:	cf 93       	push	r28
    2588:	df 93       	push	r29
    258a:	1f 92       	push	r1
    258c:	cd b7       	in	r28, 0x3d	; 61
    258e:	de b7       	in	r29, 0x3e	; 62
    2590:	69 83       	std	Y+1, r22	; 0x01
    2592:	20 91 d3 03 	lds	r18, 0x03D3	; 0x8003d3 <_ZN7TwoWire12transmittingE>
    2596:	22 23       	and	r18, r18
    2598:	d1 f0       	breq	.+52     	; 0x25ce <_ZN7TwoWire5writeEh+0x48>
    259a:	20 91 d4 03 	lds	r18, 0x03D4	; 0x8003d4 <_ZN7TwoWire14txBufferLengthE>
    259e:	20 32       	cpi	r18, 0x20	; 32
    25a0:	40 f0       	brcs	.+16     	; 0x25b2 <_ZN7TwoWire5writeEh+0x2c>
    25a2:	21 e0       	ldi	r18, 0x01	; 1
    25a4:	30 e0       	ldi	r19, 0x00	; 0
    25a6:	fc 01       	movw	r30, r24
    25a8:	33 83       	std	Z+3, r19	; 0x03
    25aa:	22 83       	std	Z+2, r18	; 0x02
    25ac:	80 e0       	ldi	r24, 0x00	; 0
    25ae:	90 e0       	ldi	r25, 0x00	; 0
    25b0:	15 c0       	rjmp	.+42     	; 0x25dc <_ZN7TwoWire5writeEh+0x56>
    25b2:	80 91 d5 03 	lds	r24, 0x03D5	; 0x8003d5 <_ZN7TwoWire13txBufferIndexE>
    25b6:	e8 2f       	mov	r30, r24
    25b8:	f0 e0       	ldi	r31, 0x00	; 0
    25ba:	ea 52       	subi	r30, 0x2A	; 42
    25bc:	fc 4f       	sbci	r31, 0xFC	; 252
    25be:	99 81       	ldd	r25, Y+1	; 0x01
    25c0:	90 83       	st	Z, r25
    25c2:	8f 5f       	subi	r24, 0xFF	; 255
    25c4:	80 93 d5 03 	sts	0x03D5, r24	; 0x8003d5 <_ZN7TwoWire13txBufferIndexE>
    25c8:	80 93 d4 03 	sts	0x03D4, r24	; 0x8003d4 <_ZN7TwoWire14txBufferLengthE>
    25cc:	05 c0       	rjmp	.+10     	; 0x25d8 <_ZN7TwoWire5writeEh+0x52>
    25ce:	61 e0       	ldi	r22, 0x01	; 1
    25d0:	ce 01       	movw	r24, r28
    25d2:	01 96       	adiw	r24, 0x01	; 1
    25d4:	0e 94 02 11 	call	0x2204	; 0x2204 <twi_transmit>
    25d8:	81 e0       	ldi	r24, 0x01	; 1
    25da:	90 e0       	ldi	r25, 0x00	; 0
    25dc:	0f 90       	pop	r0
    25de:	df 91       	pop	r29
    25e0:	cf 91       	pop	r28
    25e2:	08 95       	ret

000025e4 <_ZN7TwoWireC1Ev>:
    25e4:	fc 01       	movw	r30, r24
    25e6:	13 82       	std	Z+3, r1	; 0x03
    25e8:	12 82       	std	Z+2, r1	; 0x02
    25ea:	88 ee       	ldi	r24, 0xE8	; 232
    25ec:	93 e0       	ldi	r25, 0x03	; 3
    25ee:	a0 e0       	ldi	r26, 0x00	; 0
    25f0:	b0 e0       	ldi	r27, 0x00	; 0
    25f2:	84 83       	std	Z+4, r24	; 0x04
    25f4:	95 83       	std	Z+5, r25	; 0x05
    25f6:	a6 83       	std	Z+6, r26	; 0x06
    25f8:	b7 83       	std	Z+7, r27	; 0x07
    25fa:	83 e7       	ldi	r24, 0x73	; 115
    25fc:	92 e0       	ldi	r25, 0x02	; 2
    25fe:	91 83       	std	Z+1, r25	; 0x01
    2600:	80 83       	st	Z, r24
    2602:	08 95       	ret

00002604 <_ZN7TwoWire17beginTransmissionEh>:
    2604:	81 e0       	ldi	r24, 0x01	; 1
    2606:	80 93 d3 03 	sts	0x03D3, r24	; 0x8003d3 <_ZN7TwoWire12transmittingE>
    260a:	60 93 f6 03 	sts	0x03F6, r22	; 0x8003f6 <_ZN7TwoWire9txAddressE>
    260e:	10 92 d5 03 	sts	0x03D5, r1	; 0x8003d5 <_ZN7TwoWire13txBufferIndexE>
    2612:	10 92 d4 03 	sts	0x03D4, r1	; 0x8003d4 <_ZN7TwoWire14txBufferLengthE>
    2616:	08 95       	ret

00002618 <_ZN7TwoWire15endTransmissionEh>:
    2618:	0f 93       	push	r16
    261a:	06 2f       	mov	r16, r22
    261c:	21 e0       	ldi	r18, 0x01	; 1
    261e:	40 91 d4 03 	lds	r20, 0x03D4	; 0x8003d4 <_ZN7TwoWire14txBufferLengthE>
    2622:	66 ed       	ldi	r22, 0xD6	; 214
    2624:	73 e0       	ldi	r23, 0x03	; 3
    2626:	80 91 f6 03 	lds	r24, 0x03F6	; 0x8003f6 <_ZN7TwoWire9txAddressE>
    262a:	0e 94 ac 10 	call	0x2158	; 0x2158 <twi_writeTo>
    262e:	10 92 d5 03 	sts	0x03D5, r1	; 0x8003d5 <_ZN7TwoWire13txBufferIndexE>
    2632:	10 92 d4 03 	sts	0x03D4, r1	; 0x8003d4 <_ZN7TwoWire14txBufferLengthE>
    2636:	10 92 d3 03 	sts	0x03D3, r1	; 0x8003d3 <_ZN7TwoWire12transmittingE>
    263a:	0f 91       	pop	r16
    263c:	08 95       	ret

0000263e <_ZN7TwoWire11requestFromEhhmhh>:
    263e:	4f 92       	push	r4
    2640:	5f 92       	push	r5
    2642:	6f 92       	push	r6
    2644:	7f 92       	push	r7
    2646:	af 92       	push	r10
    2648:	bf 92       	push	r11
    264a:	cf 92       	push	r12
    264c:	ef 92       	push	r14
    264e:	ff 92       	push	r15
    2650:	0f 93       	push	r16
    2652:	1f 93       	push	r17
    2654:	cf 93       	push	r28
    2656:	df 93       	push	r29
    2658:	5c 01       	movw	r10, r24
    265a:	f6 2e       	mov	r15, r22
    265c:	d4 2f       	mov	r29, r20
    265e:	28 01       	movw	r4, r16
    2660:	39 01       	movw	r6, r18
    2662:	ee 20       	and	r14, r14
    2664:	21 f1       	breq	.+72     	; 0x26ae <_ZN7TwoWire11requestFromEhhmhh+0x70>
    2666:	0e 94 02 13 	call	0x2604	; 0x2604 <_ZN7TwoWire17beginTransmissionEh>
    266a:	ce 2d       	mov	r28, r14
    266c:	c4 30       	cpi	r28, 0x04	; 4
    266e:	08 f0       	brcs	.+2      	; 0x2672 <_ZN7TwoWire11requestFromEhhmhh+0x34>
    2670:	c3 e0       	ldi	r28, 0x03	; 3
    2672:	c1 50       	subi	r28, 0x01	; 1
    2674:	c0 f0       	brcs	.+48     	; 0x26a6 <_ZN7TwoWire11requestFromEhhmhh+0x68>
    2676:	28 e0       	ldi	r18, 0x08	; 8
    2678:	c2 9f       	mul	r28, r18
    267a:	c0 01       	movw	r24, r0
    267c:	11 24       	eor	r1, r1
    267e:	a3 01       	movw	r20, r6
    2680:	92 01       	movw	r18, r4
    2682:	04 c0       	rjmp	.+8      	; 0x268c <_ZN7TwoWire11requestFromEhhmhh+0x4e>
    2684:	56 95       	lsr	r21
    2686:	47 95       	ror	r20
    2688:	37 95       	ror	r19
    268a:	27 95       	ror	r18
    268c:	8a 95       	dec	r24
    268e:	d2 f7       	brpl	.-12     	; 0x2684 <_ZN7TwoWire11requestFromEhhmhh+0x46>
    2690:	ca 01       	movw	r24, r20
    2692:	b9 01       	movw	r22, r18
    2694:	d5 01       	movw	r26, r10
    2696:	ed 91       	ld	r30, X+
    2698:	fc 91       	ld	r31, X
    269a:	01 90       	ld	r0, Z+
    269c:	f0 81       	ld	r31, Z
    269e:	e0 2d       	mov	r30, r0
    26a0:	c5 01       	movw	r24, r10
    26a2:	09 95       	icall
    26a4:	e6 cf       	rjmp	.-52     	; 0x2672 <_ZN7TwoWire11requestFromEhhmhh+0x34>
    26a6:	60 e0       	ldi	r22, 0x00	; 0
    26a8:	c5 01       	movw	r24, r10
    26aa:	0e 94 0c 13 	call	0x2618	; 0x2618 <_ZN7TwoWire15endTransmissionEh>
    26ae:	4d 2f       	mov	r20, r29
    26b0:	d1 32       	cpi	r29, 0x21	; 33
    26b2:	08 f0       	brcs	.+2      	; 0x26b6 <_ZN7TwoWire11requestFromEhhmhh+0x78>
    26b4:	40 e2       	ldi	r20, 0x20	; 32
    26b6:	2c 2d       	mov	r18, r12
    26b8:	69 ef       	ldi	r22, 0xF9	; 249
    26ba:	73 e0       	ldi	r23, 0x03	; 3
    26bc:	8f 2d       	mov	r24, r15
    26be:	0e 94 64 10 	call	0x20c8	; 0x20c8 <twi_readFrom>
    26c2:	10 92 f8 03 	sts	0x03F8, r1	; 0x8003f8 <_ZN7TwoWire13rxBufferIndexE>
    26c6:	80 93 f7 03 	sts	0x03F7, r24	; 0x8003f7 <_ZN7TwoWire14rxBufferLengthE>
    26ca:	df 91       	pop	r29
    26cc:	cf 91       	pop	r28
    26ce:	1f 91       	pop	r17
    26d0:	0f 91       	pop	r16
    26d2:	ff 90       	pop	r15
    26d4:	ef 90       	pop	r14
    26d6:	cf 90       	pop	r12
    26d8:	bf 90       	pop	r11
    26da:	af 90       	pop	r10
    26dc:	7f 90       	pop	r7
    26de:	6f 90       	pop	r6
    26e0:	5f 90       	pop	r5
    26e2:	4f 90       	pop	r4
    26e4:	08 95       	ret

000026e6 <_ZN7TwoWire11requestFromEhhh>:
    26e6:	cf 92       	push	r12
    26e8:	ef 92       	push	r14
    26ea:	0f 93       	push	r16
    26ec:	1f 93       	push	r17
    26ee:	c2 2e       	mov	r12, r18
    26f0:	e1 2c       	mov	r14, r1
    26f2:	00 e0       	ldi	r16, 0x00	; 0
    26f4:	10 e0       	ldi	r17, 0x00	; 0
    26f6:	98 01       	movw	r18, r16
    26f8:	0e 94 1f 13 	call	0x263e	; 0x263e <_ZN7TwoWire11requestFromEhhmhh>
    26fc:	1f 91       	pop	r17
    26fe:	0f 91       	pop	r16
    2700:	ef 90       	pop	r14
    2702:	cf 90       	pop	r12
    2704:	08 95       	ret

00002706 <_ZN7TwoWire11requestFromEhh>:
    2706:	21 e0       	ldi	r18, 0x01	; 1
    2708:	0c 94 73 13 	jmp	0x26e6	; 0x26e6 <_ZN7TwoWire11requestFromEhhh>

0000270c <_ZN7TwoWire15endTransmissionEv>:
    270c:	61 e0       	ldi	r22, 0x01	; 1
    270e:	0c 94 0c 13 	jmp	0x2618	; 0x2618 <_ZN7TwoWire15endTransmissionEh>

00002712 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    2712:	87 ec       	ldi	r24, 0xC7	; 199
    2714:	93 e0       	ldi	r25, 0x03	; 3
    2716:	0c 94 f2 12 	jmp	0x25e4	; 0x25e4 <_ZN7TwoWireC1Ev>

0000271a <_GLOBAL__sub_I_buffersize>:
// default I2C address is 0x68
// specific I2C addresses may be passed as a parameter here
// AD0 low = 0x68 (default for InvenSense evaluation board)
// AD0 high = 0x69
//MPU6050 accelgyro;
MPU6050 accelgyro(0x68); // <-- use for AD0 high
    271a:	68 e6       	ldi	r22, 0x68	; 104
    271c:	89 e1       	ldi	r24, 0x19	; 25
    271e:	94 e0       	ldi	r25, 0x04	; 4
    2720:	0c 94 35 0f 	jmp	0x1e6a	; 0x1e6a <_ZN7MPU6050C1Eh>

00002724 <_Z8Enc_Initv>:

#include "ENC_lib.h"

void Enc_Init()
{
    pinMode(A1,INPUT_PULLUP);
    2724:	62 e0       	ldi	r22, 0x02	; 2
    2726:	8f e0       	ldi	r24, 0x0F	; 15
    2728:	0e 94 df 1c 	call	0x39be	; 0x39be <pinMode>
    pinMode(A0,INPUT_PULLUP);
    272c:	62 e0       	ldi	r22, 0x02	; 2
    272e:	8e e0       	ldi	r24, 0x0E	; 14
    2730:	0e 94 df 1c 	call	0x39be	; 0x39be <pinMode>
    pinMode(13,INPUT_PULLUP);//pinMode(13,INPUT_PULLUP); //led
    2734:	62 e0       	ldi	r22, 0x02	; 2
    2736:	8d e0       	ldi	r24, 0x0D	; 13
    2738:	0e 94 df 1c 	call	0x39be	; 0x39be <pinMode>
    pinMode(12,INPUT_PULLUP);
    273c:	62 e0       	ldi	r22, 0x02	; 2
    273e:	8c e0       	ldi	r24, 0x0C	; 12
    2740:	0e 94 df 1c 	call	0x39be	; 0x39be <pinMode>

    PCICR = (1 << PCIE0) | // Enable pin change interrupt 0 {PCINT[14:8]}
            (1 << PCIE1) ; // Enable pin change interrupt 1 {PCINT[7:0]}
    2744:	83 e0       	ldi	r24, 0x03	; 3
    2746:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>


    PCMSK0 = (1 << PCINT4); // Pin change enable mask 5
    274a:	ab e6       	ldi	r26, 0x6B	; 107
    274c:	b0 e0       	ldi	r27, 0x00	; 0
    274e:	80 e1       	ldi	r24, 0x10	; 16
    2750:	8c 93       	st	X, r24
    PCMSK1 = (1 << PCINT9); // Pin change enable mask 9
    2752:	ec e6       	ldi	r30, 0x6C	; 108
    2754:	f0 e0       	ldi	r31, 0x00	; 0
    2756:	82 e0       	ldi	r24, 0x02	; 2
    2758:	80 83       	st	Z, r24
#ifdef ENC__USE_DOUBLE_INT
    PCMSK0 |= (1 << PCINT5); // Pin change enable mask 5
    275a:	8c 91       	ld	r24, X
    275c:	80 62       	ori	r24, 0x20	; 32
    275e:	8c 93       	st	X, r24
    PCMSK1 |= (1 << PCINT8); // Pin change enable mask 9
    2760:	80 81       	ld	r24, Z
    2762:	81 60       	ori	r24, 0x01	; 1
    2764:	80 83       	st	Z, r24
    2766:	08 95       	ret

00002768 <__vector_3>:
uint8_t Mot0_tmpState;



ISR(PCINT0_vect)
{
    2768:	1f 92       	push	r1
    276a:	0f 92       	push	r0
    276c:	0f b6       	in	r0, 0x3f	; 63
    276e:	0f 92       	push	r0
    2770:	11 24       	eor	r1, r1
    2772:	2f 93       	push	r18
    2774:	8f 93       	push	r24
    2776:	9f 93       	push	r25
    2778:	af 93       	push	r26
    277a:	bf 93       	push	r27
    277c:	ef 93       	push	r30
    277e:	ff 93       	push	r31
    Mot1_p1Val = bitRead(PINB,5);
    2780:	23 b1       	in	r18, 0x03	; 3
    2782:	25 fb       	bst	r18, 5
    2784:	22 27       	eor	r18, r18
    2786:	20 f9       	bld	r18, 0
    2788:	20 93 2e 04 	sts	0x042E, r18	; 0x80042e <Mot1_p1Val>
    Mot1_p2Val = bitRead(PINB,4);
    278c:	83 b1       	in	r24, 0x03	; 3
    278e:	82 95       	swap	r24
    2790:	81 70       	andi	r24, 0x01	; 1
    2792:	80 93 2d 04 	sts	0x042D, r24	; 0x80042d <Mot1_p2Val>
    Mot1_tmpState = Mot1_state & 3;
    2796:	90 91 2f 04 	lds	r25, 0x042F	; 0x80042f <Mot1_state>
    279a:	93 70       	andi	r25, 0x03	; 3

    if (Mot1_p1Val) Mot1_tmpState |= 8;
    279c:	21 11       	cpse	r18, r1
    279e:	98 60       	ori	r25, 0x08	; 8
    27a0:	90 93 2c 04 	sts	0x042C, r25	; 0x80042c <Mot1_tmpState>
    if (Mot1_p2Val) Mot1_tmpState |= 4;
    27a4:	88 23       	and	r24, r24
    27a6:	29 f0       	breq	.+10     	; 0x27b2 <__vector_3+0x4a>
    27a8:	80 91 2c 04 	lds	r24, 0x042C	; 0x80042c <Mot1_tmpState>
    27ac:	84 60       	ori	r24, 0x04	; 4
    27ae:	80 93 2c 04 	sts	0x042C, r24	; 0x80042c <Mot1_tmpState>

    Mot1_state = (Mot1_tmpState >> 2);
    27b2:	e0 91 2c 04 	lds	r30, 0x042C	; 0x80042c <Mot1_tmpState>
    27b6:	8e 2f       	mov	r24, r30
    27b8:	90 e0       	ldi	r25, 0x00	; 0
    27ba:	95 95       	asr	r25
    27bc:	87 95       	ror	r24
    27be:	95 95       	asr	r25
    27c0:	87 95       	ror	r24
    27c2:	80 93 2f 04 	sts	0x042F, r24	; 0x80042f <Mot1_state>
    switch (Mot1_tmpState)
    27c6:	8e 2f       	mov	r24, r30
    27c8:	90 e0       	ldi	r25, 0x00	; 0
    27ca:	fc 01       	movw	r30, r24
    27cc:	31 97       	sbiw	r30, 0x01	; 1
    27ce:	ee 30       	cpi	r30, 0x0E	; 14
    27d0:	f1 05       	cpc	r31, r1
    27d2:	d8 f5       	brcc	.+118    	; 0x284a <__vector_3+0xe2>
    27d4:	ec 5c       	subi	r30, 0xCC	; 204
    27d6:	ff 4f       	sbci	r31, 0xFF	; 255
    27d8:	0c 94 b2 1d 	jmp	0x3b64	; 0x3b64 <__tablejump2__>
        {
        case 1:
        case 7:
        case 8:
        case 14:
            Mot1_Enc++;
    27dc:	80 91 30 04 	lds	r24, 0x0430	; 0x800430 <Mot1_Enc>
    27e0:	90 91 31 04 	lds	r25, 0x0431	; 0x800431 <Mot1_Enc+0x1>
    27e4:	a0 91 32 04 	lds	r26, 0x0432	; 0x800432 <Mot1_Enc+0x2>
    27e8:	b0 91 33 04 	lds	r27, 0x0433	; 0x800433 <Mot1_Enc+0x3>
    27ec:	01 96       	adiw	r24, 0x01	; 1
    27ee:	a1 1d       	adc	r26, r1
    27f0:	b1 1d       	adc	r27, r1
    27f2:	23 c0       	rjmp	.+70     	; 0x283a <__vector_3+0xd2>
            return;
        case 2:
        case 4:
        case 11:
        case 13:
            Mot1_Enc--;
    27f4:	80 91 30 04 	lds	r24, 0x0430	; 0x800430 <Mot1_Enc>
    27f8:	90 91 31 04 	lds	r25, 0x0431	; 0x800431 <Mot1_Enc+0x1>
    27fc:	a0 91 32 04 	lds	r26, 0x0432	; 0x800432 <Mot1_Enc+0x2>
    2800:	b0 91 33 04 	lds	r27, 0x0433	; 0x800433 <Mot1_Enc+0x3>
    2804:	01 97       	sbiw	r24, 0x01	; 1
    2806:	a1 09       	sbc	r26, r1
    2808:	b1 09       	sbc	r27, r1
    280a:	17 c0       	rjmp	.+46     	; 0x283a <__vector_3+0xd2>
            return;
        case 3:
        case 12:
            Mot1_Enc += 2;
    280c:	80 91 30 04 	lds	r24, 0x0430	; 0x800430 <Mot1_Enc>
    2810:	90 91 31 04 	lds	r25, 0x0431	; 0x800431 <Mot1_Enc+0x1>
    2814:	a0 91 32 04 	lds	r26, 0x0432	; 0x800432 <Mot1_Enc+0x2>
    2818:	b0 91 33 04 	lds	r27, 0x0433	; 0x800433 <Mot1_Enc+0x3>
    281c:	02 96       	adiw	r24, 0x02	; 2
    281e:	a1 1d       	adc	r26, r1
    2820:	b1 1d       	adc	r27, r1
    2822:	0b c0       	rjmp	.+22     	; 0x283a <__vector_3+0xd2>
            return;
        case 6:
        case 9:
            Mot1_Enc -= 2;
    2824:	80 91 30 04 	lds	r24, 0x0430	; 0x800430 <Mot1_Enc>
    2828:	90 91 31 04 	lds	r25, 0x0431	; 0x800431 <Mot1_Enc+0x1>
    282c:	a0 91 32 04 	lds	r26, 0x0432	; 0x800432 <Mot1_Enc+0x2>
    2830:	b0 91 33 04 	lds	r27, 0x0433	; 0x800433 <Mot1_Enc+0x3>
    2834:	02 97       	sbiw	r24, 0x02	; 2
    2836:	a1 09       	sbc	r26, r1
    2838:	b1 09       	sbc	r27, r1
    283a:	80 93 30 04 	sts	0x0430, r24	; 0x800430 <Mot1_Enc>
    283e:	90 93 31 04 	sts	0x0431, r25	; 0x800431 <Mot1_Enc+0x1>
    2842:	a0 93 32 04 	sts	0x0432, r26	; 0x800432 <Mot1_Enc+0x2>
    2846:	b0 93 33 04 	sts	0x0433, r27	; 0x800433 <Mot1_Enc+0x3>
            return;
        }
}
    284a:	ff 91       	pop	r31
    284c:	ef 91       	pop	r30
    284e:	bf 91       	pop	r27
    2850:	af 91       	pop	r26
    2852:	9f 91       	pop	r25
    2854:	8f 91       	pop	r24
    2856:	2f 91       	pop	r18
    2858:	0f 90       	pop	r0
    285a:	0f be       	out	0x3f, r0	; 63
    285c:	0f 90       	pop	r0
    285e:	1f 90       	pop	r1
    2860:	18 95       	reti

00002862 <__vector_4>:

ISR(PCINT1_vect)
{
    2862:	1f 92       	push	r1
    2864:	0f 92       	push	r0
    2866:	0f b6       	in	r0, 0x3f	; 63
    2868:	0f 92       	push	r0
    286a:	11 24       	eor	r1, r1
    286c:	2f 93       	push	r18
    286e:	8f 93       	push	r24
    2870:	9f 93       	push	r25
    2872:	af 93       	push	r26
    2874:	bf 93       	push	r27
    2876:	ef 93       	push	r30
    2878:	ff 93       	push	r31
    Mot0_p1Val = bitRead(PINC,1);
    287a:	96 b1       	in	r25, 0x06	; 6
    287c:	96 95       	lsr	r25
    287e:	91 70       	andi	r25, 0x01	; 1
    2880:	90 93 2a 04 	sts	0x042A, r25	; 0x80042a <Mot0_p1Val>
    Mot0_p2Val = bitRead(PINC,0);
    2884:	26 b1       	in	r18, 0x06	; 6
    2886:	21 70       	andi	r18, 0x01	; 1
    2888:	20 93 29 04 	sts	0x0429, r18	; 0x800429 <Mot0_p2Val>
    Mot0_tmpState = Mot0_state & 3;
    288c:	80 91 2b 04 	lds	r24, 0x042B	; 0x80042b <Mot0_state>
    2890:	83 70       	andi	r24, 0x03	; 3

    if (Mot0_p1Val) Mot0_tmpState |= 4;
    2892:	91 11       	cpse	r25, r1
    2894:	84 60       	ori	r24, 0x04	; 4
    2896:	80 93 28 04 	sts	0x0428, r24	; 0x800428 <Mot0_tmpState>
    if (Mot0_p2Val) Mot0_tmpState |= 8;
    289a:	22 23       	and	r18, r18
    289c:	29 f0       	breq	.+10     	; 0x28a8 <__vector_4+0x46>
    289e:	80 91 28 04 	lds	r24, 0x0428	; 0x800428 <Mot0_tmpState>
    28a2:	88 60       	ori	r24, 0x08	; 8
    28a4:	80 93 28 04 	sts	0x0428, r24	; 0x800428 <Mot0_tmpState>

    Mot0_state = (Mot0_tmpState >> 2);
    28a8:	e0 91 28 04 	lds	r30, 0x0428	; 0x800428 <Mot0_tmpState>
    28ac:	8e 2f       	mov	r24, r30
    28ae:	90 e0       	ldi	r25, 0x00	; 0
    28b0:	95 95       	asr	r25
    28b2:	87 95       	ror	r24
    28b4:	95 95       	asr	r25
    28b6:	87 95       	ror	r24
    28b8:	80 93 2b 04 	sts	0x042B, r24	; 0x80042b <Mot0_state>
    switch (Mot0_tmpState)
    28bc:	8e 2f       	mov	r24, r30
    28be:	90 e0       	ldi	r25, 0x00	; 0
    28c0:	fc 01       	movw	r30, r24
    28c2:	31 97       	sbiw	r30, 0x01	; 1
    28c4:	ee 30       	cpi	r30, 0x0E	; 14
    28c6:	f1 05       	cpc	r31, r1
    28c8:	d8 f5       	brcc	.+118    	; 0x2940 <__vector_4+0xde>
    28ca:	ee 5b       	subi	r30, 0xBE	; 190
    28cc:	ff 4f       	sbci	r31, 0xFF	; 255
    28ce:	0c 94 b2 1d 	jmp	0x3b64	; 0x3b64 <__tablejump2__>
        {
        case 1:
        case 7:
        case 8:
        case 14:
            Mot0_Enc++;
    28d2:	80 91 34 04 	lds	r24, 0x0434	; 0x800434 <Mot0_Enc>
    28d6:	90 91 35 04 	lds	r25, 0x0435	; 0x800435 <Mot0_Enc+0x1>
    28da:	a0 91 36 04 	lds	r26, 0x0436	; 0x800436 <Mot0_Enc+0x2>
    28de:	b0 91 37 04 	lds	r27, 0x0437	; 0x800437 <Mot0_Enc+0x3>
    28e2:	01 96       	adiw	r24, 0x01	; 1
    28e4:	a1 1d       	adc	r26, r1
    28e6:	b1 1d       	adc	r27, r1
    28e8:	23 c0       	rjmp	.+70     	; 0x2930 <__vector_4+0xce>
            return;
        case 2:
        case 4:
        case 11:
        case 13:
            Mot0_Enc--;
    28ea:	80 91 34 04 	lds	r24, 0x0434	; 0x800434 <Mot0_Enc>
    28ee:	90 91 35 04 	lds	r25, 0x0435	; 0x800435 <Mot0_Enc+0x1>
    28f2:	a0 91 36 04 	lds	r26, 0x0436	; 0x800436 <Mot0_Enc+0x2>
    28f6:	b0 91 37 04 	lds	r27, 0x0437	; 0x800437 <Mot0_Enc+0x3>
    28fa:	01 97       	sbiw	r24, 0x01	; 1
    28fc:	a1 09       	sbc	r26, r1
    28fe:	b1 09       	sbc	r27, r1
    2900:	17 c0       	rjmp	.+46     	; 0x2930 <__vector_4+0xce>
            return;
        case 3:
        case 12:
            Mot0_Enc += 2;
    2902:	80 91 34 04 	lds	r24, 0x0434	; 0x800434 <Mot0_Enc>
    2906:	90 91 35 04 	lds	r25, 0x0435	; 0x800435 <Mot0_Enc+0x1>
    290a:	a0 91 36 04 	lds	r26, 0x0436	; 0x800436 <Mot0_Enc+0x2>
    290e:	b0 91 37 04 	lds	r27, 0x0437	; 0x800437 <Mot0_Enc+0x3>
    2912:	02 96       	adiw	r24, 0x02	; 2
    2914:	a1 1d       	adc	r26, r1
    2916:	b1 1d       	adc	r27, r1
    2918:	0b c0       	rjmp	.+22     	; 0x2930 <__vector_4+0xce>
            return;
        case 6:
        case 9:
            Mot0_Enc -= 2;
    291a:	80 91 34 04 	lds	r24, 0x0434	; 0x800434 <Mot0_Enc>
    291e:	90 91 35 04 	lds	r25, 0x0435	; 0x800435 <Mot0_Enc+0x1>
    2922:	a0 91 36 04 	lds	r26, 0x0436	; 0x800436 <Mot0_Enc+0x2>
    2926:	b0 91 37 04 	lds	r27, 0x0437	; 0x800437 <Mot0_Enc+0x3>
    292a:	02 97       	sbiw	r24, 0x02	; 2
    292c:	a1 09       	sbc	r26, r1
    292e:	b1 09       	sbc	r27, r1
    2930:	80 93 34 04 	sts	0x0434, r24	; 0x800434 <Mot0_Enc>
    2934:	90 93 35 04 	sts	0x0435, r25	; 0x800435 <Mot0_Enc+0x1>
    2938:	a0 93 36 04 	sts	0x0436, r26	; 0x800436 <Mot0_Enc+0x2>
    293c:	b0 93 37 04 	sts	0x0437, r27	; 0x800437 <Mot0_Enc+0x3>
            return;
        }
}
    2940:	ff 91       	pop	r31
    2942:	ef 91       	pop	r30
    2944:	bf 91       	pop	r27
    2946:	af 91       	pop	r26
    2948:	9f 91       	pop	r25
    294a:	8f 91       	pop	r24
    294c:	2f 91       	pop	r18
    294e:	0f 90       	pop	r0
    2950:	0f be       	out	0x3f, r0	; 63
    2952:	0f 90       	pop	r0
    2954:	1f 90       	pop	r1
    2956:	18 95       	reti

00002958 <_Z15Motor0_SetSpeedhh.part.0>:
    PORTB &= ~(1<<PORTB3);
}


#ifdef MOT__USE_SLOW_DECAY
void Motor0_SetSpeed(uint8_t dir,uint8_t speed)
    2958:	cf 93       	push	r28
    295a:	c8 2f       	mov	r28, r24
            PWM_0_disable_output_ch0();
            PORTD |= (1<<PORTD6);
        }
    else if (dir==REV)
        {
            PWM_0_enable_output_ch0();
    295c:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <PWM_0_enable_output_ch0>
            PWM_0_load_duty_cycle_ch0(255-speed);
    2960:	8c 2f       	mov	r24, r28
    2962:	80 95       	com	r24
    2964:	0e 94 57 15 	call	0x2aae	; 0x2aae <PWM_0_load_duty_cycle_ch0>

            PWM_0_disable_output_ch1();
    2968:	0e 94 53 15 	call	0x2aa6	; 0x2aa6 <PWM_0_disable_output_ch1>
            PORTD |= (1<<PORTD5);
    296c:	5d 9a       	sbi	0x0b, 5	; 11
        }
}
    296e:	cf 91       	pop	r28
    2970:	08 95       	ret

00002972 <_Z15Motor1_SetSpeedhh.part.1>:
        }
}
#endif

#ifdef MOT__USE_SLOW_DECAY
void Motor1_SetSpeed(uint8_t dir,uint8_t speed)
    2972:	cf 93       	push	r28
    2974:	c8 2f       	mov	r28, r24
            PWM_1_disable_output_ch0();
            PORTB |= (1<<PORTB3);
        }
    else if (dir==REV)
        {
            PWM_1_enable_output_ch0();
    2976:	0e 94 6e 15 	call	0x2adc	; 0x2adc <PWM_1_enable_output_ch0>
            PWM_1_load_duty_cycle_ch0(255-speed);
    297a:	8c 2f       	mov	r24, r28
    297c:	80 95       	com	r24
    297e:	0e 94 86 15 	call	0x2b0c	; 0x2b0c <PWM_1_load_duty_cycle_ch0>

            PWM_1_disable_output_ch1();
    2982:	0e 94 80 15 	call	0x2b00	; 0x2b00 <PWM_1_disable_output_ch1>
            PORTD |= (1<<PORTD3);
    2986:	5b 9a       	sbi	0x0b, 3	; 11
        }
}
    2988:	cf 91       	pop	r28
    298a:	08 95       	ret

0000298c <_Z11Motor0_Stopv>:
    Motor1_Stop();
}

void Motor0_Stop()
{
    PWM_0_disable_output_ch1();
    298c:	0e 94 53 15 	call	0x2aa6	; 0x2aa6 <PWM_0_disable_output_ch1>
    PWM_0_disable_output_ch0();
    2990:	0e 94 4b 15 	call	0x2a96	; 0x2a96 <PWM_0_disable_output_ch0>
    PORTD &= ~(1<<PORTD5);
    2994:	5d 98       	cbi	0x0b, 5	; 11
    PORTD &= ~(1<<PORTD6);
    2996:	5e 98       	cbi	0x0b, 6	; 11
    2998:	08 95       	ret

0000299a <_Z9Mot0_Initv>:
#include "pwm_basic.h"


void Mot0_Init(void)
{
    PWM_0_init();
    299a:	0e 94 37 15 	call	0x2a6e	; 0x2a6e <PWM_0_init>

    pinMode(PD5Pin,OUTPUT);
    299e:	61 e0       	ldi	r22, 0x01	; 1
    29a0:	85 e0       	ldi	r24, 0x05	; 5
    29a2:	0e 94 df 1c 	call	0x39be	; 0x39be <pinMode>
    pinMode(PD6Pin,OUTPUT);
    29a6:	61 e0       	ldi	r22, 0x01	; 1
    29a8:	86 e0       	ldi	r24, 0x06	; 6
    29aa:	0e 94 df 1c 	call	0x39be	; 0x39be <pinMode>
    Motor0_Stop();
    29ae:	0c 94 c6 14 	jmp	0x298c	; 0x298c <_Z11Motor0_Stopv>

000029b2 <_Z11Motor1_Stopv>:
    PORTD &= ~(1<<PORTD6);
}

void Motor1_Stop()
{
    PWM_1_disable_output_ch1();
    29b2:	0e 94 80 15 	call	0x2b00	; 0x2b00 <PWM_1_disable_output_ch1>
    PWM_1_disable_output_ch0();
    29b6:	0e 94 74 15 	call	0x2ae8	; 0x2ae8 <PWM_1_disable_output_ch0>
    PORTD &= ~(1<<PORTD3);
    29ba:	5b 98       	cbi	0x0b, 3	; 11
    PORTB &= ~(1<<PORTB3);
    29bc:	2b 98       	cbi	0x05, 3	; 5
    29be:	08 95       	ret

000029c0 <_Z9Mot1_Initv>:
    Motor0_Stop();
}

void Mot1_Init(void)
{
    PWM_1_init();
    29c0:	0e 94 5b 15 	call	0x2ab6	; 0x2ab6 <PWM_1_init>

    pinMode(PB3Pin,OUTPUT);
    29c4:	61 e0       	ldi	r22, 0x01	; 1
    29c6:	8b e0       	ldi	r24, 0x0B	; 11
    29c8:	0e 94 df 1c 	call	0x39be	; 0x39be <pinMode>
    pinMode(PD3Pin,OUTPUT);
    29cc:	61 e0       	ldi	r22, 0x01	; 1
    29ce:	83 e0       	ldi	r24, 0x03	; 3
    29d0:	0e 94 df 1c 	call	0x39be	; 0x39be <pinMode>
    Motor1_Stop();
    29d4:	0c 94 d9 14 	jmp	0x29b2	; 0x29b2 <_Z11Motor1_Stopv>

000029d8 <_Z15Motor0_SetSpeedhh>:
}


#ifdef MOT__USE_SLOW_DECAY
void Motor0_SetSpeed(uint8_t dir,uint8_t speed)
{
    29d8:	cf 93       	push	r28
    if (dir==FWD)
    29da:	81 11       	cpse	r24, r1
    29dc:	0b c0       	rjmp	.+22     	; 0x29f4 <_Z15Motor0_SetSpeedhh+0x1c>
    29de:	c6 2f       	mov	r28, r22
        {
            PWM_0_enable_output_ch1();
    29e0:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <PWM_0_enable_output_ch1>
            PWM_0_load_duty_cycle_ch1(255-speed);
    29e4:	8c 2f       	mov	r24, r28
    29e6:	80 95       	com	r24
    29e8:	0e 94 59 15 	call	0x2ab2	; 0x2ab2 <PWM_0_load_duty_cycle_ch1>

            PWM_0_disable_output_ch0();
    29ec:	0e 94 4b 15 	call	0x2a96	; 0x2a96 <PWM_0_disable_output_ch0>
            PORTD |= (1<<PORTD6);
    29f0:	5e 9a       	sbi	0x0b, 6	; 11
    29f2:	06 c0       	rjmp	.+12     	; 0x2a00 <_Z15Motor0_SetSpeedhh+0x28>
        }
    else if (dir==REV)
    29f4:	81 30       	cpi	r24, 0x01	; 1
    29f6:	21 f4       	brne	.+8      	; 0x2a00 <_Z15Motor0_SetSpeedhh+0x28>
    29f8:	86 2f       	mov	r24, r22
            PWM_0_load_duty_cycle_ch0(255-speed);

            PWM_0_disable_output_ch1();
            PORTD |= (1<<PORTD5);
        }
}
    29fa:	cf 91       	pop	r28
    29fc:	0c 94 ac 14 	jmp	0x2958	; 0x2958 <_Z15Motor0_SetSpeedhh.part.0>
    2a00:	cf 91       	pop	r28
    2a02:	08 95       	ret

00002a04 <_Z15Motor1_SetSpeedhh>:
}
#endif

#ifdef MOT__USE_SLOW_DECAY
void Motor1_SetSpeed(uint8_t dir,uint8_t speed)
{
    2a04:	cf 93       	push	r28
    if (dir==FWD)
    2a06:	81 11       	cpse	r24, r1
    2a08:	0b c0       	rjmp	.+22     	; 0x2a20 <_Z15Motor1_SetSpeedhh+0x1c>
    2a0a:	c6 2f       	mov	r28, r22
        {
            PWM_1_enable_output_ch1();
    2a0c:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <PWM_1_enable_output_ch1>
            PWM_1_load_duty_cycle_ch1(255-speed);
    2a10:	8c 2f       	mov	r24, r28
    2a12:	80 95       	com	r24
    2a14:	0e 94 89 15 	call	0x2b12	; 0x2b12 <PWM_1_load_duty_cycle_ch1>

            PWM_1_disable_output_ch0();
    2a18:	0e 94 74 15 	call	0x2ae8	; 0x2ae8 <PWM_1_disable_output_ch0>
            PORTB |= (1<<PORTB3);
    2a1c:	2b 9a       	sbi	0x05, 3	; 5
    2a1e:	06 c0       	rjmp	.+12     	; 0x2a2c <_Z15Motor1_SetSpeedhh+0x28>
        }
    else if (dir==REV)
    2a20:	81 30       	cpi	r24, 0x01	; 1
    2a22:	21 f4       	brne	.+8      	; 0x2a2c <_Z15Motor1_SetSpeedhh+0x28>
    2a24:	86 2f       	mov	r24, r22
            PWM_1_load_duty_cycle_ch0(255-speed);

            PWM_1_disable_output_ch1();
            PORTD |= (1<<PORTD3);
        }
}
    2a26:	cf 91       	pop	r28
    2a28:	0c 94 b9 14 	jmp	0x2972	; 0x2972 <_Z15Motor1_SetSpeedhh.part.1>
    2a2c:	cf 91       	pop	r28
    2a2e:	08 95       	ret

00002a30 <_Z15Motors_SetSpeedii>:
        }
}
#endif

void Motors_SetSpeed(int leftMotorSpeed, int rightMotorSpeed)
{
    2a30:	cf 93       	push	r28
    2a32:	df 93       	push	r29
    2a34:	eb 01       	movw	r28, r22

    if(leftMotorSpeed >= 0)
    2a36:	97 fd       	sbrc	r25, 7
    2a38:	03 c0       	rjmp	.+6      	; 0x2a40 <_Z15Motors_SetSpeedii+0x10>
    2a3a:	0e 94 ac 14 	call	0x2958	; 0x2958 <_Z15Motor0_SetSpeedhh.part.0>
    2a3e:	07 c0       	rjmp	.+14     	; 0x2a4e <_Z15Motors_SetSpeedii+0x1e>
        {
            Motor0_SetSpeed(REV,leftMotorSpeed);
        }
    else
        {
            Motor0_SetSpeed(FWD, abs(leftMotorSpeed));
    2a40:	66 27       	eor	r22, r22
    2a42:	77 27       	eor	r23, r23
    2a44:	68 1b       	sub	r22, r24
    2a46:	79 0b       	sbc	r23, r25
    2a48:	80 e0       	ldi	r24, 0x00	; 0
    2a4a:	0e 94 ec 14 	call	0x29d8	; 0x29d8 <_Z15Motor0_SetSpeedhh>
        }

    if(rightMotorSpeed >= 0)
    2a4e:	d7 fd       	sbrc	r29, 7
    2a50:	05 c0       	rjmp	.+10     	; 0x2a5c <_Z15Motors_SetSpeedii+0x2c>
    2a52:	8c 2f       	mov	r24, r28
        }
    else
        {
            Motor1_SetSpeed(FWD,abs(rightMotorSpeed));
        }
}
    2a54:	df 91       	pop	r29
    2a56:	cf 91       	pop	r28
    2a58:	0c 94 b9 14 	jmp	0x2972	; 0x2972 <_Z15Motor1_SetSpeedhh.part.1>
        {
            Motor1_SetSpeed(REV,rightMotorSpeed);
        }
    else
        {
            Motor1_SetSpeed(FWD,abs(rightMotorSpeed));
    2a5c:	66 27       	eor	r22, r22
    2a5e:	77 27       	eor	r23, r23
    2a60:	6c 1b       	sub	r22, r28
    2a62:	7d 0b       	sbc	r23, r29
    2a64:	80 e0       	ldi	r24, 0x00	; 0
        }
}
    2a66:	df 91       	pop	r29
    2a68:	cf 91       	pop	r28
        {
            Motor1_SetSpeed(REV,rightMotorSpeed);
        }
    else
        {
            Motor1_SetSpeed(FWD,abs(rightMotorSpeed));
    2a6a:	0c 94 02 15 	jmp	0x2a04	; 0x2a04 <_Z15Motor1_SetSpeedhh>

00002a6e <PWM_0_init>:
    TCCR2A &= ~((1 << COM2B1) | (1 << COM2B0));
}

inline void PWM_1_load_counter(PWM_1_register_t counter_value)
{
    TCNT2 = counter_value;
    2a6e:	e4 e6       	ldi	r30, 0x64	; 100
    2a70:	f0 e0       	ldi	r31, 0x00	; 0
    2a72:	80 81       	ld	r24, Z
    2a74:	8f 7d       	andi	r24, 0xDF	; 223
    2a76:	80 83       	st	Z, r24
    2a78:	83 ea       	ldi	r24, 0xA3	; 163
    2a7a:	84 bd       	out	0x24, r24	; 36
    2a7c:	82 e0       	ldi	r24, 0x02	; 2
    2a7e:	85 bd       	out	0x25, r24	; 37
    2a80:	81 e0       	ldi	r24, 0x01	; 1
    2a82:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
    2a86:	17 bc       	out	0x27, r1	; 39
    2a88:	18 bc       	out	0x28, r1	; 40
    2a8a:	80 e0       	ldi	r24, 0x00	; 0
    2a8c:	08 95       	ret

00002a8e <PWM_0_enable_output_ch0>:
    2a8e:	84 b5       	in	r24, 0x24	; 36
    2a90:	80 68       	ori	r24, 0x80	; 128
    2a92:	84 bd       	out	0x24, r24	; 36
    2a94:	08 95       	ret

00002a96 <PWM_0_disable_output_ch0>:
    2a96:	84 b5       	in	r24, 0x24	; 36
    2a98:	8f 73       	andi	r24, 0x3F	; 63
    2a9a:	84 bd       	out	0x24, r24	; 36
    2a9c:	08 95       	ret

00002a9e <PWM_0_enable_output_ch1>:
    2a9e:	84 b5       	in	r24, 0x24	; 36
    2aa0:	80 62       	ori	r24, 0x20	; 32
    2aa2:	84 bd       	out	0x24, r24	; 36
    2aa4:	08 95       	ret

00002aa6 <PWM_0_disable_output_ch1>:
    2aa6:	84 b5       	in	r24, 0x24	; 36
    2aa8:	8f 7c       	andi	r24, 0xCF	; 207
    2aaa:	84 bd       	out	0x24, r24	; 36
    2aac:	08 95       	ret

00002aae <PWM_0_load_duty_cycle_ch0>:
    2aae:	87 bd       	out	0x27, r24	; 39
    2ab0:	08 95       	ret

00002ab2 <PWM_0_load_duty_cycle_ch1>:
    2ab2:	88 bd       	out	0x28, r24	; 40
    2ab4:	08 95       	ret

00002ab6 <PWM_1_init>:
    2ab6:	e4 e6       	ldi	r30, 0x64	; 100
    2ab8:	f0 e0       	ldi	r31, 0x00	; 0
    2aba:	80 81       	ld	r24, Z
    2abc:	8f 7b       	andi	r24, 0xBF	; 191
    2abe:	80 83       	st	Z, r24
    2ac0:	83 ea       	ldi	r24, 0xA3	; 163
    2ac2:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    2ac6:	82 e0       	ldi	r24, 0x02	; 2
    2ac8:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
    2acc:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
    2ad0:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
    2ad4:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
    2ad8:	80 e0       	ldi	r24, 0x00	; 0
    2ada:	08 95       	ret

00002adc <PWM_1_enable_output_ch0>:
    2adc:	e0 eb       	ldi	r30, 0xB0	; 176
    2ade:	f0 e0       	ldi	r31, 0x00	; 0
    2ae0:	80 81       	ld	r24, Z
    2ae2:	80 68       	ori	r24, 0x80	; 128
    2ae4:	80 83       	st	Z, r24
    2ae6:	08 95       	ret

00002ae8 <PWM_1_disable_output_ch0>:
    2ae8:	e0 eb       	ldi	r30, 0xB0	; 176
    2aea:	f0 e0       	ldi	r31, 0x00	; 0
    2aec:	80 81       	ld	r24, Z
    2aee:	8f 73       	andi	r24, 0x3F	; 63
    2af0:	80 83       	st	Z, r24
    2af2:	08 95       	ret

00002af4 <PWM_1_enable_output_ch1>:
    2af4:	e0 eb       	ldi	r30, 0xB0	; 176
    2af6:	f0 e0       	ldi	r31, 0x00	; 0
    2af8:	80 81       	ld	r24, Z
    2afa:	80 62       	ori	r24, 0x20	; 32
    2afc:	80 83       	st	Z, r24
    2afe:	08 95       	ret

00002b00 <PWM_1_disable_output_ch1>:
    2b00:	e0 eb       	ldi	r30, 0xB0	; 176
    2b02:	f0 e0       	ldi	r31, 0x00	; 0
    2b04:	80 81       	ld	r24, Z
    2b06:	8f 7c       	andi	r24, 0xCF	; 207
    2b08:	80 83       	st	Z, r24
    2b0a:	08 95       	ret

00002b0c <PWM_1_load_duty_cycle_ch0>:
}

inline void PWM_1_load_duty_cycle_ch0(PWM_1_register_t duty_value)
{
    OCR2A = duty_value;
    2b0c:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
    2b10:	08 95       	ret

00002b12 <PWM_1_load_duty_cycle_ch1>:
}

inline void PWM_1_load_duty_cycle_ch1(PWM_1_register_t duty_value)
{
    OCR2B = duty_value;
    2b12:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
    2b16:	08 95       	ret

00002b18 <__subsf3>:
    2b18:	50 58       	subi	r21, 0x80	; 128

00002b1a <__addsf3>:
    2b1a:	bb 27       	eor	r27, r27
    2b1c:	aa 27       	eor	r26, r26
    2b1e:	0e 94 a4 15 	call	0x2b48	; 0x2b48 <__addsf3x>
    2b22:	0c 94 b7 17 	jmp	0x2f6e	; 0x2f6e <__fp_round>
    2b26:	0e 94 a9 17 	call	0x2f52	; 0x2f52 <__fp_pscA>
    2b2a:	38 f0       	brcs	.+14     	; 0x2b3a <__addsf3+0x20>
    2b2c:	0e 94 b0 17 	call	0x2f60	; 0x2f60 <__fp_pscB>
    2b30:	20 f0       	brcs	.+8      	; 0x2b3a <__addsf3+0x20>
    2b32:	39 f4       	brne	.+14     	; 0x2b42 <__addsf3+0x28>
    2b34:	9f 3f       	cpi	r25, 0xFF	; 255
    2b36:	19 f4       	brne	.+6      	; 0x2b3e <__addsf3+0x24>
    2b38:	26 f4       	brtc	.+8      	; 0x2b42 <__addsf3+0x28>
    2b3a:	0c 94 7f 17 	jmp	0x2efe	; 0x2efe <__fp_nan>
    2b3e:	0e f4       	brtc	.+2      	; 0x2b42 <__addsf3+0x28>
    2b40:	e0 95       	com	r30
    2b42:	e7 fb       	bst	r30, 7
    2b44:	0c 94 79 17 	jmp	0x2ef2	; 0x2ef2 <__fp_inf>

00002b48 <__addsf3x>:
    2b48:	e9 2f       	mov	r30, r25
    2b4a:	0e 94 c8 17 	call	0x2f90	; 0x2f90 <__fp_split3>
    2b4e:	58 f3       	brcs	.-42     	; 0x2b26 <__addsf3+0xc>
    2b50:	ba 17       	cp	r27, r26
    2b52:	62 07       	cpc	r22, r18
    2b54:	73 07       	cpc	r23, r19
    2b56:	84 07       	cpc	r24, r20
    2b58:	95 07       	cpc	r25, r21
    2b5a:	20 f0       	brcs	.+8      	; 0x2b64 <__addsf3x+0x1c>
    2b5c:	79 f4       	brne	.+30     	; 0x2b7c <__addsf3x+0x34>
    2b5e:	a6 f5       	brtc	.+104    	; 0x2bc8 <__addsf3x+0x80>
    2b60:	0c 94 ea 17 	jmp	0x2fd4	; 0x2fd4 <__fp_zero>
    2b64:	0e f4       	brtc	.+2      	; 0x2b68 <__addsf3x+0x20>
    2b66:	e0 95       	com	r30
    2b68:	0b 2e       	mov	r0, r27
    2b6a:	ba 2f       	mov	r27, r26
    2b6c:	a0 2d       	mov	r26, r0
    2b6e:	0b 01       	movw	r0, r22
    2b70:	b9 01       	movw	r22, r18
    2b72:	90 01       	movw	r18, r0
    2b74:	0c 01       	movw	r0, r24
    2b76:	ca 01       	movw	r24, r20
    2b78:	a0 01       	movw	r20, r0
    2b7a:	11 24       	eor	r1, r1
    2b7c:	ff 27       	eor	r31, r31
    2b7e:	59 1b       	sub	r21, r25
    2b80:	99 f0       	breq	.+38     	; 0x2ba8 <__addsf3x+0x60>
    2b82:	59 3f       	cpi	r21, 0xF9	; 249
    2b84:	50 f4       	brcc	.+20     	; 0x2b9a <__addsf3x+0x52>
    2b86:	50 3e       	cpi	r21, 0xE0	; 224
    2b88:	68 f1       	brcs	.+90     	; 0x2be4 <__addsf3x+0x9c>
    2b8a:	1a 16       	cp	r1, r26
    2b8c:	f0 40       	sbci	r31, 0x00	; 0
    2b8e:	a2 2f       	mov	r26, r18
    2b90:	23 2f       	mov	r18, r19
    2b92:	34 2f       	mov	r19, r20
    2b94:	44 27       	eor	r20, r20
    2b96:	58 5f       	subi	r21, 0xF8	; 248
    2b98:	f3 cf       	rjmp	.-26     	; 0x2b80 <__addsf3x+0x38>
    2b9a:	46 95       	lsr	r20
    2b9c:	37 95       	ror	r19
    2b9e:	27 95       	ror	r18
    2ba0:	a7 95       	ror	r26
    2ba2:	f0 40       	sbci	r31, 0x00	; 0
    2ba4:	53 95       	inc	r21
    2ba6:	c9 f7       	brne	.-14     	; 0x2b9a <__addsf3x+0x52>
    2ba8:	7e f4       	brtc	.+30     	; 0x2bc8 <__addsf3x+0x80>
    2baa:	1f 16       	cp	r1, r31
    2bac:	ba 0b       	sbc	r27, r26
    2bae:	62 0b       	sbc	r22, r18
    2bb0:	73 0b       	sbc	r23, r19
    2bb2:	84 0b       	sbc	r24, r20
    2bb4:	ba f0       	brmi	.+46     	; 0x2be4 <__addsf3x+0x9c>
    2bb6:	91 50       	subi	r25, 0x01	; 1
    2bb8:	a1 f0       	breq	.+40     	; 0x2be2 <__addsf3x+0x9a>
    2bba:	ff 0f       	add	r31, r31
    2bbc:	bb 1f       	adc	r27, r27
    2bbe:	66 1f       	adc	r22, r22
    2bc0:	77 1f       	adc	r23, r23
    2bc2:	88 1f       	adc	r24, r24
    2bc4:	c2 f7       	brpl	.-16     	; 0x2bb6 <__addsf3x+0x6e>
    2bc6:	0e c0       	rjmp	.+28     	; 0x2be4 <__addsf3x+0x9c>
    2bc8:	ba 0f       	add	r27, r26
    2bca:	62 1f       	adc	r22, r18
    2bcc:	73 1f       	adc	r23, r19
    2bce:	84 1f       	adc	r24, r20
    2bd0:	48 f4       	brcc	.+18     	; 0x2be4 <__addsf3x+0x9c>
    2bd2:	87 95       	ror	r24
    2bd4:	77 95       	ror	r23
    2bd6:	67 95       	ror	r22
    2bd8:	b7 95       	ror	r27
    2bda:	f7 95       	ror	r31
    2bdc:	9e 3f       	cpi	r25, 0xFE	; 254
    2bde:	08 f0       	brcs	.+2      	; 0x2be2 <__addsf3x+0x9a>
    2be0:	b0 cf       	rjmp	.-160    	; 0x2b42 <__addsf3+0x28>
    2be2:	93 95       	inc	r25
    2be4:	88 0f       	add	r24, r24
    2be6:	08 f0       	brcs	.+2      	; 0x2bea <__addsf3x+0xa2>
    2be8:	99 27       	eor	r25, r25
    2bea:	ee 0f       	add	r30, r30
    2bec:	97 95       	ror	r25
    2bee:	87 95       	ror	r24
    2bf0:	08 95       	ret
    2bf2:	0e 94 a9 17 	call	0x2f52	; 0x2f52 <__fp_pscA>
    2bf6:	60 f0       	brcs	.+24     	; 0x2c10 <__addsf3x+0xc8>
    2bf8:	80 e8       	ldi	r24, 0x80	; 128
    2bfa:	91 e0       	ldi	r25, 0x01	; 1
    2bfc:	09 f4       	brne	.+2      	; 0x2c00 <__addsf3x+0xb8>
    2bfe:	9e ef       	ldi	r25, 0xFE	; 254
    2c00:	0e 94 b0 17 	call	0x2f60	; 0x2f60 <__fp_pscB>
    2c04:	28 f0       	brcs	.+10     	; 0x2c10 <__addsf3x+0xc8>
    2c06:	40 e8       	ldi	r20, 0x80	; 128
    2c08:	51 e0       	ldi	r21, 0x01	; 1
    2c0a:	71 f4       	brne	.+28     	; 0x2c28 <atan2+0x10>
    2c0c:	5e ef       	ldi	r21, 0xFE	; 254
    2c0e:	0c c0       	rjmp	.+24     	; 0x2c28 <atan2+0x10>
    2c10:	0c 94 7f 17 	jmp	0x2efe	; 0x2efe <__fp_nan>
    2c14:	0c 94 ea 17 	jmp	0x2fd4	; 0x2fd4 <__fp_zero>

00002c18 <atan2>:
    2c18:	e9 2f       	mov	r30, r25
    2c1a:	e0 78       	andi	r30, 0x80	; 128
    2c1c:	0e 94 c8 17 	call	0x2f90	; 0x2f90 <__fp_split3>
    2c20:	40 f3       	brcs	.-48     	; 0x2bf2 <__addsf3x+0xaa>
    2c22:	09 2e       	mov	r0, r25
    2c24:	05 2a       	or	r0, r21
    2c26:	b1 f3       	breq	.-20     	; 0x2c14 <__addsf3x+0xcc>
    2c28:	26 17       	cp	r18, r22
    2c2a:	37 07       	cpc	r19, r23
    2c2c:	48 07       	cpc	r20, r24
    2c2e:	59 07       	cpc	r21, r25
    2c30:	38 f0       	brcs	.+14     	; 0x2c40 <atan2+0x28>
    2c32:	0e 2e       	mov	r0, r30
    2c34:	07 f8       	bld	r0, 7
    2c36:	e0 25       	eor	r30, r0
    2c38:	69 f0       	breq	.+26     	; 0x2c54 <atan2+0x3c>
    2c3a:	e0 25       	eor	r30, r0
    2c3c:	e0 64       	ori	r30, 0x40	; 64
    2c3e:	0a c0       	rjmp	.+20     	; 0x2c54 <atan2+0x3c>
    2c40:	ef 63       	ori	r30, 0x3F	; 63
    2c42:	07 f8       	bld	r0, 7
    2c44:	00 94       	com	r0
    2c46:	07 fa       	bst	r0, 7
    2c48:	db 01       	movw	r26, r22
    2c4a:	b9 01       	movw	r22, r18
    2c4c:	9d 01       	movw	r18, r26
    2c4e:	dc 01       	movw	r26, r24
    2c50:	ca 01       	movw	r24, r20
    2c52:	ad 01       	movw	r20, r26
    2c54:	ef 93       	push	r30
    2c56:	0e 94 87 16 	call	0x2d0e	; 0x2d0e <__divsf3_pse>
    2c5a:	0e 94 b7 17 	call	0x2f6e	; 0x2f6e <__fp_round>
    2c5e:	0e 94 3c 16 	call	0x2c78	; 0x2c78 <atan>
    2c62:	5f 91       	pop	r21
    2c64:	55 23       	and	r21, r21
    2c66:	39 f0       	breq	.+14     	; 0x2c76 <atan2+0x5e>
    2c68:	2b ed       	ldi	r18, 0xDB	; 219
    2c6a:	3f e0       	ldi	r19, 0x0F	; 15
    2c6c:	49 e4       	ldi	r20, 0x49	; 73
    2c6e:	50 fd       	sbrc	r21, 0
    2c70:	49 ec       	ldi	r20, 0xC9	; 201
    2c72:	0c 94 8d 15 	jmp	0x2b1a	; 0x2b1a <__addsf3>
    2c76:	08 95       	ret

00002c78 <atan>:
    2c78:	df 93       	push	r29
    2c7a:	dd 27       	eor	r29, r29
    2c7c:	b9 2f       	mov	r27, r25
    2c7e:	bf 77       	andi	r27, 0x7F	; 127
    2c80:	40 e8       	ldi	r20, 0x80	; 128
    2c82:	5f e3       	ldi	r21, 0x3F	; 63
    2c84:	16 16       	cp	r1, r22
    2c86:	17 06       	cpc	r1, r23
    2c88:	48 07       	cpc	r20, r24
    2c8a:	5b 07       	cpc	r21, r27
    2c8c:	18 f4       	brcc	.+6      	; 0x2c94 <atan+0x1c>
    2c8e:	d9 2f       	mov	r29, r25
    2c90:	0e 94 f6 17 	call	0x2fec	; 0x2fec <inverse>
    2c94:	9f 93       	push	r25
    2c96:	8f 93       	push	r24
    2c98:	7f 93       	push	r23
    2c9a:	6f 93       	push	r22
    2c9c:	0e 94 6b 18 	call	0x30d6	; 0x30d6 <square>
    2ca0:	e0 ea       	ldi	r30, 0xA0	; 160
    2ca2:	f0 e0       	ldi	r31, 0x00	; 0
    2ca4:	0e 94 82 17 	call	0x2f04	; 0x2f04 <__fp_powser>
    2ca8:	0e 94 b7 17 	call	0x2f6e	; 0x2f6e <__fp_round>
    2cac:	2f 91       	pop	r18
    2cae:	3f 91       	pop	r19
    2cb0:	4f 91       	pop	r20
    2cb2:	5f 91       	pop	r21
    2cb4:	0e 94 11 18 	call	0x3022	; 0x3022 <__mulsf3x>
    2cb8:	dd 23       	and	r29, r29
    2cba:	51 f0       	breq	.+20     	; 0x2cd0 <atan+0x58>
    2cbc:	90 58       	subi	r25, 0x80	; 128
    2cbe:	a2 ea       	ldi	r26, 0xA2	; 162
    2cc0:	2a ed       	ldi	r18, 0xDA	; 218
    2cc2:	3f e0       	ldi	r19, 0x0F	; 15
    2cc4:	49 ec       	ldi	r20, 0xC9	; 201
    2cc6:	5f e3       	ldi	r21, 0x3F	; 63
    2cc8:	d0 78       	andi	r29, 0x80	; 128
    2cca:	5d 27       	eor	r21, r29
    2ccc:	0e 94 a4 15 	call	0x2b48	; 0x2b48 <__addsf3x>
    2cd0:	df 91       	pop	r29
    2cd2:	0c 94 b7 17 	jmp	0x2f6e	; 0x2f6e <__fp_round>

00002cd6 <__cmpsf2>:
    2cd6:	0e 94 55 17 	call	0x2eaa	; 0x2eaa <__fp_cmp>
    2cda:	08 f4       	brcc	.+2      	; 0x2cde <__cmpsf2+0x8>
    2cdc:	81 e0       	ldi	r24, 0x01	; 1
    2cde:	08 95       	ret

00002ce0 <__divsf3>:
    2ce0:	0e 94 84 16 	call	0x2d08	; 0x2d08 <__divsf3x>
    2ce4:	0c 94 b7 17 	jmp	0x2f6e	; 0x2f6e <__fp_round>
    2ce8:	0e 94 b0 17 	call	0x2f60	; 0x2f60 <__fp_pscB>
    2cec:	58 f0       	brcs	.+22     	; 0x2d04 <__divsf3+0x24>
    2cee:	0e 94 a9 17 	call	0x2f52	; 0x2f52 <__fp_pscA>
    2cf2:	40 f0       	brcs	.+16     	; 0x2d04 <__divsf3+0x24>
    2cf4:	29 f4       	brne	.+10     	; 0x2d00 <__divsf3+0x20>
    2cf6:	5f 3f       	cpi	r21, 0xFF	; 255
    2cf8:	29 f0       	breq	.+10     	; 0x2d04 <__divsf3+0x24>
    2cfa:	0c 94 79 17 	jmp	0x2ef2	; 0x2ef2 <__fp_inf>
    2cfe:	51 11       	cpse	r21, r1
    2d00:	0c 94 eb 17 	jmp	0x2fd6	; 0x2fd6 <__fp_szero>
    2d04:	0c 94 7f 17 	jmp	0x2efe	; 0x2efe <__fp_nan>

00002d08 <__divsf3x>:
    2d08:	0e 94 c8 17 	call	0x2f90	; 0x2f90 <__fp_split3>
    2d0c:	68 f3       	brcs	.-38     	; 0x2ce8 <__divsf3+0x8>

00002d0e <__divsf3_pse>:
    2d0e:	99 23       	and	r25, r25
    2d10:	b1 f3       	breq	.-20     	; 0x2cfe <__divsf3+0x1e>
    2d12:	55 23       	and	r21, r21
    2d14:	91 f3       	breq	.-28     	; 0x2cfa <__divsf3+0x1a>
    2d16:	95 1b       	sub	r25, r21
    2d18:	55 0b       	sbc	r21, r21
    2d1a:	bb 27       	eor	r27, r27
    2d1c:	aa 27       	eor	r26, r26
    2d1e:	62 17       	cp	r22, r18
    2d20:	73 07       	cpc	r23, r19
    2d22:	84 07       	cpc	r24, r20
    2d24:	38 f0       	brcs	.+14     	; 0x2d34 <__divsf3_pse+0x26>
    2d26:	9f 5f       	subi	r25, 0xFF	; 255
    2d28:	5f 4f       	sbci	r21, 0xFF	; 255
    2d2a:	22 0f       	add	r18, r18
    2d2c:	33 1f       	adc	r19, r19
    2d2e:	44 1f       	adc	r20, r20
    2d30:	aa 1f       	adc	r26, r26
    2d32:	a9 f3       	breq	.-22     	; 0x2d1e <__divsf3_pse+0x10>
    2d34:	35 d0       	rcall	.+106    	; 0x2da0 <__divsf3_pse+0x92>
    2d36:	0e 2e       	mov	r0, r30
    2d38:	3a f0       	brmi	.+14     	; 0x2d48 <__divsf3_pse+0x3a>
    2d3a:	e0 e8       	ldi	r30, 0x80	; 128
    2d3c:	32 d0       	rcall	.+100    	; 0x2da2 <__divsf3_pse+0x94>
    2d3e:	91 50       	subi	r25, 0x01	; 1
    2d40:	50 40       	sbci	r21, 0x00	; 0
    2d42:	e6 95       	lsr	r30
    2d44:	00 1c       	adc	r0, r0
    2d46:	ca f7       	brpl	.-14     	; 0x2d3a <__divsf3_pse+0x2c>
    2d48:	2b d0       	rcall	.+86     	; 0x2da0 <__divsf3_pse+0x92>
    2d4a:	fe 2f       	mov	r31, r30
    2d4c:	29 d0       	rcall	.+82     	; 0x2da0 <__divsf3_pse+0x92>
    2d4e:	66 0f       	add	r22, r22
    2d50:	77 1f       	adc	r23, r23
    2d52:	88 1f       	adc	r24, r24
    2d54:	bb 1f       	adc	r27, r27
    2d56:	26 17       	cp	r18, r22
    2d58:	37 07       	cpc	r19, r23
    2d5a:	48 07       	cpc	r20, r24
    2d5c:	ab 07       	cpc	r26, r27
    2d5e:	b0 e8       	ldi	r27, 0x80	; 128
    2d60:	09 f0       	breq	.+2      	; 0x2d64 <__divsf3_pse+0x56>
    2d62:	bb 0b       	sbc	r27, r27
    2d64:	80 2d       	mov	r24, r0
    2d66:	bf 01       	movw	r22, r30
    2d68:	ff 27       	eor	r31, r31
    2d6a:	93 58       	subi	r25, 0x83	; 131
    2d6c:	5f 4f       	sbci	r21, 0xFF	; 255
    2d6e:	3a f0       	brmi	.+14     	; 0x2d7e <__divsf3_pse+0x70>
    2d70:	9e 3f       	cpi	r25, 0xFE	; 254
    2d72:	51 05       	cpc	r21, r1
    2d74:	78 f0       	brcs	.+30     	; 0x2d94 <__divsf3_pse+0x86>
    2d76:	0c 94 79 17 	jmp	0x2ef2	; 0x2ef2 <__fp_inf>
    2d7a:	0c 94 eb 17 	jmp	0x2fd6	; 0x2fd6 <__fp_szero>
    2d7e:	5f 3f       	cpi	r21, 0xFF	; 255
    2d80:	e4 f3       	brlt	.-8      	; 0x2d7a <__divsf3_pse+0x6c>
    2d82:	98 3e       	cpi	r25, 0xE8	; 232
    2d84:	d4 f3       	brlt	.-12     	; 0x2d7a <__divsf3_pse+0x6c>
    2d86:	86 95       	lsr	r24
    2d88:	77 95       	ror	r23
    2d8a:	67 95       	ror	r22
    2d8c:	b7 95       	ror	r27
    2d8e:	f7 95       	ror	r31
    2d90:	9f 5f       	subi	r25, 0xFF	; 255
    2d92:	c9 f7       	brne	.-14     	; 0x2d86 <__divsf3_pse+0x78>
    2d94:	88 0f       	add	r24, r24
    2d96:	91 1d       	adc	r25, r1
    2d98:	96 95       	lsr	r25
    2d9a:	87 95       	ror	r24
    2d9c:	97 f9       	bld	r25, 7
    2d9e:	08 95       	ret
    2da0:	e1 e0       	ldi	r30, 0x01	; 1
    2da2:	66 0f       	add	r22, r22
    2da4:	77 1f       	adc	r23, r23
    2da6:	88 1f       	adc	r24, r24
    2da8:	bb 1f       	adc	r27, r27
    2daa:	62 17       	cp	r22, r18
    2dac:	73 07       	cpc	r23, r19
    2dae:	84 07       	cpc	r24, r20
    2db0:	ba 07       	cpc	r27, r26
    2db2:	20 f0       	brcs	.+8      	; 0x2dbc <__divsf3_pse+0xae>
    2db4:	62 1b       	sub	r22, r18
    2db6:	73 0b       	sbc	r23, r19
    2db8:	84 0b       	sbc	r24, r20
    2dba:	ba 0b       	sbc	r27, r26
    2dbc:	ee 1f       	adc	r30, r30
    2dbe:	88 f7       	brcc	.-30     	; 0x2da2 <__divsf3_pse+0x94>
    2dc0:	e0 95       	com	r30
    2dc2:	08 95       	ret

00002dc4 <__fixsfsi>:
    2dc4:	0e 94 e9 16 	call	0x2dd2	; 0x2dd2 <__fixunssfsi>
    2dc8:	68 94       	set
    2dca:	b1 11       	cpse	r27, r1
    2dcc:	0c 94 eb 17 	jmp	0x2fd6	; 0x2fd6 <__fp_szero>
    2dd0:	08 95       	ret

00002dd2 <__fixunssfsi>:
    2dd2:	0e 94 d0 17 	call	0x2fa0	; 0x2fa0 <__fp_splitA>
    2dd6:	88 f0       	brcs	.+34     	; 0x2dfa <__fixunssfsi+0x28>
    2dd8:	9f 57       	subi	r25, 0x7F	; 127
    2dda:	98 f0       	brcs	.+38     	; 0x2e02 <__fixunssfsi+0x30>
    2ddc:	b9 2f       	mov	r27, r25
    2dde:	99 27       	eor	r25, r25
    2de0:	b7 51       	subi	r27, 0x17	; 23
    2de2:	b0 f0       	brcs	.+44     	; 0x2e10 <__fixunssfsi+0x3e>
    2de4:	e1 f0       	breq	.+56     	; 0x2e1e <__fixunssfsi+0x4c>
    2de6:	66 0f       	add	r22, r22
    2de8:	77 1f       	adc	r23, r23
    2dea:	88 1f       	adc	r24, r24
    2dec:	99 1f       	adc	r25, r25
    2dee:	1a f0       	brmi	.+6      	; 0x2df6 <__fixunssfsi+0x24>
    2df0:	ba 95       	dec	r27
    2df2:	c9 f7       	brne	.-14     	; 0x2de6 <__fixunssfsi+0x14>
    2df4:	14 c0       	rjmp	.+40     	; 0x2e1e <__fixunssfsi+0x4c>
    2df6:	b1 30       	cpi	r27, 0x01	; 1
    2df8:	91 f0       	breq	.+36     	; 0x2e1e <__fixunssfsi+0x4c>
    2dfa:	0e 94 ea 17 	call	0x2fd4	; 0x2fd4 <__fp_zero>
    2dfe:	b1 e0       	ldi	r27, 0x01	; 1
    2e00:	08 95       	ret
    2e02:	0c 94 ea 17 	jmp	0x2fd4	; 0x2fd4 <__fp_zero>
    2e06:	67 2f       	mov	r22, r23
    2e08:	78 2f       	mov	r23, r24
    2e0a:	88 27       	eor	r24, r24
    2e0c:	b8 5f       	subi	r27, 0xF8	; 248
    2e0e:	39 f0       	breq	.+14     	; 0x2e1e <__fixunssfsi+0x4c>
    2e10:	b9 3f       	cpi	r27, 0xF9	; 249
    2e12:	cc f3       	brlt	.-14     	; 0x2e06 <__fixunssfsi+0x34>
    2e14:	86 95       	lsr	r24
    2e16:	77 95       	ror	r23
    2e18:	67 95       	ror	r22
    2e1a:	b3 95       	inc	r27
    2e1c:	d9 f7       	brne	.-10     	; 0x2e14 <__fixunssfsi+0x42>
    2e1e:	3e f4       	brtc	.+14     	; 0x2e2e <__fixunssfsi+0x5c>
    2e20:	90 95       	com	r25
    2e22:	80 95       	com	r24
    2e24:	70 95       	com	r23
    2e26:	61 95       	neg	r22
    2e28:	7f 4f       	sbci	r23, 0xFF	; 255
    2e2a:	8f 4f       	sbci	r24, 0xFF	; 255
    2e2c:	9f 4f       	sbci	r25, 0xFF	; 255
    2e2e:	08 95       	ret

00002e30 <__floatunsisf>:
    2e30:	e8 94       	clt
    2e32:	09 c0       	rjmp	.+18     	; 0x2e46 <__floatsisf+0x12>

00002e34 <__floatsisf>:
    2e34:	97 fb       	bst	r25, 7
    2e36:	3e f4       	brtc	.+14     	; 0x2e46 <__floatsisf+0x12>
    2e38:	90 95       	com	r25
    2e3a:	80 95       	com	r24
    2e3c:	70 95       	com	r23
    2e3e:	61 95       	neg	r22
    2e40:	7f 4f       	sbci	r23, 0xFF	; 255
    2e42:	8f 4f       	sbci	r24, 0xFF	; 255
    2e44:	9f 4f       	sbci	r25, 0xFF	; 255
    2e46:	99 23       	and	r25, r25
    2e48:	a9 f0       	breq	.+42     	; 0x2e74 <__floatsisf+0x40>
    2e4a:	f9 2f       	mov	r31, r25
    2e4c:	96 e9       	ldi	r25, 0x96	; 150
    2e4e:	bb 27       	eor	r27, r27
    2e50:	93 95       	inc	r25
    2e52:	f6 95       	lsr	r31
    2e54:	87 95       	ror	r24
    2e56:	77 95       	ror	r23
    2e58:	67 95       	ror	r22
    2e5a:	b7 95       	ror	r27
    2e5c:	f1 11       	cpse	r31, r1
    2e5e:	f8 cf       	rjmp	.-16     	; 0x2e50 <__floatsisf+0x1c>
    2e60:	fa f4       	brpl	.+62     	; 0x2ea0 <__floatsisf+0x6c>
    2e62:	bb 0f       	add	r27, r27
    2e64:	11 f4       	brne	.+4      	; 0x2e6a <__floatsisf+0x36>
    2e66:	60 ff       	sbrs	r22, 0
    2e68:	1b c0       	rjmp	.+54     	; 0x2ea0 <__floatsisf+0x6c>
    2e6a:	6f 5f       	subi	r22, 0xFF	; 255
    2e6c:	7f 4f       	sbci	r23, 0xFF	; 255
    2e6e:	8f 4f       	sbci	r24, 0xFF	; 255
    2e70:	9f 4f       	sbci	r25, 0xFF	; 255
    2e72:	16 c0       	rjmp	.+44     	; 0x2ea0 <__floatsisf+0x6c>
    2e74:	88 23       	and	r24, r24
    2e76:	11 f0       	breq	.+4      	; 0x2e7c <__floatsisf+0x48>
    2e78:	96 e9       	ldi	r25, 0x96	; 150
    2e7a:	11 c0       	rjmp	.+34     	; 0x2e9e <__floatsisf+0x6a>
    2e7c:	77 23       	and	r23, r23
    2e7e:	21 f0       	breq	.+8      	; 0x2e88 <__floatsisf+0x54>
    2e80:	9e e8       	ldi	r25, 0x8E	; 142
    2e82:	87 2f       	mov	r24, r23
    2e84:	76 2f       	mov	r23, r22
    2e86:	05 c0       	rjmp	.+10     	; 0x2e92 <__floatsisf+0x5e>
    2e88:	66 23       	and	r22, r22
    2e8a:	71 f0       	breq	.+28     	; 0x2ea8 <__floatsisf+0x74>
    2e8c:	96 e8       	ldi	r25, 0x86	; 134
    2e8e:	86 2f       	mov	r24, r22
    2e90:	70 e0       	ldi	r23, 0x00	; 0
    2e92:	60 e0       	ldi	r22, 0x00	; 0
    2e94:	2a f0       	brmi	.+10     	; 0x2ea0 <__floatsisf+0x6c>
    2e96:	9a 95       	dec	r25
    2e98:	66 0f       	add	r22, r22
    2e9a:	77 1f       	adc	r23, r23
    2e9c:	88 1f       	adc	r24, r24
    2e9e:	da f7       	brpl	.-10     	; 0x2e96 <__floatsisf+0x62>
    2ea0:	88 0f       	add	r24, r24
    2ea2:	96 95       	lsr	r25
    2ea4:	87 95       	ror	r24
    2ea6:	97 f9       	bld	r25, 7
    2ea8:	08 95       	ret

00002eaa <__fp_cmp>:
    2eaa:	99 0f       	add	r25, r25
    2eac:	00 08       	sbc	r0, r0
    2eae:	55 0f       	add	r21, r21
    2eb0:	aa 0b       	sbc	r26, r26
    2eb2:	e0 e8       	ldi	r30, 0x80	; 128
    2eb4:	fe ef       	ldi	r31, 0xFE	; 254
    2eb6:	16 16       	cp	r1, r22
    2eb8:	17 06       	cpc	r1, r23
    2eba:	e8 07       	cpc	r30, r24
    2ebc:	f9 07       	cpc	r31, r25
    2ebe:	c0 f0       	brcs	.+48     	; 0x2ef0 <__fp_cmp+0x46>
    2ec0:	12 16       	cp	r1, r18
    2ec2:	13 06       	cpc	r1, r19
    2ec4:	e4 07       	cpc	r30, r20
    2ec6:	f5 07       	cpc	r31, r21
    2ec8:	98 f0       	brcs	.+38     	; 0x2ef0 <__fp_cmp+0x46>
    2eca:	62 1b       	sub	r22, r18
    2ecc:	73 0b       	sbc	r23, r19
    2ece:	84 0b       	sbc	r24, r20
    2ed0:	95 0b       	sbc	r25, r21
    2ed2:	39 f4       	brne	.+14     	; 0x2ee2 <__fp_cmp+0x38>
    2ed4:	0a 26       	eor	r0, r26
    2ed6:	61 f0       	breq	.+24     	; 0x2ef0 <__fp_cmp+0x46>
    2ed8:	23 2b       	or	r18, r19
    2eda:	24 2b       	or	r18, r20
    2edc:	25 2b       	or	r18, r21
    2ede:	21 f4       	brne	.+8      	; 0x2ee8 <__fp_cmp+0x3e>
    2ee0:	08 95       	ret
    2ee2:	0a 26       	eor	r0, r26
    2ee4:	09 f4       	brne	.+2      	; 0x2ee8 <__fp_cmp+0x3e>
    2ee6:	a1 40       	sbci	r26, 0x01	; 1
    2ee8:	a6 95       	lsr	r26
    2eea:	8f ef       	ldi	r24, 0xFF	; 255
    2eec:	81 1d       	adc	r24, r1
    2eee:	81 1d       	adc	r24, r1
    2ef0:	08 95       	ret

00002ef2 <__fp_inf>:
    2ef2:	97 f9       	bld	r25, 7
    2ef4:	9f 67       	ori	r25, 0x7F	; 127
    2ef6:	80 e8       	ldi	r24, 0x80	; 128
    2ef8:	70 e0       	ldi	r23, 0x00	; 0
    2efa:	60 e0       	ldi	r22, 0x00	; 0
    2efc:	08 95       	ret

00002efe <__fp_nan>:
    2efe:	9f ef       	ldi	r25, 0xFF	; 255
    2f00:	80 ec       	ldi	r24, 0xC0	; 192
    2f02:	08 95       	ret

00002f04 <__fp_powser>:
    2f04:	df 93       	push	r29
    2f06:	cf 93       	push	r28
    2f08:	1f 93       	push	r17
    2f0a:	0f 93       	push	r16
    2f0c:	ff 92       	push	r15
    2f0e:	ef 92       	push	r14
    2f10:	df 92       	push	r13
    2f12:	7b 01       	movw	r14, r22
    2f14:	8c 01       	movw	r16, r24
    2f16:	68 94       	set
    2f18:	06 c0       	rjmp	.+12     	; 0x2f26 <__fp_powser+0x22>
    2f1a:	da 2e       	mov	r13, r26
    2f1c:	ef 01       	movw	r28, r30
    2f1e:	0e 94 11 18 	call	0x3022	; 0x3022 <__mulsf3x>
    2f22:	fe 01       	movw	r30, r28
    2f24:	e8 94       	clt
    2f26:	a5 91       	lpm	r26, Z+
    2f28:	25 91       	lpm	r18, Z+
    2f2a:	35 91       	lpm	r19, Z+
    2f2c:	45 91       	lpm	r20, Z+
    2f2e:	55 91       	lpm	r21, Z+
    2f30:	a6 f3       	brts	.-24     	; 0x2f1a <__fp_powser+0x16>
    2f32:	ef 01       	movw	r28, r30
    2f34:	0e 94 a4 15 	call	0x2b48	; 0x2b48 <__addsf3x>
    2f38:	fe 01       	movw	r30, r28
    2f3a:	97 01       	movw	r18, r14
    2f3c:	a8 01       	movw	r20, r16
    2f3e:	da 94       	dec	r13
    2f40:	69 f7       	brne	.-38     	; 0x2f1c <__fp_powser+0x18>
    2f42:	df 90       	pop	r13
    2f44:	ef 90       	pop	r14
    2f46:	ff 90       	pop	r15
    2f48:	0f 91       	pop	r16
    2f4a:	1f 91       	pop	r17
    2f4c:	cf 91       	pop	r28
    2f4e:	df 91       	pop	r29
    2f50:	08 95       	ret

00002f52 <__fp_pscA>:
    2f52:	00 24       	eor	r0, r0
    2f54:	0a 94       	dec	r0
    2f56:	16 16       	cp	r1, r22
    2f58:	17 06       	cpc	r1, r23
    2f5a:	18 06       	cpc	r1, r24
    2f5c:	09 06       	cpc	r0, r25
    2f5e:	08 95       	ret

00002f60 <__fp_pscB>:
    2f60:	00 24       	eor	r0, r0
    2f62:	0a 94       	dec	r0
    2f64:	12 16       	cp	r1, r18
    2f66:	13 06       	cpc	r1, r19
    2f68:	14 06       	cpc	r1, r20
    2f6a:	05 06       	cpc	r0, r21
    2f6c:	08 95       	ret

00002f6e <__fp_round>:
    2f6e:	09 2e       	mov	r0, r25
    2f70:	03 94       	inc	r0
    2f72:	00 0c       	add	r0, r0
    2f74:	11 f4       	brne	.+4      	; 0x2f7a <__fp_round+0xc>
    2f76:	88 23       	and	r24, r24
    2f78:	52 f0       	brmi	.+20     	; 0x2f8e <__fp_round+0x20>
    2f7a:	bb 0f       	add	r27, r27
    2f7c:	40 f4       	brcc	.+16     	; 0x2f8e <__fp_round+0x20>
    2f7e:	bf 2b       	or	r27, r31
    2f80:	11 f4       	brne	.+4      	; 0x2f86 <__fp_round+0x18>
    2f82:	60 ff       	sbrs	r22, 0
    2f84:	04 c0       	rjmp	.+8      	; 0x2f8e <__fp_round+0x20>
    2f86:	6f 5f       	subi	r22, 0xFF	; 255
    2f88:	7f 4f       	sbci	r23, 0xFF	; 255
    2f8a:	8f 4f       	sbci	r24, 0xFF	; 255
    2f8c:	9f 4f       	sbci	r25, 0xFF	; 255
    2f8e:	08 95       	ret

00002f90 <__fp_split3>:
    2f90:	57 fd       	sbrc	r21, 7
    2f92:	90 58       	subi	r25, 0x80	; 128
    2f94:	44 0f       	add	r20, r20
    2f96:	55 1f       	adc	r21, r21
    2f98:	59 f0       	breq	.+22     	; 0x2fb0 <__fp_splitA+0x10>
    2f9a:	5f 3f       	cpi	r21, 0xFF	; 255
    2f9c:	71 f0       	breq	.+28     	; 0x2fba <__fp_splitA+0x1a>
    2f9e:	47 95       	ror	r20

00002fa0 <__fp_splitA>:
    2fa0:	88 0f       	add	r24, r24
    2fa2:	97 fb       	bst	r25, 7
    2fa4:	99 1f       	adc	r25, r25
    2fa6:	61 f0       	breq	.+24     	; 0x2fc0 <__fp_splitA+0x20>
    2fa8:	9f 3f       	cpi	r25, 0xFF	; 255
    2faa:	79 f0       	breq	.+30     	; 0x2fca <__fp_splitA+0x2a>
    2fac:	87 95       	ror	r24
    2fae:	08 95       	ret
    2fb0:	12 16       	cp	r1, r18
    2fb2:	13 06       	cpc	r1, r19
    2fb4:	14 06       	cpc	r1, r20
    2fb6:	55 1f       	adc	r21, r21
    2fb8:	f2 cf       	rjmp	.-28     	; 0x2f9e <__fp_split3+0xe>
    2fba:	46 95       	lsr	r20
    2fbc:	f1 df       	rcall	.-30     	; 0x2fa0 <__fp_splitA>
    2fbe:	08 c0       	rjmp	.+16     	; 0x2fd0 <__fp_splitA+0x30>
    2fc0:	16 16       	cp	r1, r22
    2fc2:	17 06       	cpc	r1, r23
    2fc4:	18 06       	cpc	r1, r24
    2fc6:	99 1f       	adc	r25, r25
    2fc8:	f1 cf       	rjmp	.-30     	; 0x2fac <__fp_splitA+0xc>
    2fca:	86 95       	lsr	r24
    2fcc:	71 05       	cpc	r23, r1
    2fce:	61 05       	cpc	r22, r1
    2fd0:	08 94       	sec
    2fd2:	08 95       	ret

00002fd4 <__fp_zero>:
    2fd4:	e8 94       	clt

00002fd6 <__fp_szero>:
    2fd6:	bb 27       	eor	r27, r27
    2fd8:	66 27       	eor	r22, r22
    2fda:	77 27       	eor	r23, r23
    2fdc:	cb 01       	movw	r24, r22
    2fde:	97 f9       	bld	r25, 7
    2fe0:	08 95       	ret

00002fe2 <__gesf2>:
    2fe2:	0e 94 55 17 	call	0x2eaa	; 0x2eaa <__fp_cmp>
    2fe6:	08 f4       	brcc	.+2      	; 0x2fea <__gesf2+0x8>
    2fe8:	8f ef       	ldi	r24, 0xFF	; 255
    2fea:	08 95       	ret

00002fec <inverse>:
    2fec:	9b 01       	movw	r18, r22
    2fee:	ac 01       	movw	r20, r24
    2ff0:	60 e0       	ldi	r22, 0x00	; 0
    2ff2:	70 e0       	ldi	r23, 0x00	; 0
    2ff4:	80 e8       	ldi	r24, 0x80	; 128
    2ff6:	9f e3       	ldi	r25, 0x3F	; 63
    2ff8:	0c 94 70 16 	jmp	0x2ce0	; 0x2ce0 <__divsf3>

00002ffc <__mulsf3>:
    2ffc:	0e 94 11 18 	call	0x3022	; 0x3022 <__mulsf3x>
    3000:	0c 94 b7 17 	jmp	0x2f6e	; 0x2f6e <__fp_round>
    3004:	0e 94 a9 17 	call	0x2f52	; 0x2f52 <__fp_pscA>
    3008:	38 f0       	brcs	.+14     	; 0x3018 <__mulsf3+0x1c>
    300a:	0e 94 b0 17 	call	0x2f60	; 0x2f60 <__fp_pscB>
    300e:	20 f0       	brcs	.+8      	; 0x3018 <__mulsf3+0x1c>
    3010:	95 23       	and	r25, r21
    3012:	11 f0       	breq	.+4      	; 0x3018 <__mulsf3+0x1c>
    3014:	0c 94 79 17 	jmp	0x2ef2	; 0x2ef2 <__fp_inf>
    3018:	0c 94 7f 17 	jmp	0x2efe	; 0x2efe <__fp_nan>
    301c:	11 24       	eor	r1, r1
    301e:	0c 94 eb 17 	jmp	0x2fd6	; 0x2fd6 <__fp_szero>

00003022 <__mulsf3x>:
    3022:	0e 94 c8 17 	call	0x2f90	; 0x2f90 <__fp_split3>
    3026:	70 f3       	brcs	.-36     	; 0x3004 <__mulsf3+0x8>

00003028 <__mulsf3_pse>:
    3028:	95 9f       	mul	r25, r21
    302a:	c1 f3       	breq	.-16     	; 0x301c <__mulsf3+0x20>
    302c:	95 0f       	add	r25, r21
    302e:	50 e0       	ldi	r21, 0x00	; 0
    3030:	55 1f       	adc	r21, r21
    3032:	62 9f       	mul	r22, r18
    3034:	f0 01       	movw	r30, r0
    3036:	72 9f       	mul	r23, r18
    3038:	bb 27       	eor	r27, r27
    303a:	f0 0d       	add	r31, r0
    303c:	b1 1d       	adc	r27, r1
    303e:	63 9f       	mul	r22, r19
    3040:	aa 27       	eor	r26, r26
    3042:	f0 0d       	add	r31, r0
    3044:	b1 1d       	adc	r27, r1
    3046:	aa 1f       	adc	r26, r26
    3048:	64 9f       	mul	r22, r20
    304a:	66 27       	eor	r22, r22
    304c:	b0 0d       	add	r27, r0
    304e:	a1 1d       	adc	r26, r1
    3050:	66 1f       	adc	r22, r22
    3052:	82 9f       	mul	r24, r18
    3054:	22 27       	eor	r18, r18
    3056:	b0 0d       	add	r27, r0
    3058:	a1 1d       	adc	r26, r1
    305a:	62 1f       	adc	r22, r18
    305c:	73 9f       	mul	r23, r19
    305e:	b0 0d       	add	r27, r0
    3060:	a1 1d       	adc	r26, r1
    3062:	62 1f       	adc	r22, r18
    3064:	83 9f       	mul	r24, r19
    3066:	a0 0d       	add	r26, r0
    3068:	61 1d       	adc	r22, r1
    306a:	22 1f       	adc	r18, r18
    306c:	74 9f       	mul	r23, r20
    306e:	33 27       	eor	r19, r19
    3070:	a0 0d       	add	r26, r0
    3072:	61 1d       	adc	r22, r1
    3074:	23 1f       	adc	r18, r19
    3076:	84 9f       	mul	r24, r20
    3078:	60 0d       	add	r22, r0
    307a:	21 1d       	adc	r18, r1
    307c:	82 2f       	mov	r24, r18
    307e:	76 2f       	mov	r23, r22
    3080:	6a 2f       	mov	r22, r26
    3082:	11 24       	eor	r1, r1
    3084:	9f 57       	subi	r25, 0x7F	; 127
    3086:	50 40       	sbci	r21, 0x00	; 0
    3088:	9a f0       	brmi	.+38     	; 0x30b0 <__mulsf3_pse+0x88>
    308a:	f1 f0       	breq	.+60     	; 0x30c8 <__mulsf3_pse+0xa0>
    308c:	88 23       	and	r24, r24
    308e:	4a f0       	brmi	.+18     	; 0x30a2 <__mulsf3_pse+0x7a>
    3090:	ee 0f       	add	r30, r30
    3092:	ff 1f       	adc	r31, r31
    3094:	bb 1f       	adc	r27, r27
    3096:	66 1f       	adc	r22, r22
    3098:	77 1f       	adc	r23, r23
    309a:	88 1f       	adc	r24, r24
    309c:	91 50       	subi	r25, 0x01	; 1
    309e:	50 40       	sbci	r21, 0x00	; 0
    30a0:	a9 f7       	brne	.-22     	; 0x308c <__mulsf3_pse+0x64>
    30a2:	9e 3f       	cpi	r25, 0xFE	; 254
    30a4:	51 05       	cpc	r21, r1
    30a6:	80 f0       	brcs	.+32     	; 0x30c8 <__mulsf3_pse+0xa0>
    30a8:	0c 94 79 17 	jmp	0x2ef2	; 0x2ef2 <__fp_inf>
    30ac:	0c 94 eb 17 	jmp	0x2fd6	; 0x2fd6 <__fp_szero>
    30b0:	5f 3f       	cpi	r21, 0xFF	; 255
    30b2:	e4 f3       	brlt	.-8      	; 0x30ac <__mulsf3_pse+0x84>
    30b4:	98 3e       	cpi	r25, 0xE8	; 232
    30b6:	d4 f3       	brlt	.-12     	; 0x30ac <__mulsf3_pse+0x84>
    30b8:	86 95       	lsr	r24
    30ba:	77 95       	ror	r23
    30bc:	67 95       	ror	r22
    30be:	b7 95       	ror	r27
    30c0:	f7 95       	ror	r31
    30c2:	e7 95       	ror	r30
    30c4:	9f 5f       	subi	r25, 0xFF	; 255
    30c6:	c1 f7       	brne	.-16     	; 0x30b8 <__mulsf3_pse+0x90>
    30c8:	fe 2b       	or	r31, r30
    30ca:	88 0f       	add	r24, r24
    30cc:	91 1d       	adc	r25, r1
    30ce:	96 95       	lsr	r25
    30d0:	87 95       	ror	r24
    30d2:	97 f9       	bld	r25, 7
    30d4:	08 95       	ret

000030d6 <square>:
    30d6:	9b 01       	movw	r18, r22
    30d8:	ac 01       	movw	r20, r24
    30da:	0c 94 fe 17 	jmp	0x2ffc	; 0x2ffc <__mulsf3>

000030de <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    30de:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    30e0:	91 8d       	ldd	r25, Z+25	; 0x19
    30e2:	22 8d       	ldd	r18, Z+26	; 0x1a
    30e4:	89 2f       	mov	r24, r25
    30e6:	90 e0       	ldi	r25, 0x00	; 0
    30e8:	80 5c       	subi	r24, 0xC0	; 192
    30ea:	9f 4f       	sbci	r25, 0xFF	; 255
    30ec:	82 1b       	sub	r24, r18
    30ee:	91 09       	sbc	r25, r1
}
    30f0:	8f 73       	andi	r24, 0x3F	; 63
    30f2:	99 27       	eor	r25, r25
    30f4:	08 95       	ret

000030f6 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    30f6:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    30f8:	91 8d       	ldd	r25, Z+25	; 0x19
    30fa:	82 8d       	ldd	r24, Z+26	; 0x1a
    30fc:	98 17       	cp	r25, r24
    30fe:	31 f0       	breq	.+12     	; 0x310c <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    3100:	82 8d       	ldd	r24, Z+26	; 0x1a
    3102:	e8 0f       	add	r30, r24
    3104:	f1 1d       	adc	r31, r1
    3106:	85 8d       	ldd	r24, Z+29	; 0x1d
    3108:	90 e0       	ldi	r25, 0x00	; 0
    310a:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    310c:	8f ef       	ldi	r24, 0xFF	; 255
    310e:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    3110:	08 95       	ret

00003112 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    3112:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    3114:	91 8d       	ldd	r25, Z+25	; 0x19
    3116:	82 8d       	ldd	r24, Z+26	; 0x1a
    3118:	98 17       	cp	r25, r24
    311a:	61 f0       	breq	.+24     	; 0x3134 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    311c:	82 8d       	ldd	r24, Z+26	; 0x1a
    311e:	df 01       	movw	r26, r30
    3120:	a8 0f       	add	r26, r24
    3122:	b1 1d       	adc	r27, r1
    3124:	5d 96       	adiw	r26, 0x1d	; 29
    3126:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    3128:	92 8d       	ldd	r25, Z+26	; 0x1a
    312a:	9f 5f       	subi	r25, 0xFF	; 255
    312c:	9f 73       	andi	r25, 0x3F	; 63
    312e:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    3130:	90 e0       	ldi	r25, 0x00	; 0
    3132:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    3134:	8f ef       	ldi	r24, 0xFF	; 255
    3136:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    3138:	08 95       	ret

0000313a <_ZN14HardwareSerial17availableForWriteEv>:
{
#if (SERIAL_TX_BUFFER_SIZE>256)
  uint8_t oldSREG = SREG;
  cli();
#endif
  tx_buffer_index_t head = _tx_buffer_head;
    313a:	fc 01       	movw	r30, r24
    313c:	53 8d       	ldd	r21, Z+27	; 0x1b
  tx_buffer_index_t tail = _tx_buffer_tail;
    313e:	44 8d       	ldd	r20, Z+28	; 0x1c
    3140:	25 2f       	mov	r18, r21
    3142:	30 e0       	ldi	r19, 0x00	; 0
    3144:	84 2f       	mov	r24, r20
    3146:	90 e0       	ldi	r25, 0x00	; 0
#if (SERIAL_TX_BUFFER_SIZE>256)
  SREG = oldSREG;
#endif
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    3148:	82 1b       	sub	r24, r18
    314a:	93 0b       	sbc	r25, r19
    314c:	54 17       	cp	r21, r20
    314e:	10 f0       	brcs	.+4      	; 0x3154 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
    3150:	cf 96       	adiw	r24, 0x3f	; 63
    3152:	08 95       	ret
  return tail - head - 1;
    3154:	01 97       	sbiw	r24, 0x01	; 1
}
    3156:	08 95       	ret

00003158 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    3158:	81 e0       	ldi	r24, 0x01	; 1
    315a:	9a e1       	ldi	r25, 0x1A	; 26
    315c:	89 2b       	or	r24, r25
    315e:	49 f0       	breq	.+18     	; 0x3172 <_Z14serialEventRunv+0x1a>
    3160:	80 e0       	ldi	r24, 0x00	; 0
    3162:	90 e0       	ldi	r25, 0x00	; 0
    3164:	89 2b       	or	r24, r25
    3166:	29 f0       	breq	.+10     	; 0x3172 <_Z14serialEventRunv+0x1a>
    3168:	0e 94 01 1a 	call	0x3402	; 0x3402 <_Z17Serial0_availablev>
    316c:	81 11       	cpse	r24, r1
    316e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    3172:	08 95       	ret

00003174 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    3174:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    3176:	84 8d       	ldd	r24, Z+28	; 0x1c
    3178:	df 01       	movw	r26, r30
    317a:	a8 0f       	add	r26, r24
    317c:	b1 1d       	adc	r27, r1
    317e:	a3 5a       	subi	r26, 0xA3	; 163
    3180:	bf 4f       	sbci	r27, 0xFF	; 255
    3182:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    3184:	84 8d       	ldd	r24, Z+28	; 0x1c
    3186:	90 e0       	ldi	r25, 0x00	; 0
    3188:	01 96       	adiw	r24, 0x01	; 1
    318a:	8f 73       	andi	r24, 0x3F	; 63
    318c:	99 27       	eor	r25, r25
    318e:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    3190:	a6 89       	ldd	r26, Z+22	; 0x16
    3192:	b7 89       	ldd	r27, Z+23	; 0x17
    3194:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
    3196:	a0 89       	ldd	r26, Z+16	; 0x10
    3198:	b1 89       	ldd	r27, Z+17	; 0x11
    319a:	8c 91       	ld	r24, X
    319c:	80 64       	ori	r24, 0x40	; 64
    319e:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
    31a0:	93 8d       	ldd	r25, Z+27	; 0x1b
    31a2:	84 8d       	ldd	r24, Z+28	; 0x1c
    31a4:	98 13       	cpse	r25, r24
    31a6:	06 c0       	rjmp	.+12     	; 0x31b4 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    31a8:	02 88       	ldd	r0, Z+18	; 0x12
    31aa:	f3 89       	ldd	r31, Z+19	; 0x13
    31ac:	e0 2d       	mov	r30, r0
    31ae:	80 81       	ld	r24, Z
    31b0:	8f 7d       	andi	r24, 0xDF	; 223
    31b2:	80 83       	st	Z, r24
    31b4:	08 95       	ret

000031b6 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    31b6:	ef 92       	push	r14
    31b8:	ff 92       	push	r15
    31ba:	0f 93       	push	r16
    31bc:	1f 93       	push	r17
    31be:	cf 93       	push	r28
    31c0:	df 93       	push	r29
    31c2:	ec 01       	movw	r28, r24
  _written = true;
    31c4:	81 e0       	ldi	r24, 0x01	; 1
    31c6:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    31c8:	9b 8d       	ldd	r25, Y+27	; 0x1b
    31ca:	8c 8d       	ldd	r24, Y+28	; 0x1c
    31cc:	98 13       	cpse	r25, r24
    31ce:	05 c0       	rjmp	.+10     	; 0x31da <_ZN14HardwareSerial5writeEh+0x24>
    31d0:	e8 89       	ldd	r30, Y+16	; 0x10
    31d2:	f9 89       	ldd	r31, Y+17	; 0x11
    31d4:	80 81       	ld	r24, Z
    31d6:	85 fd       	sbrc	r24, 5
    31d8:	24 c0       	rjmp	.+72     	; 0x3222 <_ZN14HardwareSerial5writeEh+0x6c>
    31da:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    31dc:	0b 8d       	ldd	r16, Y+27	; 0x1b
    31de:	10 e0       	ldi	r17, 0x00	; 0
    31e0:	0f 5f       	subi	r16, 0xFF	; 255
    31e2:	1f 4f       	sbci	r17, 0xFF	; 255
    31e4:	0f 73       	andi	r16, 0x3F	; 63
    31e6:	11 27       	eor	r17, r17
    31e8:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    31ea:	8c 8d       	ldd	r24, Y+28	; 0x1c
    31ec:	e8 12       	cpse	r14, r24
    31ee:	0c c0       	rjmp	.+24     	; 0x3208 <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
    31f0:	0f b6       	in	r0, 0x3f	; 63
    31f2:	07 fc       	sbrc	r0, 7
    31f4:	fa cf       	rjmp	.-12     	; 0x31ea <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    31f6:	e8 89       	ldd	r30, Y+16	; 0x10
    31f8:	f9 89       	ldd	r31, Y+17	; 0x11
    31fa:	80 81       	ld	r24, Z
    31fc:	85 ff       	sbrs	r24, 5
    31fe:	f5 cf       	rjmp	.-22     	; 0x31ea <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    3200:	ce 01       	movw	r24, r28
    3202:	0e 94 ba 18 	call	0x3174	; 0x3174 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    3206:	f1 cf       	rjmp	.-30     	; 0x31ea <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    3208:	8b 8d       	ldd	r24, Y+27	; 0x1b
    320a:	fe 01       	movw	r30, r28
    320c:	e8 0f       	add	r30, r24
    320e:	f1 1d       	adc	r31, r1
    3210:	e3 5a       	subi	r30, 0xA3	; 163
    3212:	ff 4f       	sbci	r31, 0xFF	; 255
    3214:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
    3216:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
    3218:	ea 89       	ldd	r30, Y+18	; 0x12
    321a:	fb 89       	ldd	r31, Y+19	; 0x13
    321c:	80 81       	ld	r24, Z
    321e:	80 62       	ori	r24, 0x20	; 32
    3220:	07 c0       	rjmp	.+14     	; 0x3230 <_ZN14HardwareSerial5writeEh+0x7a>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    3222:	ee 89       	ldd	r30, Y+22	; 0x16
    3224:	ff 89       	ldd	r31, Y+23	; 0x17
    3226:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
    3228:	e8 89       	ldd	r30, Y+16	; 0x10
    322a:	f9 89       	ldd	r31, Y+17	; 0x11
    322c:	80 81       	ld	r24, Z
    322e:	80 64       	ori	r24, 0x40	; 64
    3230:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
    3232:	81 e0       	ldi	r24, 0x01	; 1
    3234:	90 e0       	ldi	r25, 0x00	; 0
    3236:	df 91       	pop	r29
    3238:	cf 91       	pop	r28
    323a:	1f 91       	pop	r17
    323c:	0f 91       	pop	r16
    323e:	ff 90       	pop	r15
    3240:	ef 90       	pop	r14
    3242:	08 95       	ret

00003244 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    3244:	cf 93       	push	r28
    3246:	df 93       	push	r29
    3248:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    324a:	88 8d       	ldd	r24, Y+24	; 0x18
    324c:	88 23       	and	r24, r24
    324e:	c9 f0       	breq	.+50     	; 0x3282 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    3250:	ea 89       	ldd	r30, Y+18	; 0x12
    3252:	fb 89       	ldd	r31, Y+19	; 0x13
    3254:	80 81       	ld	r24, Z
    3256:	85 fd       	sbrc	r24, 5
    3258:	05 c0       	rjmp	.+10     	; 0x3264 <_ZN14HardwareSerial5flushEv+0x20>
    325a:	a8 89       	ldd	r26, Y+16	; 0x10
    325c:	b9 89       	ldd	r27, Y+17	; 0x11
    325e:	8c 91       	ld	r24, X
    3260:	86 fd       	sbrc	r24, 6
    3262:	0f c0       	rjmp	.+30     	; 0x3282 <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    3264:	0f b6       	in	r0, 0x3f	; 63
    3266:	07 fc       	sbrc	r0, 7
    3268:	f5 cf       	rjmp	.-22     	; 0x3254 <_ZN14HardwareSerial5flushEv+0x10>
    326a:	80 81       	ld	r24, Z
    326c:	85 ff       	sbrs	r24, 5
    326e:	f2 cf       	rjmp	.-28     	; 0x3254 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    3270:	a8 89       	ldd	r26, Y+16	; 0x10
    3272:	b9 89       	ldd	r27, Y+17	; 0x11
    3274:	8c 91       	ld	r24, X
    3276:	85 ff       	sbrs	r24, 5
    3278:	ed cf       	rjmp	.-38     	; 0x3254 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    327a:	ce 01       	movw	r24, r28
    327c:	0e 94 ba 18 	call	0x3174	; 0x3174 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    3280:	e7 cf       	rjmp	.-50     	; 0x3250 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    3282:	df 91       	pop	r29
    3284:	cf 91       	pop	r28
    3286:	08 95       	ret

00003288 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    3288:	cf 92       	push	r12
    328a:	df 92       	push	r13
    328c:	ef 92       	push	r14
    328e:	ff 92       	push	r15
    3290:	1f 93       	push	r17
    3292:	cf 93       	push	r28
    3294:	df 93       	push	r29
    3296:	ec 01       	movw	r28, r24
    3298:	6a 01       	movw	r12, r20
    329a:	7b 01       	movw	r14, r22
    329c:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    329e:	e8 89       	ldd	r30, Y+16	; 0x10
    32a0:	f9 89       	ldd	r31, Y+17	; 0x11
    32a2:	82 e0       	ldi	r24, 0x02	; 2
    32a4:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    32a6:	41 15       	cp	r20, r1
    32a8:	51 4e       	sbci	r21, 0xE1	; 225
    32aa:	61 05       	cpc	r22, r1
    32ac:	71 05       	cpc	r23, r1
    32ae:	b1 f0       	breq	.+44     	; 0x32dc <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    32b0:	60 e0       	ldi	r22, 0x00	; 0
    32b2:	79 e0       	ldi	r23, 0x09	; 9
    32b4:	8d e3       	ldi	r24, 0x3D	; 61
    32b6:	90 e0       	ldi	r25, 0x00	; 0
    32b8:	a7 01       	movw	r20, r14
    32ba:	96 01       	movw	r18, r12
    32bc:	0e 94 71 1d 	call	0x3ae2	; 0x3ae2 <__udivmodsi4>
    32c0:	da 01       	movw	r26, r20
    32c2:	c9 01       	movw	r24, r18
    32c4:	01 97       	sbiw	r24, 0x01	; 1
    32c6:	a1 09       	sbc	r26, r1
    32c8:	b1 09       	sbc	r27, r1
    32ca:	b6 95       	lsr	r27
    32cc:	a7 95       	ror	r26
    32ce:	97 95       	ror	r25
    32d0:	87 95       	ror	r24
    32d2:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    32d4:	21 15       	cp	r18, r1
    32d6:	80 e1       	ldi	r24, 0x10	; 16
    32d8:	38 07       	cpc	r19, r24
    32da:	a8 f0       	brcs	.+42     	; 0x3306 <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
    32dc:	e8 89       	ldd	r30, Y+16	; 0x10
    32de:	f9 89       	ldd	r31, Y+17	; 0x11
    32e0:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    32e2:	60 e8       	ldi	r22, 0x80	; 128
    32e4:	74 e8       	ldi	r23, 0x84	; 132
    32e6:	8e e1       	ldi	r24, 0x1E	; 30
    32e8:	90 e0       	ldi	r25, 0x00	; 0
    32ea:	a7 01       	movw	r20, r14
    32ec:	96 01       	movw	r18, r12
    32ee:	0e 94 71 1d 	call	0x3ae2	; 0x3ae2 <__udivmodsi4>
    32f2:	da 01       	movw	r26, r20
    32f4:	c9 01       	movw	r24, r18
    32f6:	01 97       	sbiw	r24, 0x01	; 1
    32f8:	a1 09       	sbc	r26, r1
    32fa:	b1 09       	sbc	r27, r1
    32fc:	b6 95       	lsr	r27
    32fe:	a7 95       	ror	r26
    3300:	97 95       	ror	r25
    3302:	87 95       	ror	r24
    3304:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    3306:	ec 85       	ldd	r30, Y+12	; 0x0c
    3308:	fd 85       	ldd	r31, Y+13	; 0x0d
    330a:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    330c:	ee 85       	ldd	r30, Y+14	; 0x0e
    330e:	ff 85       	ldd	r31, Y+15	; 0x0f
    3310:	20 83       	st	Z, r18

  _written = false;
    3312:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    3314:	ec 89       	ldd	r30, Y+20	; 0x14
    3316:	fd 89       	ldd	r31, Y+21	; 0x15
    3318:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    331a:	ea 89       	ldd	r30, Y+18	; 0x12
    331c:	fb 89       	ldd	r31, Y+19	; 0x13
    331e:	80 81       	ld	r24, Z
    3320:	80 61       	ori	r24, 0x10	; 16
    3322:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    3324:	ea 89       	ldd	r30, Y+18	; 0x12
    3326:	fb 89       	ldd	r31, Y+19	; 0x13
    3328:	80 81       	ld	r24, Z
    332a:	88 60       	ori	r24, 0x08	; 8
    332c:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    332e:	ea 89       	ldd	r30, Y+18	; 0x12
    3330:	fb 89       	ldd	r31, Y+19	; 0x13
    3332:	80 81       	ld	r24, Z
    3334:	80 68       	ori	r24, 0x80	; 128
    3336:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    3338:	ea 89       	ldd	r30, Y+18	; 0x12
    333a:	fb 89       	ldd	r31, Y+19	; 0x13
    333c:	80 81       	ld	r24, Z
    333e:	8f 7d       	andi	r24, 0xDF	; 223
    3340:	80 83       	st	Z, r24
}
    3342:	df 91       	pop	r29
    3344:	cf 91       	pop	r28
    3346:	1f 91       	pop	r17
    3348:	ff 90       	pop	r15
    334a:	ef 90       	pop	r14
    334c:	df 90       	pop	r13
    334e:	cf 90       	pop	r12
    3350:	08 95       	ret

00003352 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    3352:	1f 92       	push	r1
    3354:	0f 92       	push	r0
    3356:	0f b6       	in	r0, 0x3f	; 63
    3358:	0f 92       	push	r0
    335a:	11 24       	eor	r1, r1
    335c:	2f 93       	push	r18
    335e:	8f 93       	push	r24
    3360:	9f 93       	push	r25
    3362:	ef 93       	push	r30
    3364:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    3366:	e0 91 48 04 	lds	r30, 0x0448	; 0x800448 <Serial+0x10>
    336a:	f0 91 49 04 	lds	r31, 0x0449	; 0x800449 <Serial+0x11>
    336e:	80 81       	ld	r24, Z
    3370:	e0 91 4e 04 	lds	r30, 0x044E	; 0x80044e <Serial+0x16>
    3374:	f0 91 4f 04 	lds	r31, 0x044F	; 0x80044f <Serial+0x17>
    3378:	82 fd       	sbrc	r24, 2
    337a:	12 c0       	rjmp	.+36     	; 0x33a0 <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    337c:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    337e:	80 91 51 04 	lds	r24, 0x0451	; 0x800451 <Serial+0x19>
    3382:	8f 5f       	subi	r24, 0xFF	; 255
    3384:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    3386:	20 91 52 04 	lds	r18, 0x0452	; 0x800452 <Serial+0x1a>
    338a:	82 17       	cp	r24, r18
    338c:	51 f0       	breq	.+20     	; 0x33a2 <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
    338e:	e0 91 51 04 	lds	r30, 0x0451	; 0x800451 <Serial+0x19>
    3392:	f0 e0       	ldi	r31, 0x00	; 0
    3394:	e8 5c       	subi	r30, 0xC8	; 200
    3396:	fb 4f       	sbci	r31, 0xFB	; 251
    3398:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    339a:	80 93 51 04 	sts	0x0451, r24	; 0x800451 <Serial+0x19>
    339e:	01 c0       	rjmp	.+2      	; 0x33a2 <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    33a0:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    33a2:	ff 91       	pop	r31
    33a4:	ef 91       	pop	r30
    33a6:	9f 91       	pop	r25
    33a8:	8f 91       	pop	r24
    33aa:	2f 91       	pop	r18
    33ac:	0f 90       	pop	r0
    33ae:	0f be       	out	0x3f, r0	; 63
    33b0:	0f 90       	pop	r0
    33b2:	1f 90       	pop	r1
    33b4:	18 95       	reti

000033b6 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    33b6:	1f 92       	push	r1
    33b8:	0f 92       	push	r0
    33ba:	0f b6       	in	r0, 0x3f	; 63
    33bc:	0f 92       	push	r0
    33be:	11 24       	eor	r1, r1
    33c0:	2f 93       	push	r18
    33c2:	3f 93       	push	r19
    33c4:	4f 93       	push	r20
    33c6:	5f 93       	push	r21
    33c8:	6f 93       	push	r22
    33ca:	7f 93       	push	r23
    33cc:	8f 93       	push	r24
    33ce:	9f 93       	push	r25
    33d0:	af 93       	push	r26
    33d2:	bf 93       	push	r27
    33d4:	ef 93       	push	r30
    33d6:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    33d8:	88 e3       	ldi	r24, 0x38	; 56
    33da:	94 e0       	ldi	r25, 0x04	; 4
    33dc:	0e 94 ba 18 	call	0x3174	; 0x3174 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    33e0:	ff 91       	pop	r31
    33e2:	ef 91       	pop	r30
    33e4:	bf 91       	pop	r27
    33e6:	af 91       	pop	r26
    33e8:	9f 91       	pop	r25
    33ea:	8f 91       	pop	r24
    33ec:	7f 91       	pop	r23
    33ee:	6f 91       	pop	r22
    33f0:	5f 91       	pop	r21
    33f2:	4f 91       	pop	r20
    33f4:	3f 91       	pop	r19
    33f6:	2f 91       	pop	r18
    33f8:	0f 90       	pop	r0
    33fa:	0f be       	out	0x3f, r0	; 63
    33fc:	0f 90       	pop	r0
    33fe:	1f 90       	pop	r1
    3400:	18 95       	reti

00003402 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    3402:	88 e3       	ldi	r24, 0x38	; 56
    3404:	94 e0       	ldi	r25, 0x04	; 4
    3406:	0e 94 6f 18 	call	0x30de	; 0x30de <_ZN14HardwareSerial9availableEv>
    340a:	21 e0       	ldi	r18, 0x01	; 1
    340c:	89 2b       	or	r24, r25
    340e:	09 f4       	brne	.+2      	; 0x3412 <_Z17Serial0_availablev+0x10>
    3410:	20 e0       	ldi	r18, 0x00	; 0
}
    3412:	82 2f       	mov	r24, r18
    3414:	08 95       	ret

00003416 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    3416:	e8 e3       	ldi	r30, 0x38	; 56
    3418:	f4 e0       	ldi	r31, 0x04	; 4
    341a:	13 82       	std	Z+3, r1	; 0x03
    341c:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    341e:	88 ee       	ldi	r24, 0xE8	; 232
    3420:	93 e0       	ldi	r25, 0x03	; 3
    3422:	a0 e0       	ldi	r26, 0x00	; 0
    3424:	b0 e0       	ldi	r27, 0x00	; 0
    3426:	84 83       	std	Z+4, r24	; 0x04
    3428:	95 83       	std	Z+5, r25	; 0x05
    342a:	a6 83       	std	Z+6, r26	; 0x06
    342c:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    342e:	85 e8       	ldi	r24, 0x85	; 133
    3430:	92 e0       	ldi	r25, 0x02	; 2
    3432:	91 83       	std	Z+1, r25	; 0x01
    3434:	80 83       	st	Z, r24
    3436:	85 ec       	ldi	r24, 0xC5	; 197
    3438:	90 e0       	ldi	r25, 0x00	; 0
    343a:	95 87       	std	Z+13, r25	; 0x0d
    343c:	84 87       	std	Z+12, r24	; 0x0c
    343e:	84 ec       	ldi	r24, 0xC4	; 196
    3440:	90 e0       	ldi	r25, 0x00	; 0
    3442:	97 87       	std	Z+15, r25	; 0x0f
    3444:	86 87       	std	Z+14, r24	; 0x0e
    3446:	80 ec       	ldi	r24, 0xC0	; 192
    3448:	90 e0       	ldi	r25, 0x00	; 0
    344a:	91 8b       	std	Z+17, r25	; 0x11
    344c:	80 8b       	std	Z+16, r24	; 0x10
    344e:	81 ec       	ldi	r24, 0xC1	; 193
    3450:	90 e0       	ldi	r25, 0x00	; 0
    3452:	93 8b       	std	Z+19, r25	; 0x13
    3454:	82 8b       	std	Z+18, r24	; 0x12
    3456:	82 ec       	ldi	r24, 0xC2	; 194
    3458:	90 e0       	ldi	r25, 0x00	; 0
    345a:	95 8b       	std	Z+21, r25	; 0x15
    345c:	84 8b       	std	Z+20, r24	; 0x14
    345e:	86 ec       	ldi	r24, 0xC6	; 198
    3460:	90 e0       	ldi	r25, 0x00	; 0
    3462:	97 8b       	std	Z+23, r25	; 0x17
    3464:	86 8b       	std	Z+22, r24	; 0x16
    3466:	11 8e       	std	Z+25, r1	; 0x19
    3468:	12 8e       	std	Z+26, r1	; 0x1a
    346a:	13 8e       	std	Z+27, r1	; 0x1b
    346c:	14 8e       	std	Z+28, r1	; 0x1c
    346e:	08 95       	ret

00003470 <initVariant>:
    3470:	08 95       	ret

00003472 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    3472:	0e 94 a4 1c 	call	0x3948	; 0x3948 <init>

	initVariant();
    3476:	0e 94 38 1a 	call	0x3470	; 0x3470 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    347a:	0e 94 d5 06 	call	0xdaa	; 0xdaa <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    347e:	cc ea       	ldi	r28, 0xAC	; 172
    3480:	d8 e1       	ldi	r29, 0x18	; 24
#endif
	
	setup();
    
	for (;;) {
		loop();
    3482:	0e 94 87 07 	call	0xf0e	; 0xf0e <loop>
		if (serialEventRun) serialEventRun();
    3486:	20 97       	sbiw	r28, 0x00	; 0
    3488:	e1 f3       	breq	.-8      	; 0x3482 <main+0x10>
    348a:	0e 94 ac 18 	call	0x3158	; 0x3158 <_Z14serialEventRunv>
    348e:	f9 cf       	rjmp	.-14     	; 0x3482 <main+0x10>

00003490 <_Znwj>:
    3490:	0c 94 d2 1d 	jmp	0x3ba4	; 0x3ba4 <malloc>

00003494 <_ZN5Print5writeEPKhj>:
size_t Print::println(long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
    3494:	cf 92       	push	r12
    3496:	df 92       	push	r13
    3498:	ef 92       	push	r14
    349a:	ff 92       	push	r15
    349c:	0f 93       	push	r16
    349e:	1f 93       	push	r17
    34a0:	cf 93       	push	r28
    34a2:	df 93       	push	r29
    34a4:	6c 01       	movw	r12, r24
    34a6:	7a 01       	movw	r14, r20
    34a8:	8b 01       	movw	r16, r22
    34aa:	c0 e0       	ldi	r28, 0x00	; 0
    34ac:	d0 e0       	ldi	r29, 0x00	; 0
    34ae:	ce 15       	cp	r28, r14
    34b0:	df 05       	cpc	r29, r15
    34b2:	81 f0       	breq	.+32     	; 0x34d4 <_ZN5Print5writeEPKhj+0x40>
    34b4:	d8 01       	movw	r26, r16
    34b6:	6d 91       	ld	r22, X+
    34b8:	8d 01       	movw	r16, r26
    34ba:	d6 01       	movw	r26, r12
    34bc:	ed 91       	ld	r30, X+
    34be:	fc 91       	ld	r31, X
    34c0:	01 90       	ld	r0, Z+
    34c2:	f0 81       	ld	r31, Z
    34c4:	e0 2d       	mov	r30, r0
    34c6:	c6 01       	movw	r24, r12
    34c8:	09 95       	icall
    34ca:	89 2b       	or	r24, r25
    34cc:	11 f0       	breq	.+4      	; 0x34d2 <_ZN5Print5writeEPKhj+0x3e>
    34ce:	21 96       	adiw	r28, 0x01	; 1
    34d0:	ee cf       	rjmp	.-36     	; 0x34ae <_ZN5Print5writeEPKhj+0x1a>
    34d2:	7e 01       	movw	r14, r28
    34d4:	c7 01       	movw	r24, r14
    34d6:	df 91       	pop	r29
    34d8:	cf 91       	pop	r28
    34da:	1f 91       	pop	r17
    34dc:	0f 91       	pop	r16
    34de:	ff 90       	pop	r15
    34e0:	ef 90       	pop	r14
    34e2:	df 90       	pop	r13
    34e4:	cf 90       	pop	r12
    34e6:	08 95       	ret

000034e8 <_ZN5Print5writeEPKc>:
    34e8:	61 15       	cp	r22, r1
    34ea:	71 05       	cpc	r23, r1
    34ec:	79 f0       	breq	.+30     	; 0x350c <_ZN5Print5writeEPKc+0x24>
    34ee:	fb 01       	movw	r30, r22
    34f0:	01 90       	ld	r0, Z+
    34f2:	00 20       	and	r0, r0
    34f4:	e9 f7       	brne	.-6      	; 0x34f0 <_ZN5Print5writeEPKc+0x8>
    34f6:	31 97       	sbiw	r30, 0x01	; 1
    34f8:	af 01       	movw	r20, r30
    34fa:	46 1b       	sub	r20, r22
    34fc:	57 0b       	sbc	r21, r23
    34fe:	dc 01       	movw	r26, r24
    3500:	ed 91       	ld	r30, X+
    3502:	fc 91       	ld	r31, X
    3504:	02 80       	ldd	r0, Z+2	; 0x02
    3506:	f3 81       	ldd	r31, Z+3	; 0x03
    3508:	e0 2d       	mov	r30, r0
    350a:	09 94       	ijmp
    350c:	80 e0       	ldi	r24, 0x00	; 0
    350e:	90 e0       	ldi	r25, 0x00	; 0
    3510:	08 95       	ret

00003512 <_ZN5Print5printEPKc>:
    3512:	0c 94 74 1a 	jmp	0x34e8	; 0x34e8 <_ZN5Print5writeEPKc>

00003516 <_ZN5Print5printEc>:
    3516:	dc 01       	movw	r26, r24
    3518:	ed 91       	ld	r30, X+
    351a:	fc 91       	ld	r31, X
    351c:	01 90       	ld	r0, Z+
    351e:	f0 81       	ld	r31, Z
    3520:	e0 2d       	mov	r30, r0
    3522:	09 94       	ijmp

00003524 <_ZN5Print7printlnEv>:
    3524:	63 e9       	ldi	r22, 0x93	; 147
    3526:	72 e0       	ldi	r23, 0x02	; 2
    3528:	0c 94 74 1a 	jmp	0x34e8	; 0x34e8 <_ZN5Print5writeEPKc>

0000352c <_ZN5Print7printlnEPKc>:
    352c:	0f 93       	push	r16
    352e:	1f 93       	push	r17
    3530:	cf 93       	push	r28
    3532:	df 93       	push	r29
    3534:	ec 01       	movw	r28, r24
    3536:	0e 94 74 1a 	call	0x34e8	; 0x34e8 <_ZN5Print5writeEPKc>
    353a:	8c 01       	movw	r16, r24
    353c:	ce 01       	movw	r24, r28
    353e:	0e 94 92 1a 	call	0x3524	; 0x3524 <_ZN5Print7printlnEv>
    3542:	80 0f       	add	r24, r16
    3544:	91 1f       	adc	r25, r17
    3546:	df 91       	pop	r29
    3548:	cf 91       	pop	r28
    354a:	1f 91       	pop	r17
    354c:	0f 91       	pop	r16
    354e:	08 95       	ret

00003550 <_ZN5Print11printNumberEmh>:
    3550:	8f 92       	push	r8
    3552:	9f 92       	push	r9
    3554:	af 92       	push	r10
    3556:	bf 92       	push	r11
    3558:	ef 92       	push	r14
    355a:	ff 92       	push	r15
    355c:	0f 93       	push	r16
    355e:	1f 93       	push	r17
    3560:	cf 93       	push	r28
    3562:	df 93       	push	r29
    3564:	cd b7       	in	r28, 0x3d	; 61
    3566:	de b7       	in	r29, 0x3e	; 62
    3568:	a1 97       	sbiw	r28, 0x21	; 33
    356a:	0f b6       	in	r0, 0x3f	; 63
    356c:	f8 94       	cli
    356e:	de bf       	out	0x3e, r29	; 62
    3570:	0f be       	out	0x3f, r0	; 63
    3572:	cd bf       	out	0x3d, r28	; 61
    3574:	7c 01       	movw	r14, r24
    3576:	fa 01       	movw	r30, r20
    3578:	cb 01       	movw	r24, r22
    357a:	19 a2       	std	Y+33, r1	; 0x21
    357c:	22 30       	cpi	r18, 0x02	; 2
    357e:	08 f4       	brcc	.+2      	; 0x3582 <_ZN5Print11printNumberEmh+0x32>
    3580:	2a e0       	ldi	r18, 0x0A	; 10
    3582:	8e 01       	movw	r16, r28
    3584:	0f 5d       	subi	r16, 0xDF	; 223
    3586:	1f 4f       	sbci	r17, 0xFF	; 255
    3588:	82 2e       	mov	r8, r18
    358a:	91 2c       	mov	r9, r1
    358c:	a1 2c       	mov	r10, r1
    358e:	b1 2c       	mov	r11, r1
    3590:	bf 01       	movw	r22, r30
    3592:	a5 01       	movw	r20, r10
    3594:	94 01       	movw	r18, r8
    3596:	0e 94 71 1d 	call	0x3ae2	; 0x3ae2 <__udivmodsi4>
    359a:	f9 01       	movw	r30, r18
    359c:	ca 01       	movw	r24, r20
    359e:	01 50       	subi	r16, 0x01	; 1
    35a0:	11 09       	sbc	r17, r1
    35a2:	6a 30       	cpi	r22, 0x0A	; 10
    35a4:	10 f4       	brcc	.+4      	; 0x35aa <_ZN5Print11printNumberEmh+0x5a>
    35a6:	60 5d       	subi	r22, 0xD0	; 208
    35a8:	01 c0       	rjmp	.+2      	; 0x35ac <_ZN5Print11printNumberEmh+0x5c>
    35aa:	69 5c       	subi	r22, 0xC9	; 201
    35ac:	d8 01       	movw	r26, r16
    35ae:	6c 93       	st	X, r22
    35b0:	23 2b       	or	r18, r19
    35b2:	24 2b       	or	r18, r20
    35b4:	25 2b       	or	r18, r21
    35b6:	61 f7       	brne	.-40     	; 0x3590 <_ZN5Print11printNumberEmh+0x40>
    35b8:	b8 01       	movw	r22, r16
    35ba:	c7 01       	movw	r24, r14
    35bc:	0e 94 74 1a 	call	0x34e8	; 0x34e8 <_ZN5Print5writeEPKc>
    35c0:	a1 96       	adiw	r28, 0x21	; 33
    35c2:	0f b6       	in	r0, 0x3f	; 63
    35c4:	f8 94       	cli
    35c6:	de bf       	out	0x3e, r29	; 62
    35c8:	0f be       	out	0x3f, r0	; 63
    35ca:	cd bf       	out	0x3d, r28	; 61
    35cc:	df 91       	pop	r29
    35ce:	cf 91       	pop	r28
    35d0:	1f 91       	pop	r17
    35d2:	0f 91       	pop	r16
    35d4:	ff 90       	pop	r15
    35d6:	ef 90       	pop	r14
    35d8:	bf 90       	pop	r11
    35da:	af 90       	pop	r10
    35dc:	9f 90       	pop	r9
    35de:	8f 90       	pop	r8
    35e0:	08 95       	ret

000035e2 <_ZN5Print5printEmi>:
    35e2:	21 15       	cp	r18, r1
    35e4:	31 05       	cpc	r19, r1
    35e6:	41 f4       	brne	.+16     	; 0x35f8 <_ZN5Print5printEmi+0x16>
    35e8:	dc 01       	movw	r26, r24
    35ea:	ed 91       	ld	r30, X+
    35ec:	fc 91       	ld	r31, X
    35ee:	01 90       	ld	r0, Z+
    35f0:	f0 81       	ld	r31, Z
    35f2:	e0 2d       	mov	r30, r0
    35f4:	64 2f       	mov	r22, r20
    35f6:	09 94       	ijmp
    35f8:	0c 94 a8 1a 	jmp	0x3550	; 0x3550 <_ZN5Print11printNumberEmh>

000035fc <_ZN5Print5printEji>:
    35fc:	9a 01       	movw	r18, r20
    35fe:	ab 01       	movw	r20, r22
    3600:	60 e0       	ldi	r22, 0x00	; 0
    3602:	70 e0       	ldi	r23, 0x00	; 0
    3604:	0c 94 f1 1a 	jmp	0x35e2	; 0x35e2 <_ZN5Print5printEmi>

00003608 <_ZN5Print5printEli>:
    3608:	cf 92       	push	r12
    360a:	df 92       	push	r13
    360c:	ef 92       	push	r14
    360e:	ff 92       	push	r15
    3610:	0f 93       	push	r16
    3612:	1f 93       	push	r17
    3614:	cf 93       	push	r28
    3616:	df 93       	push	r29
    3618:	21 15       	cp	r18, r1
    361a:	31 05       	cpc	r19, r1
    361c:	81 f4       	brne	.+32     	; 0x363e <_ZN5Print5printEli+0x36>
    361e:	dc 01       	movw	r26, r24
    3620:	ed 91       	ld	r30, X+
    3622:	fc 91       	ld	r31, X
    3624:	01 90       	ld	r0, Z+
    3626:	f0 81       	ld	r31, Z
    3628:	e0 2d       	mov	r30, r0
    362a:	64 2f       	mov	r22, r20
    362c:	df 91       	pop	r29
    362e:	cf 91       	pop	r28
    3630:	1f 91       	pop	r17
    3632:	0f 91       	pop	r16
    3634:	ff 90       	pop	r15
    3636:	ef 90       	pop	r14
    3638:	df 90       	pop	r13
    363a:	cf 90       	pop	r12
    363c:	09 94       	ijmp
    363e:	2a 30       	cpi	r18, 0x0A	; 10
    3640:	31 05       	cpc	r19, r1
    3642:	01 f5       	brne	.+64     	; 0x3684 <_ZN5Print5printEli+0x7c>
    3644:	77 ff       	sbrs	r23, 7
    3646:	1d c0       	rjmp	.+58     	; 0x3682 <_ZN5Print5printEli+0x7a>
    3648:	6a 01       	movw	r12, r20
    364a:	7b 01       	movw	r14, r22
    364c:	ec 01       	movw	r28, r24
    364e:	6d e2       	ldi	r22, 0x2D	; 45
    3650:	0e 94 8b 1a 	call	0x3516	; 0x3516 <_ZN5Print5printEc>
    3654:	8c 01       	movw	r16, r24
    3656:	44 27       	eor	r20, r20
    3658:	55 27       	eor	r21, r21
    365a:	ba 01       	movw	r22, r20
    365c:	4c 19       	sub	r20, r12
    365e:	5d 09       	sbc	r21, r13
    3660:	6e 09       	sbc	r22, r14
    3662:	7f 09       	sbc	r23, r15
    3664:	2a e0       	ldi	r18, 0x0A	; 10
    3666:	ce 01       	movw	r24, r28
    3668:	0e 94 a8 1a 	call	0x3550	; 0x3550 <_ZN5Print11printNumberEmh>
    366c:	80 0f       	add	r24, r16
    366e:	91 1f       	adc	r25, r17
    3670:	df 91       	pop	r29
    3672:	cf 91       	pop	r28
    3674:	1f 91       	pop	r17
    3676:	0f 91       	pop	r16
    3678:	ff 90       	pop	r15
    367a:	ef 90       	pop	r14
    367c:	df 90       	pop	r13
    367e:	cf 90       	pop	r12
    3680:	08 95       	ret
    3682:	2a e0       	ldi	r18, 0x0A	; 10
    3684:	df 91       	pop	r29
    3686:	cf 91       	pop	r28
    3688:	1f 91       	pop	r17
    368a:	0f 91       	pop	r16
    368c:	ff 90       	pop	r15
    368e:	ef 90       	pop	r14
    3690:	df 90       	pop	r13
    3692:	cf 90       	pop	r12
    3694:	0c 94 a8 1a 	jmp	0x3550	; 0x3550 <_ZN5Print11printNumberEmh>

00003698 <_ZN5Print5printEii>:
    3698:	9a 01       	movw	r18, r20
    369a:	ab 01       	movw	r20, r22
    369c:	77 0f       	add	r23, r23
    369e:	66 0b       	sbc	r22, r22
    36a0:	77 0b       	sbc	r23, r23
    36a2:	0c 94 04 1b 	jmp	0x3608	; 0x3608 <_ZN5Print5printEli>

000036a6 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
    36a6:	7f 92       	push	r7
    36a8:	8f 92       	push	r8
    36aa:	9f 92       	push	r9
    36ac:	af 92       	push	r10
    36ae:	bf 92       	push	r11
    36b0:	cf 92       	push	r12
    36b2:	df 92       	push	r13
    36b4:	ef 92       	push	r14
    36b6:	ff 92       	push	r15
    36b8:	0f 93       	push	r16
    36ba:	1f 93       	push	r17
    36bc:	cf 93       	push	r28
    36be:	df 93       	push	r29
    36c0:	8c 01       	movw	r16, r24
    36c2:	6a 01       	movw	r12, r20
    36c4:	7b 01       	movw	r14, r22
    36c6:	72 2e       	mov	r7, r18
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
    36c8:	9a 01       	movw	r18, r20
    36ca:	ab 01       	movw	r20, r22
    36cc:	c7 01       	movw	r24, r14
    36ce:	b6 01       	movw	r22, r12
    36d0:	0e 94 5c 1d 	call	0x3ab8	; 0x3ab8 <__unordsf2>
    36d4:	88 23       	and	r24, r24
    36d6:	19 f0       	breq	.+6      	; 0x36de <_ZN5Print10printFloatEdh+0x38>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    36d8:	66 e9       	ldi	r22, 0x96	; 150
    36da:	72 e0       	ldi	r23, 0x02	; 2
    36dc:	27 c0       	rjmp	.+78     	; 0x372c <_ZN5Print10printFloatEdh+0x86>
size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
    36de:	46 01       	movw	r8, r12
    36e0:	57 01       	movw	r10, r14
    36e2:	e8 94       	clt
    36e4:	b7 f8       	bld	r11, 7
    36e6:	2f ef       	ldi	r18, 0xFF	; 255
    36e8:	3f ef       	ldi	r19, 0xFF	; 255
    36ea:	4f e7       	ldi	r20, 0x7F	; 127
    36ec:	5f e7       	ldi	r21, 0x7F	; 127
    36ee:	c5 01       	movw	r24, r10
    36f0:	b4 01       	movw	r22, r8
    36f2:	0e 94 5c 1d 	call	0x3ab8	; 0x3ab8 <__unordsf2>
    36f6:	81 11       	cpse	r24, r1
    36f8:	0d c0       	rjmp	.+26     	; 0x3714 <_ZN5Print10printFloatEdh+0x6e>
    36fa:	2f ef       	ldi	r18, 0xFF	; 255
    36fc:	3f ef       	ldi	r19, 0xFF	; 255
    36fe:	4f e7       	ldi	r20, 0x7F	; 127
    3700:	5f e7       	ldi	r21, 0x7F	; 127
    3702:	c5 01       	movw	r24, r10
    3704:	b4 01       	movw	r22, r8
    3706:	0e 94 6b 16 	call	0x2cd6	; 0x2cd6 <__cmpsf2>
    370a:	18 16       	cp	r1, r24
    370c:	1c f4       	brge	.+6      	; 0x3714 <_ZN5Print10printFloatEdh+0x6e>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    370e:	6a e9       	ldi	r22, 0x9A	; 154
    3710:	72 e0       	ldi	r23, 0x02	; 2
    3712:	0c c0       	rjmp	.+24     	; 0x372c <_ZN5Print10printFloatEdh+0x86>
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
    3714:	2f ef       	ldi	r18, 0xFF	; 255
    3716:	3f ef       	ldi	r19, 0xFF	; 255
    3718:	4f e7       	ldi	r20, 0x7F	; 127
    371a:	5f e4       	ldi	r21, 0x4F	; 79
    371c:	c7 01       	movw	r24, r14
    371e:	b6 01       	movw	r22, r12
    3720:	0e 94 f1 17 	call	0x2fe2	; 0x2fe2 <__gesf2>
    3724:	18 16       	cp	r1, r24
    3726:	94 f4       	brge	.+36     	; 0x374c <_ZN5Print10printFloatEdh+0xa6>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    3728:	6e e9       	ldi	r22, 0x9E	; 158
    372a:	72 e0       	ldi	r23, 0x02	; 2
    372c:	c8 01       	movw	r24, r16
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    372e:	df 91       	pop	r29
    3730:	cf 91       	pop	r28
    3732:	1f 91       	pop	r17
    3734:	0f 91       	pop	r16
    3736:	ff 90       	pop	r15
    3738:	ef 90       	pop	r14
    373a:	df 90       	pop	r13
    373c:	cf 90       	pop	r12
    373e:	bf 90       	pop	r11
    3740:	af 90       	pop	r10
    3742:	9f 90       	pop	r9
    3744:	8f 90       	pop	r8
    3746:	7f 90       	pop	r7
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    3748:	0c 94 74 1a 	jmp	0x34e8	; 0x34e8 <_ZN5Print5writeEPKc>
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
    374c:	2f ef       	ldi	r18, 0xFF	; 255
    374e:	3f ef       	ldi	r19, 0xFF	; 255
    3750:	4f e7       	ldi	r20, 0x7F	; 127
    3752:	5f ec       	ldi	r21, 0xCF	; 207
    3754:	c7 01       	movw	r24, r14
    3756:	b6 01       	movw	r22, r12
    3758:	0e 94 6b 16 	call	0x2cd6	; 0x2cd6 <__cmpsf2>
    375c:	87 fd       	sbrc	r24, 7
    375e:	e4 cf       	rjmp	.-56     	; 0x3728 <_ZN5Print10printFloatEdh+0x82>
  
  // Handle negative numbers
  if (number < 0.0)
    3760:	20 e0       	ldi	r18, 0x00	; 0
    3762:	30 e0       	ldi	r19, 0x00	; 0
    3764:	a9 01       	movw	r20, r18
    3766:	c7 01       	movw	r24, r14
    3768:	b6 01       	movw	r22, r12
    376a:	0e 94 6b 16 	call	0x2cd6	; 0x2cd6 <__cmpsf2>
    376e:	87 ff       	sbrs	r24, 7
    3770:	0a c0       	rjmp	.+20     	; 0x3786 <_ZN5Print10printFloatEdh+0xe0>
  {
     n += print('-');
    3772:	6d e2       	ldi	r22, 0x2D	; 45
    3774:	c8 01       	movw	r24, r16
    3776:	0e 94 8b 1a 	call	0x3516	; 0x3516 <_ZN5Print5printEc>
    377a:	ec 01       	movw	r28, r24
     number = -number;
    377c:	f7 fa       	bst	r15, 7
    377e:	f0 94       	com	r15
    3780:	f7 f8       	bld	r15, 7
    3782:	f0 94       	com	r15
    3784:	02 c0       	rjmp	.+4      	; 0x378a <_ZN5Print10printFloatEdh+0xe4>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
    3786:	c0 e0       	ldi	r28, 0x00	; 0
    3788:	d0 e0       	ldi	r29, 0x00	; 0
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    378a:	b1 2c       	mov	r11, r1
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
    378c:	60 e0       	ldi	r22, 0x00	; 0
    378e:	70 e0       	ldi	r23, 0x00	; 0
    3790:	80 e0       	ldi	r24, 0x00	; 0
    3792:	9f e3       	ldi	r25, 0x3F	; 63
  for (uint8_t i=0; i<digits; ++i)
    3794:	7b 14       	cp	r7, r11
    3796:	41 f0       	breq	.+16     	; 0x37a8 <_ZN5Print10printFloatEdh+0x102>
    rounding /= 10.0;
    3798:	20 e0       	ldi	r18, 0x00	; 0
    379a:	30 e0       	ldi	r19, 0x00	; 0
    379c:	40 e2       	ldi	r20, 0x20	; 32
    379e:	51 e4       	ldi	r21, 0x41	; 65
    37a0:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <__divsf3>
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    37a4:	b3 94       	inc	r11
    37a6:	f6 cf       	rjmp	.-20     	; 0x3794 <_ZN5Print10printFloatEdh+0xee>
    rounding /= 10.0;
  
  number += rounding;
    37a8:	a7 01       	movw	r20, r14
    37aa:	96 01       	movw	r18, r12
    37ac:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <__addsf3>
    37b0:	6b 01       	movw	r12, r22
    37b2:	7c 01       	movw	r14, r24

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
    37b4:	0e 94 e9 16 	call	0x2dd2	; 0x2dd2 <__fixunssfsi>
    37b8:	4b 01       	movw	r8, r22
    37ba:	5c 01       	movw	r10, r24
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
    37bc:	2a e0       	ldi	r18, 0x0A	; 10
    37be:	ab 01       	movw	r20, r22
    37c0:	bc 01       	movw	r22, r24
    37c2:	c8 01       	movw	r24, r16
    37c4:	0e 94 a8 1a 	call	0x3550	; 0x3550 <_ZN5Print11printNumberEmh>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    37c8:	c8 0f       	add	r28, r24
    37ca:	d9 1f       	adc	r29, r25

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    37cc:	77 20       	and	r7, r7
    37ce:	b9 f1       	breq	.+110    	; 0x383e <_ZN5Print10printFloatEdh+0x198>
  
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
    37d0:	c5 01       	movw	r24, r10
    37d2:	b4 01       	movw	r22, r8
    37d4:	0e 94 18 17 	call	0x2e30	; 0x2e30 <__floatunsisf>
    37d8:	9b 01       	movw	r18, r22
    37da:	ac 01       	movw	r20, r24
    37dc:	c7 01       	movw	r24, r14
    37de:	b6 01       	movw	r22, r12
    37e0:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <__subsf3>
    37e4:	6b 01       	movw	r12, r22
    37e6:	7c 01       	movw	r14, r24
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print('.'); 
    37e8:	6e e2       	ldi	r22, 0x2E	; 46
    37ea:	c8 01       	movw	r24, r16
    37ec:	0e 94 8b 1a 	call	0x3516	; 0x3516 <_ZN5Print5printEc>
    37f0:	c8 0f       	add	r28, r24
    37f2:	d9 1f       	adc	r29, r25
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    37f4:	20 e0       	ldi	r18, 0x00	; 0
    37f6:	30 e0       	ldi	r19, 0x00	; 0
    37f8:	40 e2       	ldi	r20, 0x20	; 32
    37fa:	51 e4       	ldi	r21, 0x41	; 65
    37fc:	c7 01       	movw	r24, r14
    37fe:	b6 01       	movw	r22, r12
    3800:	0e 94 fe 17 	call	0x2ffc	; 0x2ffc <__mulsf3>
    3804:	4b 01       	movw	r8, r22
    3806:	5c 01       	movw	r10, r24
    unsigned int toPrint = (unsigned int)(remainder);
    3808:	0e 94 e9 16 	call	0x2dd2	; 0x2dd2 <__fixunssfsi>
    380c:	6b 01       	movw	r12, r22
    380e:	7c 01       	movw	r14, r24
    n += print(toPrint);
    3810:	4a e0       	ldi	r20, 0x0A	; 10
    3812:	50 e0       	ldi	r21, 0x00	; 0
    3814:	c8 01       	movw	r24, r16
    3816:	0e 94 fe 1a 	call	0x35fc	; 0x35fc <_ZN5Print5printEji>
    381a:	c8 0f       	add	r28, r24
    381c:	d9 1f       	adc	r29, r25
    remainder -= toPrint; 
    381e:	b6 01       	movw	r22, r12
    3820:	80 e0       	ldi	r24, 0x00	; 0
    3822:	90 e0       	ldi	r25, 0x00	; 0
    3824:	0e 94 18 17 	call	0x2e30	; 0x2e30 <__floatunsisf>
    3828:	9b 01       	movw	r18, r22
    382a:	ac 01       	movw	r20, r24
    382c:	c5 01       	movw	r24, r10
    382e:	b4 01       	movw	r22, r8
    3830:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <__subsf3>
    3834:	6b 01       	movw	r12, r22
    3836:	7c 01       	movw	r14, r24
    3838:	7a 94       	dec	r7
  if (digits > 0) {
    n += print('.'); 
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
    383a:	71 10       	cpse	r7, r1
    383c:	db cf       	rjmp	.-74     	; 0x37f4 <_ZN5Print10printFloatEdh+0x14e>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    383e:	ce 01       	movw	r24, r28
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    3840:	df 91       	pop	r29
    3842:	cf 91       	pop	r28
    3844:	1f 91       	pop	r17
    3846:	0f 91       	pop	r16
    3848:	ff 90       	pop	r15
    384a:	ef 90       	pop	r14
    384c:	df 90       	pop	r13
    384e:	cf 90       	pop	r12
    3850:	bf 90       	pop	r11
    3852:	af 90       	pop	r10
    3854:	9f 90       	pop	r9
    3856:	8f 90       	pop	r8
    3858:	7f 90       	pop	r7
    385a:	08 95       	ret

0000385c <_ZN5Print5printEdi>:
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    385c:	0c 94 53 1b 	jmp	0x36a6	; 0x36a6 <_ZN5Print10printFloatEdh>

00003860 <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
    3860:	1f 92       	push	r1
    3862:	0f 92       	push	r0
    3864:	0f b6       	in	r0, 0x3f	; 63
    3866:	0f 92       	push	r0
    3868:	11 24       	eor	r1, r1
    386a:	2f 93       	push	r18
    386c:	3f 93       	push	r19
    386e:	8f 93       	push	r24
    3870:	9f 93       	push	r25
    3872:	af 93       	push	r26
    3874:	bf 93       	push	r27
    3876:	80 91 d6 04 	lds	r24, 0x04D6	; 0x8004d6 <timer0_millis>
    387a:	90 91 d7 04 	lds	r25, 0x04D7	; 0x8004d7 <timer0_millis+0x1>
    387e:	a0 91 d8 04 	lds	r26, 0x04D8	; 0x8004d8 <timer0_millis+0x2>
    3882:	b0 91 d9 04 	lds	r27, 0x04D9	; 0x8004d9 <timer0_millis+0x3>
    3886:	30 91 d5 04 	lds	r19, 0x04D5	; 0x8004d5 <timer0_fract>
    388a:	20 e1       	ldi	r18, 0x10	; 16
    388c:	23 0f       	add	r18, r19
    388e:	2d 37       	cpi	r18, 0x7D	; 125
    3890:	28 f0       	brcs	.+10     	; 0x389c <__vector_16+0x3c>
    3892:	23 e9       	ldi	r18, 0x93	; 147
    3894:	23 0f       	add	r18, r19
    3896:	01 96       	adiw	r24, 0x01	; 1
    3898:	a1 1d       	adc	r26, r1
    389a:	b1 1d       	adc	r27, r1
    389c:	20 93 d5 04 	sts	0x04D5, r18	; 0x8004d5 <timer0_fract>
    38a0:	80 93 d6 04 	sts	0x04D6, r24	; 0x8004d6 <timer0_millis>
    38a4:	90 93 d7 04 	sts	0x04D7, r25	; 0x8004d7 <timer0_millis+0x1>
    38a8:	a0 93 d8 04 	sts	0x04D8, r26	; 0x8004d8 <timer0_millis+0x2>
    38ac:	b0 93 d9 04 	sts	0x04D9, r27	; 0x8004d9 <timer0_millis+0x3>
    38b0:	80 91 da 04 	lds	r24, 0x04DA	; 0x8004da <timer0_overflow_count>
    38b4:	90 91 db 04 	lds	r25, 0x04DB	; 0x8004db <timer0_overflow_count+0x1>
    38b8:	a0 91 dc 04 	lds	r26, 0x04DC	; 0x8004dc <timer0_overflow_count+0x2>
    38bc:	b0 91 dd 04 	lds	r27, 0x04DD	; 0x8004dd <timer0_overflow_count+0x3>
    38c0:	01 96       	adiw	r24, 0x01	; 1
    38c2:	a1 1d       	adc	r26, r1
    38c4:	b1 1d       	adc	r27, r1
    38c6:	80 93 da 04 	sts	0x04DA, r24	; 0x8004da <timer0_overflow_count>
    38ca:	90 93 db 04 	sts	0x04DB, r25	; 0x8004db <timer0_overflow_count+0x1>
    38ce:	a0 93 dc 04 	sts	0x04DC, r26	; 0x8004dc <timer0_overflow_count+0x2>
    38d2:	b0 93 dd 04 	sts	0x04DD, r27	; 0x8004dd <timer0_overflow_count+0x3>
    38d6:	bf 91       	pop	r27
    38d8:	af 91       	pop	r26
    38da:	9f 91       	pop	r25
    38dc:	8f 91       	pop	r24
    38de:	3f 91       	pop	r19
    38e0:	2f 91       	pop	r18
    38e2:	0f 90       	pop	r0
    38e4:	0f be       	out	0x3f, r0	; 63
    38e6:	0f 90       	pop	r0
    38e8:	1f 90       	pop	r1
    38ea:	18 95       	reti

000038ec <millis>:
    38ec:	2f b7       	in	r18, 0x3f	; 63
    38ee:	f8 94       	cli
    38f0:	60 91 d6 04 	lds	r22, 0x04D6	; 0x8004d6 <timer0_millis>
    38f4:	70 91 d7 04 	lds	r23, 0x04D7	; 0x8004d7 <timer0_millis+0x1>
    38f8:	80 91 d8 04 	lds	r24, 0x04D8	; 0x8004d8 <timer0_millis+0x2>
    38fc:	90 91 d9 04 	lds	r25, 0x04D9	; 0x8004d9 <timer0_millis+0x3>
    3900:	2f bf       	out	0x3f, r18	; 63
    3902:	08 95       	ret

00003904 <micros>:
    3904:	3f b7       	in	r19, 0x3f	; 63
    3906:	f8 94       	cli
    3908:	80 91 da 04 	lds	r24, 0x04DA	; 0x8004da <timer0_overflow_count>
    390c:	90 91 db 04 	lds	r25, 0x04DB	; 0x8004db <timer0_overflow_count+0x1>
    3910:	a0 91 dc 04 	lds	r26, 0x04DC	; 0x8004dc <timer0_overflow_count+0x2>
    3914:	b0 91 dd 04 	lds	r27, 0x04DD	; 0x8004dd <timer0_overflow_count+0x3>
    3918:	26 b5       	in	r18, 0x26	; 38
    391a:	a8 9b       	sbis	0x15, 0	; 21
    391c:	05 c0       	rjmp	.+10     	; 0x3928 <micros+0x24>
    391e:	2f 3f       	cpi	r18, 0xFF	; 255
    3920:	19 f0       	breq	.+6      	; 0x3928 <micros+0x24>
    3922:	01 96       	adiw	r24, 0x01	; 1
    3924:	a1 1d       	adc	r26, r1
    3926:	b1 1d       	adc	r27, r1
    3928:	3f bf       	out	0x3f, r19	; 63
    392a:	ba 2f       	mov	r27, r26
    392c:	a9 2f       	mov	r26, r25
    392e:	98 2f       	mov	r25, r24
    3930:	88 27       	eor	r24, r24
    3932:	82 0f       	add	r24, r18
    3934:	91 1d       	adc	r25, r1
    3936:	a1 1d       	adc	r26, r1
    3938:	b1 1d       	adc	r27, r1
    393a:	bc 01       	movw	r22, r24
    393c:	cd 01       	movw	r24, r26
    393e:	96 95       	lsr	r25
    3940:	87 95       	ror	r24
    3942:	77 95       	ror	r23
    3944:	67 95       	ror	r22
    3946:	08 95       	ret

00003948 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    3948:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    394a:	84 b5       	in	r24, 0x24	; 36
    394c:	82 60       	ori	r24, 0x02	; 2
    394e:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    3950:	84 b5       	in	r24, 0x24	; 36
    3952:	81 60       	ori	r24, 0x01	; 1
    3954:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    3956:	85 b5       	in	r24, 0x25	; 37
    3958:	82 60       	ori	r24, 0x02	; 2
    395a:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    395c:	85 b5       	in	r24, 0x25	; 37
    395e:	81 60       	ori	r24, 0x01	; 1
    3960:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    3962:	ee e6       	ldi	r30, 0x6E	; 110
    3964:	f0 e0       	ldi	r31, 0x00	; 0
    3966:	80 81       	ld	r24, Z
    3968:	81 60       	ori	r24, 0x01	; 1
    396a:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    396c:	e1 e8       	ldi	r30, 0x81	; 129
    396e:	f0 e0       	ldi	r31, 0x00	; 0
    3970:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    3972:	80 81       	ld	r24, Z
    3974:	82 60       	ori	r24, 0x02	; 2
    3976:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    3978:	80 81       	ld	r24, Z
    397a:	81 60       	ori	r24, 0x01	; 1
    397c:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    397e:	e0 e8       	ldi	r30, 0x80	; 128
    3980:	f0 e0       	ldi	r31, 0x00	; 0
    3982:	80 81       	ld	r24, Z
    3984:	81 60       	ori	r24, 0x01	; 1
    3986:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    3988:	e1 eb       	ldi	r30, 0xB1	; 177
    398a:	f0 e0       	ldi	r31, 0x00	; 0
    398c:	80 81       	ld	r24, Z
    398e:	84 60       	ori	r24, 0x04	; 4
    3990:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    3992:	e0 eb       	ldi	r30, 0xB0	; 176
    3994:	f0 e0       	ldi	r31, 0x00	; 0
    3996:	80 81       	ld	r24, Z
    3998:	81 60       	ori	r24, 0x01	; 1
    399a:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    399c:	ea e7       	ldi	r30, 0x7A	; 122
    399e:	f0 e0       	ldi	r31, 0x00	; 0
    39a0:	80 81       	ld	r24, Z
    39a2:	84 60       	ori	r24, 0x04	; 4
    39a4:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    39a6:	80 81       	ld	r24, Z
    39a8:	82 60       	ori	r24, 0x02	; 2
    39aa:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    39ac:	80 81       	ld	r24, Z
    39ae:	81 60       	ori	r24, 0x01	; 1
    39b0:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    39b2:	80 81       	ld	r24, Z
    39b4:	80 68       	ori	r24, 0x80	; 128
    39b6:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    39b8:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    39bc:	08 95       	ret

000039be <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    39be:	cf 93       	push	r28
    39c0:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    39c2:	90 e0       	ldi	r25, 0x00	; 0
    39c4:	fc 01       	movw	r30, r24
    39c6:	e7 5f       	subi	r30, 0xF7	; 247
    39c8:	fe 4f       	sbci	r31, 0xFE	; 254
    39ca:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    39cc:	fc 01       	movw	r30, r24
    39ce:	e3 5e       	subi	r30, 0xE3	; 227
    39d0:	fe 4f       	sbci	r31, 0xFE	; 254
    39d2:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    39d4:	88 23       	and	r24, r24
    39d6:	61 f1       	breq	.+88     	; 0x3a30 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    39d8:	90 e0       	ldi	r25, 0x00	; 0
    39da:	88 0f       	add	r24, r24
    39dc:	99 1f       	adc	r25, r25
    39de:	fc 01       	movw	r30, r24
    39e0:	eb 5b       	subi	r30, 0xBB	; 187
    39e2:	fe 4f       	sbci	r31, 0xFE	; 254
    39e4:	c5 91       	lpm	r28, Z+
    39e6:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    39e8:	fc 01       	movw	r30, r24
    39ea:	e5 5c       	subi	r30, 0xC5	; 197
    39ec:	fe 4f       	sbci	r31, 0xFE	; 254
    39ee:	a5 91       	lpm	r26, Z+
    39f0:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    39f2:	61 11       	cpse	r22, r1
    39f4:	09 c0       	rjmp	.+18     	; 0x3a08 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    39f6:	9f b7       	in	r25, 0x3f	; 63
                cli();
    39f8:	f8 94       	cli
		*reg &= ~bit;
    39fa:	88 81       	ld	r24, Y
    39fc:	20 95       	com	r18
    39fe:	82 23       	and	r24, r18
    3a00:	88 83       	st	Y, r24
		*out &= ~bit;
    3a02:	ec 91       	ld	r30, X
    3a04:	2e 23       	and	r18, r30
    3a06:	0b c0       	rjmp	.+22     	; 0x3a1e <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    3a08:	62 30       	cpi	r22, 0x02	; 2
    3a0a:	61 f4       	brne	.+24     	; 0x3a24 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    3a0c:	9f b7       	in	r25, 0x3f	; 63
                cli();
    3a0e:	f8 94       	cli
		*reg &= ~bit;
    3a10:	88 81       	ld	r24, Y
    3a12:	32 2f       	mov	r19, r18
    3a14:	30 95       	com	r19
    3a16:	83 23       	and	r24, r19
    3a18:	88 83       	st	Y, r24
		*out |= bit;
    3a1a:	ec 91       	ld	r30, X
    3a1c:	2e 2b       	or	r18, r30
    3a1e:	2c 93       	st	X, r18
		SREG = oldSREG;
    3a20:	9f bf       	out	0x3f, r25	; 63
    3a22:	06 c0       	rjmp	.+12     	; 0x3a30 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    3a24:	8f b7       	in	r24, 0x3f	; 63
                cli();
    3a26:	f8 94       	cli
		*reg |= bit;
    3a28:	e8 81       	ld	r30, Y
    3a2a:	2e 2b       	or	r18, r30
    3a2c:	28 83       	st	Y, r18
		SREG = oldSREG;
    3a2e:	8f bf       	out	0x3f, r24	; 63
	}
}
    3a30:	df 91       	pop	r29
    3a32:	cf 91       	pop	r28
    3a34:	08 95       	ret

00003a36 <_Z3maplllll>:
  long diff = howbig - howsmall;
  return random(diff) + howsmall;
}

long map(long x, long in_min, long in_max, long out_min, long out_max)
{
    3a36:	4f 92       	push	r4
    3a38:	5f 92       	push	r5
    3a3a:	6f 92       	push	r6
    3a3c:	7f 92       	push	r7
    3a3e:	af 92       	push	r10
    3a40:	bf 92       	push	r11
    3a42:	cf 92       	push	r12
    3a44:	df 92       	push	r13
    3a46:	ef 92       	push	r14
    3a48:	ff 92       	push	r15
    3a4a:	0f 93       	push	r16
    3a4c:	1f 93       	push	r17
    3a4e:	cf 93       	push	r28
    3a50:	df 93       	push	r29
    3a52:	cd b7       	in	r28, 0x3d	; 61
    3a54:	de b7       	in	r29, 0x3e	; 62
    3a56:	29 01       	movw	r4, r18
    3a58:	3a 01       	movw	r6, r20
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    3a5a:	9b 01       	movw	r18, r22
    3a5c:	ac 01       	movw	r20, r24
    3a5e:	24 19       	sub	r18, r4
    3a60:	35 09       	sbc	r19, r5
    3a62:	46 09       	sbc	r20, r6
    3a64:	57 09       	sbc	r21, r7
    3a66:	89 89       	ldd	r24, Y+17	; 0x11
    3a68:	9a 89       	ldd	r25, Y+18	; 0x12
    3a6a:	ab 89       	ldd	r26, Y+19	; 0x13
    3a6c:	bc 89       	ldd	r27, Y+20	; 0x14
    3a6e:	bc 01       	movw	r22, r24
    3a70:	cd 01       	movw	r24, r26
    3a72:	6a 19       	sub	r22, r10
    3a74:	7b 09       	sbc	r23, r11
    3a76:	8c 09       	sbc	r24, r12
    3a78:	9d 09       	sbc	r25, r13
    3a7a:	0e 94 61 1d 	call	0x3ac2	; 0x3ac2 <__mulsi3>
    3a7e:	a8 01       	movw	r20, r16
    3a80:	97 01       	movw	r18, r14
    3a82:	24 19       	sub	r18, r4
    3a84:	35 09       	sbc	r19, r5
    3a86:	46 09       	sbc	r20, r6
    3a88:	57 09       	sbc	r21, r7
    3a8a:	0e 94 93 1d 	call	0x3b26	; 0x3b26 <__divmodsi4>
    3a8e:	ca 01       	movw	r24, r20
    3a90:	b9 01       	movw	r22, r18
    3a92:	6a 0d       	add	r22, r10
    3a94:	7b 1d       	adc	r23, r11
    3a96:	8c 1d       	adc	r24, r12
    3a98:	9d 1d       	adc	r25, r13
}
    3a9a:	df 91       	pop	r29
    3a9c:	cf 91       	pop	r28
    3a9e:	1f 91       	pop	r17
    3aa0:	0f 91       	pop	r16
    3aa2:	ff 90       	pop	r15
    3aa4:	ef 90       	pop	r14
    3aa6:	df 90       	pop	r13
    3aa8:	cf 90       	pop	r12
    3aaa:	bf 90       	pop	r11
    3aac:	af 90       	pop	r10
    3aae:	7f 90       	pop	r7
    3ab0:	6f 90       	pop	r6
    3ab2:	5f 90       	pop	r5
    3ab4:	4f 90       	pop	r4
    3ab6:	08 95       	ret

00003ab8 <__unordsf2>:
    3ab8:	0e 94 55 17 	call	0x2eaa	; 0x2eaa <__fp_cmp>
    3abc:	88 0b       	sbc	r24, r24
    3abe:	99 0b       	sbc	r25, r25
    3ac0:	08 95       	ret

00003ac2 <__mulsi3>:
    3ac2:	db 01       	movw	r26, r22
    3ac4:	8f 93       	push	r24
    3ac6:	9f 93       	push	r25
    3ac8:	0e 94 b8 1d 	call	0x3b70	; 0x3b70 <__muluhisi3>
    3acc:	bf 91       	pop	r27
    3ace:	af 91       	pop	r26
    3ad0:	a2 9f       	mul	r26, r18
    3ad2:	80 0d       	add	r24, r0
    3ad4:	91 1d       	adc	r25, r1
    3ad6:	a3 9f       	mul	r26, r19
    3ad8:	90 0d       	add	r25, r0
    3ada:	b2 9f       	mul	r27, r18
    3adc:	90 0d       	add	r25, r0
    3ade:	11 24       	eor	r1, r1
    3ae0:	08 95       	ret

00003ae2 <__udivmodsi4>:
    3ae2:	a1 e2       	ldi	r26, 0x21	; 33
    3ae4:	1a 2e       	mov	r1, r26
    3ae6:	aa 1b       	sub	r26, r26
    3ae8:	bb 1b       	sub	r27, r27
    3aea:	fd 01       	movw	r30, r26
    3aec:	0d c0       	rjmp	.+26     	; 0x3b08 <__udivmodsi4_ep>

00003aee <__udivmodsi4_loop>:
    3aee:	aa 1f       	adc	r26, r26
    3af0:	bb 1f       	adc	r27, r27
    3af2:	ee 1f       	adc	r30, r30
    3af4:	ff 1f       	adc	r31, r31
    3af6:	a2 17       	cp	r26, r18
    3af8:	b3 07       	cpc	r27, r19
    3afa:	e4 07       	cpc	r30, r20
    3afc:	f5 07       	cpc	r31, r21
    3afe:	20 f0       	brcs	.+8      	; 0x3b08 <__udivmodsi4_ep>
    3b00:	a2 1b       	sub	r26, r18
    3b02:	b3 0b       	sbc	r27, r19
    3b04:	e4 0b       	sbc	r30, r20
    3b06:	f5 0b       	sbc	r31, r21

00003b08 <__udivmodsi4_ep>:
    3b08:	66 1f       	adc	r22, r22
    3b0a:	77 1f       	adc	r23, r23
    3b0c:	88 1f       	adc	r24, r24
    3b0e:	99 1f       	adc	r25, r25
    3b10:	1a 94       	dec	r1
    3b12:	69 f7       	brne	.-38     	; 0x3aee <__udivmodsi4_loop>
    3b14:	60 95       	com	r22
    3b16:	70 95       	com	r23
    3b18:	80 95       	com	r24
    3b1a:	90 95       	com	r25
    3b1c:	9b 01       	movw	r18, r22
    3b1e:	ac 01       	movw	r20, r24
    3b20:	bd 01       	movw	r22, r26
    3b22:	cf 01       	movw	r24, r30
    3b24:	08 95       	ret

00003b26 <__divmodsi4>:
    3b26:	05 2e       	mov	r0, r21
    3b28:	97 fb       	bst	r25, 7
    3b2a:	1e f4       	brtc	.+6      	; 0x3b32 <__divmodsi4+0xc>
    3b2c:	00 94       	com	r0
    3b2e:	0e 94 aa 1d 	call	0x3b54	; 0x3b54 <__negsi2>
    3b32:	57 fd       	sbrc	r21, 7
    3b34:	07 d0       	rcall	.+14     	; 0x3b44 <__divmodsi4_neg2>
    3b36:	0e 94 71 1d 	call	0x3ae2	; 0x3ae2 <__udivmodsi4>
    3b3a:	07 fc       	sbrc	r0, 7
    3b3c:	03 d0       	rcall	.+6      	; 0x3b44 <__divmodsi4_neg2>
    3b3e:	4e f4       	brtc	.+18     	; 0x3b52 <__divmodsi4_exit>
    3b40:	0c 94 aa 1d 	jmp	0x3b54	; 0x3b54 <__negsi2>

00003b44 <__divmodsi4_neg2>:
    3b44:	50 95       	com	r21
    3b46:	40 95       	com	r20
    3b48:	30 95       	com	r19
    3b4a:	21 95       	neg	r18
    3b4c:	3f 4f       	sbci	r19, 0xFF	; 255
    3b4e:	4f 4f       	sbci	r20, 0xFF	; 255
    3b50:	5f 4f       	sbci	r21, 0xFF	; 255

00003b52 <__divmodsi4_exit>:
    3b52:	08 95       	ret

00003b54 <__negsi2>:
    3b54:	90 95       	com	r25
    3b56:	80 95       	com	r24
    3b58:	70 95       	com	r23
    3b5a:	61 95       	neg	r22
    3b5c:	7f 4f       	sbci	r23, 0xFF	; 255
    3b5e:	8f 4f       	sbci	r24, 0xFF	; 255
    3b60:	9f 4f       	sbci	r25, 0xFF	; 255
    3b62:	08 95       	ret

00003b64 <__tablejump2__>:
    3b64:	ee 0f       	add	r30, r30
    3b66:	ff 1f       	adc	r31, r31
    3b68:	05 90       	lpm	r0, Z+
    3b6a:	f4 91       	lpm	r31, Z
    3b6c:	e0 2d       	mov	r30, r0
    3b6e:	09 94       	ijmp

00003b70 <__muluhisi3>:
    3b70:	0e 94 c3 1d 	call	0x3b86	; 0x3b86 <__umulhisi3>
    3b74:	a5 9f       	mul	r26, r21
    3b76:	90 0d       	add	r25, r0
    3b78:	b4 9f       	mul	r27, r20
    3b7a:	90 0d       	add	r25, r0
    3b7c:	a4 9f       	mul	r26, r20
    3b7e:	80 0d       	add	r24, r0
    3b80:	91 1d       	adc	r25, r1
    3b82:	11 24       	eor	r1, r1
    3b84:	08 95       	ret

00003b86 <__umulhisi3>:
    3b86:	a2 9f       	mul	r26, r18
    3b88:	b0 01       	movw	r22, r0
    3b8a:	b3 9f       	mul	r27, r19
    3b8c:	c0 01       	movw	r24, r0
    3b8e:	a3 9f       	mul	r26, r19
    3b90:	70 0d       	add	r23, r0
    3b92:	81 1d       	adc	r24, r1
    3b94:	11 24       	eor	r1, r1
    3b96:	91 1d       	adc	r25, r1
    3b98:	b2 9f       	mul	r27, r18
    3b9a:	70 0d       	add	r23, r0
    3b9c:	81 1d       	adc	r24, r1
    3b9e:	11 24       	eor	r1, r1
    3ba0:	91 1d       	adc	r25, r1
    3ba2:	08 95       	ret

00003ba4 <malloc>:
    3ba4:	0f 93       	push	r16
    3ba6:	1f 93       	push	r17
    3ba8:	cf 93       	push	r28
    3baa:	df 93       	push	r29
    3bac:	82 30       	cpi	r24, 0x02	; 2
    3bae:	91 05       	cpc	r25, r1
    3bb0:	10 f4       	brcc	.+4      	; 0x3bb6 <malloc+0x12>
    3bb2:	82 e0       	ldi	r24, 0x02	; 2
    3bb4:	90 e0       	ldi	r25, 0x00	; 0
    3bb6:	e0 91 e0 04 	lds	r30, 0x04E0	; 0x8004e0 <__flp>
    3bba:	f0 91 e1 04 	lds	r31, 0x04E1	; 0x8004e1 <__flp+0x1>
    3bbe:	20 e0       	ldi	r18, 0x00	; 0
    3bc0:	30 e0       	ldi	r19, 0x00	; 0
    3bc2:	a0 e0       	ldi	r26, 0x00	; 0
    3bc4:	b0 e0       	ldi	r27, 0x00	; 0
    3bc6:	30 97       	sbiw	r30, 0x00	; 0
    3bc8:	19 f1       	breq	.+70     	; 0x3c10 <malloc+0x6c>
    3bca:	40 81       	ld	r20, Z
    3bcc:	51 81       	ldd	r21, Z+1	; 0x01
    3bce:	02 81       	ldd	r16, Z+2	; 0x02
    3bd0:	13 81       	ldd	r17, Z+3	; 0x03
    3bd2:	48 17       	cp	r20, r24
    3bd4:	59 07       	cpc	r21, r25
    3bd6:	c8 f0       	brcs	.+50     	; 0x3c0a <malloc+0x66>
    3bd8:	84 17       	cp	r24, r20
    3bda:	95 07       	cpc	r25, r21
    3bdc:	69 f4       	brne	.+26     	; 0x3bf8 <malloc+0x54>
    3bde:	10 97       	sbiw	r26, 0x00	; 0
    3be0:	31 f0       	breq	.+12     	; 0x3bee <malloc+0x4a>
    3be2:	12 96       	adiw	r26, 0x02	; 2
    3be4:	0c 93       	st	X, r16
    3be6:	12 97       	sbiw	r26, 0x02	; 2
    3be8:	13 96       	adiw	r26, 0x03	; 3
    3bea:	1c 93       	st	X, r17
    3bec:	27 c0       	rjmp	.+78     	; 0x3c3c <malloc+0x98>
    3bee:	00 93 e0 04 	sts	0x04E0, r16	; 0x8004e0 <__flp>
    3bf2:	10 93 e1 04 	sts	0x04E1, r17	; 0x8004e1 <__flp+0x1>
    3bf6:	22 c0       	rjmp	.+68     	; 0x3c3c <malloc+0x98>
    3bf8:	21 15       	cp	r18, r1
    3bfa:	31 05       	cpc	r19, r1
    3bfc:	19 f0       	breq	.+6      	; 0x3c04 <malloc+0x60>
    3bfe:	42 17       	cp	r20, r18
    3c00:	53 07       	cpc	r21, r19
    3c02:	18 f4       	brcc	.+6      	; 0x3c0a <malloc+0x66>
    3c04:	9a 01       	movw	r18, r20
    3c06:	bd 01       	movw	r22, r26
    3c08:	ef 01       	movw	r28, r30
    3c0a:	df 01       	movw	r26, r30
    3c0c:	f8 01       	movw	r30, r16
    3c0e:	db cf       	rjmp	.-74     	; 0x3bc6 <malloc+0x22>
    3c10:	21 15       	cp	r18, r1
    3c12:	31 05       	cpc	r19, r1
    3c14:	f9 f0       	breq	.+62     	; 0x3c54 <malloc+0xb0>
    3c16:	28 1b       	sub	r18, r24
    3c18:	39 0b       	sbc	r19, r25
    3c1a:	24 30       	cpi	r18, 0x04	; 4
    3c1c:	31 05       	cpc	r19, r1
    3c1e:	80 f4       	brcc	.+32     	; 0x3c40 <malloc+0x9c>
    3c20:	8a 81       	ldd	r24, Y+2	; 0x02
    3c22:	9b 81       	ldd	r25, Y+3	; 0x03
    3c24:	61 15       	cp	r22, r1
    3c26:	71 05       	cpc	r23, r1
    3c28:	21 f0       	breq	.+8      	; 0x3c32 <malloc+0x8e>
    3c2a:	fb 01       	movw	r30, r22
    3c2c:	93 83       	std	Z+3, r25	; 0x03
    3c2e:	82 83       	std	Z+2, r24	; 0x02
    3c30:	04 c0       	rjmp	.+8      	; 0x3c3a <malloc+0x96>
    3c32:	90 93 e1 04 	sts	0x04E1, r25	; 0x8004e1 <__flp+0x1>
    3c36:	80 93 e0 04 	sts	0x04E0, r24	; 0x8004e0 <__flp>
    3c3a:	fe 01       	movw	r30, r28
    3c3c:	32 96       	adiw	r30, 0x02	; 2
    3c3e:	44 c0       	rjmp	.+136    	; 0x3cc8 <malloc+0x124>
    3c40:	fe 01       	movw	r30, r28
    3c42:	e2 0f       	add	r30, r18
    3c44:	f3 1f       	adc	r31, r19
    3c46:	81 93       	st	Z+, r24
    3c48:	91 93       	st	Z+, r25
    3c4a:	22 50       	subi	r18, 0x02	; 2
    3c4c:	31 09       	sbc	r19, r1
    3c4e:	39 83       	std	Y+1, r19	; 0x01
    3c50:	28 83       	st	Y, r18
    3c52:	3a c0       	rjmp	.+116    	; 0x3cc8 <malloc+0x124>
    3c54:	20 91 de 04 	lds	r18, 0x04DE	; 0x8004de <__brkval>
    3c58:	30 91 df 04 	lds	r19, 0x04DF	; 0x8004df <__brkval+0x1>
    3c5c:	23 2b       	or	r18, r19
    3c5e:	41 f4       	brne	.+16     	; 0x3c70 <malloc+0xcc>
    3c60:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    3c64:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    3c68:	30 93 df 04 	sts	0x04DF, r19	; 0x8004df <__brkval+0x1>
    3c6c:	20 93 de 04 	sts	0x04DE, r18	; 0x8004de <__brkval>
    3c70:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    3c74:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    3c78:	21 15       	cp	r18, r1
    3c7a:	31 05       	cpc	r19, r1
    3c7c:	41 f4       	brne	.+16     	; 0x3c8e <malloc+0xea>
    3c7e:	2d b7       	in	r18, 0x3d	; 61
    3c80:	3e b7       	in	r19, 0x3e	; 62
    3c82:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    3c86:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    3c8a:	24 1b       	sub	r18, r20
    3c8c:	35 0b       	sbc	r19, r21
    3c8e:	e0 91 de 04 	lds	r30, 0x04DE	; 0x8004de <__brkval>
    3c92:	f0 91 df 04 	lds	r31, 0x04DF	; 0x8004df <__brkval+0x1>
    3c96:	e2 17       	cp	r30, r18
    3c98:	f3 07       	cpc	r31, r19
    3c9a:	a0 f4       	brcc	.+40     	; 0x3cc4 <malloc+0x120>
    3c9c:	2e 1b       	sub	r18, r30
    3c9e:	3f 0b       	sbc	r19, r31
    3ca0:	28 17       	cp	r18, r24
    3ca2:	39 07       	cpc	r19, r25
    3ca4:	78 f0       	brcs	.+30     	; 0x3cc4 <malloc+0x120>
    3ca6:	ac 01       	movw	r20, r24
    3ca8:	4e 5f       	subi	r20, 0xFE	; 254
    3caa:	5f 4f       	sbci	r21, 0xFF	; 255
    3cac:	24 17       	cp	r18, r20
    3cae:	35 07       	cpc	r19, r21
    3cb0:	48 f0       	brcs	.+18     	; 0x3cc4 <malloc+0x120>
    3cb2:	4e 0f       	add	r20, r30
    3cb4:	5f 1f       	adc	r21, r31
    3cb6:	50 93 df 04 	sts	0x04DF, r21	; 0x8004df <__brkval+0x1>
    3cba:	40 93 de 04 	sts	0x04DE, r20	; 0x8004de <__brkval>
    3cbe:	81 93       	st	Z+, r24
    3cc0:	91 93       	st	Z+, r25
    3cc2:	02 c0       	rjmp	.+4      	; 0x3cc8 <malloc+0x124>
    3cc4:	e0 e0       	ldi	r30, 0x00	; 0
    3cc6:	f0 e0       	ldi	r31, 0x00	; 0
    3cc8:	cf 01       	movw	r24, r30
    3cca:	df 91       	pop	r29
    3ccc:	cf 91       	pop	r28
    3cce:	1f 91       	pop	r17
    3cd0:	0f 91       	pop	r16
    3cd2:	08 95       	ret

00003cd4 <free>:
    3cd4:	cf 93       	push	r28
    3cd6:	df 93       	push	r29
    3cd8:	00 97       	sbiw	r24, 0x00	; 0
    3cda:	09 f4       	brne	.+2      	; 0x3cde <free+0xa>
    3cdc:	81 c0       	rjmp	.+258    	; 0x3de0 <free+0x10c>
    3cde:	fc 01       	movw	r30, r24
    3ce0:	32 97       	sbiw	r30, 0x02	; 2
    3ce2:	13 82       	std	Z+3, r1	; 0x03
    3ce4:	12 82       	std	Z+2, r1	; 0x02
    3ce6:	a0 91 e0 04 	lds	r26, 0x04E0	; 0x8004e0 <__flp>
    3cea:	b0 91 e1 04 	lds	r27, 0x04E1	; 0x8004e1 <__flp+0x1>
    3cee:	10 97       	sbiw	r26, 0x00	; 0
    3cf0:	81 f4       	brne	.+32     	; 0x3d12 <free+0x3e>
    3cf2:	20 81       	ld	r18, Z
    3cf4:	31 81       	ldd	r19, Z+1	; 0x01
    3cf6:	82 0f       	add	r24, r18
    3cf8:	93 1f       	adc	r25, r19
    3cfa:	20 91 de 04 	lds	r18, 0x04DE	; 0x8004de <__brkval>
    3cfe:	30 91 df 04 	lds	r19, 0x04DF	; 0x8004df <__brkval+0x1>
    3d02:	28 17       	cp	r18, r24
    3d04:	39 07       	cpc	r19, r25
    3d06:	51 f5       	brne	.+84     	; 0x3d5c <free+0x88>
    3d08:	f0 93 df 04 	sts	0x04DF, r31	; 0x8004df <__brkval+0x1>
    3d0c:	e0 93 de 04 	sts	0x04DE, r30	; 0x8004de <__brkval>
    3d10:	67 c0       	rjmp	.+206    	; 0x3de0 <free+0x10c>
    3d12:	ed 01       	movw	r28, r26
    3d14:	20 e0       	ldi	r18, 0x00	; 0
    3d16:	30 e0       	ldi	r19, 0x00	; 0
    3d18:	ce 17       	cp	r28, r30
    3d1a:	df 07       	cpc	r29, r31
    3d1c:	40 f4       	brcc	.+16     	; 0x3d2e <free+0x5a>
    3d1e:	4a 81       	ldd	r20, Y+2	; 0x02
    3d20:	5b 81       	ldd	r21, Y+3	; 0x03
    3d22:	9e 01       	movw	r18, r28
    3d24:	41 15       	cp	r20, r1
    3d26:	51 05       	cpc	r21, r1
    3d28:	f1 f0       	breq	.+60     	; 0x3d66 <free+0x92>
    3d2a:	ea 01       	movw	r28, r20
    3d2c:	f5 cf       	rjmp	.-22     	; 0x3d18 <free+0x44>
    3d2e:	d3 83       	std	Z+3, r29	; 0x03
    3d30:	c2 83       	std	Z+2, r28	; 0x02
    3d32:	40 81       	ld	r20, Z
    3d34:	51 81       	ldd	r21, Z+1	; 0x01
    3d36:	84 0f       	add	r24, r20
    3d38:	95 1f       	adc	r25, r21
    3d3a:	c8 17       	cp	r28, r24
    3d3c:	d9 07       	cpc	r29, r25
    3d3e:	59 f4       	brne	.+22     	; 0x3d56 <free+0x82>
    3d40:	88 81       	ld	r24, Y
    3d42:	99 81       	ldd	r25, Y+1	; 0x01
    3d44:	84 0f       	add	r24, r20
    3d46:	95 1f       	adc	r25, r21
    3d48:	02 96       	adiw	r24, 0x02	; 2
    3d4a:	91 83       	std	Z+1, r25	; 0x01
    3d4c:	80 83       	st	Z, r24
    3d4e:	8a 81       	ldd	r24, Y+2	; 0x02
    3d50:	9b 81       	ldd	r25, Y+3	; 0x03
    3d52:	93 83       	std	Z+3, r25	; 0x03
    3d54:	82 83       	std	Z+2, r24	; 0x02
    3d56:	21 15       	cp	r18, r1
    3d58:	31 05       	cpc	r19, r1
    3d5a:	29 f4       	brne	.+10     	; 0x3d66 <free+0x92>
    3d5c:	f0 93 e1 04 	sts	0x04E1, r31	; 0x8004e1 <__flp+0x1>
    3d60:	e0 93 e0 04 	sts	0x04E0, r30	; 0x8004e0 <__flp>
    3d64:	3d c0       	rjmp	.+122    	; 0x3de0 <free+0x10c>
    3d66:	e9 01       	movw	r28, r18
    3d68:	fb 83       	std	Y+3, r31	; 0x03
    3d6a:	ea 83       	std	Y+2, r30	; 0x02
    3d6c:	49 91       	ld	r20, Y+
    3d6e:	59 91       	ld	r21, Y+
    3d70:	c4 0f       	add	r28, r20
    3d72:	d5 1f       	adc	r29, r21
    3d74:	ec 17       	cp	r30, r28
    3d76:	fd 07       	cpc	r31, r29
    3d78:	61 f4       	brne	.+24     	; 0x3d92 <free+0xbe>
    3d7a:	80 81       	ld	r24, Z
    3d7c:	91 81       	ldd	r25, Z+1	; 0x01
    3d7e:	84 0f       	add	r24, r20
    3d80:	95 1f       	adc	r25, r21
    3d82:	02 96       	adiw	r24, 0x02	; 2
    3d84:	e9 01       	movw	r28, r18
    3d86:	99 83       	std	Y+1, r25	; 0x01
    3d88:	88 83       	st	Y, r24
    3d8a:	82 81       	ldd	r24, Z+2	; 0x02
    3d8c:	93 81       	ldd	r25, Z+3	; 0x03
    3d8e:	9b 83       	std	Y+3, r25	; 0x03
    3d90:	8a 83       	std	Y+2, r24	; 0x02
    3d92:	e0 e0       	ldi	r30, 0x00	; 0
    3d94:	f0 e0       	ldi	r31, 0x00	; 0
    3d96:	12 96       	adiw	r26, 0x02	; 2
    3d98:	8d 91       	ld	r24, X+
    3d9a:	9c 91       	ld	r25, X
    3d9c:	13 97       	sbiw	r26, 0x03	; 3
    3d9e:	00 97       	sbiw	r24, 0x00	; 0
    3da0:	19 f0       	breq	.+6      	; 0x3da8 <free+0xd4>
    3da2:	fd 01       	movw	r30, r26
    3da4:	dc 01       	movw	r26, r24
    3da6:	f7 cf       	rjmp	.-18     	; 0x3d96 <free+0xc2>
    3da8:	8d 91       	ld	r24, X+
    3daa:	9c 91       	ld	r25, X
    3dac:	11 97       	sbiw	r26, 0x01	; 1
    3dae:	9d 01       	movw	r18, r26
    3db0:	2e 5f       	subi	r18, 0xFE	; 254
    3db2:	3f 4f       	sbci	r19, 0xFF	; 255
    3db4:	82 0f       	add	r24, r18
    3db6:	93 1f       	adc	r25, r19
    3db8:	20 91 de 04 	lds	r18, 0x04DE	; 0x8004de <__brkval>
    3dbc:	30 91 df 04 	lds	r19, 0x04DF	; 0x8004df <__brkval+0x1>
    3dc0:	28 17       	cp	r18, r24
    3dc2:	39 07       	cpc	r19, r25
    3dc4:	69 f4       	brne	.+26     	; 0x3de0 <free+0x10c>
    3dc6:	30 97       	sbiw	r30, 0x00	; 0
    3dc8:	29 f4       	brne	.+10     	; 0x3dd4 <free+0x100>
    3dca:	10 92 e1 04 	sts	0x04E1, r1	; 0x8004e1 <__flp+0x1>
    3dce:	10 92 e0 04 	sts	0x04E0, r1	; 0x8004e0 <__flp>
    3dd2:	02 c0       	rjmp	.+4      	; 0x3dd8 <free+0x104>
    3dd4:	13 82       	std	Z+3, r1	; 0x03
    3dd6:	12 82       	std	Z+2, r1	; 0x02
    3dd8:	b0 93 df 04 	sts	0x04DF, r27	; 0x8004df <__brkval+0x1>
    3ddc:	a0 93 de 04 	sts	0x04DE, r26	; 0x8004de <__brkval>
    3de0:	df 91       	pop	r29
    3de2:	cf 91       	pop	r28
    3de4:	08 95       	ret

00003de6 <atof>:
    3de6:	66 27       	eor	r22, r22
    3de8:	77 27       	eor	r23, r23
    3dea:	0c 94 33 1f 	jmp	0x3e66	; 0x3e66 <strtod>

00003dee <strtok>:
    3dee:	42 ea       	ldi	r20, 0xA2	; 162
    3df0:	52 e0       	ldi	r21, 0x02	; 2
    3df2:	0e 94 0c 1f 	call	0x3e18	; 0x3e18 <strtok_r>
    3df6:	08 95       	ret

00003df8 <strcmp>:
    3df8:	fb 01       	movw	r30, r22
    3dfa:	dc 01       	movw	r26, r24
    3dfc:	8d 91       	ld	r24, X+
    3dfe:	01 90       	ld	r0, Z+
    3e00:	80 19       	sub	r24, r0
    3e02:	01 10       	cpse	r0, r1
    3e04:	d9 f3       	breq	.-10     	; 0x3dfc <strcmp+0x4>
    3e06:	99 0b       	sbc	r25, r25
    3e08:	08 95       	ret

00003e0a <strcpy>:
    3e0a:	fb 01       	movw	r30, r22
    3e0c:	dc 01       	movw	r26, r24
    3e0e:	01 90       	ld	r0, Z+
    3e10:	0d 92       	st	X+, r0
    3e12:	00 20       	and	r0, r0
    3e14:	e1 f7       	brne	.-8      	; 0x3e0e <strcpy+0x4>
    3e16:	08 95       	ret

00003e18 <strtok_r>:
    3e18:	fa 01       	movw	r30, r20
    3e1a:	a1 91       	ld	r26, Z+
    3e1c:	b0 81       	ld	r27, Z
    3e1e:	00 97       	sbiw	r24, 0x00	; 0
    3e20:	19 f4       	brne	.+6      	; 0x3e28 <strtok_r+0x10>
    3e22:	10 97       	sbiw	r26, 0x00	; 0
    3e24:	e1 f0       	breq	.+56     	; 0x3e5e <strtok_r+0x46>
    3e26:	cd 01       	movw	r24, r26
    3e28:	dc 01       	movw	r26, r24
    3e2a:	cd 01       	movw	r24, r26
    3e2c:	0d 90       	ld	r0, X+
    3e2e:	00 20       	and	r0, r0
    3e30:	11 f4       	brne	.+4      	; 0x3e36 <strtok_r+0x1e>
    3e32:	c0 01       	movw	r24, r0
    3e34:	13 c0       	rjmp	.+38     	; 0x3e5c <strtok_r+0x44>
    3e36:	fb 01       	movw	r30, r22
    3e38:	21 91       	ld	r18, Z+
    3e3a:	22 23       	and	r18, r18
    3e3c:	19 f0       	breq	.+6      	; 0x3e44 <strtok_r+0x2c>
    3e3e:	20 15       	cp	r18, r0
    3e40:	d9 f7       	brne	.-10     	; 0x3e38 <strtok_r+0x20>
    3e42:	f3 cf       	rjmp	.-26     	; 0x3e2a <strtok_r+0x12>
    3e44:	fb 01       	movw	r30, r22
    3e46:	21 91       	ld	r18, Z+
    3e48:	20 15       	cp	r18, r0
    3e4a:	19 f4       	brne	.+6      	; 0x3e52 <strtok_r+0x3a>
    3e4c:	1e 92       	st	-X, r1
    3e4e:	11 96       	adiw	r26, 0x01	; 1
    3e50:	06 c0       	rjmp	.+12     	; 0x3e5e <strtok_r+0x46>
    3e52:	22 23       	and	r18, r18
    3e54:	c1 f7       	brne	.-16     	; 0x3e46 <strtok_r+0x2e>
    3e56:	0d 90       	ld	r0, X+
    3e58:	00 20       	and	r0, r0
    3e5a:	a1 f7       	brne	.-24     	; 0x3e44 <strtok_r+0x2c>
    3e5c:	d0 01       	movw	r26, r0
    3e5e:	fa 01       	movw	r30, r20
    3e60:	a1 93       	st	Z+, r26
    3e62:	b0 83       	st	Z, r27
    3e64:	08 95       	ret

00003e66 <strtod>:
    3e66:	a0 e0       	ldi	r26, 0x00	; 0
    3e68:	b0 e0       	ldi	r27, 0x00	; 0
    3e6a:	e9 e3       	ldi	r30, 0x39	; 57
    3e6c:	ff e1       	ldi	r31, 0x1F	; 31
    3e6e:	0c 94 ab 20 	jmp	0x4156	; 0x4156 <__prologue_saves__+0xc>
    3e72:	ec 01       	movw	r28, r24
    3e74:	6b 01       	movw	r12, r22
    3e76:	61 15       	cp	r22, r1
    3e78:	71 05       	cpc	r23, r1
    3e7a:	19 f0       	breq	.+6      	; 0x3e82 <strtod+0x1c>
    3e7c:	fb 01       	movw	r30, r22
    3e7e:	91 83       	std	Z+1, r25	; 0x01
    3e80:	80 83       	st	Z, r24
    3e82:	7e 01       	movw	r14, r28
    3e84:	ff ef       	ldi	r31, 0xFF	; 255
    3e86:	ef 1a       	sub	r14, r31
    3e88:	ff 0a       	sbc	r15, r31
    3e8a:	08 81       	ld	r16, Y
    3e8c:	80 2f       	mov	r24, r16
    3e8e:	90 e0       	ldi	r25, 0x00	; 0
    3e90:	0e 94 81 20 	call	0x4102	; 0x4102 <isspace>
    3e94:	89 2b       	or	r24, r25
    3e96:	11 f0       	breq	.+4      	; 0x3e9c <strtod+0x36>
    3e98:	e7 01       	movw	r28, r14
    3e9a:	f3 cf       	rjmp	.-26     	; 0x3e82 <strtod+0x1c>
    3e9c:	0d 32       	cpi	r16, 0x2D	; 45
    3e9e:	39 f4       	brne	.+14     	; 0x3eae <strtod+0x48>
    3ea0:	7e 01       	movw	r14, r28
    3ea2:	82 e0       	ldi	r24, 0x02	; 2
    3ea4:	e8 0e       	add	r14, r24
    3ea6:	f1 1c       	adc	r15, r1
    3ea8:	09 81       	ldd	r16, Y+1	; 0x01
    3eaa:	11 e0       	ldi	r17, 0x01	; 1
    3eac:	08 c0       	rjmp	.+16     	; 0x3ebe <strtod+0x58>
    3eae:	0b 32       	cpi	r16, 0x2B	; 43
    3eb0:	29 f4       	brne	.+10     	; 0x3ebc <strtod+0x56>
    3eb2:	7e 01       	movw	r14, r28
    3eb4:	92 e0       	ldi	r25, 0x02	; 2
    3eb6:	e9 0e       	add	r14, r25
    3eb8:	f1 1c       	adc	r15, r1
    3eba:	09 81       	ldd	r16, Y+1	; 0x01
    3ebc:	10 e0       	ldi	r17, 0x00	; 0
    3ebe:	e7 01       	movw	r28, r14
    3ec0:	21 97       	sbiw	r28, 0x01	; 1
    3ec2:	43 e0       	ldi	r20, 0x03	; 3
    3ec4:	50 e0       	ldi	r21, 0x00	; 0
    3ec6:	66 ed       	ldi	r22, 0xD6	; 214
    3ec8:	70 e0       	ldi	r23, 0x00	; 0
    3eca:	ce 01       	movw	r24, r28
    3ecc:	0e 94 8a 20 	call	0x4114	; 0x4114 <strncasecmp_P>
    3ed0:	89 2b       	or	r24, r25
    3ed2:	c1 f4       	brne	.+48     	; 0x3f04 <strtod+0x9e>
    3ed4:	23 96       	adiw	r28, 0x03	; 3
    3ed6:	45 e0       	ldi	r20, 0x05	; 5
    3ed8:	50 e0       	ldi	r21, 0x00	; 0
    3eda:	61 ed       	ldi	r22, 0xD1	; 209
    3edc:	70 e0       	ldi	r23, 0x00	; 0
    3ede:	ce 01       	movw	r24, r28
    3ee0:	0e 94 8a 20 	call	0x4114	; 0x4114 <strncasecmp_P>
    3ee4:	89 2b       	or	r24, r25
    3ee6:	09 f4       	brne	.+2      	; 0x3eea <strtod+0x84>
    3ee8:	25 96       	adiw	r28, 0x05	; 5
    3eea:	c1 14       	cp	r12, r1
    3eec:	d1 04       	cpc	r13, r1
    3eee:	19 f0       	breq	.+6      	; 0x3ef6 <strtod+0x90>
    3ef0:	f6 01       	movw	r30, r12
    3ef2:	d1 83       	std	Z+1, r29	; 0x01
    3ef4:	c0 83       	st	Z, r28
    3ef6:	11 11       	cpse	r17, r1
    3ef8:	f6 c0       	rjmp	.+492    	; 0x40e6 <strtod+0x280>
    3efa:	60 e0       	ldi	r22, 0x00	; 0
    3efc:	70 e0       	ldi	r23, 0x00	; 0
    3efe:	80 e8       	ldi	r24, 0x80	; 128
    3f00:	9f e7       	ldi	r25, 0x7F	; 127
    3f02:	fa c0       	rjmp	.+500    	; 0x40f8 <strtod+0x292>
    3f04:	43 e0       	ldi	r20, 0x03	; 3
    3f06:	50 e0       	ldi	r21, 0x00	; 0
    3f08:	6e ec       	ldi	r22, 0xCE	; 206
    3f0a:	70 e0       	ldi	r23, 0x00	; 0
    3f0c:	ce 01       	movw	r24, r28
    3f0e:	0e 94 8a 20 	call	0x4114	; 0x4114 <strncasecmp_P>
    3f12:	89 2b       	or	r24, r25
    3f14:	59 f4       	brne	.+22     	; 0x3f2c <strtod+0xc6>
    3f16:	c1 14       	cp	r12, r1
    3f18:	d1 04       	cpc	r13, r1
    3f1a:	09 f4       	brne	.+2      	; 0x3f1e <strtod+0xb8>
    3f1c:	e9 c0       	rjmp	.+466    	; 0x40f0 <strtod+0x28a>
    3f1e:	f2 e0       	ldi	r31, 0x02	; 2
    3f20:	ef 0e       	add	r14, r31
    3f22:	f1 1c       	adc	r15, r1
    3f24:	f6 01       	movw	r30, r12
    3f26:	f1 82       	std	Z+1, r15	; 0x01
    3f28:	e0 82       	st	Z, r14
    3f2a:	e2 c0       	rjmp	.+452    	; 0x40f0 <strtod+0x28a>
    3f2c:	20 e0       	ldi	r18, 0x00	; 0
    3f2e:	30 e0       	ldi	r19, 0x00	; 0
    3f30:	a9 01       	movw	r20, r18
    3f32:	c0 e0       	ldi	r28, 0x00	; 0
    3f34:	d0 e0       	ldi	r29, 0x00	; 0
    3f36:	f7 01       	movw	r30, r14
    3f38:	80 ed       	ldi	r24, 0xD0	; 208
    3f3a:	a8 2e       	mov	r10, r24
    3f3c:	a0 0e       	add	r10, r16
    3f3e:	89 e0       	ldi	r24, 0x09	; 9
    3f40:	8a 15       	cp	r24, r10
    3f42:	30 f1       	brcs	.+76     	; 0x3f90 <strtod+0x12a>
    3f44:	91 2f       	mov	r25, r17
    3f46:	92 60       	ori	r25, 0x02	; 2
    3f48:	b9 2e       	mov	r11, r25
    3f4a:	81 2f       	mov	r24, r17
    3f4c:	88 70       	andi	r24, 0x08	; 8
    3f4e:	12 ff       	sbrs	r17, 2
    3f50:	04 c0       	rjmp	.+8      	; 0x3f5a <strtod+0xf4>
    3f52:	81 11       	cpse	r24, r1
    3f54:	24 c0       	rjmp	.+72     	; 0x3f9e <strtod+0x138>
    3f56:	21 96       	adiw	r28, 0x01	; 1
    3f58:	22 c0       	rjmp	.+68     	; 0x3f9e <strtod+0x138>
    3f5a:	81 11       	cpse	r24, r1
    3f5c:	21 97       	sbiw	r28, 0x01	; 1
    3f5e:	a5 e0       	ldi	r26, 0x05	; 5
    3f60:	b0 e0       	ldi	r27, 0x00	; 0
    3f62:	0e 94 b8 1d 	call	0x3b70	; 0x3b70 <__muluhisi3>
    3f66:	dc 01       	movw	r26, r24
    3f68:	cb 01       	movw	r24, r22
    3f6a:	88 0f       	add	r24, r24
    3f6c:	99 1f       	adc	r25, r25
    3f6e:	aa 1f       	adc	r26, r26
    3f70:	bb 1f       	adc	r27, r27
    3f72:	9c 01       	movw	r18, r24
    3f74:	ad 01       	movw	r20, r26
    3f76:	2a 0d       	add	r18, r10
    3f78:	31 1d       	adc	r19, r1
    3f7a:	41 1d       	adc	r20, r1
    3f7c:	51 1d       	adc	r21, r1
    3f7e:	28 39       	cpi	r18, 0x98	; 152
    3f80:	89 e9       	ldi	r24, 0x99	; 153
    3f82:	38 07       	cpc	r19, r24
    3f84:	48 07       	cpc	r20, r24
    3f86:	89 e1       	ldi	r24, 0x19	; 25
    3f88:	58 07       	cpc	r21, r24
    3f8a:	48 f0       	brcs	.+18     	; 0x3f9e <strtod+0x138>
    3f8c:	16 60       	ori	r17, 0x06	; 6
    3f8e:	06 c0       	rjmp	.+12     	; 0x3f9c <strtod+0x136>
    3f90:	9e ef       	ldi	r25, 0xFE	; 254
    3f92:	a9 12       	cpse	r10, r25
    3f94:	0a c0       	rjmp	.+20     	; 0x3faa <strtod+0x144>
    3f96:	13 fd       	sbrc	r17, 3
    3f98:	40 c0       	rjmp	.+128    	; 0x401a <strtod+0x1b4>
    3f9a:	18 60       	ori	r17, 0x08	; 8
    3f9c:	b1 2e       	mov	r11, r17
    3f9e:	8f ef       	ldi	r24, 0xFF	; 255
    3fa0:	e8 1a       	sub	r14, r24
    3fa2:	f8 0a       	sbc	r15, r24
    3fa4:	00 81       	ld	r16, Z
    3fa6:	1b 2d       	mov	r17, r11
    3fa8:	c6 cf       	rjmp	.-116    	; 0x3f36 <strtod+0xd0>
    3faa:	80 2f       	mov	r24, r16
    3fac:	8f 7d       	andi	r24, 0xDF	; 223
    3fae:	85 34       	cpi	r24, 0x45	; 69
    3fb0:	a1 f5       	brne	.+104    	; 0x401a <strtod+0x1b4>
    3fb2:	80 81       	ld	r24, Z
    3fb4:	8d 32       	cpi	r24, 0x2D	; 45
    3fb6:	11 f4       	brne	.+4      	; 0x3fbc <strtod+0x156>
    3fb8:	10 61       	ori	r17, 0x10	; 16
    3fba:	06 c0       	rjmp	.+12     	; 0x3fc8 <strtod+0x162>
    3fbc:	8b 32       	cpi	r24, 0x2B	; 43
    3fbe:	21 f0       	breq	.+8      	; 0x3fc8 <strtod+0x162>
    3fc0:	31 96       	adiw	r30, 0x01	; 1
    3fc2:	61 e0       	ldi	r22, 0x01	; 1
    3fc4:	70 e0       	ldi	r23, 0x00	; 0
    3fc6:	04 c0       	rjmp	.+8      	; 0x3fd0 <strtod+0x16a>
    3fc8:	81 81       	ldd	r24, Z+1	; 0x01
    3fca:	32 96       	adiw	r30, 0x02	; 2
    3fcc:	62 e0       	ldi	r22, 0x02	; 2
    3fce:	70 e0       	ldi	r23, 0x00	; 0
    3fd0:	80 53       	subi	r24, 0x30	; 48
    3fd2:	8a 30       	cpi	r24, 0x0A	; 10
    3fd4:	18 f0       	brcs	.+6      	; 0x3fdc <strtod+0x176>
    3fd6:	e6 1b       	sub	r30, r22
    3fd8:	f7 0b       	sbc	r31, r23
    3fda:	1f c0       	rjmp	.+62     	; 0x401a <strtod+0x1b4>
    3fdc:	60 e0       	ldi	r22, 0x00	; 0
    3fde:	70 e0       	ldi	r23, 0x00	; 0
    3fe0:	60 38       	cpi	r22, 0x80	; 128
    3fe2:	9c e0       	ldi	r25, 0x0C	; 12
    3fe4:	79 07       	cpc	r23, r25
    3fe6:	5c f4       	brge	.+22     	; 0x3ffe <strtod+0x198>
    3fe8:	db 01       	movw	r26, r22
    3fea:	aa 0f       	add	r26, r26
    3fec:	bb 1f       	adc	r27, r27
    3fee:	aa 0f       	add	r26, r26
    3ff0:	bb 1f       	adc	r27, r27
    3ff2:	6a 0f       	add	r22, r26
    3ff4:	7b 1f       	adc	r23, r27
    3ff6:	66 0f       	add	r22, r22
    3ff8:	77 1f       	adc	r23, r23
    3ffa:	68 0f       	add	r22, r24
    3ffc:	71 1d       	adc	r23, r1
    3ffe:	31 96       	adiw	r30, 0x01	; 1
    4000:	df 01       	movw	r26, r30
    4002:	11 97       	sbiw	r26, 0x01	; 1
    4004:	8c 91       	ld	r24, X
    4006:	80 53       	subi	r24, 0x30	; 48
    4008:	8a 30       	cpi	r24, 0x0A	; 10
    400a:	50 f3       	brcs	.-44     	; 0x3fe0 <strtod+0x17a>
    400c:	14 ff       	sbrs	r17, 4
    400e:	03 c0       	rjmp	.+6      	; 0x4016 <strtod+0x1b0>
    4010:	71 95       	neg	r23
    4012:	61 95       	neg	r22
    4014:	71 09       	sbc	r23, r1
    4016:	c6 0f       	add	r28, r22
    4018:	d7 1f       	adc	r29, r23
    401a:	11 ff       	sbrs	r17, 1
    401c:	08 c0       	rjmp	.+16     	; 0x402e <strtod+0x1c8>
    401e:	c1 14       	cp	r12, r1
    4020:	d1 04       	cpc	r13, r1
    4022:	29 f0       	breq	.+10     	; 0x402e <strtod+0x1c8>
    4024:	cf 01       	movw	r24, r30
    4026:	01 97       	sbiw	r24, 0x01	; 1
    4028:	f6 01       	movw	r30, r12
    402a:	91 83       	std	Z+1, r25	; 0x01
    402c:	80 83       	st	Z, r24
    402e:	ca 01       	movw	r24, r20
    4030:	b9 01       	movw	r22, r18
    4032:	0e 94 18 17 	call	0x2e30	; 0x2e30 <__floatunsisf>
    4036:	21 2f       	mov	r18, r17
    4038:	23 70       	andi	r18, 0x03	; 3
    403a:	23 30       	cpi	r18, 0x03	; 3
    403c:	19 f0       	breq	.+6      	; 0x4044 <strtod+0x1de>
    403e:	4b 01       	movw	r8, r22
    4040:	5c 01       	movw	r10, r24
    4042:	06 c0       	rjmp	.+12     	; 0x4050 <strtod+0x1ea>
    4044:	4b 01       	movw	r8, r22
    4046:	5c 01       	movw	r10, r24
    4048:	b7 fa       	bst	r11, 7
    404a:	b0 94       	com	r11
    404c:	b7 f8       	bld	r11, 7
    404e:	b0 94       	com	r11
    4050:	20 e0       	ldi	r18, 0x00	; 0
    4052:	30 e0       	ldi	r19, 0x00	; 0
    4054:	a9 01       	movw	r20, r18
    4056:	c5 01       	movw	r24, r10
    4058:	b4 01       	movw	r22, r8
    405a:	0e 94 6b 16 	call	0x2cd6	; 0x2cd6 <__cmpsf2>
    405e:	88 23       	and	r24, r24
    4060:	09 f4       	brne	.+2      	; 0x4064 <strtod+0x1fe>
    4062:	3e c0       	rjmp	.+124    	; 0x40e0 <strtod+0x27a>
    4064:	d7 ff       	sbrs	r29, 7
    4066:	06 c0       	rjmp	.+12     	; 0x4074 <strtod+0x20e>
    4068:	d1 95       	neg	r29
    406a:	c1 95       	neg	r28
    406c:	d1 09       	sbc	r29, r1
    406e:	0d ee       	ldi	r16, 0xED	; 237
    4070:	10 e0       	ldi	r17, 0x00	; 0
    4072:	02 c0       	rjmp	.+4      	; 0x4078 <strtod+0x212>
    4074:	05 e0       	ldi	r16, 0x05	; 5
    4076:	11 e0       	ldi	r17, 0x01	; 1
    4078:	68 01       	movw	r12, r16
    407a:	f8 e1       	ldi	r31, 0x18	; 24
    407c:	cf 1a       	sub	r12, r31
    407e:	d1 08       	sbc	r13, r1
    4080:	90 e2       	ldi	r25, 0x20	; 32
    4082:	e9 2e       	mov	r14, r25
    4084:	f1 2c       	mov	r15, r1
    4086:	ce 15       	cp	r28, r14
    4088:	df 05       	cpc	r29, r15
    408a:	74 f0       	brlt	.+28     	; 0x40a8 <strtod+0x242>
    408c:	f8 01       	movw	r30, r16
    408e:	25 91       	lpm	r18, Z+
    4090:	35 91       	lpm	r19, Z+
    4092:	45 91       	lpm	r20, Z+
    4094:	54 91       	lpm	r21, Z
    4096:	c5 01       	movw	r24, r10
    4098:	b4 01       	movw	r22, r8
    409a:	0e 94 fe 17 	call	0x2ffc	; 0x2ffc <__mulsf3>
    409e:	4b 01       	movw	r8, r22
    40a0:	5c 01       	movw	r10, r24
    40a2:	ce 19       	sub	r28, r14
    40a4:	df 09       	sbc	r29, r15
    40a6:	ef cf       	rjmp	.-34     	; 0x4086 <strtod+0x220>
    40a8:	04 50       	subi	r16, 0x04	; 4
    40aa:	11 09       	sbc	r17, r1
    40ac:	f5 94       	asr	r15
    40ae:	e7 94       	ror	r14
    40b0:	0c 15       	cp	r16, r12
    40b2:	1d 05       	cpc	r17, r13
    40b4:	41 f7       	brne	.-48     	; 0x4086 <strtod+0x220>
    40b6:	8a 2d       	mov	r24, r10
    40b8:	88 0f       	add	r24, r24
    40ba:	8b 2d       	mov	r24, r11
    40bc:	88 1f       	adc	r24, r24
    40be:	8f 3f       	cpi	r24, 0xFF	; 255
    40c0:	49 f0       	breq	.+18     	; 0x40d4 <strtod+0x26e>
    40c2:	20 e0       	ldi	r18, 0x00	; 0
    40c4:	30 e0       	ldi	r19, 0x00	; 0
    40c6:	a9 01       	movw	r20, r18
    40c8:	c5 01       	movw	r24, r10
    40ca:	b4 01       	movw	r22, r8
    40cc:	0e 94 6b 16 	call	0x2cd6	; 0x2cd6 <__cmpsf2>
    40d0:	81 11       	cpse	r24, r1
    40d2:	06 c0       	rjmp	.+12     	; 0x40e0 <strtod+0x27a>
    40d4:	82 e2       	ldi	r24, 0x22	; 34
    40d6:	90 e0       	ldi	r25, 0x00	; 0
    40d8:	90 93 e3 04 	sts	0x04E3, r25	; 0x8004e3 <errno+0x1>
    40dc:	80 93 e2 04 	sts	0x04E2, r24	; 0x8004e2 <errno>
    40e0:	c5 01       	movw	r24, r10
    40e2:	b4 01       	movw	r22, r8
    40e4:	09 c0       	rjmp	.+18     	; 0x40f8 <strtod+0x292>
    40e6:	60 e0       	ldi	r22, 0x00	; 0
    40e8:	70 e0       	ldi	r23, 0x00	; 0
    40ea:	80 e8       	ldi	r24, 0x80	; 128
    40ec:	9f ef       	ldi	r25, 0xFF	; 255
    40ee:	04 c0       	rjmp	.+8      	; 0x40f8 <strtod+0x292>
    40f0:	60 e0       	ldi	r22, 0x00	; 0
    40f2:	70 e0       	ldi	r23, 0x00	; 0
    40f4:	80 ec       	ldi	r24, 0xC0	; 192
    40f6:	9f e7       	ldi	r25, 0x7F	; 127
    40f8:	cd b7       	in	r28, 0x3d	; 61
    40fa:	de b7       	in	r29, 0x3e	; 62
    40fc:	ec e0       	ldi	r30, 0x0C	; 12
    40fe:	0c 94 c7 20 	jmp	0x418e	; 0x418e <__epilogue_restores__+0xc>

00004102 <isspace>:
    4102:	91 11       	cpse	r25, r1
    4104:	0c 94 a2 20 	jmp	0x4144	; 0x4144 <__ctype_isfalse>
    4108:	80 32       	cpi	r24, 0x20	; 32
    410a:	19 f0       	breq	.+6      	; 0x4112 <isspace+0x10>
    410c:	89 50       	subi	r24, 0x09	; 9
    410e:	85 50       	subi	r24, 0x05	; 5
    4110:	c8 f7       	brcc	.-14     	; 0x4104 <isspace+0x2>
    4112:	08 95       	ret

00004114 <strncasecmp_P>:
    4114:	fb 01       	movw	r30, r22
    4116:	dc 01       	movw	r26, r24
    4118:	41 50       	subi	r20, 0x01	; 1
    411a:	50 40       	sbci	r21, 0x00	; 0
    411c:	88 f0       	brcs	.+34     	; 0x4140 <strncasecmp_P+0x2c>
    411e:	8d 91       	ld	r24, X+
    4120:	81 34       	cpi	r24, 0x41	; 65
    4122:	1c f0       	brlt	.+6      	; 0x412a <strncasecmp_P+0x16>
    4124:	8b 35       	cpi	r24, 0x5B	; 91
    4126:	0c f4       	brge	.+2      	; 0x412a <strncasecmp_P+0x16>
    4128:	80 5e       	subi	r24, 0xE0	; 224
    412a:	65 91       	lpm	r22, Z+
    412c:	61 34       	cpi	r22, 0x41	; 65
    412e:	1c f0       	brlt	.+6      	; 0x4136 <strncasecmp_P+0x22>
    4130:	6b 35       	cpi	r22, 0x5B	; 91
    4132:	0c f4       	brge	.+2      	; 0x4136 <strncasecmp_P+0x22>
    4134:	60 5e       	subi	r22, 0xE0	; 224
    4136:	86 1b       	sub	r24, r22
    4138:	61 11       	cpse	r22, r1
    413a:	71 f3       	breq	.-36     	; 0x4118 <strncasecmp_P+0x4>
    413c:	99 0b       	sbc	r25, r25
    413e:	08 95       	ret
    4140:	88 1b       	sub	r24, r24
    4142:	fc cf       	rjmp	.-8      	; 0x413c <strncasecmp_P+0x28>

00004144 <__ctype_isfalse>:
    4144:	99 27       	eor	r25, r25
    4146:	88 27       	eor	r24, r24

00004148 <__ctype_istrue>:
    4148:	08 95       	ret

0000414a <__prologue_saves__>:
    414a:	2f 92       	push	r2
    414c:	3f 92       	push	r3
    414e:	4f 92       	push	r4
    4150:	5f 92       	push	r5
    4152:	6f 92       	push	r6
    4154:	7f 92       	push	r7
    4156:	8f 92       	push	r8
    4158:	9f 92       	push	r9
    415a:	af 92       	push	r10
    415c:	bf 92       	push	r11
    415e:	cf 92       	push	r12
    4160:	df 92       	push	r13
    4162:	ef 92       	push	r14
    4164:	ff 92       	push	r15
    4166:	0f 93       	push	r16
    4168:	1f 93       	push	r17
    416a:	cf 93       	push	r28
    416c:	df 93       	push	r29
    416e:	cd b7       	in	r28, 0x3d	; 61
    4170:	de b7       	in	r29, 0x3e	; 62
    4172:	ca 1b       	sub	r28, r26
    4174:	db 0b       	sbc	r29, r27
    4176:	0f b6       	in	r0, 0x3f	; 63
    4178:	f8 94       	cli
    417a:	de bf       	out	0x3e, r29	; 62
    417c:	0f be       	out	0x3f, r0	; 63
    417e:	cd bf       	out	0x3d, r28	; 61
    4180:	09 94       	ijmp

00004182 <__epilogue_restores__>:
    4182:	2a 88       	ldd	r2, Y+18	; 0x12
    4184:	39 88       	ldd	r3, Y+17	; 0x11
    4186:	48 88       	ldd	r4, Y+16	; 0x10
    4188:	5f 84       	ldd	r5, Y+15	; 0x0f
    418a:	6e 84       	ldd	r6, Y+14	; 0x0e
    418c:	7d 84       	ldd	r7, Y+13	; 0x0d
    418e:	8c 84       	ldd	r8, Y+12	; 0x0c
    4190:	9b 84       	ldd	r9, Y+11	; 0x0b
    4192:	aa 84       	ldd	r10, Y+10	; 0x0a
    4194:	b9 84       	ldd	r11, Y+9	; 0x09
    4196:	c8 84       	ldd	r12, Y+8	; 0x08
    4198:	df 80       	ldd	r13, Y+7	; 0x07
    419a:	ee 80       	ldd	r14, Y+6	; 0x06
    419c:	fd 80       	ldd	r15, Y+5	; 0x05
    419e:	0c 81       	ldd	r16, Y+4	; 0x04
    41a0:	1b 81       	ldd	r17, Y+3	; 0x03
    41a2:	aa 81       	ldd	r26, Y+2	; 0x02
    41a4:	b9 81       	ldd	r27, Y+1	; 0x01
    41a6:	ce 0f       	add	r28, r30
    41a8:	d1 1d       	adc	r29, r1
    41aa:	0f b6       	in	r0, 0x3f	; 63
    41ac:	f8 94       	cli
    41ae:	de bf       	out	0x3e, r29	; 62
    41b0:	0f be       	out	0x3f, r0	; 63
    41b2:	cd bf       	out	0x3d, r28	; 61
    41b4:	ed 01       	movw	r28, r26
    41b6:	08 95       	ret

000041b8 <_exit>:
    41b8:	f8 94       	cli

000041ba <__stop_program>:
    41ba:	ff cf       	rjmp	.-2      	; 0x41ba <__stop_program>
