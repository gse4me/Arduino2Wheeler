
ArduGirobot.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000194  00800100  00003d68  00003dfc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003d68  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000033b  00800294  00800294  00003f90  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00003f90  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003fec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00001048  00000000  00000000  0000402c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0001fbb8  00000000  00000000  00005074  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000038db  00000000  00000000  00024c2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00007245  00000000  00000000  00028507  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00003bf0  00000000  00000000  0002f74c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000073eb  00000000  00000000  0003333c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000142f2  00000000  00000000  0003a727  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001328  00000000  00000000  0004ea19  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 90 00 	jmp	0x120	; 0x120 <__ctors_end>
       4:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
       8:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
       c:	0c 94 74 13 	jmp	0x26e8	; 0x26e8 <__vector_3>
      10:	0c 94 d7 13 	jmp	0x27ae	; 0x27ae <__vector_4>
      14:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      18:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      1c:	0c 94 c8 0f 	jmp	0x1f90	; 0x1f90 <__vector_7>
      20:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      24:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      28:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      2c:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      30:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      34:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      38:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      3c:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      40:	0c 94 2e 1b 	jmp	0x365c	; 0x365c <__vector_16>
      44:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      48:	0c 94 97 18 	jmp	0x312e	; 0x312e <__vector_18>
      4c:	0c 94 c9 18 	jmp	0x3192	; 0x3192 <__vector_19>
      50:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      54:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      58:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      5c:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      60:	0c 94 c5 10 	jmp	0x218a	; 0x218a <__vector_24>
      64:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      68:	08 4a       	sbci	r16, 0xA8	; 168
      6a:	d7 3b       	cpi	r29, 0xB7	; 183
      6c:	3b ce       	rjmp	.-906    	; 0xfffffce4 <__eeprom_end+0xff7efce4>
      6e:	01 6e       	ori	r16, 0xE1	; 225
      70:	84 bc       	out	0x24, r8	; 36
      72:	bf fd       	.word	0xfdbf	; ????
      74:	c1 2f       	mov	r28, r17
      76:	3d 6c       	ori	r19, 0xCD	; 205
      78:	74 31       	cpi	r23, 0x14	; 20
      7a:	9a bd       	out	0x2a, r25	; 42
      7c:	56 83       	std	Z+6, r21	; 0x06
      7e:	3d da       	rcall	.-2950   	; 0xfffff4fa <__eeprom_end+0xff7ef4fa>
      80:	3d 00       	.word	0x003d	; ????
      82:	c7 7f       	andi	r28, 0xF7	; 247
      84:	11 be       	out	0x31, r1	; 49
      86:	d9 e4       	ldi	r29, 0x49	; 73
      88:	bb 4c       	sbci	r27, 0xCB	; 203
      8a:	3e 91       	ld	r19, -X
      8c:	6b aa       	std	Y+51, r6	; 0x33
      8e:	aa be       	out	0x3a, r10	; 58
      90:	00 00       	nop
      92:	00 80       	ld	r0, Z
      94:	3f 00       	.word	0x003f	; ????

00000096 <__trampolines_end>:
      96:	4e 41       	sbci	r20, 0x1E	; 30
      98:	4e 49       	Address 0x00000098 is out of bounds.
.word	0xffff	; ????

00000099 <pstr_inity>:
      99:	49 4e 49 54 59                                      INITY

0000009e <pstr_inf>:
      9e:	49 4e 46                                            INF

000000a1 <pwr_m10>:
      a1:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
      b1:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

000000b9 <pwr_p10>:
      b9:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
      c9:	ca 1b 0e 5a ae c5 9d 74                             ...Z...t

000000d1 <digital_pin_to_bit_mask_PGM>:
      d1:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      e1:	04 08 10 20                                         ... 

000000e5 <digital_pin_to_port_PGM>:
      e5:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      f5:	03 03 03 03                                         ....

000000f9 <port_to_input_PGM>:
      f9:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

00000103 <port_to_output_PGM>:
     103:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

0000010d <port_to_mode_PGM>:
     10d:	00 00 00 00 24 00 27 00 2a 00 00                    ....$.'.*..

00000118 <__ctors_start>:
     118:	c5 04       	cpc	r12, r5
     11a:	ed 12       	cpse	r14, r29
     11c:	fe 12       	cpse	r15, r30
     11e:	f9 18       	sub	r15, r9

00000120 <__ctors_end>:
     120:	11 24       	eor	r1, r1
     122:	1f be       	out	0x3f, r1	; 63
     124:	cf ef       	ldi	r28, 0xFF	; 255
     126:	d8 e0       	ldi	r29, 0x08	; 8
     128:	de bf       	out	0x3e, r29	; 62
     12a:	cd bf       	out	0x3d, r28	; 61

0000012c <__do_copy_data>:
     12c:	12 e0       	ldi	r17, 0x02	; 2
     12e:	a0 e0       	ldi	r26, 0x00	; 0
     130:	b1 e0       	ldi	r27, 0x01	; 1
     132:	e8 e6       	ldi	r30, 0x68	; 104
     134:	fd e3       	ldi	r31, 0x3D	; 61
     136:	02 c0       	rjmp	.+4      	; 0x13c <__do_copy_data+0x10>
     138:	05 90       	lpm	r0, Z+
     13a:	0d 92       	st	X+, r0
     13c:	a4 39       	cpi	r26, 0x94	; 148
     13e:	b1 07       	cpc	r27, r17
     140:	d9 f7       	brne	.-10     	; 0x138 <__do_copy_data+0xc>

00000142 <__do_clear_bss>:
     142:	25 e0       	ldi	r18, 0x05	; 5
     144:	a4 e9       	ldi	r26, 0x94	; 148
     146:	b2 e0       	ldi	r27, 0x02	; 2
     148:	01 c0       	rjmp	.+2      	; 0x14c <.do_clear_bss_start>

0000014a <.do_clear_bss_loop>:
     14a:	1d 92       	st	X+, r1

0000014c <.do_clear_bss_start>:
     14c:	af 3c       	cpi	r26, 0xCF	; 207
     14e:	b2 07       	cpc	r27, r18
     150:	e1 f7       	brne	.-8      	; 0x14a <.do_clear_bss_loop>

00000152 <__do_global_ctors>:
     152:	10 e0       	ldi	r17, 0x00	; 0
     154:	c0 e9       	ldi	r28, 0x90	; 144
     156:	d0 e0       	ldi	r29, 0x00	; 0
     158:	04 c0       	rjmp	.+8      	; 0x162 <__do_global_ctors+0x10>
     15a:	21 97       	sbiw	r28, 0x01	; 1
     15c:	fe 01       	movw	r30, r28
     15e:	0e 94 ca 1c 	call	0x3994	; 0x3994 <__tablejump2__>
     162:	cc 38       	cpi	r28, 0x8C	; 140
     164:	d1 07       	cpc	r29, r17
     166:	c9 f7       	brne	.-14     	; 0x15a <__do_global_ctors+0x8>
     168:	0e 94 27 19 	call	0x324e	; 0x324e <main>
     16c:	0c 94 b2 1e 	jmp	0x3d64	; 0x3d64 <_exit>

00000170 <__bad_interrupt>:
     170:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000174 <_Z11PrintPidCfgP11PIDConfig_e>:
        }
        else
        {
            Ser_Buffer[ndx] = '\0'; // terminate the string
            ndx = 0;
            Ser_NewData = true;
     174:	cf 93       	push	r28
     176:	df 93       	push	r29
     178:	ec 01       	movw	r28, r24
     17a:	67 e0       	ldi	r22, 0x07	; 7
     17c:	71 e0       	ldi	r23, 0x01	; 1
     17e:	87 e2       	ldi	r24, 0x27	; 39
     180:	95 e0       	ldi	r25, 0x05	; 5
     182:	0e 94 75 19 	call	0x32ea	; 0x32ea <_ZN5Print5printEPKc>
     186:	be 01       	movw	r22, r28
     188:	87 e2       	ldi	r24, 0x27	; 39
     18a:	95 e0       	ldi	r25, 0x05	; 5
     18c:	0e 94 75 19 	call	0x32ea	; 0x32ea <_ZN5Print5printEPKc>
     190:	69 eb       	ldi	r22, 0xB9	; 185
     192:	71 e0       	ldi	r23, 0x01	; 1
     194:	87 e2       	ldi	r24, 0x27	; 39
     196:	95 e0       	ldi	r25, 0x05	; 5
     198:	0e 94 75 19 	call	0x32ea	; 0x32ea <_ZN5Print5printEPKc>
     19c:	4d 81       	ldd	r20, Y+5	; 0x05
     19e:	5e 81       	ldd	r21, Y+6	; 0x06
     1a0:	6f 81       	ldd	r22, Y+7	; 0x07
     1a2:	78 85       	ldd	r23, Y+8	; 0x08
     1a4:	22 e0       	ldi	r18, 0x02	; 2
     1a6:	30 e0       	ldi	r19, 0x00	; 0
     1a8:	87 e2       	ldi	r24, 0x27	; 39
     1aa:	95 e0       	ldi	r25, 0x05	; 5
     1ac:	0e 94 2c 1b 	call	0x3658	; 0x3658 <_ZN5Print5printEdi>
     1b0:	69 eb       	ldi	r22, 0xB9	; 185
     1b2:	71 e0       	ldi	r23, 0x01	; 1
     1b4:	87 e2       	ldi	r24, 0x27	; 39
     1b6:	95 e0       	ldi	r25, 0x05	; 5
     1b8:	0e 94 75 19 	call	0x32ea	; 0x32ea <_ZN5Print5printEPKc>
     1bc:	49 85       	ldd	r20, Y+9	; 0x09
     1be:	5a 85       	ldd	r21, Y+10	; 0x0a
     1c0:	6b 85       	ldd	r22, Y+11	; 0x0b
     1c2:	7c 85       	ldd	r23, Y+12	; 0x0c
     1c4:	22 e0       	ldi	r18, 0x02	; 2
     1c6:	30 e0       	ldi	r19, 0x00	; 0
     1c8:	87 e2       	ldi	r24, 0x27	; 39
     1ca:	95 e0       	ldi	r25, 0x05	; 5
     1cc:	0e 94 2c 1b 	call	0x3658	; 0x3658 <_ZN5Print5printEdi>
     1d0:	69 eb       	ldi	r22, 0xB9	; 185
     1d2:	71 e0       	ldi	r23, 0x01	; 1
     1d4:	87 e2       	ldi	r24, 0x27	; 39
     1d6:	95 e0       	ldi	r25, 0x05	; 5
     1d8:	0e 94 75 19 	call	0x32ea	; 0x32ea <_ZN5Print5printEPKc>
     1dc:	4d 85       	ldd	r20, Y+13	; 0x0d
     1de:	5e 85       	ldd	r21, Y+14	; 0x0e
     1e0:	6f 85       	ldd	r22, Y+15	; 0x0f
     1e2:	78 89       	ldd	r23, Y+16	; 0x10
     1e4:	22 e0       	ldi	r18, 0x02	; 2
     1e6:	30 e0       	ldi	r19, 0x00	; 0
     1e8:	87 e2       	ldi	r24, 0x27	; 39
     1ea:	95 e0       	ldi	r25, 0x05	; 5
     1ec:	0e 94 2c 1b 	call	0x3658	; 0x3658 <_ZN5Print5printEdi>
     1f0:	69 eb       	ldi	r22, 0xB9	; 185
     1f2:	71 e0       	ldi	r23, 0x01	; 1
     1f4:	87 e2       	ldi	r24, 0x27	; 39
     1f6:	95 e0       	ldi	r25, 0x05	; 5
     1f8:	0e 94 75 19 	call	0x32ea	; 0x32ea <_ZN5Print5printEPKc>
     1fc:	49 89       	ldd	r20, Y+17	; 0x11
     1fe:	5a 89       	ldd	r21, Y+18	; 0x12
     200:	6b 89       	ldd	r22, Y+19	; 0x13
     202:	7c 89       	ldd	r23, Y+20	; 0x14
     204:	22 e0       	ldi	r18, 0x02	; 2
     206:	30 e0       	ldi	r19, 0x00	; 0
     208:	87 e2       	ldi	r24, 0x27	; 39
     20a:	95 e0       	ldi	r25, 0x05	; 5
     20c:	0e 94 2c 1b 	call	0x3658	; 0x3658 <_ZN5Print5printEdi>
     210:	69 eb       	ldi	r22, 0xB9	; 185
     212:	71 e0       	ldi	r23, 0x01	; 1
     214:	87 e2       	ldi	r24, 0x27	; 39
     216:	95 e0       	ldi	r25, 0x05	; 5
     218:	df 91       	pop	r29
     21a:	cf 91       	pop	r28
     21c:	0c 94 82 19 	jmp	0x3304	; 0x3304 <_ZN5Print7printlnEPKc>

00000220 <_Z13Ser_ParseDatav.part.0>:
     220:	cf 92       	push	r12
     222:	df 92       	push	r13
     224:	ef 92       	push	r14
     226:	ff 92       	push	r15
     228:	0f 93       	push	r16
     22a:	1f 93       	push	r17
     22c:	cf 93       	push	r28
     22e:	df 93       	push	r29
     230:	69 eb       	ldi	r22, 0xB9	; 185
     232:	71 e0       	ldi	r23, 0x01	; 1
     234:	8f ea       	ldi	r24, 0xAF	; 175
     236:	92 e0       	ldi	r25, 0x02	; 2
     238:	0e 94 d4 1c 	call	0x39a8	; 0x39a8 <strtok>
     23c:	ec 01       	movw	r28, r24
     23e:	6c e0       	ldi	r22, 0x0C	; 12
     240:	71 e0       	ldi	r23, 0x01	; 1
     242:	0e 94 d9 1c 	call	0x39b2	; 0x39b2 <strcmp>
     246:	89 2b       	or	r24, r25
     248:	e9 f1       	breq	.+122    	; 0x2c4 <_Z13Ser_ParseDatav.part.0+0xa4>
     24a:	67 e3       	ldi	r22, 0x37	; 55
     24c:	71 e0       	ldi	r23, 0x01	; 1
     24e:	ce 01       	movw	r24, r28
     250:	0e 94 d9 1c 	call	0x39b2	; 0x39b2 <strcmp>
     254:	89 2b       	or	r24, r25
     256:	09 f4       	brne	.+2      	; 0x25a <_Z13Ser_ParseDatav.part.0+0x3a>
     258:	a2 c0       	rjmp	.+324    	; 0x39e <_Z13Ser_ParseDatav.part.0+0x17e>
     25a:	69 e5       	ldi	r22, 0x59	; 89
     25c:	71 e0       	ldi	r23, 0x01	; 1
     25e:	ce 01       	movw	r24, r28
     260:	0e 94 d9 1c 	call	0x39b2	; 0x39b2 <strcmp>
     264:	89 2b       	or	r24, r25
     266:	09 f4       	brne	.+2      	; 0x26a <_Z13Ser_ParseDatav.part.0+0x4a>
     268:	c1 c0       	rjmp	.+386    	; 0x3ec <_Z13Ser_ParseDatav.part.0+0x1cc>
     26a:	6b e7       	ldi	r22, 0x7B	; 123
     26c:	71 e0       	ldi	r23, 0x01	; 1
     26e:	ce 01       	movw	r24, r28
     270:	0e 94 d9 1c 	call	0x39b2	; 0x39b2 <strcmp>
     274:	89 2b       	or	r24, r25
     276:	09 f4       	brne	.+2      	; 0x27a <_Z13Ser_ParseDatav.part.0+0x5a>
     278:	b5 c0       	rjmp	.+362    	; 0x3e4 <_Z13Ser_ParseDatav.part.0+0x1c4>
     27a:	61 e8       	ldi	r22, 0x81	; 129
     27c:	71 e0       	ldi	r23, 0x01	; 1
     27e:	ce 01       	movw	r24, r28
     280:	0e 94 d9 1c 	call	0x39b2	; 0x39b2 <strcmp>
     284:	89 2b       	or	r24, r25
     286:	09 f0       	breq	.+2      	; 0x28a <_Z13Ser_ParseDatav.part.0+0x6a>
     288:	0c c1       	rjmp	.+536    	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
     28a:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <connectGiroToMot>
     28e:	10 92 fe 03 	sts	0x03FE, r1	; 0x8003fe <Mot0_PidCtl+0x11>
     292:	10 92 ff 03 	sts	0x03FF, r1	; 0x8003ff <Mot0_PidCtl+0x12>
     296:	10 92 00 04 	sts	0x0400, r1	; 0x800400 <Mot0_PidCtl+0x13>
     29a:	10 92 01 04 	sts	0x0401, r1	; 0x800401 <Mot0_PidCtl+0x14>
     29e:	10 92 e1 03 	sts	0x03E1, r1	; 0x8003e1 <Mot1_PidCtl+0x11>
     2a2:	10 92 e2 03 	sts	0x03E2, r1	; 0x8003e2 <Mot1_PidCtl+0x12>
     2a6:	10 92 e3 03 	sts	0x03E3, r1	; 0x8003e3 <Mot1_PidCtl+0x13>
     2aa:	10 92 e4 03 	sts	0x03E4, r1	; 0x8003e4 <Mot1_PidCtl+0x14>
     2ae:	10 92 ae 02 	sts	0x02AE, r1	; 0x8002ae <Ser_NewData>
     2b2:	df 91       	pop	r29
     2b4:	cf 91       	pop	r28
     2b6:	1f 91       	pop	r17
     2b8:	0f 91       	pop	r16
     2ba:	ff 90       	pop	r15
     2bc:	ef 90       	pop	r14
     2be:	df 90       	pop	r13
     2c0:	cf 90       	pop	r12
     2c2:	08 95       	ret
     2c4:	6f e0       	ldi	r22, 0x0F	; 15
     2c6:	71 e0       	ldi	r23, 0x01	; 1
     2c8:	87 e2       	ldi	r24, 0x27	; 39
     2ca:	95 e0       	ldi	r25, 0x05	; 5
     2cc:	0e 94 82 19 	call	0x3304	; 0x3304 <_ZN5Print7printlnEPKc>
     2d0:	69 eb       	ldi	r22, 0xB9	; 185
     2d2:	71 e0       	ldi	r23, 0x01	; 1
     2d4:	80 e0       	ldi	r24, 0x00	; 0
     2d6:	90 e0       	ldi	r25, 0x00	; 0
     2d8:	0e 94 d4 1c 	call	0x39a8	; 0x39a8 <strtok>
     2dc:	ec 01       	movw	r28, r24
     2de:	6f e1       	ldi	r22, 0x1F	; 31
     2e0:	71 e0       	ldi	r23, 0x01	; 1
     2e2:	0e 94 d9 1c 	call	0x39b2	; 0x39b2 <strcmp>
     2e6:	89 2b       	or	r24, r25
     2e8:	09 f0       	breq	.+2      	; 0x2ec <_Z13Ser_ParseDatav.part.0+0xcc>
     2ea:	b7 c0       	rjmp	.+366    	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
     2ec:	8d ee       	ldi	r24, 0xED	; 237
     2ee:	93 e0       	ldi	r25, 0x03	; 3
     2f0:	90 93 ad 02 	sts	0x02AD, r25	; 0x8002ad <CfgPtr+0x1>
     2f4:	80 93 ac 02 	sts	0x02AC, r24	; 0x8002ac <CfgPtr>
     2f8:	87 e7       	ldi	r24, 0x77	; 119
     2fa:	93 e0       	ldi	r25, 0x03	; 3
     2fc:	90 93 ab 02 	sts	0x02AB, r25	; 0x8002ab <PidPtr+0x1>
     300:	80 93 aa 02 	sts	0x02AA, r24	; 0x8002aa <PidPtr>
     304:	69 eb       	ldi	r22, 0xB9	; 185
     306:	71 e0       	ldi	r23, 0x01	; 1
     308:	80 e0       	ldi	r24, 0x00	; 0
     30a:	90 e0       	ldi	r25, 0x00	; 0
     30c:	0e 94 d4 1c 	call	0x39a8	; 0x39a8 <strtok>
     310:	c0 91 ac 02 	lds	r28, 0x02AC	; 0x8002ac <CfgPtr>
     314:	d0 91 ad 02 	lds	r29, 0x02AD	; 0x8002ad <CfgPtr+0x1>
     318:	0e 94 d0 1c 	call	0x39a0	; 0x39a0 <atof>
     31c:	6d 83       	std	Y+5, r22	; 0x05
     31e:	7e 83       	std	Y+6, r23	; 0x06
     320:	8f 83       	std	Y+7, r24	; 0x07
     322:	98 87       	std	Y+8, r25	; 0x08
     324:	69 eb       	ldi	r22, 0xB9	; 185
     326:	71 e0       	ldi	r23, 0x01	; 1
     328:	80 e0       	ldi	r24, 0x00	; 0
     32a:	90 e0       	ldi	r25, 0x00	; 0
     32c:	0e 94 d4 1c 	call	0x39a8	; 0x39a8 <strtok>
     330:	c0 91 ac 02 	lds	r28, 0x02AC	; 0x8002ac <CfgPtr>
     334:	d0 91 ad 02 	lds	r29, 0x02AD	; 0x8002ad <CfgPtr+0x1>
     338:	0e 94 d0 1c 	call	0x39a0	; 0x39a0 <atof>
     33c:	69 87       	std	Y+9, r22	; 0x09
     33e:	7a 87       	std	Y+10, r23	; 0x0a
     340:	8b 87       	std	Y+11, r24	; 0x0b
     342:	9c 87       	std	Y+12, r25	; 0x0c
     344:	69 eb       	ldi	r22, 0xB9	; 185
     346:	71 e0       	ldi	r23, 0x01	; 1
     348:	80 e0       	ldi	r24, 0x00	; 0
     34a:	90 e0       	ldi	r25, 0x00	; 0
     34c:	0e 94 d4 1c 	call	0x39a8	; 0x39a8 <strtok>
     350:	c0 91 ac 02 	lds	r28, 0x02AC	; 0x8002ac <CfgPtr>
     354:	d0 91 ad 02 	lds	r29, 0x02AD	; 0x8002ad <CfgPtr+0x1>
     358:	0e 94 d0 1c 	call	0x39a0	; 0x39a0 <atof>
     35c:	6d 87       	std	Y+13, r22	; 0x0d
     35e:	7e 87       	std	Y+14, r23	; 0x0e
     360:	8f 87       	std	Y+15, r24	; 0x0f
     362:	98 8b       	std	Y+16, r25	; 0x10
     364:	e0 91 ac 02 	lds	r30, 0x02AC	; 0x8002ac <CfgPtr>
     368:	f0 91 ad 02 	lds	r31, 0x02AD	; 0x8002ad <CfgPtr+0x1>
     36c:	c5 84       	ldd	r12, Z+13	; 0x0d
     36e:	d6 84       	ldd	r13, Z+14	; 0x0e
     370:	e7 84       	ldd	r14, Z+15	; 0x0f
     372:	f0 88       	ldd	r15, Z+16	; 0x10
     374:	01 85       	ldd	r16, Z+9	; 0x09
     376:	12 85       	ldd	r17, Z+10	; 0x0a
     378:	23 85       	ldd	r18, Z+11	; 0x0b
     37a:	34 85       	ldd	r19, Z+12	; 0x0c
     37c:	45 81       	ldd	r20, Z+5	; 0x05
     37e:	56 81       	ldd	r21, Z+6	; 0x06
     380:	67 81       	ldd	r22, Z+7	; 0x07
     382:	70 85       	ldd	r23, Z+8	; 0x08
     384:	80 91 aa 02 	lds	r24, 0x02AA	; 0x8002aa <PidPtr>
     388:	90 91 ab 02 	lds	r25, 0x02AB	; 0x8002ab <PidPtr+0x1>
     38c:	0e 94 c8 0a 	call	0x1590	; 0x1590 <_ZN3PID10SetTuningsEddd>
     390:	68 e2       	ldi	r22, 0x28	; 40
     392:	71 e0       	ldi	r23, 0x01	; 1
     394:	87 e2       	ldi	r24, 0x27	; 39
     396:	95 e0       	ldi	r25, 0x05	; 5
     398:	0e 94 82 19 	call	0x3304	; 0x3304 <_ZN5Print7printlnEPKc>
     39c:	88 cf       	rjmp	.-240    	; 0x2ae <_Z13Ser_ParseDatav.part.0+0x8e>
     39e:	6a e3       	ldi	r22, 0x3A	; 58
     3a0:	71 e0       	ldi	r23, 0x01	; 1
     3a2:	87 e2       	ldi	r24, 0x27	; 39
     3a4:	95 e0       	ldi	r25, 0x05	; 5
     3a6:	0e 94 82 19 	call	0x3304	; 0x3304 <_ZN5Print7printlnEPKc>
     3aa:	69 eb       	ldi	r22, 0xB9	; 185
     3ac:	71 e0       	ldi	r23, 0x01	; 1
     3ae:	80 e0       	ldi	r24, 0x00	; 0
     3b0:	90 e0       	ldi	r25, 0x00	; 0
     3b2:	0e 94 d4 1c 	call	0x39a8	; 0x39a8 <strtok>
     3b6:	ec 01       	movw	r28, r24
     3b8:	6f e1       	ldi	r22, 0x1F	; 31
     3ba:	71 e0       	ldi	r23, 0x01	; 1
     3bc:	0e 94 d9 1c 	call	0x39b2	; 0x39b2 <strcmp>
     3c0:	89 2b       	or	r24, r25
     3c2:	09 f0       	breq	.+2      	; 0x3c6 <_Z13Ser_ParseDatav.part.0+0x1a6>
     3c4:	5f c0       	rjmp	.+190    	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
     3c6:	8d ee       	ldi	r24, 0xED	; 237
     3c8:	93 e0       	ldi	r25, 0x03	; 3
     3ca:	90 93 ad 02 	sts	0x02AD, r25	; 0x8002ad <CfgPtr+0x1>
     3ce:	80 93 ac 02 	sts	0x02AC, r24	; 0x8002ac <CfgPtr>
     3d2:	0e 94 ba 00 	call	0x174	; 0x174 <_Z11PrintPidCfgP11PIDConfig_e>
     3d6:	6a e4       	ldi	r22, 0x4A	; 74
     3d8:	71 e0       	ldi	r23, 0x01	; 1
     3da:	87 e2       	ldi	r24, 0x27	; 39
     3dc:	95 e0       	ldi	r25, 0x05	; 5
     3de:	0e 94 82 19 	call	0x3304	; 0x3304 <_ZN5Print7printlnEPKc>
     3e2:	65 cf       	rjmp	.-310    	; 0x2ae <_Z13Ser_ParseDatav.part.0+0x8e>
     3e4:	81 e0       	ldi	r24, 0x01	; 1
     3e6:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <connectGiroToMot>
     3ea:	61 cf       	rjmp	.-318    	; 0x2ae <_Z13Ser_ParseDatav.part.0+0x8e>
     3ec:	6c e5       	ldi	r22, 0x5C	; 92
     3ee:	71 e0       	ldi	r23, 0x01	; 1
     3f0:	87 e2       	ldi	r24, 0x27	; 39
     3f2:	95 e0       	ldi	r25, 0x05	; 5
     3f4:	0e 94 82 19 	call	0x3304	; 0x3304 <_ZN5Print7printlnEPKc>
     3f8:	69 eb       	ldi	r22, 0xB9	; 185
     3fa:	71 e0       	ldi	r23, 0x01	; 1
     3fc:	80 e0       	ldi	r24, 0x00	; 0
     3fe:	90 e0       	ldi	r25, 0x00	; 0
     400:	0e 94 d4 1c 	call	0x39a8	; 0x39a8 <strtok>
     404:	ec 01       	movw	r28, r24
     406:	6f e1       	ldi	r22, 0x1F	; 31
     408:	71 e0       	ldi	r23, 0x01	; 1
     40a:	0e 94 d9 1c 	call	0x39b2	; 0x39b2 <strcmp>
     40e:	89 2b       	or	r24, r25
     410:	09 f0       	breq	.+2      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
     412:	5a c0       	rjmp	.+180    	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>
     414:	8d ee       	ldi	r24, 0xED	; 237
     416:	93 e0       	ldi	r25, 0x03	; 3
     418:	90 93 ad 02 	sts	0x02AD, r25	; 0x8002ad <CfgPtr+0x1>
     41c:	80 93 ac 02 	sts	0x02AC, r24	; 0x8002ac <CfgPtr>
     420:	87 e7       	ldi	r24, 0x77	; 119
     422:	93 e0       	ldi	r25, 0x03	; 3
     424:	90 93 ab 02 	sts	0x02AB, r25	; 0x8002ab <PidPtr+0x1>
     428:	80 93 aa 02 	sts	0x02AA, r24	; 0x8002aa <PidPtr>
     42c:	69 eb       	ldi	r22, 0xB9	; 185
     42e:	71 e0       	ldi	r23, 0x01	; 1
     430:	80 e0       	ldi	r24, 0x00	; 0
     432:	90 e0       	ldi	r25, 0x00	; 0
     434:	0e 94 d4 1c 	call	0x39a8	; 0x39a8 <strtok>
     438:	c0 91 ac 02 	lds	r28, 0x02AC	; 0x8002ac <CfgPtr>
     43c:	d0 91 ad 02 	lds	r29, 0x02AD	; 0x8002ad <CfgPtr+0x1>
     440:	0e 94 d0 1c 	call	0x39a0	; 0x39a0 <atof>
     444:	69 8b       	std	Y+17, r22	; 0x11
     446:	7a 8b       	std	Y+18, r23	; 0x12
     448:	8b 8b       	std	Y+19, r24	; 0x13
     44a:	9c 8b       	std	Y+20, r25	; 0x14
     44c:	6c e6       	ldi	r22, 0x6C	; 108
     44e:	71 e0       	ldi	r23, 0x01	; 1
     450:	87 e2       	ldi	r24, 0x27	; 39
     452:	95 e0       	ldi	r25, 0x05	; 5
     454:	0e 94 82 19 	call	0x3304	; 0x3304 <_ZN5Print7printlnEPKc>
     458:	2a cf       	rjmp	.-428    	; 0x2ae <_Z13Ser_ParseDatav.part.0+0x8e>
     45a:	62 e2       	ldi	r22, 0x22	; 34
     45c:	71 e0       	ldi	r23, 0x01	; 1
     45e:	ce 01       	movw	r24, r28
     460:	0e 94 d9 1c 	call	0x39b2	; 0x39b2 <strcmp>
     464:	89 2b       	or	r24, r25
     466:	09 f0       	breq	.+2      	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
     468:	4b c0       	rjmp	.+150    	; 0x500 <__LOCK_REGION_LENGTH__+0x100>
     46a:	80 ed       	ldi	r24, 0xD0	; 208
     46c:	93 e0       	ldi	r25, 0x03	; 3
     46e:	90 93 ad 02 	sts	0x02AD, r25	; 0x8002ad <CfgPtr+0x1>
     472:	80 93 ac 02 	sts	0x02AC, r24	; 0x8002ac <CfgPtr>
     476:	8b e3       	ldi	r24, 0x3B	; 59
     478:	93 e0       	ldi	r25, 0x03	; 3
     47a:	90 93 ab 02 	sts	0x02AB, r25	; 0x8002ab <PidPtr+0x1>
     47e:	80 93 aa 02 	sts	0x02AA, r24	; 0x8002aa <PidPtr>
     482:	40 cf       	rjmp	.-384    	; 0x304 <_Z13Ser_ParseDatav.part.0+0xe4>
     484:	62 e2       	ldi	r22, 0x22	; 34
     486:	71 e0       	ldi	r23, 0x01	; 1
     488:	ce 01       	movw	r24, r28
     48a:	0e 94 d9 1c 	call	0x39b2	; 0x39b2 <strcmp>
     48e:	89 2b       	or	r24, r25
     490:	09 f0       	breq	.+2      	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
     492:	4b c0       	rjmp	.+150    	; 0x52a <__LOCK_REGION_LENGTH__+0x12a>
     494:	80 ed       	ldi	r24, 0xD0	; 208
     496:	93 e0       	ldi	r25, 0x03	; 3
     498:	90 93 ad 02 	sts	0x02AD, r25	; 0x8002ad <CfgPtr+0x1>
     49c:	80 93 ac 02 	sts	0x02AC, r24	; 0x8002ac <CfgPtr>
     4a0:	98 cf       	rjmp	.-208    	; 0x3d2 <_Z13Ser_ParseDatav.part.0+0x1b2>
     4a2:	68 e8       	ldi	r22, 0x88	; 136
     4a4:	71 e0       	ldi	r23, 0x01	; 1
     4a6:	ce 01       	movw	r24, r28
     4a8:	0e 94 d9 1c 	call	0x39b2	; 0x39b2 <strcmp>
     4ac:	89 2b       	or	r24, r25
     4ae:	09 f4       	brne	.+2      	; 0x4b2 <__LOCK_REGION_LENGTH__+0xb2>
     4b0:	4a c0       	rjmp	.+148    	; 0x546 <__LOCK_REGION_LENGTH__+0x146>
     4b2:	6f e8       	ldi	r22, 0x8F	; 143
     4b4:	71 e0       	ldi	r23, 0x01	; 1
     4b6:	ce 01       	movw	r24, r28
     4b8:	0e 94 d9 1c 	call	0x39b2	; 0x39b2 <strcmp>
     4bc:	89 2b       	or	r24, r25
     4be:	09 f0       	breq	.+2      	; 0x4c2 <__LOCK_REGION_LENGTH__+0xc2>
     4c0:	58 c0       	rjmp	.+176    	; 0x572 <__LOCK_REGION_LENGTH__+0x172>
     4c2:	10 92 a9 02 	sts	0x02A9, r1	; 0x8002a9 <printRawGiro>
     4c6:	f3 ce       	rjmp	.-538    	; 0x2ae <_Z13Ser_ParseDatav.part.0+0x8e>
     4c8:	62 e2       	ldi	r22, 0x22	; 34
     4ca:	71 e0       	ldi	r23, 0x01	; 1
     4cc:	ce 01       	movw	r24, r28
     4ce:	0e 94 d9 1c 	call	0x39b2	; 0x39b2 <strcmp>
     4d2:	89 2b       	or	r24, r25
     4d4:	e1 f1       	breq	.+120    	; 0x54e <__LOCK_REGION_LENGTH__+0x14e>
     4d6:	65 e2       	ldi	r22, 0x25	; 37
     4d8:	71 e0       	ldi	r23, 0x01	; 1
     4da:	ce 01       	movw	r24, r28
     4dc:	0e 94 d9 1c 	call	0x39b2	; 0x39b2 <strcmp>
     4e0:	89 2b       	or	r24, r25
     4e2:	09 f0       	breq	.+2      	; 0x4e6 <__LOCK_REGION_LENGTH__+0xe6>
     4e4:	a3 cf       	rjmp	.-186    	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
     4e6:	83 eb       	ldi	r24, 0xB3	; 179
     4e8:	93 e0       	ldi	r25, 0x03	; 3
     4ea:	90 93 ad 02 	sts	0x02AD, r25	; 0x8002ad <CfgPtr+0x1>
     4ee:	80 93 ac 02 	sts	0x02AC, r24	; 0x8002ac <CfgPtr>
     4f2:	87 e7       	ldi	r24, 0x77	; 119
     4f4:	93 e0       	ldi	r25, 0x03	; 3
     4f6:	90 93 ab 02 	sts	0x02AB, r25	; 0x8002ab <PidPtr+0x1>
     4fa:	80 93 aa 02 	sts	0x02AA, r24	; 0x8002aa <PidPtr>
     4fe:	96 cf       	rjmp	.-212    	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
     500:	65 e2       	ldi	r22, 0x25	; 37
     502:	71 e0       	ldi	r23, 0x01	; 1
     504:	ce 01       	movw	r24, r28
     506:	0e 94 d9 1c 	call	0x39b2	; 0x39b2 <strcmp>
     50a:	89 2b       	or	r24, r25
     50c:	09 f0       	breq	.+2      	; 0x510 <__LOCK_REGION_LENGTH__+0x110>
     50e:	fa ce       	rjmp	.-524    	; 0x304 <_Z13Ser_ParseDatav.part.0+0xe4>
     510:	83 eb       	ldi	r24, 0xB3	; 179
     512:	93 e0       	ldi	r25, 0x03	; 3
     514:	90 93 ad 02 	sts	0x02AD, r25	; 0x8002ad <CfgPtr+0x1>
     518:	80 93 ac 02 	sts	0x02AC, r24	; 0x8002ac <CfgPtr>
     51c:	8f ef       	ldi	r24, 0xFF	; 255
     51e:	92 e0       	ldi	r25, 0x02	; 2
     520:	90 93 ab 02 	sts	0x02AB, r25	; 0x8002ab <PidPtr+0x1>
     524:	80 93 aa 02 	sts	0x02AA, r24	; 0x8002aa <PidPtr>
     528:	ed ce       	rjmp	.-550    	; 0x304 <_Z13Ser_ParseDatav.part.0+0xe4>
     52a:	65 e2       	ldi	r22, 0x25	; 37
     52c:	71 e0       	ldi	r23, 0x01	; 1
     52e:	ce 01       	movw	r24, r28
     530:	0e 94 d9 1c 	call	0x39b2	; 0x39b2 <strcmp>
     534:	89 2b       	or	r24, r25
     536:	c1 f4       	brne	.+48     	; 0x568 <__LOCK_REGION_LENGTH__+0x168>
     538:	83 eb       	ldi	r24, 0xB3	; 179
     53a:	93 e0       	ldi	r25, 0x03	; 3
     53c:	90 93 ad 02 	sts	0x02AD, r25	; 0x8002ad <CfgPtr+0x1>
     540:	80 93 ac 02 	sts	0x02AC, r24	; 0x8002ac <CfgPtr>
     544:	46 cf       	rjmp	.-372    	; 0x3d2 <_Z13Ser_ParseDatav.part.0+0x1b2>
     546:	81 e0       	ldi	r24, 0x01	; 1
     548:	80 93 a9 02 	sts	0x02A9, r24	; 0x8002a9 <printRawGiro>
     54c:	b0 ce       	rjmp	.-672    	; 0x2ae <_Z13Ser_ParseDatav.part.0+0x8e>
     54e:	80 ed       	ldi	r24, 0xD0	; 208
     550:	93 e0       	ldi	r25, 0x03	; 3
     552:	90 93 ad 02 	sts	0x02AD, r25	; 0x8002ad <CfgPtr+0x1>
     556:	80 93 ac 02 	sts	0x02AC, r24	; 0x8002ac <CfgPtr>
     55a:	87 e7       	ldi	r24, 0x77	; 119
     55c:	93 e0       	ldi	r25, 0x03	; 3
     55e:	90 93 ab 02 	sts	0x02AB, r25	; 0x8002ab <PidPtr+0x1>
     562:	80 93 aa 02 	sts	0x02AA, r24	; 0x8002aa <PidPtr>
     566:	62 cf       	rjmp	.-316    	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
     568:	80 91 ac 02 	lds	r24, 0x02AC	; 0x8002ac <CfgPtr>
     56c:	90 91 ad 02 	lds	r25, 0x02AD	; 0x8002ad <CfgPtr+0x1>
     570:	30 cf       	rjmp	.-416    	; 0x3d2 <_Z13Ser_ParseDatav.part.0+0x1b2>
     572:	67 e9       	ldi	r22, 0x97	; 151
     574:	71 e0       	ldi	r23, 0x01	; 1
     576:	ce 01       	movw	r24, r28
     578:	0e 94 d9 1c 	call	0x39b2	; 0x39b2 <strcmp>
     57c:	89 2b       	or	r24, r25
     57e:	21 f4       	brne	.+8      	; 0x588 <__LOCK_REGION_LENGTH__+0x188>
     580:	81 e0       	ldi	r24, 0x01	; 1
     582:	80 93 a8 02 	sts	0x02A8, r24	; 0x8002a8 <printMotPid>
     586:	93 ce       	rjmp	.-730    	; 0x2ae <_Z13Ser_ParseDatav.part.0+0x8e>
     588:	6d e9       	ldi	r22, 0x9D	; 157
     58a:	71 e0       	ldi	r23, 0x01	; 1
     58c:	ce 01       	movw	r24, r28
     58e:	0e 94 d9 1c 	call	0x39b2	; 0x39b2 <strcmp>
     592:	89 2b       	or	r24, r25
     594:	19 f4       	brne	.+6      	; 0x59c <__LOCK_REGION_LENGTH__+0x19c>
     596:	10 92 a8 02 	sts	0x02A8, r1	; 0x8002a8 <printMotPid>
     59a:	89 ce       	rjmp	.-750    	; 0x2ae <_Z13Ser_ParseDatav.part.0+0x8e>
     59c:	64 ea       	ldi	r22, 0xA4	; 164
     59e:	71 e0       	ldi	r23, 0x01	; 1
     5a0:	ce 01       	movw	r24, r28
     5a2:	0e 94 d9 1c 	call	0x39b2	; 0x39b2 <strcmp>
     5a6:	89 2b       	or	r24, r25
     5a8:	21 f4       	brne	.+8      	; 0x5b2 <__LOCK_REGION_LENGTH__+0x1b2>
     5aa:	81 e0       	ldi	r24, 0x01	; 1
     5ac:	80 93 a7 02 	sts	0x02A7, r24	; 0x8002a7 <printGiroPid>
     5b0:	7e ce       	rjmp	.-772    	; 0x2ae <_Z13Ser_ParseDatav.part.0+0x8e>
     5b2:	6a ea       	ldi	r22, 0xAA	; 170
     5b4:	71 e0       	ldi	r23, 0x01	; 1
     5b6:	ce 01       	movw	r24, r28
     5b8:	0e 94 d9 1c 	call	0x39b2	; 0x39b2 <strcmp>
     5bc:	89 2b       	or	r24, r25
     5be:	09 f0       	breq	.+2      	; 0x5c2 <__LOCK_REGION_LENGTH__+0x1c2>
     5c0:	76 ce       	rjmp	.-788    	; 0x2ae <_Z13Ser_ParseDatav.part.0+0x8e>
     5c2:	10 92 a7 02 	sts	0x02A7, r1	; 0x8002a7 <printGiroPid>
     5c6:	73 ce       	rjmp	.-794    	; 0x2ae <_Z13Ser_ParseDatav.part.0+0x8e>

000005c8 <_Z13Giro_ReadDatav>:
     5c8:	8f 92       	push	r8
     5ca:	9f 92       	push	r9
     5cc:	af 92       	push	r10
     5ce:	bf 92       	push	r11
     5d0:	cf 92       	push	r12
     5d2:	df 92       	push	r13
     5d4:	ef 92       	push	r14
     5d6:	ff 92       	push	r15
     5d8:	0f 93       	push	r16
     5da:	1f 93       	push	r17
     5dc:	cf 93       	push	r28
     5de:	df 93       	push	r29
     5e0:	0e 94 74 1b 	call	0x36e8	; 0x36e8 <millis>
     5e4:	60 93 a3 02 	sts	0x02A3, r22	; 0x8002a3 <Giro_currTime>
     5e8:	70 93 a4 02 	sts	0x02A4, r23	; 0x8002a4 <Giro_currTime+0x1>
     5ec:	80 93 a5 02 	sts	0x02A5, r24	; 0x8002a5 <Giro_currTime+0x2>
     5f0:	90 93 a6 02 	sts	0x02A6, r25	; 0x8002a6 <Giro_currTime+0x3>
     5f4:	c0 90 9b 02 	lds	r12, 0x029B	; 0x80029b <Giro_prevTime>
     5f8:	d0 90 9c 02 	lds	r13, 0x029C	; 0x80029c <Giro_prevTime+0x1>
     5fc:	e0 90 9d 02 	lds	r14, 0x029D	; 0x80029d <Giro_prevTime+0x2>
     600:	f0 90 9e 02 	lds	r15, 0x029E	; 0x80029e <Giro_prevTime+0x3>
     604:	9b 01       	movw	r18, r22
     606:	ac 01       	movw	r20, r24
     608:	2c 19       	sub	r18, r12
     60a:	3d 09       	sbc	r19, r13
     60c:	4e 09       	sbc	r20, r14
     60e:	5f 09       	sbc	r21, r15
     610:	20 93 9f 02 	sts	0x029F, r18	; 0x80029f <Giro_loopTime>
     614:	30 93 a0 02 	sts	0x02A0, r19	; 0x8002a0 <Giro_loopTime+0x1>
     618:	40 93 a1 02 	sts	0x02A1, r20	; 0x8002a1 <Giro_loopTime+0x2>
     61c:	50 93 a2 02 	sts	0x02A2, r21	; 0x8002a2 <Giro_loopTime+0x3>
     620:	60 93 9b 02 	sts	0x029B, r22	; 0x80029b <Giro_prevTime>
     624:	70 93 9c 02 	sts	0x029C, r23	; 0x80029c <Giro_prevTime+0x1>
     628:	80 93 9d 02 	sts	0x029D, r24	; 0x80029d <Giro_prevTime+0x2>
     62c:	90 93 9e 02 	sts	0x029E, r25	; 0x80029e <Giro_prevTime+0x3>
     630:	8b e2       	ldi	r24, 0x2B	; 43
     632:	94 e0       	ldi	r25, 0x04	; 4
     634:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <_ZN7MPU605016getAccelerationYEv>
     638:	90 93 2a 04 	sts	0x042A, r25	; 0x80042a <Giro_AccY+0x1>
     63c:	80 93 29 04 	sts	0x0429, r24	; 0x800429 <Giro_AccY>
     640:	8b e2       	ldi	r24, 0x2B	; 43
     642:	94 e0       	ldi	r25, 0x04	; 4
     644:	0e 94 1d 0f 	call	0x1e3a	; 0x1e3a <_ZN7MPU605016getAccelerationZEv>
     648:	90 93 28 04 	sts	0x0428, r25	; 0x800428 <Giro_AccZ+0x1>
     64c:	80 93 27 04 	sts	0x0427, r24	; 0x800427 <Giro_AccZ>
     650:	8b e2       	ldi	r24, 0x2B	; 43
     652:	94 e0       	ldi	r25, 0x04	; 4
     654:	0e 94 38 0f 	call	0x1e70	; 0x1e70 <_ZN7MPU605012getRotationXEv>
     658:	ec 01       	movw	r28, r24
     65a:	90 93 26 04 	sts	0x0426, r25	; 0x800426 <Giro_RotX+0x1>
     65e:	80 93 25 04 	sts	0x0425, r24	; 0x800425 <Giro_RotX>
     662:	60 91 27 04 	lds	r22, 0x0427	; 0x800427 <Giro_AccZ>
     666:	70 91 28 04 	lds	r23, 0x0428	; 0x800428 <Giro_AccZ+0x1>
     66a:	07 2e       	mov	r0, r23
     66c:	00 0c       	add	r0, r0
     66e:	88 0b       	sbc	r24, r24
     670:	99 0b       	sbc	r25, r25
     672:	0e 94 08 16 	call	0x2c10	; 0x2c10 <__floatsisf>
     676:	6b 01       	movw	r12, r22
     678:	7c 01       	movw	r14, r24
     67a:	60 91 29 04 	lds	r22, 0x0429	; 0x800429 <Giro_AccY>
     67e:	70 91 2a 04 	lds	r23, 0x042A	; 0x80042a <Giro_AccY+0x1>
     682:	07 2e       	mov	r0, r23
     684:	00 0c       	add	r0, r0
     686:	88 0b       	sbc	r24, r24
     688:	99 0b       	sbc	r25, r25
     68a:	0e 94 08 16 	call	0x2c10	; 0x2c10 <__floatsisf>
     68e:	a7 01       	movw	r20, r14
     690:	96 01       	movw	r18, r12
     692:	0e 94 fa 14 	call	0x29f4	; 0x29f4 <atan2>
     696:	21 ee       	ldi	r18, 0xE1	; 225
     698:	3e e2       	ldi	r19, 0x2E	; 46
     69a:	45 e6       	ldi	r20, 0x65	; 101
     69c:	52 e4       	ldi	r21, 0x42	; 66
     69e:	0e 94 ec 16 	call	0x2dd8	; 0x2dd8 <__mulsf3>
     6a2:	60 93 1f 04 	sts	0x041F, r22	; 0x80041f <Giro_AccAngle>
     6a6:	70 93 20 04 	sts	0x0420, r23	; 0x800420 <Giro_AccAngle+0x1>
     6aa:	80 93 21 04 	sts	0x0421, r24	; 0x800421 <Giro_AccAngle+0x2>
     6ae:	90 93 22 04 	sts	0x0422, r25	; 0x800422 <Giro_AccAngle+0x3>
     6b2:	be 01       	movw	r22, r28
     6b4:	dd 0f       	add	r29, r29
     6b6:	88 0b       	sbc	r24, r24
     6b8:	99 0b       	sbc	r25, r25
     6ba:	1f 92       	push	r1
     6bc:	1f 92       	push	r1
     6be:	1f 92       	push	r1
     6c0:	2a ef       	ldi	r18, 0xFA	; 250
     6c2:	2f 93       	push	r18
     6c4:	26 e0       	ldi	r18, 0x06	; 6
     6c6:	a2 2e       	mov	r10, r18
     6c8:	bb 24       	eor	r11, r11
     6ca:	ba 94       	dec	r11
     6cc:	cb 2c       	mov	r12, r11
     6ce:	db 2c       	mov	r13, r11
     6d0:	ee 24       	eor	r14, r14
     6d2:	ea 94       	dec	r14
     6d4:	1f e7       	ldi	r17, 0x7F	; 127
     6d6:	f1 2e       	mov	r15, r17
     6d8:	00 e0       	ldi	r16, 0x00	; 0
     6da:	10 e0       	ldi	r17, 0x00	; 0
     6dc:	20 e0       	ldi	r18, 0x00	; 0
     6de:	30 e8       	ldi	r19, 0x80	; 128
     6e0:	4f ef       	ldi	r20, 0xFF	; 255
     6e2:	5f ef       	ldi	r21, 0xFF	; 255
     6e4:	0e 94 19 1c 	call	0x3832	; 0x3832 <_Z3maplllll>
     6e8:	70 93 24 04 	sts	0x0424, r23	; 0x800424 <Giro_Rate+0x1>
     6ec:	60 93 23 04 	sts	0x0423, r22	; 0x800423 <Giro_Rate>
     6f0:	c0 91 23 04 	lds	r28, 0x0423	; 0x800423 <Giro_Rate>
     6f4:	d0 91 24 04 	lds	r29, 0x0424	; 0x800424 <Giro_Rate+0x1>
     6f8:	60 91 9f 02 	lds	r22, 0x029F	; 0x80029f <Giro_loopTime>
     6fc:	70 91 a0 02 	lds	r23, 0x02A0	; 0x8002a0 <Giro_loopTime+0x1>
     700:	80 91 a1 02 	lds	r24, 0x02A1	; 0x8002a1 <Giro_loopTime+0x2>
     704:	90 91 a2 02 	lds	r25, 0x02A2	; 0x8002a2 <Giro_loopTime+0x3>
     708:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <__floatunsisf>
     70c:	6b 01       	movw	r12, r22
     70e:	7c 01       	movw	r14, r24
     710:	be 01       	movw	r22, r28
     712:	dd 0f       	add	r29, r29
     714:	88 0b       	sbc	r24, r24
     716:	99 0b       	sbc	r25, r25
     718:	0e 94 08 16 	call	0x2c10	; 0x2c10 <__floatsisf>
     71c:	9b 01       	movw	r18, r22
     71e:	ac 01       	movw	r20, r24
     720:	c7 01       	movw	r24, r14
     722:	b6 01       	movw	r22, r12
     724:	0e 94 ec 16 	call	0x2dd8	; 0x2dd8 <__mulsf3>
     728:	20 e0       	ldi	r18, 0x00	; 0
     72a:	30 e0       	ldi	r19, 0x00	; 0
     72c:	4a e7       	ldi	r20, 0x7A	; 122
     72e:	54 e4       	ldi	r21, 0x44	; 68
     730:	0e 94 5e 15 	call	0x2abc	; 0x2abc <__divsf3>
     734:	60 93 1b 04 	sts	0x041B, r22	; 0x80041b <Giro_Angle>
     738:	70 93 1c 04 	sts	0x041C, r23	; 0x80041c <Giro_Angle+0x1>
     73c:	80 93 1d 04 	sts	0x041D, r24	; 0x80041d <Giro_Angle+0x2>
     740:	90 93 1e 04 	sts	0x041E, r25	; 0x80041e <Giro_Angle+0x3>
     744:	60 91 13 04 	lds	r22, 0x0413	; 0x800413 <Giro_PrevAngle>
     748:	70 91 14 04 	lds	r23, 0x0414	; 0x800414 <Giro_PrevAngle+0x1>
     74c:	80 91 15 04 	lds	r24, 0x0415	; 0x800415 <Giro_PrevAngle+0x2>
     750:	90 91 16 04 	lds	r25, 0x0416	; 0x800416 <Giro_PrevAngle+0x3>
     754:	20 91 1b 04 	lds	r18, 0x041B	; 0x80041b <Giro_Angle>
     758:	30 91 1c 04 	lds	r19, 0x041C	; 0x80041c <Giro_Angle+0x1>
     75c:	40 91 1d 04 	lds	r20, 0x041D	; 0x80041d <Giro_Angle+0x2>
     760:	50 91 1e 04 	lds	r21, 0x041E	; 0x80041e <Giro_Angle+0x3>
     764:	80 90 1f 04 	lds	r8, 0x041F	; 0x80041f <Giro_AccAngle>
     768:	90 90 20 04 	lds	r9, 0x0420	; 0x800420 <Giro_AccAngle+0x1>
     76c:	a0 90 21 04 	lds	r10, 0x0421	; 0x800421 <Giro_AccAngle+0x2>
     770:	b0 90 22 04 	lds	r11, 0x0422	; 0x800422 <Giro_AccAngle+0x3>
     774:	0e 94 7b 14 	call	0x28f6	; 0x28f6 <__addsf3>
     778:	26 e7       	ldi	r18, 0x76	; 118
     77a:	3f e4       	ldi	r19, 0x4F	; 79
     77c:	4e e7       	ldi	r20, 0x7E	; 126
     77e:	5f e3       	ldi	r21, 0x3F	; 63
     780:	0e 94 ec 16 	call	0x2dd8	; 0x2dd8 <__mulsf3>
     784:	6b 01       	movw	r12, r22
     786:	7c 01       	movw	r14, r24
     788:	20 ed       	ldi	r18, 0xD0	; 208
     78a:	34 e4       	ldi	r19, 0x44	; 68
     78c:	48 ed       	ldi	r20, 0xD8	; 216
     78e:	5b e3       	ldi	r21, 0x3B	; 59
     790:	c5 01       	movw	r24, r10
     792:	b4 01       	movw	r22, r8
     794:	0e 94 ec 16 	call	0x2dd8	; 0x2dd8 <__mulsf3>
     798:	9b 01       	movw	r18, r22
     79a:	ac 01       	movw	r20, r24
     79c:	c7 01       	movw	r24, r14
     79e:	b6 01       	movw	r22, r12
     7a0:	0e 94 7b 14 	call	0x28f6	; 0x28f6 <__addsf3>
     7a4:	60 93 17 04 	sts	0x0417, r22	; 0x800417 <Giro_FilteredAngle>
     7a8:	70 93 18 04 	sts	0x0418, r23	; 0x800418 <Giro_FilteredAngle+0x1>
     7ac:	80 93 19 04 	sts	0x0419, r24	; 0x800419 <Giro_FilteredAngle+0x2>
     7b0:	90 93 1a 04 	sts	0x041A, r25	; 0x80041a <Giro_FilteredAngle+0x3>
     7b4:	80 91 17 04 	lds	r24, 0x0417	; 0x800417 <Giro_FilteredAngle>
     7b8:	90 91 18 04 	lds	r25, 0x0418	; 0x800418 <Giro_FilteredAngle+0x1>
     7bc:	a0 91 19 04 	lds	r26, 0x0419	; 0x800419 <Giro_FilteredAngle+0x2>
     7c0:	b0 91 1a 04 	lds	r27, 0x041A	; 0x80041a <Giro_FilteredAngle+0x3>
     7c4:	80 93 13 04 	sts	0x0413, r24	; 0x800413 <Giro_PrevAngle>
     7c8:	90 93 14 04 	sts	0x0414, r25	; 0x800414 <Giro_PrevAngle+0x1>
     7cc:	a0 93 15 04 	sts	0x0415, r26	; 0x800415 <Giro_PrevAngle+0x2>
     7d0:	b0 93 16 04 	sts	0x0416, r27	; 0x800416 <Giro_PrevAngle+0x3>
     7d4:	80 91 17 04 	lds	r24, 0x0417	; 0x800417 <Giro_FilteredAngle>
     7d8:	90 91 18 04 	lds	r25, 0x0418	; 0x800418 <Giro_FilteredAngle+0x1>
     7dc:	a0 91 19 04 	lds	r26, 0x0419	; 0x800419 <Giro_FilteredAngle+0x2>
     7e0:	b0 91 1a 04 	lds	r27, 0x041A	; 0x80041a <Giro_FilteredAngle+0x3>
     7e4:	b0 58       	subi	r27, 0x80	; 128
     7e6:	80 93 c8 03 	sts	0x03C8, r24	; 0x8003c8 <Giro_PidCtl+0x15>
     7ea:	90 93 c9 03 	sts	0x03C9, r25	; 0x8003c9 <Giro_PidCtl+0x16>
     7ee:	a0 93 ca 03 	sts	0x03CA, r26	; 0x8003ca <Giro_PidCtl+0x17>
     7f2:	b0 93 cb 03 	sts	0x03CB, r27	; 0x8003cb <Giro_PidCtl+0x18>
     7f6:	0f 90       	pop	r0
     7f8:	0f 90       	pop	r0
     7fa:	0f 90       	pop	r0
     7fc:	0f 90       	pop	r0
     7fe:	df 91       	pop	r29
     800:	cf 91       	pop	r28
     802:	1f 91       	pop	r17
     804:	0f 91       	pop	r16
     806:	ff 90       	pop	r15
     808:	ef 90       	pop	r14
     80a:	df 90       	pop	r13
     80c:	cf 90       	pop	r12
     80e:	bf 90       	pop	r11
     810:	af 90       	pop	r10
     812:	9f 90       	pop	r9
     814:	8f 90       	pop	r8
     816:	08 95       	ret

00000818 <setup>:
     818:	0f 93       	push	r16
     81a:	1f 93       	push	r17
     81c:	26 e0       	ldi	r18, 0x06	; 6
     81e:	40 e9       	ldi	r20, 0x90	; 144
     820:	50 ed       	ldi	r21, 0xD0	; 208
     822:	63 e0       	ldi	r22, 0x03	; 3
     824:	70 e0       	ldi	r23, 0x00	; 0
     826:	87 e2       	ldi	r24, 0x27	; 39
     828:	95 e0       	ldi	r25, 0x05	; 5
     82a:	0e 94 32 18 	call	0x3064	; 0x3064 <_ZN14HardwareSerial5beginEmh>
     82e:	6d ec       	ldi	r22, 0xCD	; 205
     830:	71 e0       	ldi	r23, 0x01	; 1
     832:	87 e2       	ldi	r24, 0x27	; 39
     834:	95 e0       	ldi	r25, 0x05	; 5
     836:	0e 94 82 19 	call	0x3304	; 0x3304 <_ZN5Print7printlnEPKc>
     83a:	8b e2       	ldi	r24, 0x2B	; 43
     83c:	94 e0       	ldi	r25, 0x04	; 4
     83e:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <_ZN7MPU605010initializeEv>
     842:	65 ef       	ldi	r22, 0xF5	; 245
     844:	71 e0       	ldi	r23, 0x01	; 1
     846:	8b e2       	ldi	r24, 0x2B	; 43
     848:	94 e0       	ldi	r25, 0x04	; 4
     84a:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <_ZN7MPU605015setXAccelOffsetEi>
     84e:	61 e1       	ldi	r22, 0x11	; 17
     850:	76 e0       	ldi	r23, 0x06	; 6
     852:	8b e2       	ldi	r24, 0x2B	; 43
     854:	94 e0       	ldi	r25, 0x04	; 4
     856:	0e 94 59 0f 	call	0x1eb2	; 0x1eb2 <_ZN7MPU605015setYAccelOffsetEi>
     85a:	68 e2       	ldi	r22, 0x28	; 40
     85c:	75 e0       	ldi	r23, 0x05	; 5
     85e:	8b e2       	ldi	r24, 0x2B	; 43
     860:	94 e0       	ldi	r25, 0x04	; 4
     862:	0e 94 5f 0f 	call	0x1ebe	; 0x1ebe <_ZN7MPU605015setZAccelOffsetEi>
     866:	66 e9       	ldi	r22, 0x96	; 150
     868:	70 e0       	ldi	r23, 0x00	; 0
     86a:	8b e2       	ldi	r24, 0x2B	; 43
     86c:	94 e0       	ldi	r25, 0x04	; 4
     86e:	0e 94 65 0f 	call	0x1eca	; 0x1eca <_ZN7MPU605014setXGyroOffsetEi>
     872:	6a ef       	ldi	r22, 0xFA	; 250
     874:	7f ef       	ldi	r23, 0xFF	; 255
     876:	8b e2       	ldi	r24, 0x2B	; 43
     878:	94 e0       	ldi	r25, 0x04	; 4
     87a:	0e 94 6b 0f 	call	0x1ed6	; 0x1ed6 <_ZN7MPU605014setYGyroOffsetEi>
     87e:	63 e1       	ldi	r22, 0x13	; 19
     880:	70 e0       	ldi	r23, 0x00	; 0
     882:	8b e2       	ldi	r24, 0x2B	; 43
     884:	94 e0       	ldi	r25, 0x04	; 4
     886:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <_ZN7MPU605014setZGyroOffsetEi>
     88a:	66 ee       	ldi	r22, 0xE6	; 230
     88c:	71 e0       	ldi	r23, 0x01	; 1
     88e:	87 e2       	ldi	r24, 0x27	; 39
     890:	95 e0       	ldi	r25, 0x05	; 5
     892:	0e 94 82 19 	call	0x3304	; 0x3304 <_ZN5Print7printlnEPKc>
     896:	0e 94 03 13 	call	0x2606	; 0x2606 <_Z9Mot0_Initv>
     89a:	0e 94 14 13 	call	0x2628	; 0x2628 <_Z9Mot1_Initv>
     89e:	60 e0       	ldi	r22, 0x00	; 0
     8a0:	70 e0       	ldi	r23, 0x00	; 0
     8a2:	80 e0       	ldi	r24, 0x00	; 0
     8a4:	90 e0       	ldi	r25, 0x00	; 0
     8a6:	0e 94 25 13 	call	0x264a	; 0x264a <_Z15Motors_SetSpeedii>
     8aa:	61 e0       	ldi	r22, 0x01	; 1
     8ac:	72 e0       	ldi	r23, 0x02	; 2
     8ae:	87 e2       	ldi	r24, 0x27	; 39
     8b0:	95 e0       	ldi	r25, 0x05	; 5
     8b2:	0e 94 82 19 	call	0x3304	; 0x3304 <_ZN5Print7printlnEPKc>
     8b6:	0e 94 5a 13 	call	0x26b4	; 0x26b4 <_Z8Enc_Initv>
     8ba:	6b e1       	ldi	r22, 0x1B	; 27
     8bc:	72 e0       	ldi	r23, 0x02	; 2
     8be:	87 e2       	ldi	r24, 0x27	; 39
     8c0:	95 e0       	ldi	r25, 0x05	; 5
     8c2:	0e 94 82 19 	call	0x3304	; 0x3304 <_ZN5Print7printlnEPKc>
     8c6:	8d ee       	ldi	r24, 0xED	; 237
     8c8:	93 e0       	ldi	r25, 0x03	; 3
     8ca:	0e 94 ba 00 	call	0x174	; 0x174 <_Z11PrintPidCfgP11PIDConfig_e>
     8ce:	80 ed       	ldi	r24, 0xD0	; 208
     8d0:	93 e0       	ldi	r25, 0x03	; 3
     8d2:	0e 94 ba 00 	call	0x174	; 0x174 <_Z11PrintPidCfgP11PIDConfig_e>
     8d6:	83 eb       	ldi	r24, 0xB3	; 179
     8d8:	93 e0       	ldi	r25, 0x03	; 3
     8da:	0e 94 ba 00 	call	0x174	; 0x174 <_Z11PrintPidCfgP11PIDConfig_e>
     8de:	6a e0       	ldi	r22, 0x0A	; 10
     8e0:	70 e0       	ldi	r23, 0x00	; 0
     8e2:	87 e7       	ldi	r24, 0x77	; 119
     8e4:	93 e0       	ldi	r25, 0x03	; 3
     8e6:	0e 94 8b 0b 	call	0x1716	; 0x1716 <_ZN3PID13SetSampleTimeEi>
     8ea:	00 e0       	ldi	r16, 0x00	; 0
     8ec:	10 e0       	ldi	r17, 0x00	; 0
     8ee:	2f e7       	ldi	r18, 0x7F	; 127
     8f0:	33 e4       	ldi	r19, 0x43	; 67
     8f2:	40 e0       	ldi	r20, 0x00	; 0
     8f4:	50 e0       	ldi	r21, 0x00	; 0
     8f6:	6f e7       	ldi	r22, 0x7F	; 127
     8f8:	73 ec       	ldi	r23, 0xC3	; 195
     8fa:	87 e7       	ldi	r24, 0x77	; 119
     8fc:	93 e0       	ldi	r25, 0x03	; 3
     8fe:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <_ZN3PID15SetOutputLimitsEdd>
     902:	61 e0       	ldi	r22, 0x01	; 1
     904:	70 e0       	ldi	r23, 0x00	; 0
     906:	87 e7       	ldi	r24, 0x77	; 119
     908:	93 e0       	ldi	r25, 0x03	; 3
     90a:	0e 94 62 0c 	call	0x18c4	; 0x18c4 <_ZN3PID7SetModeEi>
     90e:	6a e0       	ldi	r22, 0x0A	; 10
     910:	70 e0       	ldi	r23, 0x00	; 0
     912:	8b e3       	ldi	r24, 0x3B	; 59
     914:	93 e0       	ldi	r25, 0x03	; 3
     916:	0e 94 8b 0b 	call	0x1716	; 0x1716 <_ZN3PID13SetSampleTimeEi>
     91a:	00 e0       	ldi	r16, 0x00	; 0
     91c:	10 e0       	ldi	r17, 0x00	; 0
     91e:	2f e7       	ldi	r18, 0x7F	; 127
     920:	33 e4       	ldi	r19, 0x43	; 67
     922:	40 e0       	ldi	r20, 0x00	; 0
     924:	50 e0       	ldi	r21, 0x00	; 0
     926:	6f e7       	ldi	r22, 0x7F	; 127
     928:	73 ec       	ldi	r23, 0xC3	; 195
     92a:	8b e3       	ldi	r24, 0x3B	; 59
     92c:	93 e0       	ldi	r25, 0x03	; 3
     92e:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <_ZN3PID15SetOutputLimitsEdd>
     932:	61 e0       	ldi	r22, 0x01	; 1
     934:	70 e0       	ldi	r23, 0x00	; 0
     936:	8b e3       	ldi	r24, 0x3B	; 59
     938:	93 e0       	ldi	r25, 0x03	; 3
     93a:	0e 94 62 0c 	call	0x18c4	; 0x18c4 <_ZN3PID7SetModeEi>
     93e:	6a e0       	ldi	r22, 0x0A	; 10
     940:	70 e0       	ldi	r23, 0x00	; 0
     942:	8f ef       	ldi	r24, 0xFF	; 255
     944:	92 e0       	ldi	r25, 0x02	; 2
     946:	0e 94 8b 0b 	call	0x1716	; 0x1716 <_ZN3PID13SetSampleTimeEi>
     94a:	00 e0       	ldi	r16, 0x00	; 0
     94c:	10 e0       	ldi	r17, 0x00	; 0
     94e:	2c e1       	ldi	r18, 0x1C	; 28
     950:	32 e4       	ldi	r19, 0x42	; 66
     952:	40 e0       	ldi	r20, 0x00	; 0
     954:	50 e0       	ldi	r21, 0x00	; 0
     956:	6c e1       	ldi	r22, 0x1C	; 28
     958:	72 ec       	ldi	r23, 0xC2	; 194
     95a:	8f ef       	ldi	r24, 0xFF	; 255
     95c:	92 e0       	ldi	r25, 0x02	; 2
     95e:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <_ZN3PID15SetOutputLimitsEdd>
     962:	61 e0       	ldi	r22, 0x01	; 1
     964:	70 e0       	ldi	r23, 0x00	; 0
     966:	8f ef       	ldi	r24, 0xFF	; 255
     968:	92 e0       	ldi	r25, 0x02	; 2
     96a:	0e 94 62 0c 	call	0x18c4	; 0x18c4 <_ZN3PID7SetModeEi>
     96e:	67 e3       	ldi	r22, 0x37	; 55
     970:	72 e0       	ldi	r23, 0x02	; 2
     972:	87 e2       	ldi	r24, 0x27	; 39
     974:	95 e0       	ldi	r25, 0x05	; 5
     976:	0e 94 82 19 	call	0x3304	; 0x3304 <_ZN5Print7printlnEPKc>
     97a:	6f e4       	ldi	r22, 0x4F	; 79
     97c:	72 e0       	ldi	r23, 0x02	; 2
     97e:	87 e2       	ldi	r24, 0x27	; 39
     980:	95 e0       	ldi	r25, 0x05	; 5
     982:	1f 91       	pop	r17
     984:	0f 91       	pop	r16
     986:	0c 94 82 19 	jmp	0x3304	; 0x3304 <_ZN5Print7printlnEPKc>

0000098a <_GLOBAL__sub_I_sonar>:
     98a:	7f 92       	push	r7
     98c:	8f 92       	push	r8
     98e:	9f 92       	push	r9
     990:	af 92       	push	r10
     992:	bf 92       	push	r11
     994:	cf 92       	push	r12
     996:	df 92       	push	r13
     998:	ef 92       	push	r14
     99a:	ff 92       	push	r15
     99c:	0f 93       	push	r16
     99e:	1f 93       	push	r17
     9a0:	cf 93       	push	r28
     9a2:	df 93       	push	r29
     9a4:	2b e4       	ldi	r18, 0x4B	; 75
     9a6:	30 e0       	ldi	r19, 0x00	; 0
     9a8:	48 e0       	ldi	r20, 0x08	; 8
     9aa:	69 e0       	ldi	r22, 0x09	; 9
     9ac:	8a e3       	ldi	r24, 0x3A	; 58
     9ae:	94 e0       	ldi	r25, 0x04	; 4
     9b0:	0e 94 77 0f 	call	0x1eee	; 0x1eee <_ZN7NewPingC1Ehhj>
     9b4:	8b e2       	ldi	r24, 0x2B	; 43
     9b6:	94 e0       	ldi	r25, 0x04	; 4
     9b8:	0e 94 da 0e 	call	0x1db4	; 0x1db4 <_ZN7MPU6050C1Ev>
     9bc:	ed ee       	ldi	r30, 0xED	; 237
     9be:	f3 e0       	ldi	r31, 0x03	; 3
     9c0:	8d e4       	ldi	r24, 0x4D	; 77
     9c2:	90 e3       	ldi	r25, 0x30	; 48
     9c4:	91 83       	std	Z+1, r25	; 0x01
     9c6:	80 83       	st	Z, r24
     9c8:	12 82       	std	Z+2, r1	; 0x02
     9ca:	40 e0       	ldi	r20, 0x00	; 0
     9cc:	50 e0       	ldi	r21, 0x00	; 0
     9ce:	60 ea       	ldi	r22, 0xA0	; 160
     9d0:	71 e4       	ldi	r23, 0x41	; 65
     9d2:	45 83       	std	Z+5, r20	; 0x05
     9d4:	56 83       	std	Z+6, r21	; 0x06
     9d6:	67 83       	std	Z+7, r22	; 0x07
     9d8:	70 87       	std	Z+8, r23	; 0x08
     9da:	15 86       	std	Z+13, r1	; 0x0d
     9dc:	16 86       	std	Z+14, r1	; 0x0e
     9de:	17 86       	std	Z+15, r1	; 0x0f
     9e0:	10 8a       	std	Z+16, r1	; 0x10
     9e2:	80 e0       	ldi	r24, 0x00	; 0
     9e4:	90 e0       	ldi	r25, 0x00	; 0
     9e6:	ac e5       	ldi	r26, 0x5C	; 92
     9e8:	b3 e4       	ldi	r27, 0x43	; 67
     9ea:	81 87       	std	Z+9, r24	; 0x09
     9ec:	92 87       	std	Z+10, r25	; 0x0a
     9ee:	a3 87       	std	Z+11, r26	; 0x0b
     9f0:	b4 87       	std	Z+12, r27	; 0x0c
     9f2:	11 8a       	std	Z+17, r1	; 0x11
     9f4:	12 8a       	std	Z+18, r1	; 0x12
     9f6:	13 8a       	std	Z+19, r1	; 0x13
     9f8:	14 8a       	std	Z+20, r1	; 0x14
     9fa:	20 ed       	ldi	r18, 0xD0	; 208
     9fc:	82 2e       	mov	r8, r18
     9fe:	23 e0       	ldi	r18, 0x03	; 3
     a00:	92 2e       	mov	r9, r18
     a02:	2d e4       	ldi	r18, 0x4D	; 77
     a04:	31 e3       	ldi	r19, 0x31	; 49
     a06:	f4 01       	movw	r30, r8
     a08:	31 83       	std	Z+1, r19	; 0x01
     a0a:	20 83       	st	Z, r18
     a0c:	12 82       	std	Z+2, r1	; 0x02
     a0e:	45 83       	std	Z+5, r20	; 0x05
     a10:	56 83       	std	Z+6, r21	; 0x06
     a12:	67 83       	std	Z+7, r22	; 0x07
     a14:	70 87       	std	Z+8, r23	; 0x08
     a16:	15 86       	std	Z+13, r1	; 0x0d
     a18:	16 86       	std	Z+14, r1	; 0x0e
     a1a:	17 86       	std	Z+15, r1	; 0x0f
     a1c:	10 8a       	std	Z+16, r1	; 0x10
     a1e:	81 87       	std	Z+9, r24	; 0x09
     a20:	92 87       	std	Z+10, r25	; 0x0a
     a22:	a3 87       	std	Z+11, r26	; 0x0b
     a24:	b4 87       	std	Z+12, r27	; 0x0c
     a26:	11 8a       	std	Z+17, r1	; 0x11
     a28:	12 8a       	std	Z+18, r1	; 0x12
     a2a:	13 8a       	std	Z+19, r1	; 0x13
     a2c:	14 8a       	std	Z+20, r1	; 0x14
     a2e:	c3 eb       	ldi	r28, 0xB3	; 179
     a30:	d3 e0       	ldi	r29, 0x03	; 3
     a32:	87 e4       	ldi	r24, 0x47	; 71
     a34:	99 e6       	ldi	r25, 0x69	; 105
     a36:	99 83       	std	Y+1, r25	; 0x01
     a38:	88 83       	st	Y, r24
     a3a:	1a 82       	std	Y+2, r1	; 0x02
     a3c:	80 e0       	ldi	r24, 0x00	; 0
     a3e:	90 e0       	ldi	r25, 0x00	; 0
     a40:	a0 e2       	ldi	r26, 0x20	; 32
     a42:	b0 e4       	ldi	r27, 0x40	; 64
     a44:	8d 83       	std	Y+5, r24	; 0x05
     a46:	9e 83       	std	Y+6, r25	; 0x06
     a48:	af 83       	std	Y+7, r26	; 0x07
     a4a:	b8 87       	std	Y+8, r27	; 0x08
     a4c:	8d ec       	ldi	r24, 0xCD	; 205
     a4e:	9c ec       	ldi	r25, 0xCC	; 204
     a50:	ac ec       	ldi	r26, 0xCC	; 204
     a52:	bc e3       	ldi	r27, 0x3C	; 60
     a54:	8d 87       	std	Y+13, r24	; 0x0d
     a56:	9e 87       	std	Y+14, r25	; 0x0e
     a58:	af 87       	std	Y+15, r26	; 0x0f
     a5a:	b8 8b       	std	Y+16, r27	; 0x10
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	90 e0       	ldi	r25, 0x00	; 0
     a60:	a0 eb       	ldi	r26, 0xB0	; 176
     a62:	b1 e4       	ldi	r27, 0x41	; 65
     a64:	89 87       	std	Y+9, r24	; 0x09
     a66:	9a 87       	std	Y+10, r25	; 0x0a
     a68:	ab 87       	std	Y+11, r26	; 0x0b
     a6a:	bc 87       	std	Y+12, r27	; 0x0c
     a6c:	80 e0       	ldi	r24, 0x00	; 0
     a6e:	90 e0       	ldi	r25, 0x00	; 0
     a70:	a0 e0       	ldi	r26, 0x00	; 0
     a72:	b0 ec       	ldi	r27, 0xC0	; 192
     a74:	89 8b       	std	Y+17, r24	; 0x11
     a76:	9a 8b       	std	Y+18, r25	; 0x12
     a78:	ab 8b       	std	Y+19, r26	; 0x13
     a7a:	bc 8b       	std	Y+20, r27	; 0x14
     a7c:	1f 92       	push	r1
     a7e:	1f 92       	push	r1
     a80:	1f 92       	push	r1
     a82:	77 24       	eor	r7, r7
     a84:	73 94       	inc	r7
     a86:	7f 92       	push	r7
     a88:	1f 92       	push	r1
     a8a:	1f 92       	push	r1
     a8c:	1f 92       	push	r1
     a8e:	1f 92       	push	r1
     a90:	a1 2c       	mov	r10, r1
     a92:	b1 2c       	mov	r11, r1
     a94:	3c e5       	ldi	r19, 0x5C	; 92
     a96:	c3 2e       	mov	r12, r19
     a98:	33 e4       	ldi	r19, 0x43	; 67
     a9a:	d3 2e       	mov	r13, r19
     a9c:	7a 01       	movw	r14, r20
     a9e:	8b 01       	movw	r16, r22
     aa0:	2e ef       	ldi	r18, 0xFE	; 254
     aa2:	33 e0       	ldi	r19, 0x03	; 3
     aa4:	46 e0       	ldi	r20, 0x06	; 6
     aa6:	54 e0       	ldi	r21, 0x04	; 4
     aa8:	62 e0       	ldi	r22, 0x02	; 2
     aaa:	74 e0       	ldi	r23, 0x04	; 4
     aac:	87 e7       	ldi	r24, 0x77	; 119
     aae:	93 e0       	ldi	r25, 0x03	; 3
     ab0:	0e 94 3b 08 	call	0x1076	; 0x1076 <_ZN3PIDC1EPdS0_S0_dddii>
     ab4:	f4 01       	movw	r30, r8
     ab6:	a1 84       	ldd	r10, Z+9	; 0x09
     ab8:	b2 84       	ldd	r11, Z+10	; 0x0a
     aba:	c3 84       	ldd	r12, Z+11	; 0x0b
     abc:	d4 84       	ldd	r13, Z+12	; 0x0c
     abe:	e5 80       	ldd	r14, Z+5	; 0x05
     ac0:	f6 80       	ldd	r15, Z+6	; 0x06
     ac2:	07 81       	ldd	r16, Z+7	; 0x07
     ac4:	10 85       	ldd	r17, Z+8	; 0x08
     ac6:	1f 92       	push	r1
     ac8:	1f 92       	push	r1
     aca:	1f 92       	push	r1
     acc:	7f 92       	push	r7
     ace:	80 89       	ldd	r24, Z+16	; 0x10
     ad0:	8f 93       	push	r24
     ad2:	87 85       	ldd	r24, Z+15	; 0x0f
     ad4:	8f 93       	push	r24
     ad6:	86 85       	ldd	r24, Z+14	; 0x0e
     ad8:	8f 93       	push	r24
     ada:	85 85       	ldd	r24, Z+13	; 0x0d
     adc:	8f 93       	push	r24
     ade:	21 ee       	ldi	r18, 0xE1	; 225
     ae0:	33 e0       	ldi	r19, 0x03	; 3
     ae2:	49 ee       	ldi	r20, 0xE9	; 233
     ae4:	53 e0       	ldi	r21, 0x03	; 3
     ae6:	65 ee       	ldi	r22, 0xE5	; 229
     ae8:	73 e0       	ldi	r23, 0x03	; 3
     aea:	8b e3       	ldi	r24, 0x3B	; 59
     aec:	93 e0       	ldi	r25, 0x03	; 3
     aee:	0e 94 3b 08 	call	0x1076	; 0x1076 <_ZN3PIDC1EPdS0_S0_dddii>
     af2:	a9 84       	ldd	r10, Y+9	; 0x09
     af4:	ba 84       	ldd	r11, Y+10	; 0x0a
     af6:	cb 84       	ldd	r12, Y+11	; 0x0b
     af8:	dc 84       	ldd	r13, Y+12	; 0x0c
     afa:	ed 80       	ldd	r14, Y+5	; 0x05
     afc:	fe 80       	ldd	r15, Y+6	; 0x06
     afe:	0f 81       	ldd	r16, Y+7	; 0x07
     b00:	18 85       	ldd	r17, Y+8	; 0x08
     b02:	1f 92       	push	r1
     b04:	1f 92       	push	r1
     b06:	1f 92       	push	r1
     b08:	7f 92       	push	r7
     b0a:	88 89       	ldd	r24, Y+16	; 0x10
     b0c:	8f 93       	push	r24
     b0e:	8f 85       	ldd	r24, Y+15	; 0x0f
     b10:	8f 93       	push	r24
     b12:	8e 85       	ldd	r24, Y+14	; 0x0e
     b14:	8f 93       	push	r24
     b16:	8d 85       	ldd	r24, Y+13	; 0x0d
     b18:	8f 93       	push	r24
     b1a:	24 ec       	ldi	r18, 0xC4	; 196
     b1c:	33 e0       	ldi	r19, 0x03	; 3
     b1e:	4c ec       	ldi	r20, 0xCC	; 204
     b20:	53 e0       	ldi	r21, 0x03	; 3
     b22:	68 ec       	ldi	r22, 0xC8	; 200
     b24:	73 e0       	ldi	r23, 0x03	; 3
     b26:	8f ef       	ldi	r24, 0xFF	; 255
     b28:	92 e0       	ldi	r25, 0x02	; 2
     b2a:	0e 94 3b 08 	call	0x1076	; 0x1076 <_ZN3PIDC1EPdS0_S0_dddii>
     b2e:	8d b7       	in	r24, 0x3d	; 61
     b30:	9e b7       	in	r25, 0x3e	; 62
     b32:	48 96       	adiw	r24, 0x18	; 24
     b34:	0f b6       	in	r0, 0x3f	; 63
     b36:	f8 94       	cli
     b38:	9e bf       	out	0x3e, r25	; 62
     b3a:	0f be       	out	0x3f, r0	; 63
     b3c:	8d bf       	out	0x3d, r24	; 61
     b3e:	df 91       	pop	r29
     b40:	cf 91       	pop	r28
     b42:	1f 91       	pop	r17
     b44:	0f 91       	pop	r16
     b46:	ff 90       	pop	r15
     b48:	ef 90       	pop	r14
     b4a:	df 90       	pop	r13
     b4c:	cf 90       	pop	r12
     b4e:	bf 90       	pop	r11
     b50:	af 90       	pop	r10
     b52:	9f 90       	pop	r9
     b54:	8f 90       	pop	r8
     b56:	7f 90       	pop	r7
     b58:	08 95       	ret

00000b5a <loop>:
}

unsigned long loopTime;

void loop()
{
     b5a:	8f 92       	push	r8
     b5c:	9f 92       	push	r9
     b5e:	af 92       	push	r10
     b60:	bf 92       	push	r11
     b62:	cf 92       	push	r12
     b64:	df 92       	push	r13
     b66:	ef 92       	push	r14
     b68:	ff 92       	push	r15
     b6a:	cf 93       	push	r28
     b6c:	df 93       	push	r29
    loopTime=micros();
     b6e:	0e 94 80 1b 	call	0x3700	; 0x3700 <micros>
     b72:	60 93 97 02 	sts	0x0297, r22	; 0x800297 <loopTime>
     b76:	70 93 98 02 	sts	0x0298, r23	; 0x800298 <loopTime+0x1>
     b7a:	80 93 99 02 	sts	0x0299, r24	; 0x800299 <loopTime+0x2>
     b7e:	90 93 9a 02 	sts	0x029A, r25	; 0x80029a <loopTime+0x3>


    unsigned long currentMillis = millis();
     b82:	0e 94 74 1b 	call	0x36e8	; 0x36e8 <millis>
     b86:	6b 01       	movw	r12, r22
     b88:	7c 01       	movw	r14, r24
    if (currentMillis - previousMilliEnc >= intervalEnc)
     b8a:	80 91 0f 04 	lds	r24, 0x040F	; 0x80040f <previousMilliEnc>
     b8e:	90 91 10 04 	lds	r25, 0x0410	; 0x800410 <previousMilliEnc+0x1>
     b92:	a0 91 11 04 	lds	r26, 0x0411	; 0x800411 <previousMilliEnc+0x2>
     b96:	b0 91 12 04 	lds	r27, 0x0412	; 0x800412 <previousMilliEnc+0x3>
     b9a:	a7 01       	movw	r20, r14
     b9c:	96 01       	movw	r18, r12
     b9e:	28 1b       	sub	r18, r24
     ba0:	39 0b       	sbc	r19, r25
     ba2:	4a 0b       	sbc	r20, r26
     ba4:	5b 0b       	sbc	r21, r27
     ba6:	2a 30       	cpi	r18, 0x0A	; 10
     ba8:	31 05       	cpc	r19, r1
     baa:	41 05       	cpc	r20, r1
     bac:	51 05       	cpc	r21, r1
     bae:	08 f0       	brcs	.+2      	; 0xbb2 <loop+0x58>
     bb0:	53 c1       	rjmp	.+678    	; 0xe58 <loop+0x2fe>
    {
        previousMilliEnc=currentMillis;
        UpdateEncoderValues();
    }

    Giro_ReadData();
     bb2:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <_Z13Giro_ReadDatav>
    Giro_Pid.Compute();
     bb6:	8f ef       	ldi	r24, 0xFF	; 255
     bb8:	92 e0       	ldi	r25, 0x02	; 2
     bba:	0e 94 36 09 	call	0x126c	; 0x126c <_ZN3PID7ComputeEv>

    if (connectGiroToMot==true)
     bbe:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <connectGiroToMot>
     bc2:	88 23       	and	r24, r24
     bc4:	c1 f0       	breq	.+48     	; 0xbf6 <loop+0x9c>
    {
        Mot0_PidCtl.Setpoint=Giro_PidCtl.Output;
     bc6:	80 91 cc 03 	lds	r24, 0x03CC	; 0x8003cc <Giro_PidCtl+0x19>
     bca:	90 91 cd 03 	lds	r25, 0x03CD	; 0x8003cd <Giro_PidCtl+0x1a>
     bce:	a0 91 ce 03 	lds	r26, 0x03CE	; 0x8003ce <Giro_PidCtl+0x1b>
     bd2:	b0 91 cf 03 	lds	r27, 0x03CF	; 0x8003cf <Giro_PidCtl+0x1c>
     bd6:	80 93 fe 03 	sts	0x03FE, r24	; 0x8003fe <Mot0_PidCtl+0x11>
     bda:	90 93 ff 03 	sts	0x03FF, r25	; 0x8003ff <Mot0_PidCtl+0x12>
     bde:	a0 93 00 04 	sts	0x0400, r26	; 0x800400 <Mot0_PidCtl+0x13>
     be2:	b0 93 01 04 	sts	0x0401, r27	; 0x800401 <Mot0_PidCtl+0x14>
        Mot1_PidCtl.Setpoint=Giro_PidCtl.Output;
     be6:	80 93 e1 03 	sts	0x03E1, r24	; 0x8003e1 <Mot1_PidCtl+0x11>
     bea:	90 93 e2 03 	sts	0x03E2, r25	; 0x8003e2 <Mot1_PidCtl+0x12>
     bee:	a0 93 e3 03 	sts	0x03E3, r26	; 0x8003e3 <Mot1_PidCtl+0x13>
     bf2:	b0 93 e4 03 	sts	0x03E4, r27	; 0x8003e4 <Mot1_PidCtl+0x14>
    }


    Mot0_Pid.Compute();
     bf6:	87 e7       	ldi	r24, 0x77	; 119
     bf8:	93 e0       	ldi	r25, 0x03	; 3
     bfa:	0e 94 36 09 	call	0x126c	; 0x126c <_ZN3PID7ComputeEv>
    Mot1_Pid.Compute();
     bfe:	8b e3       	ldi	r24, 0x3B	; 59
     c00:	93 e0       	ldi	r25, 0x03	; 3
     c02:	0e 94 36 09 	call	0x126c	; 0x126c <_ZN3PID7ComputeEv>

    if  ( (running==false) &&
     c06:	80 91 0a 04 	lds	r24, 0x040A	; 0x80040a <running>
     c0a:	81 11       	cpse	r24, r1
     c0c:	3f c0       	rjmp	.+126    	; 0xc8c <loop+0x132>
            (Giro_PidCtl.Input > targetAngle-3 ) &&
     c0e:	80 90 c8 03 	lds	r8, 0x03C8	; 0x8003c8 <Giro_PidCtl+0x15>
     c12:	90 90 c9 03 	lds	r9, 0x03C9	; 0x8003c9 <Giro_PidCtl+0x16>
     c16:	a0 90 ca 03 	lds	r10, 0x03CA	; 0x8003ca <Giro_PidCtl+0x17>
     c1a:	b0 90 cb 03 	lds	r11, 0x03CB	; 0x8003cb <Giro_PidCtl+0x18>


    Mot0_Pid.Compute();
    Mot1_Pid.Compute();

    if  ( (running==false) &&
     c1e:	20 e0       	ldi	r18, 0x00	; 0
     c20:	30 e0       	ldi	r19, 0x00	; 0
     c22:	40 ea       	ldi	r20, 0xA0	; 160
     c24:	50 ec       	ldi	r21, 0xC0	; 192
     c26:	c5 01       	movw	r24, r10
     c28:	b4 01       	movw	r22, r8
     c2a:	0e 94 df 16 	call	0x2dbe	; 0x2dbe <__gesf2>
     c2e:	18 16       	cp	r1, r24
     c30:	04 f1       	brlt	.+64     	; 0xc72 <loop+0x118>
    }




    if((connectGiroToMot==true) &&
     c32:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <connectGiroToMot>
     c36:	81 11       	cpse	r24, r1
     c38:	40 c0       	rjmp	.+128    	; 0xcba <loop+0x160>
        Motors_SetSpeed(0,0);
        running=false;
    }
    else
    {
        Motors_SetSpeed(Mot0_PidCtl.Output,Mot1_PidCtl.Output);
     c3a:	60 91 e9 03 	lds	r22, 0x03E9	; 0x8003e9 <Mot1_PidCtl+0x19>
     c3e:	70 91 ea 03 	lds	r23, 0x03EA	; 0x8003ea <Mot1_PidCtl+0x1a>
     c42:	80 91 eb 03 	lds	r24, 0x03EB	; 0x8003eb <Mot1_PidCtl+0x1b>
     c46:	90 91 ec 03 	lds	r25, 0x03EC	; 0x8003ec <Mot1_PidCtl+0x1c>
     c4a:	0e 94 d0 15 	call	0x2ba0	; 0x2ba0 <__fixsfsi>
     c4e:	4b 01       	movw	r8, r22
     c50:	5c 01       	movw	r10, r24
     c52:	60 91 06 04 	lds	r22, 0x0406	; 0x800406 <Mot0_PidCtl+0x19>
     c56:	70 91 07 04 	lds	r23, 0x0407	; 0x800407 <Mot0_PidCtl+0x1a>
     c5a:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <Mot0_PidCtl+0x1b>
     c5e:	90 91 09 04 	lds	r25, 0x0409	; 0x800409 <Mot0_PidCtl+0x1c>
     c62:	0e 94 d0 15 	call	0x2ba0	; 0x2ba0 <__fixsfsi>
     c66:	dc 01       	movw	r26, r24
     c68:	cb 01       	movw	r24, r22
     c6a:	b4 01       	movw	r22, r8
     c6c:	0e 94 25 13 	call	0x264a	; 0x264a <_Z15Motors_SetSpeedii>
     c70:	2c c0       	rjmp	.+88     	; 0xcca <loop+0x170>

    Mot0_Pid.Compute();
    Mot1_Pid.Compute();

    if  ( (running==false) &&
            (Giro_PidCtl.Input > targetAngle-3 ) &&
     c72:	20 e0       	ldi	r18, 0x00	; 0
     c74:	30 e0       	ldi	r19, 0x00	; 0
     c76:	40 e8       	ldi	r20, 0x80	; 128
     c78:	5f e3       	ldi	r21, 0x3F	; 63
     c7a:	c5 01       	movw	r24, r10
     c7c:	b4 01       	movw	r22, r8
     c7e:	0e 94 59 15 	call	0x2ab2	; 0x2ab2 <__cmpsf2>
     c82:	87 ff       	sbrs	r24, 7
     c84:	d6 cf       	rjmp	.-84     	; 0xc32 <loop+0xd8>
            (Giro_PidCtl.Input < targetAngle+3 )
        )
    {
        running = true;
     c86:	81 e0       	ldi	r24, 0x01	; 1
     c88:	80 93 0a 04 	sts	0x040A, r24	; 0x80040a <running>
    }




    if((connectGiroToMot==true) &&
     c8c:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <connectGiroToMot>
     c90:	88 23       	and	r24, r24
     c92:	99 f2       	breq	.-90     	; 0xc3a <loop+0xe0>
            ((running==false) ||
             (Giro_PidCtl.Input > 50 || Giro_PidCtl.Input < -50) || //we fell
     c94:	80 90 c8 03 	lds	r8, 0x03C8	; 0x8003c8 <Giro_PidCtl+0x15>
     c98:	90 90 c9 03 	lds	r9, 0x03C9	; 0x8003c9 <Giro_PidCtl+0x16>
     c9c:	a0 90 ca 03 	lds	r10, 0x03CA	; 0x8003ca <Giro_PidCtl+0x17>
     ca0:	b0 90 cb 03 	lds	r11, 0x03CB	; 0x8003cb <Giro_PidCtl+0x18>




    if((connectGiroToMot==true) &&
            ((running==false) ||
     ca4:	20 e0       	ldi	r18, 0x00	; 0
     ca6:	30 e0       	ldi	r19, 0x00	; 0
     ca8:	48 e4       	ldi	r20, 0x48	; 72
     caa:	52 e4       	ldi	r21, 0x42	; 66
     cac:	c5 01       	movw	r24, r10
     cae:	b4 01       	movw	r22, r8
     cb0:	0e 94 df 16 	call	0x2dbe	; 0x2dbe <__gesf2>
     cb4:	18 16       	cp	r1, r24
     cb6:	0c f0       	brlt	.+2      	; 0xcba <loop+0x160>
     cb8:	a4 c0       	rjmp	.+328    	; 0xe02 <loop+0x2a8>
             (Giro_PidCtl.Input > 50 || Giro_PidCtl.Input < -50) || //we fell
             ((Giro_PidCtl.Input > targetAngle-0.5) && (Giro_PidCtl.Input < targetAngle+0.5))) //somewhat echilibrum
      )
    {
        Motors_SetSpeed(0,0);
     cba:	60 e0       	ldi	r22, 0x00	; 0
     cbc:	70 e0       	ldi	r23, 0x00	; 0
     cbe:	80 e0       	ldi	r24, 0x00	; 0
     cc0:	90 e0       	ldi	r25, 0x00	; 0
     cc2:	0e 94 25 13 	call	0x264a	; 0x264a <_Z15Motors_SetSpeedii>
        running=false;
     cc6:	10 92 0a 04 	sts	0x040A, r1	; 0x80040a <running>
    }




    if (currentMillis - previousMilliSerialLog >= intervalSerialLog)
     cca:	80 91 0b 04 	lds	r24, 0x040B	; 0x80040b <previousMilliSerialLog>
     cce:	90 91 0c 04 	lds	r25, 0x040C	; 0x80040c <previousMilliSerialLog+0x1>
     cd2:	a0 91 0d 04 	lds	r26, 0x040D	; 0x80040d <previousMilliSerialLog+0x2>
     cd6:	b0 91 0e 04 	lds	r27, 0x040E	; 0x80040e <previousMilliSerialLog+0x3>
     cda:	a7 01       	movw	r20, r14
     cdc:	96 01       	movw	r18, r12
     cde:	28 1b       	sub	r18, r24
     ce0:	39 0b       	sbc	r19, r25
     ce2:	4a 0b       	sbc	r20, r26
     ce4:	5b 0b       	sbc	r21, r27
     ce6:	24 36       	cpi	r18, 0x64	; 100
     ce8:	31 05       	cpc	r19, r1
     cea:	41 05       	cpc	r20, r1
     cec:	51 05       	cpc	r21, r1
     cee:	08 f4       	brcc	.+2      	; 0xcf2 <loop+0x198>
     cf0:	a8 c0       	rjmp	.+336    	; 0xe42 <loop+0x2e8>
    {
        previousMilliSerialLog=currentMillis;
     cf2:	c0 92 0b 04 	sts	0x040B, r12	; 0x80040b <previousMilliSerialLog>
     cf6:	d0 92 0c 04 	sts	0x040C, r13	; 0x80040c <previousMilliSerialLog+0x1>
     cfa:	e0 92 0d 04 	sts	0x040D, r14	; 0x80040d <previousMilliSerialLog+0x2>
     cfe:	f0 92 0e 04 	sts	0x040E, r15	; 0x80040e <previousMilliSerialLog+0x3>

        if (printRawGiro==true)
     d02:	80 91 a9 02 	lds	r24, 0x02A9	; 0x8002a9 <printRawGiro>
     d06:	81 11       	cpse	r24, r1
     d08:	47 c1       	rjmp	.+654    	; 0xf98 <loop+0x43e>
        {
            PrintGiroRawData();
        }

        if (printGiroPid==true)
     d0a:	80 91 a7 02 	lds	r24, 0x02A7	; 0x8002a7 <printGiroPid>
     d0e:	81 11       	cpse	r24, r1
     d10:	7e c1       	rjmp	.+764    	; 0x100e <loop+0x4b4>
        {
            PrintGiroInputOutputValues();
        }

        if(printMotPid==true)
     d12:	80 91 a8 02 	lds	r24, 0x02A8	; 0x8002a8 <printMotPid>
     d16:	81 11       	cpse	r24, r1
     d18:	dc c0       	rjmp	.+440    	; 0xed2 <loop+0x378>
        }
        else
        {
            Ser_Buffer[ndx] = '\0'; // terminate the string
            ndx = 0;
            Ser_NewData = true;
     d1a:	d1 e0       	ldi	r29, 0x01	; 1
        {
            Ser_Buffer[ndx] = rc;
            ndx++;
            if (ndx >= Ser_BuffSize)
            {
                ndx = Ser_BuffSize - 1;
     d1c:	cf e4       	ldi	r28, 0x4F	; 79
{
    static byte ndx = 0;
    char rc;

    // if (Serial.available() > 0) {
    while (Serial.available() > 0 && Ser_NewData == false)
     d1e:	87 e2       	ldi	r24, 0x27	; 39
     d20:	95 e0       	ldi	r25, 0x05	; 5
     d22:	0e 94 5d 17 	call	0x2eba	; 0x2eba <_ZN14HardwareSerial9availableEv>
     d26:	18 16       	cp	r1, r24
     d28:	19 06       	cpc	r1, r25
     d2a:	0c f0       	brlt	.+2      	; 0xd2e <loop+0x1d4>
     d2c:	56 c0       	rjmp	.+172    	; 0xdda <loop+0x280>
     d2e:	80 91 ae 02 	lds	r24, 0x02AE	; 0x8002ae <Ser_NewData>
     d32:	88 23       	and	r24, r24
     d34:	c1 f1       	breq	.+112    	; 0xda6 <loop+0x24c>
     d36:	0e 94 10 01 	call	0x220	; 0x220 <_Z13Ser_ParseDatav.part.0>
        }

        Ser_ReceiveData();
        Ser_ParseData();

        loopTime=micros()-loopTime;
     d3a:	0e 94 80 1b 	call	0x3700	; 0x3700 <micros>
     d3e:	c0 90 97 02 	lds	r12, 0x0297	; 0x800297 <loopTime>
     d42:	d0 90 98 02 	lds	r13, 0x0298	; 0x800298 <loopTime+0x1>
     d46:	e0 90 99 02 	lds	r14, 0x0299	; 0x800299 <loopTime+0x2>
     d4a:	f0 90 9a 02 	lds	r15, 0x029A	; 0x80029a <loopTime+0x3>
     d4e:	dc 01       	movw	r26, r24
     d50:	cb 01       	movw	r24, r22
     d52:	8c 19       	sub	r24, r12
     d54:	9d 09       	sbc	r25, r13
     d56:	ae 09       	sbc	r26, r14
     d58:	bf 09       	sbc	r27, r15
     d5a:	80 93 97 02 	sts	0x0297, r24	; 0x800297 <loopTime>
     d5e:	90 93 98 02 	sts	0x0298, r25	; 0x800298 <loopTime+0x1>
     d62:	a0 93 99 02 	sts	0x0299, r26	; 0x800299 <loopTime+0x2>
     d66:	b0 93 9a 02 	sts	0x029A, r27	; 0x80029a <loopTime+0x3>
        Serial.print("MC: ");
     d6a:	6b e5       	ldi	r22, 0x5B	; 91
     d6c:	72 e0       	ldi	r23, 0x02	; 2
     d6e:	87 e2       	ldi	r24, 0x27	; 39
     d70:	95 e0       	ldi	r25, 0x05	; 5
     d72:	0e 94 75 19 	call	0x32ea	; 0x32ea <_ZN5Print5printEPKc>
        Serial.println(loopTime);
     d76:	40 91 97 02 	lds	r20, 0x0297	; 0x800297 <loopTime>
     d7a:	50 91 98 02 	lds	r21, 0x0298	; 0x800298 <loopTime+0x1>
     d7e:	60 91 99 02 	lds	r22, 0x0299	; 0x800299 <loopTime+0x2>
     d82:	70 91 9a 02 	lds	r23, 0x029A	; 0x80029a <loopTime+0x3>
     d86:	2a e0       	ldi	r18, 0x0A	; 10
     d88:	30 e0       	ldi	r19, 0x00	; 0
     d8a:	87 e2       	ldi	r24, 0x27	; 39
     d8c:	95 e0       	ldi	r25, 0x05	; 5
    }


}
     d8e:	df 91       	pop	r29
     d90:	cf 91       	pop	r28
     d92:	ff 90       	pop	r15
     d94:	ef 90       	pop	r14
     d96:	df 90       	pop	r13
     d98:	cf 90       	pop	r12
     d9a:	bf 90       	pop	r11
     d9c:	af 90       	pop	r10
     d9e:	9f 90       	pop	r9
     da0:	8f 90       	pop	r8
        Ser_ReceiveData();
        Ser_ParseData();

        loopTime=micros()-loopTime;
        Serial.print("MC: ");
        Serial.println(loopTime);
     da2:	0c 94 f0 19 	jmp	0x33e0	; 0x33e0 <_ZN5Print7printlnEmi>
    char rc;

    // if (Serial.available() > 0) {
    while (Serial.available() > 0 && Ser_NewData == false)
    {
        rc = Serial.read();
     da6:	87 e2       	ldi	r24, 0x27	; 39
     da8:	95 e0       	ldi	r25, 0x05	; 5
     daa:	0e 94 77 17 	call	0x2eee	; 0x2eee <_ZN14HardwareSerial4readEv>

        if (rc != Ser_EndMarker)
     dae:	8a 30       	cpi	r24, 0x0A	; 10
     db0:	e9 f0       	breq	.+58     	; 0xdec <loop+0x292>
        {
            Ser_Buffer[ndx] = rc;
     db2:	90 91 96 02 	lds	r25, 0x0296	; 0x800296 <_ZZ15Ser_ReceiveDatavE3ndx>
     db6:	e9 2f       	mov	r30, r25
     db8:	f0 e0       	ldi	r31, 0x00	; 0
     dba:	e1 55       	subi	r30, 0x51	; 81
     dbc:	fd 4f       	sbci	r31, 0xFD	; 253
     dbe:	80 83       	st	Z, r24
            ndx++;
     dc0:	9f 5f       	subi	r25, 0xFF	; 255
            if (ndx >= Ser_BuffSize)
     dc2:	90 35       	cpi	r25, 0x50	; 80
     dc4:	80 f0       	brcs	.+32     	; 0xde6 <loop+0x28c>
            {
                ndx = Ser_BuffSize - 1;
     dc6:	c0 93 96 02 	sts	0x0296, r28	; 0x800296 <_ZZ15Ser_ReceiveDatavE3ndx>
{
    static byte ndx = 0;
    char rc;

    // if (Serial.available() > 0) {
    while (Serial.available() > 0 && Ser_NewData == false)
     dca:	87 e2       	ldi	r24, 0x27	; 39
     dcc:	95 e0       	ldi	r25, 0x05	; 5
     dce:	0e 94 5d 17 	call	0x2eba	; 0x2eba <_ZN14HardwareSerial9availableEv>
     dd2:	18 16       	cp	r1, r24
     dd4:	19 06       	cpc	r1, r25
     dd6:	0c f4       	brge	.+2      	; 0xdda <loop+0x280>
     dd8:	aa cf       	rjmp	.-172    	; 0xd2e <loop+0x1d4>
bool printMotPid=false;
bool printGiroPid=false;

void Ser_ParseData()
{
    if (Ser_NewData==false) return;
     dda:	80 91 ae 02 	lds	r24, 0x02AE	; 0x8002ae <Ser_NewData>
     dde:	88 23       	and	r24, r24
     de0:	09 f4       	brne	.+2      	; 0xde4 <loop+0x28a>
     de2:	ab cf       	rjmp	.-170    	; 0xd3a <loop+0x1e0>
     de4:	a8 cf       	rjmp	.-176    	; 0xd36 <loop+0x1dc>
        rc = Serial.read();

        if (rc != Ser_EndMarker)
        {
            Ser_Buffer[ndx] = rc;
            ndx++;
     de6:	90 93 96 02 	sts	0x0296, r25	; 0x800296 <_ZZ15Ser_ReceiveDatavE3ndx>
     dea:	99 cf       	rjmp	.-206    	; 0xd1e <loop+0x1c4>
                ndx = Ser_BuffSize - 1;
            }
        }
        else
        {
            Ser_Buffer[ndx] = '\0'; // terminate the string
     dec:	e0 91 96 02 	lds	r30, 0x0296	; 0x800296 <_ZZ15Ser_ReceiveDatavE3ndx>
     df0:	f0 e0       	ldi	r31, 0x00	; 0
     df2:	e1 55       	subi	r30, 0x51	; 81
     df4:	fd 4f       	sbci	r31, 0xFD	; 253
     df6:	10 82       	st	Z, r1
            ndx = 0;
     df8:	10 92 96 02 	sts	0x0296, r1	; 0x800296 <_ZZ15Ser_ReceiveDatavE3ndx>
            Ser_NewData = true;
     dfc:	d0 93 ae 02 	sts	0x02AE, r29	; 0x8002ae <Ser_NewData>
     e00:	8e cf       	rjmp	.-228    	; 0xd1e <loop+0x1c4>



    if((connectGiroToMot==true) &&
            ((running==false) ||
             (Giro_PidCtl.Input > 50 || Giro_PidCtl.Input < -50) || //we fell
     e02:	20 e0       	ldi	r18, 0x00	; 0
     e04:	30 e0       	ldi	r19, 0x00	; 0
     e06:	48 e4       	ldi	r20, 0x48	; 72
     e08:	52 ec       	ldi	r21, 0xC2	; 194
     e0a:	c5 01       	movw	r24, r10
     e0c:	b4 01       	movw	r22, r8
     e0e:	0e 94 59 15 	call	0x2ab2	; 0x2ab2 <__cmpsf2>
     e12:	87 fd       	sbrc	r24, 7
     e14:	52 cf       	rjmp	.-348    	; 0xcba <loop+0x160>
     e16:	20 e0       	ldi	r18, 0x00	; 0
     e18:	30 e0       	ldi	r19, 0x00	; 0
     e1a:	40 e2       	ldi	r20, 0x20	; 32
     e1c:	50 ec       	ldi	r21, 0xC0	; 192
     e1e:	c5 01       	movw	r24, r10
     e20:	b4 01       	movw	r22, r8
     e22:	0e 94 df 16 	call	0x2dbe	; 0x2dbe <__gesf2>
     e26:	18 16       	cp	r1, r24
     e28:	0c f0       	brlt	.+2      	; 0xe2c <loop+0x2d2>
     e2a:	07 cf       	rjmp	.-498    	; 0xc3a <loop+0xe0>
             ((Giro_PidCtl.Input > targetAngle-0.5) && (Giro_PidCtl.Input < targetAngle+0.5))) //somewhat echilibrum
     e2c:	20 e0       	ldi	r18, 0x00	; 0
     e2e:	30 e0       	ldi	r19, 0x00	; 0
     e30:	40 ec       	ldi	r20, 0xC0	; 192
     e32:	5f eb       	ldi	r21, 0xBF	; 191
     e34:	c5 01       	movw	r24, r10
     e36:	b4 01       	movw	r22, r8
     e38:	0e 94 59 15 	call	0x2ab2	; 0x2ab2 <__cmpsf2>
     e3c:	87 fd       	sbrc	r24, 7
     e3e:	3d cf       	rjmp	.-390    	; 0xcba <loop+0x160>
     e40:	fc ce       	rjmp	.-520    	; 0xc3a <loop+0xe0>
        Serial.print("MC: ");
        Serial.println(loopTime);
    }


}
     e42:	df 91       	pop	r29
     e44:	cf 91       	pop	r28
     e46:	ff 90       	pop	r15
     e48:	ef 90       	pop	r14
     e4a:	df 90       	pop	r13
     e4c:	cf 90       	pop	r12
     e4e:	bf 90       	pop	r11
     e50:	af 90       	pop	r10
     e52:	9f 90       	pop	r9
     e54:	8f 90       	pop	r8
     e56:	08 95       	ret


    unsigned long currentMillis = millis();
    if (currentMillis - previousMilliEnc >= intervalEnc)
    {
        previousMilliEnc=currentMillis;
     e58:	c0 92 0f 04 	sts	0x040F, r12	; 0x80040f <previousMilliEnc>
     e5c:	d0 92 10 04 	sts	0x0410, r13	; 0x800410 <previousMilliEnc+0x1>
     e60:	e0 92 11 04 	sts	0x0411, r14	; 0x800411 <previousMilliEnc+0x2>
     e64:	f0 92 12 04 	sts	0x0412, r15	; 0x800412 <previousMilliEnc+0x3>
double *Mot0_RpmPtr=&Mot0_PidCtl.Input;
double *Mot1_RpmPtr=&Mot1_PidCtl.Input;

void UpdateEncoderValues()
{
    *Mot0_RpmPtr=Mot0_Enc;
     e68:	c0 91 02 01 	lds	r28, 0x0102	; 0x800102 <Mot0_RpmPtr>
     e6c:	d0 91 03 01 	lds	r29, 0x0103	; 0x800103 <Mot0_RpmPtr+0x1>
     e70:	60 91 23 05 	lds	r22, 0x0523	; 0x800523 <Mot0_Enc>
     e74:	70 91 24 05 	lds	r23, 0x0524	; 0x800524 <Mot0_Enc+0x1>
     e78:	80 91 25 05 	lds	r24, 0x0525	; 0x800525 <Mot0_Enc+0x2>
     e7c:	90 91 26 05 	lds	r25, 0x0526	; 0x800526 <Mot0_Enc+0x3>
     e80:	0e 94 08 16 	call	0x2c10	; 0x2c10 <__floatsisf>
     e84:	68 83       	st	Y, r22
     e86:	79 83       	std	Y+1, r23	; 0x01
     e88:	8a 83       	std	Y+2, r24	; 0x02
     e8a:	9b 83       	std	Y+3, r25	; 0x03
    *Mot1_RpmPtr=Mot1_Enc;
     e8c:	c0 91 00 01 	lds	r28, 0x0100	; 0x800100 <Mot1_RpmPtr>
     e90:	d0 91 01 01 	lds	r29, 0x0101	; 0x800101 <Mot1_RpmPtr+0x1>
     e94:	60 91 1f 05 	lds	r22, 0x051F	; 0x80051f <Mot1_Enc>
     e98:	70 91 20 05 	lds	r23, 0x0520	; 0x800520 <Mot1_Enc+0x1>
     e9c:	80 91 21 05 	lds	r24, 0x0521	; 0x800521 <Mot1_Enc+0x2>
     ea0:	90 91 22 05 	lds	r25, 0x0522	; 0x800522 <Mot1_Enc+0x3>
     ea4:	0e 94 08 16 	call	0x2c10	; 0x2c10 <__floatsisf>
     ea8:	68 83       	st	Y, r22
     eaa:	79 83       	std	Y+1, r23	; 0x01
     eac:	8a 83       	std	Y+2, r24	; 0x02
     eae:	9b 83       	std	Y+3, r25	; 0x03

    Mot0_Enc=0;
     eb0:	10 92 23 05 	sts	0x0523, r1	; 0x800523 <Mot0_Enc>
     eb4:	10 92 24 05 	sts	0x0524, r1	; 0x800524 <Mot0_Enc+0x1>
     eb8:	10 92 25 05 	sts	0x0525, r1	; 0x800525 <Mot0_Enc+0x2>
     ebc:	10 92 26 05 	sts	0x0526, r1	; 0x800526 <Mot0_Enc+0x3>
    Mot1_Enc=0;
     ec0:	10 92 1f 05 	sts	0x051F, r1	; 0x80051f <Mot1_Enc>
     ec4:	10 92 20 05 	sts	0x0520, r1	; 0x800520 <Mot1_Enc+0x1>
     ec8:	10 92 21 05 	sts	0x0521, r1	; 0x800521 <Mot1_Enc+0x2>
     ecc:	10 92 22 05 	sts	0x0522, r1	; 0x800522 <Mot1_Enc+0x3>
     ed0:	70 ce       	rjmp	.-800    	; 0xbb2 <loop+0x58>
    Serial.println(" ");
}

void PrintEncoderValues()
{
    Serial.print("ENC: ");
     ed2:	61 eb       	ldi	r22, 0xB1	; 177
     ed4:	71 e0       	ldi	r23, 0x01	; 1
     ed6:	87 e2       	ldi	r24, 0x27	; 39
     ed8:	95 e0       	ldi	r25, 0x05	; 5
     eda:	0e 94 75 19 	call	0x32ea	; 0x32ea <_ZN5Print5printEPKc>
    Serial.print(Mot0_PidCtl.Input);
     ede:	40 91 02 04 	lds	r20, 0x0402	; 0x800402 <Mot0_PidCtl+0x15>
     ee2:	50 91 03 04 	lds	r21, 0x0403	; 0x800403 <Mot0_PidCtl+0x16>
     ee6:	60 91 04 04 	lds	r22, 0x0404	; 0x800404 <Mot0_PidCtl+0x17>
     eea:	70 91 05 04 	lds	r23, 0x0405	; 0x800405 <Mot0_PidCtl+0x18>
     eee:	22 e0       	ldi	r18, 0x02	; 2
     ef0:	30 e0       	ldi	r19, 0x00	; 0
     ef2:	87 e2       	ldi	r24, 0x27	; 39
     ef4:	95 e0       	ldi	r25, 0x05	; 5
     ef6:	0e 94 2c 1b 	call	0x3658	; 0x3658 <_ZN5Print5printEdi>
    (Mot0_Dir==0xFFFF)?Serial.print(" 1 "):Serial.print(" 0 ");
     efa:	67 eb       	ldi	r22, 0xB7	; 183
     efc:	71 e0       	ldi	r23, 0x01	; 1
     efe:	87 e2       	ldi	r24, 0x27	; 39
     f00:	95 e0       	ldi	r25, 0x05	; 5
     f02:	0e 94 75 19 	call	0x32ea	; 0x32ea <_ZN5Print5printEPKc>

    Serial.print(Mot1_PidCtl.Input);
     f06:	40 91 e5 03 	lds	r20, 0x03E5	; 0x8003e5 <Mot1_PidCtl+0x15>
     f0a:	50 91 e6 03 	lds	r21, 0x03E6	; 0x8003e6 <Mot1_PidCtl+0x16>
     f0e:	60 91 e7 03 	lds	r22, 0x03E7	; 0x8003e7 <Mot1_PidCtl+0x17>
     f12:	70 91 e8 03 	lds	r23, 0x03E8	; 0x8003e8 <Mot1_PidCtl+0x18>
     f16:	22 e0       	ldi	r18, 0x02	; 2
     f18:	30 e0       	ldi	r19, 0x00	; 0
     f1a:	87 e2       	ldi	r24, 0x27	; 39
     f1c:	95 e0       	ldi	r25, 0x05	; 5
     f1e:	0e 94 2c 1b 	call	0x3658	; 0x3658 <_ZN5Print5printEdi>
    (Mot1_Dir==0xFFFF)?Serial.print(" 1 "):Serial.print(" 0 ");
     f22:	67 eb       	ldi	r22, 0xB7	; 183
     f24:	71 e0       	ldi	r23, 0x01	; 1
     f26:	87 e2       	ldi	r24, 0x27	; 39
     f28:	95 e0       	ldi	r25, 0x05	; 5
     f2a:	0e 94 75 19 	call	0x32ea	; 0x32ea <_ZN5Print5printEPKc>
    Serial.println(" ");
     f2e:	69 eb       	ldi	r22, 0xB9	; 185
     f30:	71 e0       	ldi	r23, 0x01	; 1
     f32:	87 e2       	ldi	r24, 0x27	; 39
     f34:	95 e0       	ldi	r25, 0x05	; 5
     f36:	0e 94 82 19 	call	0x3304	; 0x3304 <_ZN5Print7printlnEPKc>
}


void PrintPidOutputValues()
{
    Serial.print("PID: ");
     f3a:	6b eb       	ldi	r22, 0xBB	; 187
     f3c:	71 e0       	ldi	r23, 0x01	; 1
     f3e:	87 e2       	ldi	r24, 0x27	; 39
     f40:	95 e0       	ldi	r25, 0x05	; 5
     f42:	0e 94 75 19 	call	0x32ea	; 0x32ea <_ZN5Print5printEPKc>
    Serial.print(Mot0_PidCtl.Output);
     f46:	40 91 06 04 	lds	r20, 0x0406	; 0x800406 <Mot0_PidCtl+0x19>
     f4a:	50 91 07 04 	lds	r21, 0x0407	; 0x800407 <Mot0_PidCtl+0x1a>
     f4e:	60 91 08 04 	lds	r22, 0x0408	; 0x800408 <Mot0_PidCtl+0x1b>
     f52:	70 91 09 04 	lds	r23, 0x0409	; 0x800409 <Mot0_PidCtl+0x1c>
     f56:	22 e0       	ldi	r18, 0x02	; 2
     f58:	30 e0       	ldi	r19, 0x00	; 0
     f5a:	87 e2       	ldi	r24, 0x27	; 39
     f5c:	95 e0       	ldi	r25, 0x05	; 5
     f5e:	0e 94 2c 1b 	call	0x3658	; 0x3658 <_ZN5Print5printEdi>

    Serial.print(" ");
     f62:	69 eb       	ldi	r22, 0xB9	; 185
     f64:	71 e0       	ldi	r23, 0x01	; 1
     f66:	87 e2       	ldi	r24, 0x27	; 39
     f68:	95 e0       	ldi	r25, 0x05	; 5
     f6a:	0e 94 75 19 	call	0x32ea	; 0x32ea <_ZN5Print5printEPKc>
    Serial.print(Mot1_PidCtl.Output);
     f6e:	40 91 e9 03 	lds	r20, 0x03E9	; 0x8003e9 <Mot1_PidCtl+0x19>
     f72:	50 91 ea 03 	lds	r21, 0x03EA	; 0x8003ea <Mot1_PidCtl+0x1a>
     f76:	60 91 eb 03 	lds	r22, 0x03EB	; 0x8003eb <Mot1_PidCtl+0x1b>
     f7a:	70 91 ec 03 	lds	r23, 0x03EC	; 0x8003ec <Mot1_PidCtl+0x1c>
     f7e:	22 e0       	ldi	r18, 0x02	; 2
     f80:	30 e0       	ldi	r19, 0x00	; 0
     f82:	87 e2       	ldi	r24, 0x27	; 39
     f84:	95 e0       	ldi	r25, 0x05	; 5
     f86:	0e 94 2c 1b 	call	0x3658	; 0x3658 <_ZN5Print5printEdi>

    Serial.println(" ");
     f8a:	69 eb       	ldi	r22, 0xB9	; 185
     f8c:	71 e0       	ldi	r23, 0x01	; 1
     f8e:	87 e2       	ldi	r24, 0x27	; 39
     f90:	95 e0       	ldi	r25, 0x05	; 5
     f92:	0e 94 82 19 	call	0x3304	; 0x3304 <_ZN5Print7printlnEPKc>
     f96:	c1 ce       	rjmp	.-638    	; 0xd1a <loop+0x1c0>

}

void PrintGiroRawData()
{
    Serial.print("GRD: ");
     f98:	61 ec       	ldi	r22, 0xC1	; 193
     f9a:	71 e0       	ldi	r23, 0x01	; 1
     f9c:	87 e2       	ldi	r24, 0x27	; 39
     f9e:	95 e0       	ldi	r25, 0x05	; 5
     fa0:	0e 94 75 19 	call	0x32ea	; 0x32ea <_ZN5Print5printEPKc>
    Serial.print(Giro_AccY);
     fa4:	60 91 29 04 	lds	r22, 0x0429	; 0x800429 <Giro_AccY>
     fa8:	70 91 2a 04 	lds	r23, 0x042A	; 0x80042a <Giro_AccY+0x1>
     fac:	4a e0       	ldi	r20, 0x0A	; 10
     fae:	50 e0       	ldi	r21, 0x00	; 0
     fb0:	87 e2       	ldi	r24, 0x27	; 39
     fb2:	95 e0       	ldi	r25, 0x05	; 5
     fb4:	0e 94 4a 1a 	call	0x3494	; 0x3494 <_ZN5Print5printEii>
    Serial.print(" ");
     fb8:	69 eb       	ldi	r22, 0xB9	; 185
     fba:	71 e0       	ldi	r23, 0x01	; 1
     fbc:	87 e2       	ldi	r24, 0x27	; 39
     fbe:	95 e0       	ldi	r25, 0x05	; 5
     fc0:	0e 94 75 19 	call	0x32ea	; 0x32ea <_ZN5Print5printEPKc>
    Serial.print(Giro_AccZ);
     fc4:	60 91 27 04 	lds	r22, 0x0427	; 0x800427 <Giro_AccZ>
     fc8:	70 91 28 04 	lds	r23, 0x0428	; 0x800428 <Giro_AccZ+0x1>
     fcc:	4a e0       	ldi	r20, 0x0A	; 10
     fce:	50 e0       	ldi	r21, 0x00	; 0
     fd0:	87 e2       	ldi	r24, 0x27	; 39
     fd2:	95 e0       	ldi	r25, 0x05	; 5
     fd4:	0e 94 4a 1a 	call	0x3494	; 0x3494 <_ZN5Print5printEii>
    Serial.print(" ");
     fd8:	69 eb       	ldi	r22, 0xB9	; 185
     fda:	71 e0       	ldi	r23, 0x01	; 1
     fdc:	87 e2       	ldi	r24, 0x27	; 39
     fde:	95 e0       	ldi	r25, 0x05	; 5
     fe0:	0e 94 75 19 	call	0x32ea	; 0x32ea <_ZN5Print5printEPKc>
    Serial.print(Giro_RotX);
     fe4:	60 91 25 04 	lds	r22, 0x0425	; 0x800425 <Giro_RotX>
     fe8:	70 91 26 04 	lds	r23, 0x0426	; 0x800426 <Giro_RotX+0x1>
     fec:	4a e0       	ldi	r20, 0x0A	; 10
     fee:	50 e0       	ldi	r21, 0x00	; 0
     ff0:	87 e2       	ldi	r24, 0x27	; 39
     ff2:	95 e0       	ldi	r25, 0x05	; 5
     ff4:	0e 94 4a 1a 	call	0x3494	; 0x3494 <_ZN5Print5printEii>

    Serial.println(" ");
     ff8:	69 eb       	ldi	r22, 0xB9	; 185
     ffa:	71 e0       	ldi	r23, 0x01	; 1
     ffc:	87 e2       	ldi	r24, 0x27	; 39
     ffe:	95 e0       	ldi	r25, 0x05	; 5
    1000:	0e 94 82 19 	call	0x3304	; 0x3304 <_ZN5Print7printlnEPKc>
        if (printRawGiro==true)
        {
            PrintGiroRawData();
        }

        if (printGiroPid==true)
    1004:	80 91 a7 02 	lds	r24, 0x02A7	; 0x8002a7 <printGiroPid>
    1008:	88 23       	and	r24, r24
    100a:	09 f4       	brne	.+2      	; 0x100e <loop+0x4b4>
    100c:	82 ce       	rjmp	.-764    	; 0xd12 <loop+0x1b8>
    Serial.println(" ");
}

void PrintGiroInputOutputValues()
{
    Serial.print("GIO: ");
    100e:	67 ec       	ldi	r22, 0xC7	; 199
    1010:	71 e0       	ldi	r23, 0x01	; 1
    1012:	87 e2       	ldi	r24, 0x27	; 39
    1014:	95 e0       	ldi	r25, 0x05	; 5
    1016:	0e 94 75 19 	call	0x32ea	; 0x32ea <_ZN5Print5printEPKc>
    Serial.print(Giro_PidCtl.Input);
    101a:	40 91 c8 03 	lds	r20, 0x03C8	; 0x8003c8 <Giro_PidCtl+0x15>
    101e:	50 91 c9 03 	lds	r21, 0x03C9	; 0x8003c9 <Giro_PidCtl+0x16>
    1022:	60 91 ca 03 	lds	r22, 0x03CA	; 0x8003ca <Giro_PidCtl+0x17>
    1026:	70 91 cb 03 	lds	r23, 0x03CB	; 0x8003cb <Giro_PidCtl+0x18>
    102a:	22 e0       	ldi	r18, 0x02	; 2
    102c:	30 e0       	ldi	r19, 0x00	; 0
    102e:	87 e2       	ldi	r24, 0x27	; 39
    1030:	95 e0       	ldi	r25, 0x05	; 5
    1032:	0e 94 2c 1b 	call	0x3658	; 0x3658 <_ZN5Print5printEdi>
    Serial.print(" ");
    1036:	69 eb       	ldi	r22, 0xB9	; 185
    1038:	71 e0       	ldi	r23, 0x01	; 1
    103a:	87 e2       	ldi	r24, 0x27	; 39
    103c:	95 e0       	ldi	r25, 0x05	; 5
    103e:	0e 94 75 19 	call	0x32ea	; 0x32ea <_ZN5Print5printEPKc>
    Serial.print(Giro_PidCtl.Output);
    1042:	40 91 cc 03 	lds	r20, 0x03CC	; 0x8003cc <Giro_PidCtl+0x19>
    1046:	50 91 cd 03 	lds	r21, 0x03CD	; 0x8003cd <Giro_PidCtl+0x1a>
    104a:	60 91 ce 03 	lds	r22, 0x03CE	; 0x8003ce <Giro_PidCtl+0x1b>
    104e:	70 91 cf 03 	lds	r23, 0x03CF	; 0x8003cf <Giro_PidCtl+0x1c>
    1052:	22 e0       	ldi	r18, 0x02	; 2
    1054:	30 e0       	ldi	r19, 0x00	; 0
    1056:	87 e2       	ldi	r24, 0x27	; 39
    1058:	95 e0       	ldi	r25, 0x05	; 5
    105a:	0e 94 2c 1b 	call	0x3658	; 0x3658 <_ZN5Print5printEdi>

    Serial.println(" ");
    105e:	69 eb       	ldi	r22, 0xB9	; 185
    1060:	71 e0       	ldi	r23, 0x01	; 1
    1062:	87 e2       	ldi	r24, 0x27	; 39
    1064:	95 e0       	ldi	r25, 0x05	; 5
    1066:	0e 94 82 19 	call	0x3304	; 0x3304 <_ZN5Print7printlnEPKc>
        if (printGiroPid==true)
        {
            PrintGiroInputOutputValues();
        }

        if(printMotPid==true)
    106a:	80 91 a8 02 	lds	r24, 0x02A8	; 0x8002a8 <printMotPid>
    106e:	88 23       	and	r24, r24
    1070:	09 f4       	brne	.+2      	; 0x1074 <loop+0x51a>
    1072:	53 ce       	rjmp	.-858    	; 0xd1a <loop+0x1c0>
    1074:	2e cf       	rjmp	.-420    	; 0xed2 <loop+0x378>

00001076 <_ZN3PIDC1EPdS0_S0_dddii>:

  if(controllerDirection ==REVERSE)
   {
      kp = (0 - kp);
      ki = (0 - ki);
      kd = (0 - kd);
    1076:	4f 92       	push	r4
    1078:	5f 92       	push	r5
    107a:	6f 92       	push	r6
    107c:	7f 92       	push	r7
    107e:	8f 92       	push	r8
    1080:	9f 92       	push	r9
    1082:	af 92       	push	r10
    1084:	bf 92       	push	r11
    1086:	cf 92       	push	r12
    1088:	df 92       	push	r13
    108a:	ef 92       	push	r14
    108c:	ff 92       	push	r15
    108e:	0f 93       	push	r16
    1090:	1f 93       	push	r17
    1092:	cf 93       	push	r28
    1094:	df 93       	push	r29
    1096:	00 d0       	rcall	.+0      	; 0x1098 <_ZN3PIDC1EPdS0_S0_dddii+0x22>
    1098:	00 d0       	rcall	.+0      	; 0x109a <_ZN3PIDC1EPdS0_S0_dddii+0x24>
    109a:	cd b7       	in	r28, 0x3d	; 61
    109c:	de b7       	in	r29, 0x3e	; 62
    109e:	4c 01       	movw	r8, r24
    10a0:	27 01       	movw	r4, r14
    10a2:	38 01       	movw	r6, r16
    10a4:	0d 8d       	ldd	r16, Y+29	; 0x1d
    10a6:	1e 8d       	ldd	r17, Y+30	; 0x1e
    10a8:	dc 01       	movw	r26, r24
    10aa:	5f 96       	adiw	r26, 0x1f	; 31
    10ac:	5c 93       	st	X, r21
    10ae:	4e 93       	st	-X, r20
    10b0:	5e 97       	sbiw	r26, 0x1e	; 30
    10b2:	5d 96       	adiw	r26, 0x1d	; 29
    10b4:	7c 93       	st	X, r23
    10b6:	6e 93       	st	-X, r22
    10b8:	5c 97       	sbiw	r26, 0x1c	; 28
    10ba:	91 96       	adiw	r26, 0x21	; 33
    10bc:	3c 93       	st	X, r19
    10be:	2e 93       	st	-X, r18
    10c0:	90 97       	sbiw	r26, 0x20	; 32
    10c2:	da 96       	adiw	r26, 0x3a	; 58
    10c4:	1c 92       	st	X, r1
    10c6:	fc 01       	movw	r30, r24
    10c8:	12 aa       	std	Z+50, r1	; 0x32
    10ca:	13 aa       	std	Z+51, r1	; 0x33
    10cc:	14 aa       	std	Z+52, r1	; 0x34
    10ce:	15 aa       	std	Z+53, r1	; 0x35
    10d0:	80 e0       	ldi	r24, 0x00	; 0
    10d2:	90 e0       	ldi	r25, 0x00	; 0
    10d4:	af e7       	ldi	r26, 0x7F	; 127
    10d6:	b3 e4       	ldi	r27, 0x43	; 67
    10d8:	86 ab       	std	Z+54, r24	; 0x36
    10da:	97 ab       	std	Z+55, r25	; 0x37
    10dc:	a0 af       	std	Z+56, r26	; 0x38
    10de:	b1 af       	std	Z+57, r27	; 0x39
    10e0:	84 e6       	ldi	r24, 0x64	; 100
    10e2:	90 e0       	ldi	r25, 0x00	; 0
    10e4:	a0 e0       	ldi	r26, 0x00	; 0
    10e6:	b0 e0       	ldi	r27, 0x00	; 0
    10e8:	86 a7       	std	Z+46, r24	; 0x2e
    10ea:	97 a7       	std	Z+47, r25	; 0x2f
    10ec:	a0 ab       	std	Z+48, r26	; 0x30
    10ee:	b1 ab       	std	Z+49, r27	; 0x31
    10f0:	11 8f       	std	Z+25, r17	; 0x19
    10f2:	00 8f       	std	Z+24, r16	; 0x18
    10f4:	20 e0       	ldi	r18, 0x00	; 0
    10f6:	30 e0       	ldi	r19, 0x00	; 0
    10f8:	a9 01       	movw	r20, r18
    10fa:	c3 01       	movw	r24, r6
    10fc:	b2 01       	movw	r22, r4
    10fe:	0e 94 59 15 	call	0x2ab2	; 0x2ab2 <__cmpsf2>
    1102:	87 fd       	sbrc	r24, 7
    1104:	61 c0       	rjmp	.+194    	; 0x11c8 <_ZN3PIDC1EPdS0_S0_dddii+0x152>
    1106:	20 e0       	ldi	r18, 0x00	; 0
    1108:	30 e0       	ldi	r19, 0x00	; 0
    110a:	a9 01       	movw	r20, r18
    110c:	c6 01       	movw	r24, r12
    110e:	b5 01       	movw	r22, r10
    1110:	0e 94 59 15 	call	0x2ab2	; 0x2ab2 <__cmpsf2>
    1114:	87 fd       	sbrc	r24, 7
    1116:	58 c0       	rjmp	.+176    	; 0x11c8 <_ZN3PIDC1EPdS0_S0_dddii+0x152>
    1118:	20 e0       	ldi	r18, 0x00	; 0
    111a:	30 e0       	ldi	r19, 0x00	; 0
    111c:	a9 01       	movw	r20, r18
    111e:	6f 89       	ldd	r22, Y+23	; 0x17
    1120:	78 8d       	ldd	r23, Y+24	; 0x18
    1122:	89 8d       	ldd	r24, Y+25	; 0x19
    1124:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1126:	0e 94 59 15 	call	0x2ab2	; 0x2ab2 <__cmpsf2>
    112a:	87 fd       	sbrc	r24, 7
    112c:	4d c0       	rjmp	.+154    	; 0x11c8 <_ZN3PIDC1EPdS0_S0_dddii+0x152>
    112e:	eb 8d       	ldd	r30, Y+27	; 0x1b
    1130:	fc 8d       	ldd	r31, Y+28	; 0x1c
    1132:	d4 01       	movw	r26, r8
    1134:	5b 96       	adiw	r26, 0x1b	; 27
    1136:	fc 93       	st	X, r31
    1138:	ee 93       	st	-X, r30
    113a:	5a 97       	sbiw	r26, 0x1a	; 26
    113c:	81 e0       	ldi	r24, 0x01	; 1
    113e:	31 97       	sbiw	r30, 0x01	; 1
    1140:	09 f0       	breq	.+2      	; 0x1144 <_ZN3PIDC1EPdS0_S0_dddii+0xce>
    1142:	80 e0       	ldi	r24, 0x00	; 0
    1144:	d4 01       	movw	r26, r8
    1146:	db 96       	adiw	r26, 0x3b	; 59
    1148:	8c 93       	st	X, r24
    114a:	db 97       	sbiw	r26, 0x3b	; 59
    114c:	f4 01       	movw	r30, r8
    114e:	40 82       	st	Z, r4
    1150:	51 82       	std	Z+1, r5	; 0x01
    1152:	62 82       	std	Z+2, r6	; 0x02
    1154:	73 82       	std	Z+3, r7	; 0x03
    1156:	14 96       	adiw	r26, 0x04	; 4
    1158:	ad 92       	st	X+, r10
    115a:	bd 92       	st	X+, r11
    115c:	cd 92       	st	X+, r12
    115e:	dc 92       	st	X, r13
    1160:	17 97       	sbiw	r26, 0x07	; 7
    1162:	8f 89       	ldd	r24, Y+23	; 0x17
    1164:	98 8d       	ldd	r25, Y+24	; 0x18
    1166:	a9 8d       	ldd	r26, Y+25	; 0x19
    1168:	ba 8d       	ldd	r27, Y+26	; 0x1a
    116a:	80 87       	std	Z+8, r24	; 0x08
    116c:	91 87       	std	Z+9, r25	; 0x09
    116e:	a2 87       	std	Z+10, r26	; 0x0a
    1170:	b3 87       	std	Z+11, r27	; 0x0b
    1172:	44 86       	std	Z+12, r4	; 0x0c
    1174:	55 86       	std	Z+13, r5	; 0x0d
    1176:	66 86       	std	Z+14, r6	; 0x0e
    1178:	77 86       	std	Z+15, r7	; 0x0f
    117a:	2d ec       	ldi	r18, 0xCD	; 205
    117c:	3c ec       	ldi	r19, 0xCC	; 204
    117e:	4c ec       	ldi	r20, 0xCC	; 204
    1180:	5d e3       	ldi	r21, 0x3D	; 61
    1182:	c6 01       	movw	r24, r12
    1184:	b5 01       	movw	r22, r10
    1186:	0e 94 ec 16 	call	0x2dd8	; 0x2dd8 <__mulsf3>
    118a:	69 83       	std	Y+1, r22	; 0x01
    118c:	7a 83       	std	Y+2, r23	; 0x02
    118e:	8b 83       	std	Y+3, r24	; 0x03
    1190:	9c 83       	std	Y+4, r25	; 0x04
    1192:	f4 01       	movw	r30, r8
    1194:	60 8b       	std	Z+16, r22	; 0x10
    1196:	71 8b       	std	Z+17, r23	; 0x11
    1198:	82 8b       	std	Z+18, r24	; 0x12
    119a:	93 8b       	std	Z+19, r25	; 0x13
    119c:	2d ec       	ldi	r18, 0xCD	; 205
    119e:	3c ec       	ldi	r19, 0xCC	; 204
    11a0:	4c ec       	ldi	r20, 0xCC	; 204
    11a2:	5d e3       	ldi	r21, 0x3D	; 61
    11a4:	6f 89       	ldd	r22, Y+23	; 0x17
    11a6:	78 8d       	ldd	r23, Y+24	; 0x18
    11a8:	89 8d       	ldd	r24, Y+25	; 0x19
    11aa:	9a 8d       	ldd	r25, Y+26	; 0x1a
    11ac:	0e 94 5e 15 	call	0x2abc	; 0x2abc <__divsf3>
    11b0:	6b 01       	movw	r12, r22
    11b2:	7c 01       	movw	r14, r24
    11b4:	d4 01       	movw	r26, r8
    11b6:	54 96       	adiw	r26, 0x14	; 20
    11b8:	6d 93       	st	X+, r22
    11ba:	7d 93       	st	X+, r23
    11bc:	8d 93       	st	X+, r24
    11be:	9c 93       	st	X, r25
    11c0:	57 97       	sbiw	r26, 0x17	; 23
    11c2:	01 30       	cpi	r16, 0x01	; 1
    11c4:	11 05       	cpc	r17, r1
    11c6:	49 f1       	breq	.+82     	; 0x121a <_ZN3PIDC1EPdS0_S0_dddii+0x1a4>
    11c8:	0e 94 74 1b 	call	0x36e8	; 0x36e8 <millis>
    11cc:	d4 01       	movw	r26, r8
    11ce:	9e 96       	adiw	r26, 0x2e	; 46
    11d0:	0d 91       	ld	r16, X+
    11d2:	1d 91       	ld	r17, X+
    11d4:	2d 91       	ld	r18, X+
    11d6:	3c 91       	ld	r19, X
    11d8:	d1 97       	sbiw	r26, 0x31	; 49
    11da:	dc 01       	movw	r26, r24
    11dc:	cb 01       	movw	r24, r22
    11de:	80 1b       	sub	r24, r16
    11e0:	91 0b       	sbc	r25, r17
    11e2:	a2 0b       	sbc	r26, r18
    11e4:	b3 0b       	sbc	r27, r19
    11e6:	f4 01       	movw	r30, r8
    11e8:	82 a3       	std	Z+34, r24	; 0x22
    11ea:	93 a3       	std	Z+35, r25	; 0x23
    11ec:	a4 a3       	std	Z+36, r26	; 0x24
    11ee:	b5 a3       	std	Z+37, r27	; 0x25
    11f0:	0f 90       	pop	r0
    11f2:	0f 90       	pop	r0
    11f4:	0f 90       	pop	r0
    11f6:	0f 90       	pop	r0
    11f8:	df 91       	pop	r29
    11fa:	cf 91       	pop	r28
    11fc:	1f 91       	pop	r17
    11fe:	0f 91       	pop	r16
    1200:	ff 90       	pop	r15
    1202:	ef 90       	pop	r14
    1204:	df 90       	pop	r13
    1206:	cf 90       	pop	r12
    1208:	bf 90       	pop	r11
    120a:	af 90       	pop	r10
    120c:	9f 90       	pop	r9
    120e:	8f 90       	pop	r8
    1210:	7f 90       	pop	r7
    1212:	6f 90       	pop	r6
    1214:	5f 90       	pop	r5
    1216:	4f 90       	pop	r4
    1218:	08 95       	ret
    121a:	a3 01       	movw	r20, r6
    121c:	92 01       	movw	r18, r4
    121e:	60 e0       	ldi	r22, 0x00	; 0
    1220:	70 e0       	ldi	r23, 0x00	; 0
    1222:	cb 01       	movw	r24, r22
    1224:	0e 94 7a 14 	call	0x28f4	; 0x28f4 <__subsf3>
    1228:	f4 01       	movw	r30, r8
    122a:	64 87       	std	Z+12, r22	; 0x0c
    122c:	75 87       	std	Z+13, r23	; 0x0d
    122e:	86 87       	std	Z+14, r24	; 0x0e
    1230:	97 87       	std	Z+15, r25	; 0x0f
    1232:	29 81       	ldd	r18, Y+1	; 0x01
    1234:	3a 81       	ldd	r19, Y+2	; 0x02
    1236:	4b 81       	ldd	r20, Y+3	; 0x03
    1238:	5c 81       	ldd	r21, Y+4	; 0x04
    123a:	60 e0       	ldi	r22, 0x00	; 0
    123c:	70 e0       	ldi	r23, 0x00	; 0
    123e:	cb 01       	movw	r24, r22
    1240:	0e 94 7a 14 	call	0x28f4	; 0x28f4 <__subsf3>
    1244:	d4 01       	movw	r26, r8
    1246:	50 96       	adiw	r26, 0x10	; 16
    1248:	6d 93       	st	X+, r22
    124a:	7d 93       	st	X+, r23
    124c:	8d 93       	st	X+, r24
    124e:	9c 93       	st	X, r25
    1250:	53 97       	sbiw	r26, 0x13	; 19
    1252:	a7 01       	movw	r20, r14
    1254:	96 01       	movw	r18, r12
    1256:	60 e0       	ldi	r22, 0x00	; 0
    1258:	70 e0       	ldi	r23, 0x00	; 0
    125a:	cb 01       	movw	r24, r22
    125c:	0e 94 7a 14 	call	0x28f4	; 0x28f4 <__subsf3>
    1260:	f4 01       	movw	r30, r8
    1262:	64 8b       	std	Z+20, r22	; 0x14
    1264:	75 8b       	std	Z+21, r23	; 0x15
    1266:	86 8b       	std	Z+22, r24	; 0x16
    1268:	97 8b       	std	Z+23, r25	; 0x17
    126a:	ae cf       	rjmp	.-164    	; 0x11c8 <_ZN3PIDC1EPdS0_S0_dddii+0x152>

0000126c <_ZN3PID7ComputeEv>:
    126c:	2f 92       	push	r2
    126e:	3f 92       	push	r3
    1270:	4f 92       	push	r4
    1272:	5f 92       	push	r5
    1274:	6f 92       	push	r6
    1276:	7f 92       	push	r7
    1278:	8f 92       	push	r8
    127a:	9f 92       	push	r9
    127c:	af 92       	push	r10
    127e:	bf 92       	push	r11
    1280:	cf 92       	push	r12
    1282:	df 92       	push	r13
    1284:	ef 92       	push	r14
    1286:	ff 92       	push	r15
    1288:	0f 93       	push	r16
    128a:	1f 93       	push	r17
    128c:	cf 93       	push	r28
    128e:	df 93       	push	r29
    1290:	cd b7       	in	r28, 0x3d	; 61
    1292:	de b7       	in	r29, 0x3e	; 62
    1294:	60 97       	sbiw	r28, 0x10	; 16
    1296:	0f b6       	in	r0, 0x3f	; 63
    1298:	f8 94       	cli
    129a:	de bf       	out	0x3e, r29	; 62
    129c:	0f be       	out	0x3f, r0	; 63
    129e:	cd bf       	out	0x3d, r28	; 61
    12a0:	dc 01       	movw	r26, r24
    12a2:	da 96       	adiw	r26, 0x3a	; 58
    12a4:	1c 91       	ld	r17, X
    12a6:	11 11       	cpse	r17, r1
    12a8:	1b c0       	rjmp	.+54     	; 0x12e0 <_ZN3PID7ComputeEv+0x74>
    12aa:	10 e0       	ldi	r17, 0x00	; 0
    12ac:	81 2f       	mov	r24, r17
    12ae:	60 96       	adiw	r28, 0x10	; 16
    12b0:	0f b6       	in	r0, 0x3f	; 63
    12b2:	f8 94       	cli
    12b4:	de bf       	out	0x3e, r29	; 62
    12b6:	0f be       	out	0x3f, r0	; 63
    12b8:	cd bf       	out	0x3d, r28	; 61
    12ba:	df 91       	pop	r29
    12bc:	cf 91       	pop	r28
    12be:	1f 91       	pop	r17
    12c0:	0f 91       	pop	r16
    12c2:	ff 90       	pop	r15
    12c4:	ef 90       	pop	r14
    12c6:	df 90       	pop	r13
    12c8:	cf 90       	pop	r12
    12ca:	bf 90       	pop	r11
    12cc:	af 90       	pop	r10
    12ce:	9f 90       	pop	r9
    12d0:	8f 90       	pop	r8
    12d2:	7f 90       	pop	r7
    12d4:	6f 90       	pop	r6
    12d6:	5f 90       	pop	r5
    12d8:	4f 90       	pop	r4
    12da:	3f 90       	pop	r3
    12dc:	2f 90       	pop	r2
    12de:	08 95       	ret
    12e0:	98 8b       	std	Y+16, r25	; 0x10
    12e2:	8f 87       	std	Y+15, r24	; 0x0f
    12e4:	0e 94 74 1b 	call	0x36e8	; 0x36e8 <millis>
    12e8:	6b 01       	movw	r12, r22
    12ea:	7c 01       	movw	r14, r24
    12ec:	ef 85       	ldd	r30, Y+15	; 0x0f
    12ee:	f8 89       	ldd	r31, Y+16	; 0x10
    12f0:	82 a1       	ldd	r24, Z+34	; 0x22
    12f2:	93 a1       	ldd	r25, Z+35	; 0x23
    12f4:	a4 a1       	ldd	r26, Z+36	; 0x24
    12f6:	b5 a1       	ldd	r27, Z+37	; 0x25
    12f8:	b7 01       	movw	r22, r14
    12fa:	a6 01       	movw	r20, r12
    12fc:	48 1b       	sub	r20, r24
    12fe:	59 0b       	sbc	r21, r25
    1300:	6a 0b       	sbc	r22, r26
    1302:	7b 0b       	sbc	r23, r27
    1304:	86 a5       	ldd	r24, Z+46	; 0x2e
    1306:	97 a5       	ldd	r25, Z+47	; 0x2f
    1308:	a0 a9       	ldd	r26, Z+48	; 0x30
    130a:	b1 a9       	ldd	r27, Z+49	; 0x31
    130c:	48 17       	cp	r20, r24
    130e:	59 07       	cpc	r21, r25
    1310:	6a 07       	cpc	r22, r26
    1312:	7b 07       	cpc	r23, r27
    1314:	50 f2       	brcs	.-108    	; 0x12aa <_ZN3PID7ComputeEv+0x3e>
    1316:	04 8c       	ldd	r0, Z+28	; 0x1c
    1318:	f5 8d       	ldd	r31, Z+29	; 0x1d
    131a:	e0 2d       	mov	r30, r0
    131c:	80 81       	ld	r24, Z
    131e:	91 81       	ldd	r25, Z+1	; 0x01
    1320:	a2 81       	ldd	r26, Z+2	; 0x02
    1322:	b3 81       	ldd	r27, Z+3	; 0x03
    1324:	8e 83       	std	Y+6, r24	; 0x06
    1326:	9f 83       	std	Y+7, r25	; 0x07
    1328:	a8 87       	std	Y+8, r26	; 0x08
    132a:	b9 87       	std	Y+9, r27	; 0x09
    132c:	af 85       	ldd	r26, Y+15	; 0x0f
    132e:	b8 89       	ldd	r27, Y+16	; 0x10
    1330:	90 96       	adiw	r26, 0x20	; 32
    1332:	ed 91       	ld	r30, X+
    1334:	fc 91       	ld	r31, X
    1336:	91 97       	sbiw	r26, 0x21	; 33
    1338:	2e 81       	ldd	r18, Y+6	; 0x06
    133a:	3f 81       	ldd	r19, Y+7	; 0x07
    133c:	48 85       	ldd	r20, Y+8	; 0x08
    133e:	59 85       	ldd	r21, Y+9	; 0x09
    1340:	60 81       	ld	r22, Z
    1342:	71 81       	ldd	r23, Z+1	; 0x01
    1344:	82 81       	ldd	r24, Z+2	; 0x02
    1346:	93 81       	ldd	r25, Z+3	; 0x03
    1348:	0e 94 7a 14 	call	0x28f4	; 0x28f4 <__subsf3>
    134c:	2b 01       	movw	r4, r22
    134e:	3c 01       	movw	r6, r24
    1350:	ef 85       	ldd	r30, Y+15	; 0x0f
    1352:	f8 89       	ldd	r31, Y+16	; 0x10
    1354:	22 a5       	ldd	r18, Z+42	; 0x2a
    1356:	33 a5       	ldd	r19, Z+43	; 0x2b
    1358:	44 a5       	ldd	r20, Z+44	; 0x2c
    135a:	55 a5       	ldd	r21, Z+45	; 0x2d
    135c:	6e 81       	ldd	r22, Y+6	; 0x06
    135e:	7f 81       	ldd	r23, Y+7	; 0x07
    1360:	88 85       	ldd	r24, Y+8	; 0x08
    1362:	99 85       	ldd	r25, Y+9	; 0x09
    1364:	0e 94 7a 14 	call	0x28f4	; 0x28f4 <__subsf3>
    1368:	4b 01       	movw	r8, r22
    136a:	5c 01       	movw	r10, r24
    136c:	af 85       	ldd	r26, Y+15	; 0x0f
    136e:	b8 89       	ldd	r27, Y+16	; 0x10
    1370:	50 96       	adiw	r26, 0x10	; 16
    1372:	2d 91       	ld	r18, X+
    1374:	3d 91       	ld	r19, X+
    1376:	4d 91       	ld	r20, X+
    1378:	5c 91       	ld	r21, X
    137a:	53 97       	sbiw	r26, 0x13	; 19
    137c:	c3 01       	movw	r24, r6
    137e:	b2 01       	movw	r22, r4
    1380:	0e 94 ec 16 	call	0x2dd8	; 0x2dd8 <__mulsf3>
    1384:	ef 85       	ldd	r30, Y+15	; 0x0f
    1386:	f8 89       	ldd	r31, Y+16	; 0x10
    1388:	26 a1       	ldd	r18, Z+38	; 0x26
    138a:	37 a1       	ldd	r19, Z+39	; 0x27
    138c:	40 a5       	ldd	r20, Z+40	; 0x28
    138e:	51 a5       	ldd	r21, Z+41	; 0x29
    1390:	0e 94 7b 14 	call	0x28f6	; 0x28f6 <__addsf3>
    1394:	06 2f       	mov	r16, r22
    1396:	37 2e       	mov	r3, r23
    1398:	28 2e       	mov	r2, r24
    139a:	99 83       	std	Y+1, r25	; 0x01
    139c:	86 2f       	mov	r24, r22
    139e:	93 2d       	mov	r25, r3
    13a0:	a2 2d       	mov	r26, r2
    13a2:	b9 81       	ldd	r27, Y+1	; 0x01
    13a4:	ef 85       	ldd	r30, Y+15	; 0x0f
    13a6:	f8 89       	ldd	r31, Y+16	; 0x10
    13a8:	86 a3       	std	Z+38, r24	; 0x26
    13aa:	97 a3       	std	Z+39, r25	; 0x27
    13ac:	a0 a7       	std	Z+40, r26	; 0x28
    13ae:	b1 a7       	std	Z+41, r27	; 0x29
    13b0:	f3 ad       	ldd	r31, Z+59	; 0x3b
    13b2:	fa 87       	std	Y+10, r31	; 0x0a
    13b4:	f1 11       	cpse	r31, r1
    13b6:	22 c0       	rjmp	.+68     	; 0x13fc <_ZN3PID7ComputeEv+0x190>
    13b8:	af 85       	ldd	r26, Y+15	; 0x0f
    13ba:	b8 89       	ldd	r27, Y+16	; 0x10
    13bc:	1c 96       	adiw	r26, 0x0c	; 12
    13be:	2d 91       	ld	r18, X+
    13c0:	3d 91       	ld	r19, X+
    13c2:	4d 91       	ld	r20, X+
    13c4:	5c 91       	ld	r21, X
    13c6:	1f 97       	sbiw	r26, 0x0f	; 15
    13c8:	c5 01       	movw	r24, r10
    13ca:	b4 01       	movw	r22, r8
    13cc:	0e 94 ec 16 	call	0x2dd8	; 0x2dd8 <__mulsf3>
    13d0:	9b 01       	movw	r18, r22
    13d2:	ac 01       	movw	r20, r24
    13d4:	60 2f       	mov	r22, r16
    13d6:	73 2d       	mov	r23, r3
    13d8:	82 2d       	mov	r24, r2
    13da:	99 81       	ldd	r25, Y+1	; 0x01
    13dc:	0e 94 7a 14 	call	0x28f4	; 0x28f4 <__subsf3>
    13e0:	06 2f       	mov	r16, r22
    13e2:	37 2e       	mov	r3, r23
    13e4:	28 2e       	mov	r2, r24
    13e6:	99 83       	std	Y+1, r25	; 0x01
    13e8:	86 2f       	mov	r24, r22
    13ea:	93 2d       	mov	r25, r3
    13ec:	a2 2d       	mov	r26, r2
    13ee:	b9 81       	ldd	r27, Y+1	; 0x01
    13f0:	ef 85       	ldd	r30, Y+15	; 0x0f
    13f2:	f8 89       	ldd	r31, Y+16	; 0x10
    13f4:	86 a3       	std	Z+38, r24	; 0x26
    13f6:	97 a3       	std	Z+39, r25	; 0x27
    13f8:	a0 a7       	std	Z+40, r26	; 0x28
    13fa:	b1 a7       	std	Z+41, r27	; 0x29
    13fc:	af 85       	ldd	r26, Y+15	; 0x0f
    13fe:	b8 89       	ldd	r27, Y+16	; 0x10
    1400:	d6 96       	adiw	r26, 0x36	; 54
    1402:	bc 91       	ld	r27, X
    1404:	ba 83       	std	Y+2, r27	; 0x02
    1406:	ef 85       	ldd	r30, Y+15	; 0x0f
    1408:	f8 89       	ldd	r31, Y+16	; 0x10
    140a:	f7 a9       	ldd	r31, Z+55	; 0x37
    140c:	fb 83       	std	Y+3, r31	; 0x03
    140e:	af 85       	ldd	r26, Y+15	; 0x0f
    1410:	b8 89       	ldd	r27, Y+16	; 0x10
    1412:	d8 96       	adiw	r26, 0x38	; 56
    1414:	bc 91       	ld	r27, X
    1416:	bc 83       	std	Y+4, r27	; 0x04
    1418:	ef 85       	ldd	r30, Y+15	; 0x0f
    141a:	f8 89       	ldd	r31, Y+16	; 0x10
    141c:	f1 ad       	ldd	r31, Z+57	; 0x39
    141e:	fd 83       	std	Y+5, r31	; 0x05
    1420:	20 2f       	mov	r18, r16
    1422:	33 2d       	mov	r19, r3
    1424:	42 2d       	mov	r20, r2
    1426:	59 81       	ldd	r21, Y+1	; 0x01
    1428:	6a 81       	ldd	r22, Y+2	; 0x02
    142a:	7b 81       	ldd	r23, Y+3	; 0x03
    142c:	8b 2f       	mov	r24, r27
    142e:	9f 2f       	mov	r25, r31
    1430:	0e 94 59 15 	call	0x2ab2	; 0x2ab2 <__cmpsf2>
    1434:	87 fd       	sbrc	r24, 7
    1436:	a3 c0       	rjmp	.+326    	; 0x157e <_ZN3PID7ComputeEv+0x312>
    1438:	af 85       	ldd	r26, Y+15	; 0x0f
    143a:	b8 89       	ldd	r27, Y+16	; 0x10
    143c:	d2 96       	adiw	r26, 0x32	; 50
    143e:	bc 91       	ld	r27, X
    1440:	bb 87       	std	Y+11, r27	; 0x0b
    1442:	ef 85       	ldd	r30, Y+15	; 0x0f
    1444:	f8 89       	ldd	r31, Y+16	; 0x10
    1446:	f3 a9       	ldd	r31, Z+51	; 0x33
    1448:	fc 87       	std	Y+12, r31	; 0x0c
    144a:	af 85       	ldd	r26, Y+15	; 0x0f
    144c:	b8 89       	ldd	r27, Y+16	; 0x10
    144e:	d4 96       	adiw	r26, 0x34	; 52
    1450:	bc 91       	ld	r27, X
    1452:	bd 87       	std	Y+13, r27	; 0x0d
    1454:	ef 85       	ldd	r30, Y+15	; 0x0f
    1456:	f8 89       	ldd	r31, Y+16	; 0x10
    1458:	f5 a9       	ldd	r31, Z+53	; 0x35
    145a:	fe 87       	std	Y+14, r31	; 0x0e
    145c:	20 2f       	mov	r18, r16
    145e:	33 2d       	mov	r19, r3
    1460:	42 2d       	mov	r20, r2
    1462:	59 81       	ldd	r21, Y+1	; 0x01
    1464:	6b 85       	ldd	r22, Y+11	; 0x0b
    1466:	7c 85       	ldd	r23, Y+12	; 0x0c
    1468:	8b 2f       	mov	r24, r27
    146a:	9f 2f       	mov	r25, r31
    146c:	0e 94 df 16 	call	0x2dbe	; 0x2dbe <__gesf2>
    1470:	18 16       	cp	r1, r24
    1472:	74 f4       	brge	.+28     	; 0x1490 <_ZN3PID7ComputeEv+0x224>
    1474:	8b 85       	ldd	r24, Y+11	; 0x0b
    1476:	9c 85       	ldd	r25, Y+12	; 0x0c
    1478:	ad 85       	ldd	r26, Y+13	; 0x0d
    147a:	be 85       	ldd	r27, Y+14	; 0x0e
    147c:	ef 85       	ldd	r30, Y+15	; 0x0f
    147e:	f8 89       	ldd	r31, Y+16	; 0x10
    1480:	86 a3       	std	Z+38, r24	; 0x26
    1482:	97 a3       	std	Z+39, r25	; 0x27
    1484:	a0 a7       	std	Z+40, r26	; 0x28
    1486:	b1 a7       	std	Z+41, r27	; 0x29
    1488:	08 2f       	mov	r16, r24
    148a:	39 2e       	mov	r3, r25
    148c:	2a 2e       	mov	r2, r26
    148e:	b9 83       	std	Y+1, r27	; 0x01
    1490:	8a 85       	ldd	r24, Y+10	; 0x0a
    1492:	88 23       	and	r24, r24
    1494:	09 f4       	brne	.+2      	; 0x1498 <_ZN3PID7ComputeEv+0x22c>
    1496:	78 c0       	rjmp	.+240    	; 0x1588 <_ZN3PID7ComputeEv+0x31c>
    1498:	af 85       	ldd	r26, Y+15	; 0x0f
    149a:	b8 89       	ldd	r27, Y+16	; 0x10
    149c:	1c 96       	adiw	r26, 0x0c	; 12
    149e:	2d 91       	ld	r18, X+
    14a0:	3d 91       	ld	r19, X+
    14a2:	4d 91       	ld	r20, X+
    14a4:	5c 91       	ld	r21, X
    14a6:	1f 97       	sbiw	r26, 0x0f	; 15
    14a8:	c3 01       	movw	r24, r6
    14aa:	b2 01       	movw	r22, r4
    14ac:	0e 94 ec 16 	call	0x2dd8	; 0x2dd8 <__mulsf3>
    14b0:	2b 01       	movw	r4, r22
    14b2:	3c 01       	movw	r6, r24
    14b4:	ef 85       	ldd	r30, Y+15	; 0x0f
    14b6:	f8 89       	ldd	r31, Y+16	; 0x10
    14b8:	24 89       	ldd	r18, Z+20	; 0x14
    14ba:	35 89       	ldd	r19, Z+21	; 0x15
    14bc:	46 89       	ldd	r20, Z+22	; 0x16
    14be:	57 89       	ldd	r21, Z+23	; 0x17
    14c0:	c5 01       	movw	r24, r10
    14c2:	b4 01       	movw	r22, r8
    14c4:	0e 94 ec 16 	call	0x2dd8	; 0x2dd8 <__mulsf3>
    14c8:	9b 01       	movw	r18, r22
    14ca:	ac 01       	movw	r20, r24
    14cc:	60 2f       	mov	r22, r16
    14ce:	73 2d       	mov	r23, r3
    14d0:	82 2d       	mov	r24, r2
    14d2:	99 81       	ldd	r25, Y+1	; 0x01
    14d4:	0e 94 7a 14 	call	0x28f4	; 0x28f4 <__subsf3>
    14d8:	a3 01       	movw	r20, r6
    14da:	92 01       	movw	r18, r4
    14dc:	0e 94 7b 14 	call	0x28f6	; 0x28f6 <__addsf3>
    14e0:	96 2e       	mov	r9, r22
    14e2:	a7 2e       	mov	r10, r23
    14e4:	b8 2e       	mov	r11, r24
    14e6:	09 2f       	mov	r16, r25
    14e8:	26 2f       	mov	r18, r22
    14ea:	37 2f       	mov	r19, r23
    14ec:	48 2f       	mov	r20, r24
    14ee:	59 2f       	mov	r21, r25
    14f0:	6a 81       	ldd	r22, Y+2	; 0x02
    14f2:	7b 81       	ldd	r23, Y+3	; 0x03
    14f4:	8c 81       	ldd	r24, Y+4	; 0x04
    14f6:	9d 81       	ldd	r25, Y+5	; 0x05
    14f8:	0e 94 59 15 	call	0x2ab2	; 0x2ab2 <__cmpsf2>
    14fc:	87 fd       	sbrc	r24, 7
    14fe:	22 c0       	rjmp	.+68     	; 0x1544 <_ZN3PID7ComputeEv+0x2d8>
    1500:	af 85       	ldd	r26, Y+15	; 0x0f
    1502:	b8 89       	ldd	r27, Y+16	; 0x10
    1504:	d2 96       	adiw	r26, 0x32	; 50
    1506:	bc 91       	ld	r27, X
    1508:	ba 83       	std	Y+2, r27	; 0x02
    150a:	ef 85       	ldd	r30, Y+15	; 0x0f
    150c:	f8 89       	ldd	r31, Y+16	; 0x10
    150e:	f3 a9       	ldd	r31, Z+51	; 0x33
    1510:	fb 83       	std	Y+3, r31	; 0x03
    1512:	af 85       	ldd	r26, Y+15	; 0x0f
    1514:	b8 89       	ldd	r27, Y+16	; 0x10
    1516:	d4 96       	adiw	r26, 0x34	; 52
    1518:	bc 91       	ld	r27, X
    151a:	bc 83       	std	Y+4, r27	; 0x04
    151c:	ef 85       	ldd	r30, Y+15	; 0x0f
    151e:	f8 89       	ldd	r31, Y+16	; 0x10
    1520:	f5 a9       	ldd	r31, Z+53	; 0x35
    1522:	fd 83       	std	Y+5, r31	; 0x05
    1524:	2a 81       	ldd	r18, Y+2	; 0x02
    1526:	3b 81       	ldd	r19, Y+3	; 0x03
    1528:	4b 2f       	mov	r20, r27
    152a:	5f 2f       	mov	r21, r31
    152c:	69 2d       	mov	r22, r9
    152e:	7a 2d       	mov	r23, r10
    1530:	8b 2d       	mov	r24, r11
    1532:	90 2f       	mov	r25, r16
    1534:	0e 94 59 15 	call	0x2ab2	; 0x2ab2 <__cmpsf2>
    1538:	87 fd       	sbrc	r24, 7
    153a:	04 c0       	rjmp	.+8      	; 0x1544 <_ZN3PID7ComputeEv+0x2d8>
    153c:	9a 82       	std	Y+2, r9	; 0x02
    153e:	ab 82       	std	Y+3, r10	; 0x03
    1540:	bc 82       	std	Y+4, r11	; 0x04
    1542:	0d 83       	std	Y+5, r16	; 0x05
    1544:	af 85       	ldd	r26, Y+15	; 0x0f
    1546:	b8 89       	ldd	r27, Y+16	; 0x10
    1548:	5e 96       	adiw	r26, 0x1e	; 30
    154a:	ed 91       	ld	r30, X+
    154c:	fc 91       	ld	r31, X
    154e:	5f 97       	sbiw	r26, 0x1f	; 31
    1550:	8a 81       	ldd	r24, Y+2	; 0x02
    1552:	9b 81       	ldd	r25, Y+3	; 0x03
    1554:	ac 81       	ldd	r26, Y+4	; 0x04
    1556:	bd 81       	ldd	r27, Y+5	; 0x05
    1558:	80 83       	st	Z, r24
    155a:	91 83       	std	Z+1, r25	; 0x01
    155c:	a2 83       	std	Z+2, r26	; 0x02
    155e:	b3 83       	std	Z+3, r27	; 0x03
    1560:	8e 81       	ldd	r24, Y+6	; 0x06
    1562:	9f 81       	ldd	r25, Y+7	; 0x07
    1564:	a8 85       	ldd	r26, Y+8	; 0x08
    1566:	b9 85       	ldd	r27, Y+9	; 0x09
    1568:	ef 85       	ldd	r30, Y+15	; 0x0f
    156a:	f8 89       	ldd	r31, Y+16	; 0x10
    156c:	82 a7       	std	Z+42, r24	; 0x2a
    156e:	93 a7       	std	Z+43, r25	; 0x2b
    1570:	a4 a7       	std	Z+44, r26	; 0x2c
    1572:	b5 a7       	std	Z+45, r27	; 0x2d
    1574:	c2 a2       	std	Z+34, r12	; 0x22
    1576:	d3 a2       	std	Z+35, r13	; 0x23
    1578:	e4 a2       	std	Z+36, r14	; 0x24
    157a:	f5 a2       	std	Z+37, r15	; 0x25
    157c:	97 ce       	rjmp	.-722    	; 0x12ac <_ZN3PID7ComputeEv+0x40>
    157e:	8a 81       	ldd	r24, Y+2	; 0x02
    1580:	9b 81       	ldd	r25, Y+3	; 0x03
    1582:	ac 81       	ldd	r26, Y+4	; 0x04
    1584:	bd 81       	ldd	r27, Y+5	; 0x05
    1586:	7a cf       	rjmp	.-268    	; 0x147c <_ZN3PID7ComputeEv+0x210>
    1588:	41 2c       	mov	r4, r1
    158a:	51 2c       	mov	r5, r1
    158c:	32 01       	movw	r6, r4
    158e:	92 cf       	rjmp	.-220    	; 0x14b4 <_ZN3PID7ComputeEv+0x248>

00001590 <_ZN3PID10SetTuningsEddd>:
}

/* SetTunings(...)*************************************************************
 * Set Tunings using the last-rembered POn setting
 ******************************************************************************/
void PID::SetTunings(double Kp, double Ki, double Kd){
    1590:	4f 92       	push	r4
    1592:	5f 92       	push	r5
    1594:	6f 92       	push	r6
    1596:	7f 92       	push	r7
    1598:	8f 92       	push	r8
    159a:	9f 92       	push	r9
    159c:	af 92       	push	r10
    159e:	bf 92       	push	r11
    15a0:	cf 92       	push	r12
    15a2:	df 92       	push	r13
    15a4:	ef 92       	push	r14
    15a6:	ff 92       	push	r15
    15a8:	0f 93       	push	r16
    15aa:	1f 93       	push	r17
    15ac:	cf 93       	push	r28
    15ae:	df 93       	push	r29
    15b0:	00 d0       	rcall	.+0      	; 0x15b2 <_ZN3PID10SetTuningsEddd+0x22>
    15b2:	00 d0       	rcall	.+0      	; 0x15b4 <_ZN3PID10SetTuningsEddd+0x24>
    15b4:	00 d0       	rcall	.+0      	; 0x15b6 <_ZN3PID10SetTuningsEddd+0x26>
    15b6:	cd b7       	in	r28, 0x3d	; 61
    15b8:	de b7       	in	r29, 0x3e	; 62
    15ba:	9e 83       	std	Y+6, r25	; 0x06
    15bc:	8d 83       	std	Y+5, r24	; 0x05
    15be:	4a 01       	movw	r8, r20
    15c0:	5b 01       	movw	r10, r22
    15c2:	28 01       	movw	r4, r16
    15c4:	39 01       	movw	r6, r18
 * it's called automatically from the constructor, but tunings can also
 * be adjusted on the fly during normal operation
 ******************************************************************************/
void PID::SetTunings(double Kp, double Ki, double Kd, int POn)
{
   if (Kp<0 || Ki<0 || Kd<0) return;
    15c6:	20 e0       	ldi	r18, 0x00	; 0
    15c8:	30 e0       	ldi	r19, 0x00	; 0
    15ca:	a9 01       	movw	r20, r18
    15cc:	c5 01       	movw	r24, r10
    15ce:	b4 01       	movw	r22, r8
    15d0:	0e 94 59 15 	call	0x2ab2	; 0x2ab2 <__cmpsf2>
    15d4:	87 fd       	sbrc	r24, 7
    15d6:	60 c0       	rjmp	.+192    	; 0x1698 <_ZN3PID10SetTuningsEddd+0x108>
    15d8:	20 e0       	ldi	r18, 0x00	; 0
    15da:	30 e0       	ldi	r19, 0x00	; 0
    15dc:	a9 01       	movw	r20, r18
    15de:	c3 01       	movw	r24, r6
    15e0:	b2 01       	movw	r22, r4
    15e2:	0e 94 59 15 	call	0x2ab2	; 0x2ab2 <__cmpsf2>
    15e6:	87 fd       	sbrc	r24, 7
    15e8:	57 c0       	rjmp	.+174    	; 0x1698 <_ZN3PID10SetTuningsEddd+0x108>
    15ea:	20 e0       	ldi	r18, 0x00	; 0
    15ec:	30 e0       	ldi	r19, 0x00	; 0
    15ee:	a9 01       	movw	r20, r18
    15f0:	c7 01       	movw	r24, r14
    15f2:	b6 01       	movw	r22, r12
    15f4:	0e 94 59 15 	call	0x2ab2	; 0x2ab2 <__cmpsf2>
    15f8:	87 fd       	sbrc	r24, 7
    15fa:	4e c0       	rjmp	.+156    	; 0x1698 <_ZN3PID10SetTuningsEddd+0x108>

   pOn = POn;
   pOnE = POn == P_ON_E;
    15fc:	81 e0       	ldi	r24, 0x01	; 1
    15fe:	ed 81       	ldd	r30, Y+5	; 0x05
    1600:	fe 81       	ldd	r31, Y+6	; 0x06
    1602:	22 8d       	ldd	r18, Z+26	; 0x1a
    1604:	33 8d       	ldd	r19, Z+27	; 0x1b
    1606:	21 30       	cpi	r18, 0x01	; 1
    1608:	31 05       	cpc	r19, r1
    160a:	09 f0       	breq	.+2      	; 0x160e <_ZN3PID10SetTuningsEddd+0x7e>
    160c:	80 e0       	ldi	r24, 0x00	; 0
    160e:	83 af       	std	Z+59, r24	; 0x3b

   dispKp = Kp; dispKi = Ki; dispKd = Kd;
    1610:	80 82       	st	Z, r8
    1612:	91 82       	std	Z+1, r9	; 0x01
    1614:	a2 82       	std	Z+2, r10	; 0x02
    1616:	b3 82       	std	Z+3, r11	; 0x03
    1618:	44 82       	std	Z+4, r4	; 0x04
    161a:	55 82       	std	Z+5, r5	; 0x05
    161c:	66 82       	std	Z+6, r6	; 0x06
    161e:	77 82       	std	Z+7, r7	; 0x07
    1620:	c0 86       	std	Z+8, r12	; 0x08
    1622:	d1 86       	std	Z+9, r13	; 0x09
    1624:	e2 86       	std	Z+10, r14	; 0x0a
    1626:	f3 86       	std	Z+11, r15	; 0x0b

   double SampleTimeInSec = ((double)SampleTime)/1000;
    1628:	66 a5       	ldd	r22, Z+46	; 0x2e
    162a:	77 a5       	ldd	r23, Z+47	; 0x2f
    162c:	80 a9       	ldd	r24, Z+48	; 0x30
    162e:	91 a9       	ldd	r25, Z+49	; 0x31
    1630:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <__floatunsisf>
    1634:	20 e0       	ldi	r18, 0x00	; 0
    1636:	30 e0       	ldi	r19, 0x00	; 0
    1638:	4a e7       	ldi	r20, 0x7A	; 122
    163a:	54 e4       	ldi	r21, 0x44	; 68
    163c:	0e 94 5e 15 	call	0x2abc	; 0x2abc <__divsf3>
    1640:	69 83       	std	Y+1, r22	; 0x01
    1642:	7a 83       	std	Y+2, r23	; 0x02
    1644:	8b 83       	std	Y+3, r24	; 0x03
    1646:	9c 83       	std	Y+4, r25	; 0x04
   kp = Kp;
    1648:	ed 81       	ldd	r30, Y+5	; 0x05
    164a:	fe 81       	ldd	r31, Y+6	; 0x06
    164c:	84 86       	std	Z+12, r8	; 0x0c
    164e:	95 86       	std	Z+13, r9	; 0x0d
    1650:	a6 86       	std	Z+14, r10	; 0x0e
    1652:	b7 86       	std	Z+15, r11	; 0x0f
   ki = Ki * SampleTimeInSec;
    1654:	9b 01       	movw	r18, r22
    1656:	ac 01       	movw	r20, r24
    1658:	c3 01       	movw	r24, r6
    165a:	b2 01       	movw	r22, r4
    165c:	0e 94 ec 16 	call	0x2dd8	; 0x2dd8 <__mulsf3>
    1660:	2b 01       	movw	r4, r22
    1662:	3c 01       	movw	r6, r24
    1664:	ed 81       	ldd	r30, Y+5	; 0x05
    1666:	fe 81       	ldd	r31, Y+6	; 0x06
    1668:	60 8b       	std	Z+16, r22	; 0x10
    166a:	71 8b       	std	Z+17, r23	; 0x11
    166c:	82 8b       	std	Z+18, r24	; 0x12
    166e:	93 8b       	std	Z+19, r25	; 0x13
   kd = Kd / SampleTimeInSec;
    1670:	29 81       	ldd	r18, Y+1	; 0x01
    1672:	3a 81       	ldd	r19, Y+2	; 0x02
    1674:	4b 81       	ldd	r20, Y+3	; 0x03
    1676:	5c 81       	ldd	r21, Y+4	; 0x04
    1678:	c7 01       	movw	r24, r14
    167a:	b6 01       	movw	r22, r12
    167c:	0e 94 5e 15 	call	0x2abc	; 0x2abc <__divsf3>
    1680:	6b 01       	movw	r12, r22
    1682:	7c 01       	movw	r14, r24
    1684:	ed 81       	ldd	r30, Y+5	; 0x05
    1686:	fe 81       	ldd	r31, Y+6	; 0x06
    1688:	64 8b       	std	Z+20, r22	; 0x14
    168a:	75 8b       	std	Z+21, r23	; 0x15
    168c:	86 8b       	std	Z+22, r24	; 0x16
    168e:	97 8b       	std	Z+23, r25	; 0x17

  if(controllerDirection ==REVERSE)
    1690:	80 8d       	ldd	r24, Z+24	; 0x18
    1692:	91 8d       	ldd	r25, Z+25	; 0x19
    1694:	01 97       	sbiw	r24, 0x01	; 1
    1696:	b9 f0       	breq	.+46     	; 0x16c6 <_ZN3PID10SetTuningsEddd+0x136>
/* SetTunings(...)*************************************************************
 * Set Tunings using the last-rembered POn setting
 ******************************************************************************/
void PID::SetTunings(double Kp, double Ki, double Kd){
    SetTunings(Kp, Ki, Kd, pOn); 
}
    1698:	26 96       	adiw	r28, 0x06	; 6
    169a:	0f b6       	in	r0, 0x3f	; 63
    169c:	f8 94       	cli
    169e:	de bf       	out	0x3e, r29	; 62
    16a0:	0f be       	out	0x3f, r0	; 63
    16a2:	cd bf       	out	0x3d, r28	; 61
    16a4:	df 91       	pop	r29
    16a6:	cf 91       	pop	r28
    16a8:	1f 91       	pop	r17
    16aa:	0f 91       	pop	r16
    16ac:	ff 90       	pop	r15
    16ae:	ef 90       	pop	r14
    16b0:	df 90       	pop	r13
    16b2:	cf 90       	pop	r12
    16b4:	bf 90       	pop	r11
    16b6:	af 90       	pop	r10
    16b8:	9f 90       	pop	r9
    16ba:	8f 90       	pop	r8
    16bc:	7f 90       	pop	r7
    16be:	6f 90       	pop	r6
    16c0:	5f 90       	pop	r5
    16c2:	4f 90       	pop	r4
    16c4:	08 95       	ret
   ki = Ki * SampleTimeInSec;
   kd = Kd / SampleTimeInSec;

  if(controllerDirection ==REVERSE)
   {
      kp = (0 - kp);
    16c6:	a5 01       	movw	r20, r10
    16c8:	94 01       	movw	r18, r8
    16ca:	60 e0       	ldi	r22, 0x00	; 0
    16cc:	70 e0       	ldi	r23, 0x00	; 0
    16ce:	cb 01       	movw	r24, r22
    16d0:	0e 94 7a 14 	call	0x28f4	; 0x28f4 <__subsf3>
    16d4:	ed 81       	ldd	r30, Y+5	; 0x05
    16d6:	fe 81       	ldd	r31, Y+6	; 0x06
    16d8:	64 87       	std	Z+12, r22	; 0x0c
    16da:	75 87       	std	Z+13, r23	; 0x0d
    16dc:	86 87       	std	Z+14, r24	; 0x0e
    16de:	97 87       	std	Z+15, r25	; 0x0f
      ki = (0 - ki);
    16e0:	a3 01       	movw	r20, r6
    16e2:	92 01       	movw	r18, r4
    16e4:	60 e0       	ldi	r22, 0x00	; 0
    16e6:	70 e0       	ldi	r23, 0x00	; 0
    16e8:	cb 01       	movw	r24, r22
    16ea:	0e 94 7a 14 	call	0x28f4	; 0x28f4 <__subsf3>
    16ee:	ed 81       	ldd	r30, Y+5	; 0x05
    16f0:	fe 81       	ldd	r31, Y+6	; 0x06
    16f2:	60 8b       	std	Z+16, r22	; 0x10
    16f4:	71 8b       	std	Z+17, r23	; 0x11
    16f6:	82 8b       	std	Z+18, r24	; 0x12
    16f8:	93 8b       	std	Z+19, r25	; 0x13
      kd = (0 - kd);
    16fa:	a7 01       	movw	r20, r14
    16fc:	96 01       	movw	r18, r12
    16fe:	60 e0       	ldi	r22, 0x00	; 0
    1700:	70 e0       	ldi	r23, 0x00	; 0
    1702:	cb 01       	movw	r24, r22
    1704:	0e 94 7a 14 	call	0x28f4	; 0x28f4 <__subsf3>
    1708:	ed 81       	ldd	r30, Y+5	; 0x05
    170a:	fe 81       	ldd	r31, Y+6	; 0x06
    170c:	64 8b       	std	Z+20, r22	; 0x14
    170e:	75 8b       	std	Z+21, r23	; 0x15
    1710:	86 8b       	std	Z+22, r24	; 0x16
    1712:	97 8b       	std	Z+23, r25	; 0x17
/* SetTunings(...)*************************************************************
 * Set Tunings using the last-rembered POn setting
 ******************************************************************************/
void PID::SetTunings(double Kp, double Ki, double Kd){
    SetTunings(Kp, Ki, Kd, pOn); 
}
    1714:	c1 cf       	rjmp	.-126    	; 0x1698 <_ZN3PID10SetTuningsEddd+0x108>

00001716 <_ZN3PID13SetSampleTimeEi>:

/* SetSampleTime(...) *********************************************************
 * sets the period, in Milliseconds, at which the calculation is performed
 ******************************************************************************/
void PID::SetSampleTime(int NewSampleTime)
{
    1716:	8f 92       	push	r8
    1718:	9f 92       	push	r9
    171a:	af 92       	push	r10
    171c:	bf 92       	push	r11
    171e:	cf 92       	push	r12
    1720:	df 92       	push	r13
    1722:	ef 92       	push	r14
    1724:	ff 92       	push	r15
    1726:	cf 93       	push	r28
    1728:	df 93       	push	r29
   if (NewSampleTime > 0)
    172a:	16 16       	cp	r1, r22
    172c:	17 06       	cpc	r1, r23
    172e:	b4 f5       	brge	.+108    	; 0x179c <_ZN3PID13SetSampleTimeEi+0x86>
    1730:	6b 01       	movw	r12, r22
    1732:	ec 01       	movw	r28, r24
   {
      double ratio  = (double)NewSampleTime
                      / (double)SampleTime;
    1734:	0d 2c       	mov	r0, r13
    1736:	00 0c       	add	r0, r0
    1738:	ee 08       	sbc	r14, r14
    173a:	ff 08       	sbc	r15, r15
    173c:	c7 01       	movw	r24, r14
    173e:	b6 01       	movw	r22, r12
    1740:	0e 94 08 16 	call	0x2c10	; 0x2c10 <__floatsisf>
    1744:	4b 01       	movw	r8, r22
    1746:	5c 01       	movw	r10, r24
    1748:	6e a5       	ldd	r22, Y+46	; 0x2e
    174a:	7f a5       	ldd	r23, Y+47	; 0x2f
    174c:	88 a9       	ldd	r24, Y+48	; 0x30
    174e:	99 a9       	ldd	r25, Y+49	; 0x31
    1750:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <__floatunsisf>
    1754:	9b 01       	movw	r18, r22
    1756:	ac 01       	movw	r20, r24
    1758:	c5 01       	movw	r24, r10
    175a:	b4 01       	movw	r22, r8
    175c:	0e 94 5e 15 	call	0x2abc	; 0x2abc <__divsf3>
    1760:	4b 01       	movw	r8, r22
    1762:	5c 01       	movw	r10, r24
      ki *= ratio;
    1764:	9b 01       	movw	r18, r22
    1766:	ac 01       	movw	r20, r24
    1768:	68 89       	ldd	r22, Y+16	; 0x10
    176a:	79 89       	ldd	r23, Y+17	; 0x11
    176c:	8a 89       	ldd	r24, Y+18	; 0x12
    176e:	9b 89       	ldd	r25, Y+19	; 0x13
    1770:	0e 94 ec 16 	call	0x2dd8	; 0x2dd8 <__mulsf3>
    1774:	68 8b       	std	Y+16, r22	; 0x10
    1776:	79 8b       	std	Y+17, r23	; 0x11
    1778:	8a 8b       	std	Y+18, r24	; 0x12
    177a:	9b 8b       	std	Y+19, r25	; 0x13
      kd /= ratio;
    177c:	a5 01       	movw	r20, r10
    177e:	94 01       	movw	r18, r8
    1780:	6c 89       	ldd	r22, Y+20	; 0x14
    1782:	7d 89       	ldd	r23, Y+21	; 0x15
    1784:	8e 89       	ldd	r24, Y+22	; 0x16
    1786:	9f 89       	ldd	r25, Y+23	; 0x17
    1788:	0e 94 5e 15 	call	0x2abc	; 0x2abc <__divsf3>
    178c:	6c 8b       	std	Y+20, r22	; 0x14
    178e:	7d 8b       	std	Y+21, r23	; 0x15
    1790:	8e 8b       	std	Y+22, r24	; 0x16
    1792:	9f 8b       	std	Y+23, r25	; 0x17
      SampleTime = (unsigned long)NewSampleTime;
    1794:	ce a6       	std	Y+46, r12	; 0x2e
    1796:	df a6       	std	Y+47, r13	; 0x2f
    1798:	e8 aa       	std	Y+48, r14	; 0x30
    179a:	f9 aa       	std	Y+49, r15	; 0x31
   }
}
    179c:	df 91       	pop	r29
    179e:	cf 91       	pop	r28
    17a0:	ff 90       	pop	r15
    17a2:	ef 90       	pop	r14
    17a4:	df 90       	pop	r13
    17a6:	cf 90       	pop	r12
    17a8:	bf 90       	pop	r11
    17aa:	af 90       	pop	r10
    17ac:	9f 90       	pop	r9
    17ae:	8f 90       	pop	r8
    17b0:	08 95       	ret

000017b2 <_ZN3PID15SetOutputLimitsEdd>:
 *  be doing a time window and will need 0-8000 or something.  or maybe they'll
 *  want to clamp it from 0-125.  who knows.  at any rate, that can all be done
 *  here.
 **************************************************************************/
void PID::SetOutputLimits(double Min, double Max)
{
    17b2:	4f 92       	push	r4
    17b4:	5f 92       	push	r5
    17b6:	6f 92       	push	r6
    17b8:	7f 92       	push	r7
    17ba:	8f 92       	push	r8
    17bc:	9f 92       	push	r9
    17be:	af 92       	push	r10
    17c0:	bf 92       	push	r11
    17c2:	cf 92       	push	r12
    17c4:	df 92       	push	r13
    17c6:	ef 92       	push	r14
    17c8:	ff 92       	push	r15
    17ca:	0f 93       	push	r16
    17cc:	1f 93       	push	r17
    17ce:	cf 93       	push	r28
    17d0:	df 93       	push	r29
    17d2:	ec 01       	movw	r28, r24
    17d4:	4a 01       	movw	r8, r20
    17d6:	5b 01       	movw	r10, r22
    17d8:	79 01       	movw	r14, r18
   if(Min >= Max) return;
    17da:	98 01       	movw	r18, r16
    17dc:	a7 01       	movw	r20, r14
    17de:	c5 01       	movw	r24, r10
    17e0:	b4 01       	movw	r22, r8
    17e2:	0e 94 df 16 	call	0x2dbe	; 0x2dbe <__gesf2>
    17e6:	87 ff       	sbrs	r24, 7
    17e8:	49 c0       	rjmp	.+146    	; 0x187c <_ZN3PID15SetOutputLimitsEdd+0xca>
   outMin = Min;
    17ea:	8a aa       	std	Y+50, r8	; 0x32
    17ec:	9b aa       	std	Y+51, r9	; 0x33
    17ee:	ac aa       	std	Y+52, r10	; 0x34
    17f0:	bd aa       	std	Y+53, r11	; 0x35
   outMax = Max;
    17f2:	c8 01       	movw	r24, r16
    17f4:	d7 01       	movw	r26, r14
    17f6:	8e ab       	std	Y+54, r24	; 0x36
    17f8:	9f ab       	std	Y+55, r25	; 0x37
    17fa:	a8 af       	std	Y+56, r26	; 0x38
    17fc:	b9 af       	std	Y+57, r27	; 0x39

   if(inAuto)
    17fe:	8a ad       	ldd	r24, Y+58	; 0x3a
    1800:	88 23       	and	r24, r24
    1802:	e1 f1       	breq	.+120    	; 0x187c <_ZN3PID15SetOutputLimitsEdd+0xca>
   {
	   if(*myOutput > outMax) *myOutput = outMax;
    1804:	ce 8c       	ldd	r12, Y+30	; 0x1e
    1806:	df 8c       	ldd	r13, Y+31	; 0x1f
    1808:	f6 01       	movw	r30, r12
    180a:	40 80       	ld	r4, Z
    180c:	51 80       	ldd	r5, Z+1	; 0x01
    180e:	62 80       	ldd	r6, Z+2	; 0x02
    1810:	73 80       	ldd	r7, Z+3	; 0x03
    1812:	a3 01       	movw	r20, r6
    1814:	92 01       	movw	r18, r4
    1816:	b8 01       	movw	r22, r16
    1818:	c7 01       	movw	r24, r14
    181a:	0e 94 59 15 	call	0x2ab2	; 0x2ab2 <__cmpsf2>
    181e:	87 fd       	sbrc	r24, 7
    1820:	3e c0       	rjmp	.+124    	; 0x189e <_ZN3PID15SetOutputLimitsEdd+0xec>
	   else if(*myOutput < outMin) *myOutput = outMin;
    1822:	a3 01       	movw	r20, r6
    1824:	92 01       	movw	r18, r4
    1826:	c5 01       	movw	r24, r10
    1828:	b4 01       	movw	r22, r8
    182a:	0e 94 df 16 	call	0x2dbe	; 0x2dbe <__gesf2>
    182e:	18 16       	cp	r1, r24
    1830:	4c f4       	brge	.+18     	; 0x1844 <_ZN3PID15SetOutputLimitsEdd+0x92>
    1832:	f6 01       	movw	r30, r12
    1834:	80 82       	st	Z, r8
    1836:	91 82       	std	Z+1, r9	; 0x01
    1838:	a2 82       	std	Z+2, r10	; 0x02
    183a:	b3 82       	std	Z+3, r11	; 0x03
    183c:	0e a9       	ldd	r16, Y+54	; 0x36
    183e:	1f a9       	ldd	r17, Y+55	; 0x37
    1840:	e8 ac       	ldd	r14, Y+56	; 0x38
    1842:	f9 ac       	ldd	r15, Y+57	; 0x39

	   if(outputSum > outMax) outputSum= outMax;
    1844:	8e a0       	ldd	r8, Y+38	; 0x26
    1846:	9f a0       	ldd	r9, Y+39	; 0x27
    1848:	a8 a4       	ldd	r10, Y+40	; 0x28
    184a:	b9 a4       	ldd	r11, Y+41	; 0x29
    184c:	98 01       	movw	r18, r16
    184e:	a7 01       	movw	r20, r14
    1850:	c5 01       	movw	r24, r10
    1852:	b4 01       	movw	r22, r8
    1854:	0e 94 df 16 	call	0x2dbe	; 0x2dbe <__gesf2>
    1858:	18 16       	cp	r1, r24
    185a:	6c f1       	brlt	.+90     	; 0x18b6 <_ZN3PID15SetOutputLimitsEdd+0x104>
	   else if(outputSum < outMin) outputSum= outMin;
    185c:	ca a8       	ldd	r12, Y+50	; 0x32
    185e:	db a8       	ldd	r13, Y+51	; 0x33
    1860:	ec a8       	ldd	r14, Y+52	; 0x34
    1862:	fd a8       	ldd	r15, Y+53	; 0x35
    1864:	a7 01       	movw	r20, r14
    1866:	96 01       	movw	r18, r12
    1868:	c5 01       	movw	r24, r10
    186a:	b4 01       	movw	r22, r8
    186c:	0e 94 59 15 	call	0x2ab2	; 0x2ab2 <__cmpsf2>
    1870:	87 ff       	sbrs	r24, 7
    1872:	04 c0       	rjmp	.+8      	; 0x187c <_ZN3PID15SetOutputLimitsEdd+0xca>
    1874:	ce a2       	std	Y+38, r12	; 0x26
    1876:	df a2       	std	Y+39, r13	; 0x27
    1878:	e8 a6       	std	Y+40, r14	; 0x28
    187a:	f9 a6       	std	Y+41, r15	; 0x29
   }
}
    187c:	df 91       	pop	r29
    187e:	cf 91       	pop	r28
    1880:	1f 91       	pop	r17
    1882:	0f 91       	pop	r16
    1884:	ff 90       	pop	r15
    1886:	ef 90       	pop	r14
    1888:	df 90       	pop	r13
    188a:	cf 90       	pop	r12
    188c:	bf 90       	pop	r11
    188e:	af 90       	pop	r10
    1890:	9f 90       	pop	r9
    1892:	8f 90       	pop	r8
    1894:	7f 90       	pop	r7
    1896:	6f 90       	pop	r6
    1898:	5f 90       	pop	r5
    189a:	4f 90       	pop	r4
    189c:	08 95       	ret
   outMin = Min;
   outMax = Max;

   if(inAuto)
   {
	   if(*myOutput > outMax) *myOutput = outMax;
    189e:	c8 01       	movw	r24, r16
    18a0:	d7 01       	movw	r26, r14
    18a2:	f6 01       	movw	r30, r12
    18a4:	80 83       	st	Z, r24
    18a6:	91 83       	std	Z+1, r25	; 0x01
    18a8:	a2 83       	std	Z+2, r26	; 0x02
    18aa:	b3 83       	std	Z+3, r27	; 0x03
    18ac:	0e a9       	ldd	r16, Y+54	; 0x36
    18ae:	1f a9       	ldd	r17, Y+55	; 0x37
    18b0:	e8 ac       	ldd	r14, Y+56	; 0x38
    18b2:	f9 ac       	ldd	r15, Y+57	; 0x39
    18b4:	c7 cf       	rjmp	.-114    	; 0x1844 <_ZN3PID15SetOutputLimitsEdd+0x92>
	   else if(*myOutput < outMin) *myOutput = outMin;

	   if(outputSum > outMax) outputSum= outMax;
    18b6:	c8 01       	movw	r24, r16
    18b8:	d7 01       	movw	r26, r14
    18ba:	8e a3       	std	Y+38, r24	; 0x26
    18bc:	9f a3       	std	Y+39, r25	; 0x27
    18be:	a8 a7       	std	Y+40, r26	; 0x28
    18c0:	b9 a7       	std	Y+41, r27	; 0x29
    18c2:	dc cf       	rjmp	.-72     	; 0x187c <_ZN3PID15SetOutputLimitsEdd+0xca>

000018c4 <_ZN3PID7SetModeEi>:
 * Allows the controller Mode to be set to manual (0) or Automatic (non-zero)
 * when the transition from manual to auto occurs, the controller is
 * automatically initialized
 ******************************************************************************/
void PID::SetMode(int Mode)
{
    18c4:	8f 92       	push	r8
    18c6:	9f 92       	push	r9
    18c8:	af 92       	push	r10
    18ca:	bf 92       	push	r11
    18cc:	cf 92       	push	r12
    18ce:	df 92       	push	r13
    18d0:	ef 92       	push	r14
    18d2:	ff 92       	push	r15
    18d4:	1f 93       	push	r17
    18d6:	cf 93       	push	r28
    18d8:	df 93       	push	r29
    18da:	ec 01       	movw	r28, r24
    bool newAuto = (Mode == AUTOMATIC);
    18dc:	11 e0       	ldi	r17, 0x01	; 1
    18de:	61 30       	cpi	r22, 0x01	; 1
    18e0:	71 05       	cpc	r23, r1
    18e2:	09 f0       	breq	.+2      	; 0x18e6 <_ZN3PID7SetModeEi+0x22>
    18e4:	10 e0       	ldi	r17, 0x00	; 0
    if(newAuto && !inAuto)
    18e6:	61 30       	cpi	r22, 0x01	; 1
    18e8:	71 05       	cpc	r23, r1
    18ea:	69 f0       	breq	.+26     	; 0x1906 <_ZN3PID7SetModeEi+0x42>
    {  /*we just went from manual to auto*/
        PID::Initialize();
    }
    inAuto = newAuto;
    18ec:	1a af       	std	Y+58, r17	; 0x3a
}
    18ee:	df 91       	pop	r29
    18f0:	cf 91       	pop	r28
    18f2:	1f 91       	pop	r17
    18f4:	ff 90       	pop	r15
    18f6:	ef 90       	pop	r14
    18f8:	df 90       	pop	r13
    18fa:	cf 90       	pop	r12
    18fc:	bf 90       	pop	r11
    18fe:	af 90       	pop	r10
    1900:	9f 90       	pop	r9
    1902:	8f 90       	pop	r8
    1904:	08 95       	ret
 * automatically initialized
 ******************************************************************************/
void PID::SetMode(int Mode)
{
    bool newAuto = (Mode == AUTOMATIC);
    if(newAuto && !inAuto)
    1906:	8a ad       	ldd	r24, Y+58	; 0x3a
    1908:	81 11       	cpse	r24, r1
    190a:	f0 cf       	rjmp	.-32     	; 0x18ec <_ZN3PID7SetModeEi+0x28>
 *	does all the things that need to happen to ensure a bumpless transfer
 *  from manual to automatic mode.
 ******************************************************************************/
void PID::Initialize()
{
   outputSum = *myOutput;
    190c:	ee 8d       	ldd	r30, Y+30	; 0x1e
    190e:	ff 8d       	ldd	r31, Y+31	; 0x1f
    1910:	c0 80       	ld	r12, Z
    1912:	d1 80       	ldd	r13, Z+1	; 0x01
    1914:	e2 80       	ldd	r14, Z+2	; 0x02
    1916:	f3 80       	ldd	r15, Z+3	; 0x03
    1918:	ce a2       	std	Y+38, r12	; 0x26
    191a:	df a2       	std	Y+39, r13	; 0x27
    191c:	e8 a6       	std	Y+40, r14	; 0x28
    191e:	f9 a6       	std	Y+41, r15	; 0x29
   lastInput = *myInput;
    1920:	ec 8d       	ldd	r30, Y+28	; 0x1c
    1922:	fd 8d       	ldd	r31, Y+29	; 0x1d
    1924:	80 81       	ld	r24, Z
    1926:	91 81       	ldd	r25, Z+1	; 0x01
    1928:	a2 81       	ldd	r26, Z+2	; 0x02
    192a:	b3 81       	ldd	r27, Z+3	; 0x03
    192c:	8a a7       	std	Y+42, r24	; 0x2a
    192e:	9b a7       	std	Y+43, r25	; 0x2b
    1930:	ac a7       	std	Y+44, r26	; 0x2c
    1932:	bd a7       	std	Y+45, r27	; 0x2d
   if(outputSum > outMax) outputSum = outMax;
    1934:	8e a8       	ldd	r8, Y+54	; 0x36
    1936:	9f a8       	ldd	r9, Y+55	; 0x37
    1938:	a8 ac       	ldd	r10, Y+56	; 0x38
    193a:	b9 ac       	ldd	r11, Y+57	; 0x39
    193c:	a5 01       	movw	r20, r10
    193e:	94 01       	movw	r18, r8
    1940:	c7 01       	movw	r24, r14
    1942:	b6 01       	movw	r22, r12
    1944:	0e 94 df 16 	call	0x2dbe	; 0x2dbe <__gesf2>
    1948:	18 16       	cp	r1, r24
    194a:	64 f0       	brlt	.+24     	; 0x1964 <_ZN3PID7SetModeEi+0xa0>
   else if(outputSum < outMin) outputSum = outMin;
    194c:	8a a8       	ldd	r8, Y+50	; 0x32
    194e:	9b a8       	ldd	r9, Y+51	; 0x33
    1950:	ac a8       	ldd	r10, Y+52	; 0x34
    1952:	bd a8       	ldd	r11, Y+53	; 0x35
    1954:	a5 01       	movw	r20, r10
    1956:	94 01       	movw	r18, r8
    1958:	c7 01       	movw	r24, r14
    195a:	b6 01       	movw	r22, r12
    195c:	0e 94 59 15 	call	0x2ab2	; 0x2ab2 <__cmpsf2>
    1960:	87 ff       	sbrs	r24, 7
    1962:	c4 cf       	rjmp	.-120    	; 0x18ec <_ZN3PID7SetModeEi+0x28>
    1964:	8e a2       	std	Y+38, r8	; 0x26
    1966:	9f a2       	std	Y+39, r9	; 0x27
    1968:	a8 a6       	std	Y+40, r10	; 0x28
    196a:	b9 a6       	std	Y+41, r11	; 0x29
    196c:	bf cf       	rjmp	.-130    	; 0x18ec <_ZN3PID7SetModeEi+0x28>

0000196e <_ZN6I2Cdev9writeWordEhhj>:
 * @param data Container for byte value read from device
 * @param timeout Optional read timeout in milliseconds (0 to disable, leave off to use default class value in I2Cdev::readTimeout)
 * @return Status of read operation (true = success)
 */
int8_t I2Cdev::readByte(uint8_t devAddr, uint8_t regAddr, uint8_t *data, uint16_t timeout) {
    return readBytes(devAddr, regAddr, 1, data, timeout);
    196e:	1f 93       	push	r17
    1970:	cf 93       	push	r28
    1972:	df 93       	push	r29
    1974:	16 2f       	mov	r17, r22
    1976:	ea 01       	movw	r28, r20
    1978:	68 2f       	mov	r22, r24
    197a:	8c eb       	ldi	r24, 0xBC	; 188
    197c:	94 e0       	ldi	r25, 0x04	; 4
    197e:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <_ZN7TwoWire17beginTransmissionEh>
    1982:	61 2f       	mov	r22, r17
    1984:	8c eb       	ldi	r24, 0xBC	; 188
    1986:	94 e0       	ldi	r25, 0x04	; 4
    1988:	0e 94 21 12 	call	0x2442	; 0x2442 <_ZN7TwoWire5writeEh>
    198c:	6d 2f       	mov	r22, r29
    198e:	8c eb       	ldi	r24, 0xBC	; 188
    1990:	94 e0       	ldi	r25, 0x04	; 4
    1992:	0e 94 21 12 	call	0x2442	; 0x2442 <_ZN7TwoWire5writeEh>
    1996:	6c 2f       	mov	r22, r28
    1998:	8c eb       	ldi	r24, 0xBC	; 188
    199a:	94 e0       	ldi	r25, 0x04	; 4
    199c:	0e 94 21 12 	call	0x2442	; 0x2442 <_ZN7TwoWire5writeEh>
    19a0:	8c eb       	ldi	r24, 0xBC	; 188
    19a2:	94 e0       	ldi	r25, 0x04	; 4
    19a4:	0e 94 da 12 	call	0x25b4	; 0x25b4 <_ZN7TwoWire15endTransmissionEv>
    19a8:	91 e0       	ldi	r25, 0x01	; 1
    19aa:	81 11       	cpse	r24, r1
    19ac:	90 e0       	ldi	r25, 0x00	; 0
    19ae:	89 2f       	mov	r24, r25
    19b0:	df 91       	pop	r29
    19b2:	cf 91       	pop	r28
    19b4:	1f 91       	pop	r17
    19b6:	08 95       	ret

000019b8 <_ZN6I2Cdev9readBytesEhhhPhj>:
    19b8:	2f 92       	push	r2
    19ba:	3f 92       	push	r3
    19bc:	4f 92       	push	r4
    19be:	5f 92       	push	r5
    19c0:	6f 92       	push	r6
    19c2:	7f 92       	push	r7
    19c4:	8f 92       	push	r8
    19c6:	9f 92       	push	r9
    19c8:	af 92       	push	r10
    19ca:	bf 92       	push	r11
    19cc:	cf 92       	push	r12
    19ce:	df 92       	push	r13
    19d0:	ef 92       	push	r14
    19d2:	ff 92       	push	r15
    19d4:	0f 93       	push	r16
    19d6:	1f 93       	push	r17
    19d8:	cf 93       	push	r28
    19da:	df 93       	push	r29
    19dc:	00 d0       	rcall	.+0      	; 0x19de <_ZN6I2Cdev9readBytesEhhhPhj+0x26>
    19de:	00 d0       	rcall	.+0      	; 0x19e0 <_ZN6I2Cdev9readBytesEhhhPhj+0x28>
    19e0:	00 d0       	rcall	.+0      	; 0x19e2 <_ZN6I2Cdev9readBytesEhhhPhj+0x2a>
    19e2:	cd b7       	in	r28, 0x3d	; 61
    19e4:	de b7       	in	r29, 0x3e	; 62
    19e6:	d8 2e       	mov	r13, r24
    19e8:	6c 83       	std	Y+4, r22	; 0x04
    19ea:	c4 2e       	mov	r12, r20
    19ec:	79 01       	movw	r14, r18
    19ee:	18 01       	movw	r2, r16
    19f0:	0e 94 74 1b 	call	0x36e8	; 0x36e8 <millis>
    19f4:	4b 01       	movw	r8, r22
    19f6:	5c 01       	movw	r10, r24
    19f8:	cc 20       	and	r12, r12
    19fa:	09 f4       	brne	.+2      	; 0x19fe <_ZN6I2Cdev9readBytesEhhhPhj+0x46>
    19fc:	b2 c0       	rjmp	.+356    	; 0x1b62 <_ZN6I2Cdev9readBytesEhhhPhj+0x1aa>
    19fe:	8c 2d       	mov	r24, r12
    1a00:	90 e0       	ldi	r25, 0x00	; 0
    1a02:	9b 83       	std	Y+3, r25	; 0x03
    1a04:	8a 83       	std	Y+2, r24	; 0x02
    1a06:	c9 82       	std	Y+1, r12	; 0x01
    1a08:	90 e2       	ldi	r25, 0x20	; 32
    1a0a:	9c 15       	cp	r25, r12
    1a0c:	08 f4       	brcc	.+2      	; 0x1a10 <_ZN6I2Cdev9readBytesEhhhPhj+0x58>
    1a0e:	89 c0       	rjmp	.+274    	; 0x1b22 <_ZN6I2Cdev9readBytesEhhhPhj+0x16a>
    1a10:	00 e0       	ldi	r16, 0x00	; 0
    1a12:	10 e0       	ldi	r17, 0x00	; 0
    1a14:	21 01       	movw	r4, r2
    1a16:	61 2c       	mov	r6, r1
    1a18:	71 2c       	mov	r7, r1
    1a1a:	6d 2d       	mov	r22, r13
    1a1c:	8c eb       	ldi	r24, 0xBC	; 188
    1a1e:	94 e0       	ldi	r25, 0x04	; 4
    1a20:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <_ZN7TwoWire17beginTransmissionEh>
    1a24:	6c 81       	ldd	r22, Y+4	; 0x04
    1a26:	8c eb       	ldi	r24, 0xBC	; 188
    1a28:	94 e0       	ldi	r25, 0x04	; 4
    1a2a:	0e 94 21 12 	call	0x2442	; 0x2442 <_ZN7TwoWire5writeEh>
    1a2e:	8c eb       	ldi	r24, 0xBC	; 188
    1a30:	94 e0       	ldi	r25, 0x04	; 4
    1a32:	0e 94 da 12 	call	0x25b4	; 0x25b4 <_ZN7TwoWire15endTransmissionEv>
    1a36:	6d 2d       	mov	r22, r13
    1a38:	8c eb       	ldi	r24, 0xBC	; 188
    1a3a:	94 e0       	ldi	r25, 0x04	; 4
    1a3c:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <_ZN7TwoWire17beginTransmissionEh>
    1a40:	4a 81       	ldd	r20, Y+2	; 0x02
    1a42:	5b 81       	ldd	r21, Y+3	; 0x03
    1a44:	40 1b       	sub	r20, r16
    1a46:	51 09       	sbc	r21, r1
    1a48:	41 32       	cpi	r20, 0x21	; 33
    1a4a:	51 05       	cpc	r21, r1
    1a4c:	14 f0       	brlt	.+4      	; 0x1a52 <_ZN6I2Cdev9readBytesEhhhPhj+0x9a>
    1a4e:	40 e2       	ldi	r20, 0x20	; 32
    1a50:	50 e0       	ldi	r21, 0x00	; 0
    1a52:	6d 2d       	mov	r22, r13
    1a54:	8c eb       	ldi	r24, 0xBC	; 188
    1a56:	94 e0       	ldi	r25, 0x04	; 4
    1a58:	0e 94 c2 12 	call	0x2584	; 0x2584 <_ZN7TwoWire11requestFromEhh>
    1a5c:	21 14       	cp	r2, r1
    1a5e:	31 04       	cpc	r3, r1
    1a60:	81 f0       	breq	.+32     	; 0x1a82 <_ZN6I2Cdev9readBytesEhhhPhj+0xca>
    1a62:	53 c0       	rjmp	.+166    	; 0x1b0a <_ZN6I2Cdev9readBytesEhhhPhj+0x152>
    1a64:	c7 01       	movw	r24, r14
    1a66:	81 0f       	add	r24, r17
    1a68:	91 1d       	adc	r25, r1
    1a6a:	17 fd       	sbrc	r17, 7
    1a6c:	9a 95       	dec	r25
    1a6e:	9e 83       	std	Y+6, r25	; 0x06
    1a70:	8d 83       	std	Y+5, r24	; 0x05
    1a72:	8c eb       	ldi	r24, 0xBC	; 188
    1a74:	94 e0       	ldi	r25, 0x04	; 4
    1a76:	0e 94 fd 11 	call	0x23fa	; 0x23fa <_ZN7TwoWire4readEv>
    1a7a:	ed 81       	ldd	r30, Y+5	; 0x05
    1a7c:	fe 81       	ldd	r31, Y+6	; 0x06
    1a7e:	80 83       	st	Z, r24
    1a80:	1f 5f       	subi	r17, 0xFF	; 255
    1a82:	8c eb       	ldi	r24, 0xBC	; 188
    1a84:	94 e0       	ldi	r25, 0x04	; 4
    1a86:	0e 94 f5 11 	call	0x23ea	; 0x23ea <_ZN7TwoWire9availableEv>
    1a8a:	89 2b       	or	r24, r25
    1a8c:	59 f7       	brne	.-42     	; 0x1a64 <_ZN6I2Cdev9readBytesEhhhPhj+0xac>
    1a8e:	f9 81       	ldd	r31, Y+1	; 0x01
    1a90:	0f 0f       	add	r16, r31
    1a92:	0c 15       	cp	r16, r12
    1a94:	10 f2       	brcs	.-124    	; 0x1a1a <_ZN6I2Cdev9readBytesEhhhPhj+0x62>
    1a96:	21 14       	cp	r2, r1
    1a98:	31 04       	cpc	r3, r1
    1a9a:	09 f0       	breq	.+2      	; 0x1a9e <_ZN6I2Cdev9readBytesEhhhPhj+0xe6>
    1a9c:	45 c0       	rjmp	.+138    	; 0x1b28 <_ZN6I2Cdev9readBytesEhhhPhj+0x170>
    1a9e:	81 2f       	mov	r24, r17
    1aa0:	26 96       	adiw	r28, 0x06	; 6
    1aa2:	0f b6       	in	r0, 0x3f	; 63
    1aa4:	f8 94       	cli
    1aa6:	de bf       	out	0x3e, r29	; 62
    1aa8:	0f be       	out	0x3f, r0	; 63
    1aaa:	cd bf       	out	0x3d, r28	; 61
    1aac:	df 91       	pop	r29
    1aae:	cf 91       	pop	r28
    1ab0:	1f 91       	pop	r17
    1ab2:	0f 91       	pop	r16
    1ab4:	ff 90       	pop	r15
    1ab6:	ef 90       	pop	r14
    1ab8:	df 90       	pop	r13
    1aba:	cf 90       	pop	r12
    1abc:	bf 90       	pop	r11
    1abe:	af 90       	pop	r10
    1ac0:	9f 90       	pop	r9
    1ac2:	8f 90       	pop	r8
    1ac4:	7f 90       	pop	r7
    1ac6:	6f 90       	pop	r6
    1ac8:	5f 90       	pop	r5
    1aca:	4f 90       	pop	r4
    1acc:	3f 90       	pop	r3
    1ace:	2f 90       	pop	r2
    1ad0:	08 95       	ret
    1ad2:	0e 94 74 1b 	call	0x36e8	; 0x36e8 <millis>
    1ad6:	dc 01       	movw	r26, r24
    1ad8:	cb 01       	movw	r24, r22
    1ada:	88 19       	sub	r24, r8
    1adc:	99 09       	sbc	r25, r9
    1ade:	aa 09       	sbc	r26, r10
    1ae0:	bb 09       	sbc	r27, r11
    1ae2:	84 15       	cp	r24, r4
    1ae4:	95 05       	cpc	r25, r5
    1ae6:	a6 05       	cpc	r26, r6
    1ae8:	b7 05       	cpc	r27, r7
    1aea:	88 f6       	brcc	.-94     	; 0x1a8e <_ZN6I2Cdev9readBytesEhhhPhj+0xd6>
    1aec:	c7 01       	movw	r24, r14
    1aee:	81 0f       	add	r24, r17
    1af0:	91 1d       	adc	r25, r1
    1af2:	17 fd       	sbrc	r17, 7
    1af4:	9a 95       	dec	r25
    1af6:	9e 83       	std	Y+6, r25	; 0x06
    1af8:	8d 83       	std	Y+5, r24	; 0x05
    1afa:	8c eb       	ldi	r24, 0xBC	; 188
    1afc:	94 e0       	ldi	r25, 0x04	; 4
    1afe:	0e 94 fd 11 	call	0x23fa	; 0x23fa <_ZN7TwoWire4readEv>
    1b02:	ed 81       	ldd	r30, Y+5	; 0x05
    1b04:	fe 81       	ldd	r31, Y+6	; 0x06
    1b06:	80 83       	st	Z, r24
    1b08:	1f 5f       	subi	r17, 0xFF	; 255
    1b0a:	8c eb       	ldi	r24, 0xBC	; 188
    1b0c:	94 e0       	ldi	r25, 0x04	; 4
    1b0e:	0e 94 f5 11 	call	0x23ea	; 0x23ea <_ZN7TwoWire9availableEv>
    1b12:	89 2b       	or	r24, r25
    1b14:	f1 f6       	brne	.-68     	; 0x1ad2 <_ZN6I2Cdev9readBytesEhhhPhj+0x11a>
    1b16:	f9 81       	ldd	r31, Y+1	; 0x01
    1b18:	0f 0f       	add	r16, r31
    1b1a:	0c 15       	cp	r16, r12
    1b1c:	08 f4       	brcc	.+2      	; 0x1b20 <_ZN6I2Cdev9readBytesEhhhPhj+0x168>
    1b1e:	7d cf       	rjmp	.-262    	; 0x1a1a <_ZN6I2Cdev9readBytesEhhhPhj+0x62>
    1b20:	ba cf       	rjmp	.-140    	; 0x1a96 <_ZN6I2Cdev9readBytesEhhhPhj+0xde>
    1b22:	e0 e2       	ldi	r30, 0x20	; 32
    1b24:	e9 83       	std	Y+1, r30	; 0x01
    1b26:	74 cf       	rjmp	.-280    	; 0x1a10 <_ZN6I2Cdev9readBytesEhhhPhj+0x58>
    1b28:	0e 94 74 1b 	call	0x36e8	; 0x36e8 <millis>
    1b2c:	dc 01       	movw	r26, r24
    1b2e:	cb 01       	movw	r24, r22
    1b30:	88 19       	sub	r24, r8
    1b32:	99 09       	sbc	r25, r9
    1b34:	aa 09       	sbc	r26, r10
    1b36:	bb 09       	sbc	r27, r11
    1b38:	a1 01       	movw	r20, r2
    1b3a:	60 e0       	ldi	r22, 0x00	; 0
    1b3c:	70 e0       	ldi	r23, 0x00	; 0
    1b3e:	84 17       	cp	r24, r20
    1b40:	95 07       	cpc	r25, r21
    1b42:	a6 07       	cpc	r26, r22
    1b44:	b7 07       	cpc	r27, r23
    1b46:	08 f4       	brcc	.+2      	; 0x1b4a <_ZN6I2Cdev9readBytesEhhhPhj+0x192>
    1b48:	aa cf       	rjmp	.-172    	; 0x1a9e <_ZN6I2Cdev9readBytesEhhhPhj+0xe6>
    1b4a:	2c 2d       	mov	r18, r12
    1b4c:	30 e0       	ldi	r19, 0x00	; 0
    1b4e:	81 2f       	mov	r24, r17
    1b50:	01 2e       	mov	r0, r17
    1b52:	00 0c       	add	r0, r0
    1b54:	99 0b       	sbc	r25, r25
    1b56:	82 17       	cp	r24, r18
    1b58:	93 07       	cpc	r25, r19
    1b5a:	0c f0       	brlt	.+2      	; 0x1b5e <_ZN6I2Cdev9readBytesEhhhPhj+0x1a6>
    1b5c:	a0 cf       	rjmp	.-192    	; 0x1a9e <_ZN6I2Cdev9readBytesEhhhPhj+0xe6>
    1b5e:	1f ef       	ldi	r17, 0xFF	; 255
    1b60:	9e cf       	rjmp	.-196    	; 0x1a9e <_ZN6I2Cdev9readBytesEhhhPhj+0xe6>
    1b62:	10 e0       	ldi	r17, 0x00	; 0
    1b64:	98 cf       	rjmp	.-208    	; 0x1a96 <_ZN6I2Cdev9readBytesEhhhPhj+0xde>

00001b66 <_ZN6I2Cdev9readBytesEhhhPhj.constprop.3>:
    1b66:	4f 92       	push	r4
    1b68:	5f 92       	push	r5
    1b6a:	6f 92       	push	r6
    1b6c:	7f 92       	push	r7
    1b6e:	8f 92       	push	r8
    1b70:	9f 92       	push	r9
    1b72:	af 92       	push	r10
    1b74:	bf 92       	push	r11
    1b76:	ef 92       	push	r14
    1b78:	ff 92       	push	r15
    1b7a:	0f 93       	push	r16
    1b7c:	1f 93       	push	r17
    1b7e:	cf 93       	push	r28
    1b80:	c8 2f       	mov	r28, r24
    1b82:	16 2f       	mov	r17, r22
    1b84:	7a 01       	movw	r14, r20
    1b86:	49 01       	movw	r8, r18
    1b88:	0e 94 74 1b 	call	0x36e8	; 0x36e8 <millis>
    1b8c:	2b 01       	movw	r4, r22
    1b8e:	3c 01       	movw	r6, r24
    1b90:	6c 2f       	mov	r22, r28
    1b92:	8c eb       	ldi	r24, 0xBC	; 188
    1b94:	94 e0       	ldi	r25, 0x04	; 4
    1b96:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <_ZN7TwoWire17beginTransmissionEh>
    1b9a:	61 2f       	mov	r22, r17
    1b9c:	8c eb       	ldi	r24, 0xBC	; 188
    1b9e:	94 e0       	ldi	r25, 0x04	; 4
    1ba0:	0e 94 21 12 	call	0x2442	; 0x2442 <_ZN7TwoWire5writeEh>
    1ba4:	8c eb       	ldi	r24, 0xBC	; 188
    1ba6:	94 e0       	ldi	r25, 0x04	; 4
    1ba8:	0e 94 da 12 	call	0x25b4	; 0x25b4 <_ZN7TwoWire15endTransmissionEv>
    1bac:	6c 2f       	mov	r22, r28
    1bae:	8c eb       	ldi	r24, 0xBC	; 188
    1bb0:	94 e0       	ldi	r25, 0x04	; 4
    1bb2:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <_ZN7TwoWire17beginTransmissionEh>
    1bb6:	41 e0       	ldi	r20, 0x01	; 1
    1bb8:	6c 2f       	mov	r22, r28
    1bba:	8c eb       	ldi	r24, 0xBC	; 188
    1bbc:	94 e0       	ldi	r25, 0x04	; 4
    1bbe:	0e 94 c2 12 	call	0x2584	; 0x2584 <_ZN7TwoWire11requestFromEhh>
    1bc2:	c0 e0       	ldi	r28, 0x00	; 0
    1bc4:	81 14       	cp	r8, r1
    1bc6:	91 04       	cpc	r9, r1
    1bc8:	69 f0       	breq	.+26     	; 0x1be4 <_ZN6I2Cdev9readBytesEhhhPhj.constprop.3+0x7e>
    1bca:	21 c0       	rjmp	.+66     	; 0x1c0e <_ZN6I2Cdev9readBytesEhhhPhj.constprop.3+0xa8>
    1bcc:	87 01       	movw	r16, r14
    1bce:	0c 0f       	add	r16, r28
    1bd0:	11 1d       	adc	r17, r1
    1bd2:	c7 fd       	sbrc	r28, 7
    1bd4:	1a 95       	dec	r17
    1bd6:	8c eb       	ldi	r24, 0xBC	; 188
    1bd8:	94 e0       	ldi	r25, 0x04	; 4
    1bda:	0e 94 fd 11 	call	0x23fa	; 0x23fa <_ZN7TwoWire4readEv>
    1bde:	f8 01       	movw	r30, r16
    1be0:	80 83       	st	Z, r24
    1be2:	cf 5f       	subi	r28, 0xFF	; 255
    1be4:	8c eb       	ldi	r24, 0xBC	; 188
    1be6:	94 e0       	ldi	r25, 0x04	; 4
    1be8:	0e 94 f5 11 	call	0x23ea	; 0x23ea <_ZN7TwoWire9availableEv>
    1bec:	89 2b       	or	r24, r25
    1bee:	71 f7       	brne	.-36     	; 0x1bcc <_ZN6I2Cdev9readBytesEhhhPhj.constprop.3+0x66>
    1bf0:	8c 2f       	mov	r24, r28
    1bf2:	cf 91       	pop	r28
    1bf4:	1f 91       	pop	r17
    1bf6:	0f 91       	pop	r16
    1bf8:	ff 90       	pop	r15
    1bfa:	ef 90       	pop	r14
    1bfc:	bf 90       	pop	r11
    1bfe:	af 90       	pop	r10
    1c00:	9f 90       	pop	r9
    1c02:	8f 90       	pop	r8
    1c04:	7f 90       	pop	r7
    1c06:	6f 90       	pop	r6
    1c08:	5f 90       	pop	r5
    1c0a:	4f 90       	pop	r4
    1c0c:	08 95       	ret
    1c0e:	a1 2c       	mov	r10, r1
    1c10:	b1 2c       	mov	r11, r1
    1c12:	19 c0       	rjmp	.+50     	; 0x1c46 <_ZN6I2Cdev9readBytesEhhhPhj.constprop.3+0xe0>
    1c14:	0e 94 74 1b 	call	0x36e8	; 0x36e8 <millis>
    1c18:	dc 01       	movw	r26, r24
    1c1a:	cb 01       	movw	r24, r22
    1c1c:	84 19       	sub	r24, r4
    1c1e:	95 09       	sbc	r25, r5
    1c20:	a6 09       	sbc	r26, r6
    1c22:	b7 09       	sbc	r27, r7
    1c24:	88 15       	cp	r24, r8
    1c26:	99 05       	cpc	r25, r9
    1c28:	aa 05       	cpc	r26, r10
    1c2a:	bb 05       	cpc	r27, r11
    1c2c:	90 f4       	brcc	.+36     	; 0x1c52 <_ZN6I2Cdev9readBytesEhhhPhj.constprop.3+0xec>
    1c2e:	87 01       	movw	r16, r14
    1c30:	0c 0f       	add	r16, r28
    1c32:	11 1d       	adc	r17, r1
    1c34:	c7 fd       	sbrc	r28, 7
    1c36:	1a 95       	dec	r17
    1c38:	8c eb       	ldi	r24, 0xBC	; 188
    1c3a:	94 e0       	ldi	r25, 0x04	; 4
    1c3c:	0e 94 fd 11 	call	0x23fa	; 0x23fa <_ZN7TwoWire4readEv>
    1c40:	f8 01       	movw	r30, r16
    1c42:	80 83       	st	Z, r24
    1c44:	cf 5f       	subi	r28, 0xFF	; 255
    1c46:	8c eb       	ldi	r24, 0xBC	; 188
    1c48:	94 e0       	ldi	r25, 0x04	; 4
    1c4a:	0e 94 f5 11 	call	0x23ea	; 0x23ea <_ZN7TwoWire9availableEv>
    1c4e:	89 2b       	or	r24, r25
    1c50:	09 f7       	brne	.-62     	; 0x1c14 <_ZN6I2Cdev9readBytesEhhhPhj.constprop.3+0xae>
    1c52:	0e 94 74 1b 	call	0x36e8	; 0x36e8 <millis>
    1c56:	dc 01       	movw	r26, r24
    1c58:	cb 01       	movw	r24, r22
    1c5a:	84 19       	sub	r24, r4
    1c5c:	95 09       	sbc	r25, r5
    1c5e:	a6 09       	sbc	r26, r6
    1c60:	b7 09       	sbc	r27, r7
    1c62:	88 15       	cp	r24, r8
    1c64:	99 05       	cpc	r25, r9
    1c66:	aa 05       	cpc	r26, r10
    1c68:	bb 05       	cpc	r27, r11
    1c6a:	10 f2       	brcs	.-124    	; 0x1bf0 <_ZN6I2Cdev9readBytesEhhhPhj.constprop.3+0x8a>
    1c6c:	1c 16       	cp	r1, r28
    1c6e:	0c f4       	brge	.+2      	; 0x1c72 <_ZN6I2Cdev9readBytesEhhhPhj.constprop.3+0x10c>
    1c70:	bf cf       	rjmp	.-130    	; 0x1bf0 <_ZN6I2Cdev9readBytesEhhhPhj.constprop.3+0x8a>
    1c72:	cf ef       	ldi	r28, 0xFF	; 255
    1c74:	bd cf       	rjmp	.-134    	; 0x1bf0 <_ZN6I2Cdev9readBytesEhhhPhj.constprop.3+0x8a>

00001c76 <_ZN6I2Cdev8writeBitEhhhh>:
 * @param regAddr Register regAddr to write to
 * @param bitNum Bit position to write (0-7)
 * @param value New bit value to write
 * @return Status of operation (true = success)
 */
bool I2Cdev::writeBit(uint8_t devAddr, uint8_t regAddr, uint8_t bitNum, uint8_t data) {
    1c76:	ef 92       	push	r14
    1c78:	ff 92       	push	r15
    1c7a:	0f 93       	push	r16
    1c7c:	1f 93       	push	r17
    1c7e:	cf 93       	push	r28
    1c80:	df 93       	push	r29
    1c82:	1f 92       	push	r1
    1c84:	cd b7       	in	r28, 0x3d	; 61
    1c86:	de b7       	in	r29, 0x3e	; 62
    1c88:	f8 2e       	mov	r15, r24
    1c8a:	06 2f       	mov	r16, r22
    1c8c:	e4 2e       	mov	r14, r20
    1c8e:	12 2f       	mov	r17, r18
 * @param data Container for byte value read from device
 * @param timeout Optional read timeout in milliseconds (0 to disable, leave off to use default class value in I2Cdev::readTimeout)
 * @return Status of read operation (true = success)
 */
int8_t I2Cdev::readByte(uint8_t devAddr, uint8_t regAddr, uint8_t *data, uint16_t timeout) {
    return readBytes(devAddr, regAddr, 1, data, timeout);
    1c90:	20 91 05 01 	lds	r18, 0x0105	; 0x800105 <_ZN6I2Cdev11readTimeoutE>
    1c94:	30 91 06 01 	lds	r19, 0x0106	; 0x800106 <_ZN6I2Cdev11readTimeoutE+0x1>
    1c98:	ae 01       	movw	r20, r28
    1c9a:	4f 5f       	subi	r20, 0xFF	; 255
    1c9c:	5f 4f       	sbci	r21, 0xFF	; 255
    1c9e:	0e 94 b3 0d 	call	0x1b66	; 0x1b66 <_ZN6I2Cdev9readBytesEhhhPhj.constprop.3>
 * @return Status of operation (true = success)
 */
bool I2Cdev::writeBit(uint8_t devAddr, uint8_t regAddr, uint8_t bitNum, uint8_t data) {
    uint8_t b;
    readByte(devAddr, regAddr, &b);
    b = (data != 0) ? (b | (1 << bitNum)) : (b & ~(1 << bitNum));
    1ca2:	81 e0       	ldi	r24, 0x01	; 1
    1ca4:	90 e0       	ldi	r25, 0x00	; 0
    1ca6:	01 c0       	rjmp	.+2      	; 0x1caa <_ZN6I2Cdev8writeBitEhhhh+0x34>
    1ca8:	88 0f       	add	r24, r24
    1caa:	ea 94       	dec	r14
    1cac:	ea f7       	brpl	.-6      	; 0x1ca8 <_ZN6I2Cdev8writeBitEhhhh+0x32>
    1cae:	11 11       	cpse	r17, r1
    1cb0:	24 c0       	rjmp	.+72     	; 0x1cfa <_ZN6I2Cdev8writeBitEhhhh+0x84>
    1cb2:	80 95       	com	r24
    1cb4:	99 81       	ldd	r25, Y+1	; 0x01
    1cb6:	18 2f       	mov	r17, r24
    1cb8:	19 23       	and	r17, r25
    1cba:	19 83       	std	Y+1, r17	; 0x01
    uint8_t status = 0;
    #if ((I2CDEV_IMPLEMENTATION == I2CDEV_ARDUINO_WIRE && ARDUINO < 100) || I2CDEV_IMPLEMENTATION == I2CDEV_BUILTIN_NBWIRE)
        Wire.beginTransmission(devAddr);
        Wire.send((uint8_t) regAddr); // send address
    #elif (I2CDEV_IMPLEMENTATION == I2CDEV_ARDUINO_WIRE && ARDUINO >= 100)
        Wire.beginTransmission(devAddr);
    1cbc:	6f 2d       	mov	r22, r15
    1cbe:	8c eb       	ldi	r24, 0xBC	; 188
    1cc0:	94 e0       	ldi	r25, 0x04	; 4
    1cc2:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <_ZN7TwoWire17beginTransmissionEh>
        Wire.write((uint8_t) regAddr); // send address
    1cc6:	60 2f       	mov	r22, r16
    1cc8:	8c eb       	ldi	r24, 0xBC	; 188
    1cca:	94 e0       	ldi	r25, 0x04	; 4
    1ccc:	0e 94 21 12 	call	0x2442	; 0x2442 <_ZN7TwoWire5writeEh>
            if (i + 1 < length) Serial.print(" ");
        #endif
        #if ((I2CDEV_IMPLEMENTATION == I2CDEV_ARDUINO_WIRE && ARDUINO < 100) || I2CDEV_IMPLEMENTATION == I2CDEV_BUILTIN_NBWIRE)
            Wire.send((uint8_t) data[i]);
        #elif (I2CDEV_IMPLEMENTATION == I2CDEV_ARDUINO_WIRE && ARDUINO >= 100)
            Wire.write((uint8_t) data[i]);
    1cd0:	61 2f       	mov	r22, r17
    1cd2:	8c eb       	ldi	r24, 0xBC	; 188
    1cd4:	94 e0       	ldi	r25, 0x04	; 4
    1cd6:	0e 94 21 12 	call	0x2442	; 0x2442 <_ZN7TwoWire5writeEh>
        #endif
    }
    #if ((I2CDEV_IMPLEMENTATION == I2CDEV_ARDUINO_WIRE && ARDUINO < 100) || I2CDEV_IMPLEMENTATION == I2CDEV_BUILTIN_NBWIRE)
        Wire.endTransmission();
    #elif (I2CDEV_IMPLEMENTATION == I2CDEV_ARDUINO_WIRE && ARDUINO >= 100)
        status = Wire.endTransmission();
    1cda:	8c eb       	ldi	r24, 0xBC	; 188
    1cdc:	94 e0       	ldi	r25, 0x04	; 4
    1cde:	0e 94 da 12 	call	0x25b4	; 0x25b4 <_ZN7TwoWire15endTransmissionEv>
 */
bool I2Cdev::writeBit(uint8_t devAddr, uint8_t regAddr, uint8_t bitNum, uint8_t data) {
    uint8_t b;
    readByte(devAddr, regAddr, &b);
    b = (data != 0) ? (b | (1 << bitNum)) : (b & ~(1 << bitNum));
    return writeByte(devAddr, regAddr, b);
    1ce2:	91 e0       	ldi	r25, 0x01	; 1
    1ce4:	81 11       	cpse	r24, r1
    1ce6:	90 e0       	ldi	r25, 0x00	; 0
}
    1ce8:	89 2f       	mov	r24, r25
    1cea:	0f 90       	pop	r0
    1cec:	df 91       	pop	r29
    1cee:	cf 91       	pop	r28
    1cf0:	1f 91       	pop	r17
    1cf2:	0f 91       	pop	r16
    1cf4:	ff 90       	pop	r15
    1cf6:	ef 90       	pop	r14
    1cf8:	08 95       	ret
 * @return Status of operation (true = success)
 */
bool I2Cdev::writeBit(uint8_t devAddr, uint8_t regAddr, uint8_t bitNum, uint8_t data) {
    uint8_t b;
    readByte(devAddr, regAddr, &b);
    b = (data != 0) ? (b | (1 << bitNum)) : (b & ~(1 << bitNum));
    1cfa:	19 81       	ldd	r17, Y+1	; 0x01
    1cfc:	18 2b       	or	r17, r24
    1cfe:	dd cf       	rjmp	.-70     	; 0x1cba <_ZN6I2Cdev8writeBitEhhhh+0x44>

00001d00 <_ZN6I2Cdev9writeBitsEhhhhh>:
 * @param bitStart First bit position to write (0-7)
 * @param length Number of bits to write (not more than 8)
 * @param data Right-aligned value to write
 * @return Status of operation (true = success)
 */
bool I2Cdev::writeBits(uint8_t devAddr, uint8_t regAddr, uint8_t bitStart, uint8_t length, uint8_t data) {
    1d00:	df 92       	push	r13
    1d02:	ef 92       	push	r14
    1d04:	ff 92       	push	r15
    1d06:	0f 93       	push	r16
    1d08:	1f 93       	push	r17
    1d0a:	cf 93       	push	r28
    1d0c:	df 93       	push	r29
    1d0e:	1f 92       	push	r1
    1d10:	cd b7       	in	r28, 0x3d	; 61
    1d12:	de b7       	in	r29, 0x3e	; 62
    1d14:	f8 2e       	mov	r15, r24
    1d16:	16 2f       	mov	r17, r22
    1d18:	e4 2e       	mov	r14, r20
    1d1a:	d2 2e       	mov	r13, r18
 * @param data Container for byte value read from device
 * @param timeout Optional read timeout in milliseconds (0 to disable, leave off to use default class value in I2Cdev::readTimeout)
 * @return Status of read operation (true = success)
 */
int8_t I2Cdev::readByte(uint8_t devAddr, uint8_t regAddr, uint8_t *data, uint16_t timeout) {
    return readBytes(devAddr, regAddr, 1, data, timeout);
    1d1c:	20 91 05 01 	lds	r18, 0x0105	; 0x800105 <_ZN6I2Cdev11readTimeoutE>
    1d20:	30 91 06 01 	lds	r19, 0x0106	; 0x800106 <_ZN6I2Cdev11readTimeoutE+0x1>
    1d24:	ae 01       	movw	r20, r28
    1d26:	4f 5f       	subi	r20, 0xFF	; 255
    1d28:	5f 4f       	sbci	r21, 0xFF	; 255
    1d2a:	0e 94 b3 0d 	call	0x1b66	; 0x1b66 <_ZN6I2Cdev9readBytesEhhhPhj.constprop.3>
    // 00011100 mask byte
    // 10101111 original value (sample)
    // 10100011 original & ~mask
    // 10101011 masked | value
    uint8_t b;
    if (readByte(devAddr, regAddr, &b) != 0) {
    1d2e:	81 11       	cpse	r24, r1
    1d30:	0b c0       	rjmp	.+22     	; 0x1d48 <_ZN6I2Cdev9writeBitsEhhhhh+0x48>
        data &= mask; // zero all non-important bits in data
        b &= ~(mask); // zero all important bits in existing byte
        b |= data; // combine data with existing byte
        return writeByte(devAddr, regAddr, b);
    } else {
        return false;
    1d32:	90 e0       	ldi	r25, 0x00	; 0
    }
}
    1d34:	89 2f       	mov	r24, r25
    1d36:	0f 90       	pop	r0
    1d38:	df 91       	pop	r29
    1d3a:	cf 91       	pop	r28
    1d3c:	1f 91       	pop	r17
    1d3e:	0f 91       	pop	r16
    1d40:	ff 90       	pop	r15
    1d42:	ef 90       	pop	r14
    1d44:	df 90       	pop	r13
    1d46:	08 95       	ret
    // 10101111 original value (sample)
    // 10100011 original & ~mask
    // 10101011 masked | value
    uint8_t b;
    if (readByte(devAddr, regAddr, &b) != 0) {
        uint8_t mask = ((1 << length) - 1) << (bitStart - length + 1);
    1d48:	4e 2d       	mov	r20, r14
    1d4a:	50 e0       	ldi	r21, 0x00	; 0
    1d4c:	4d 19       	sub	r20, r13
    1d4e:	51 09       	sbc	r21, r1
    1d50:	4f 5f       	subi	r20, 0xFF	; 255
    1d52:	5f 4f       	sbci	r21, 0xFF	; 255
    1d54:	81 e0       	ldi	r24, 0x01	; 1
    1d56:	90 e0       	ldi	r25, 0x00	; 0
    1d58:	02 c0       	rjmp	.+4      	; 0x1d5e <_ZN6I2Cdev9writeBitsEhhhhh+0x5e>
    1d5a:	88 0f       	add	r24, r24
    1d5c:	99 1f       	adc	r25, r25
    1d5e:	da 94       	dec	r13
    1d60:	e2 f7       	brpl	.-8      	; 0x1d5a <_ZN6I2Cdev9writeBitsEhhhhh+0x5a>
    1d62:	01 97       	sbiw	r24, 0x01	; 1
    1d64:	04 2e       	mov	r0, r20
    1d66:	01 c0       	rjmp	.+2      	; 0x1d6a <_ZN6I2Cdev9writeBitsEhhhhh+0x6a>
    1d68:	88 0f       	add	r24, r24
    1d6a:	0a 94       	dec	r0
    1d6c:	ea f7       	brpl	.-6      	; 0x1d68 <_ZN6I2Cdev9writeBitsEhhhhh+0x68>
        data <<= (bitStart - length + 1); // shift data into correct position
    1d6e:	20 2f       	mov	r18, r16
    1d70:	01 c0       	rjmp	.+2      	; 0x1d74 <_ZN6I2Cdev9writeBitsEhhhhh+0x74>
    1d72:	22 0f       	add	r18, r18
    1d74:	4a 95       	dec	r20
    1d76:	ea f7       	brpl	.-6      	; 0x1d72 <_ZN6I2Cdev9writeBitsEhhhhh+0x72>
        data &= mask; // zero all non-important bits in data
        b &= ~(mask); // zero all important bits in existing byte
        b |= data; // combine data with existing byte
    1d78:	08 2f       	mov	r16, r24
    1d7a:	00 95       	com	r16
    1d7c:	99 81       	ldd	r25, Y+1	; 0x01
    1d7e:	09 23       	and	r16, r25
    1d80:	82 23       	and	r24, r18
    1d82:	08 2b       	or	r16, r24
    1d84:	09 83       	std	Y+1, r16	; 0x01
    uint8_t status = 0;
    #if ((I2CDEV_IMPLEMENTATION == I2CDEV_ARDUINO_WIRE && ARDUINO < 100) || I2CDEV_IMPLEMENTATION == I2CDEV_BUILTIN_NBWIRE)
        Wire.beginTransmission(devAddr);
        Wire.send((uint8_t) regAddr); // send address
    #elif (I2CDEV_IMPLEMENTATION == I2CDEV_ARDUINO_WIRE && ARDUINO >= 100)
        Wire.beginTransmission(devAddr);
    1d86:	6f 2d       	mov	r22, r15
    1d88:	8c eb       	ldi	r24, 0xBC	; 188
    1d8a:	94 e0       	ldi	r25, 0x04	; 4
    1d8c:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <_ZN7TwoWire17beginTransmissionEh>
        Wire.write((uint8_t) regAddr); // send address
    1d90:	61 2f       	mov	r22, r17
    1d92:	8c eb       	ldi	r24, 0xBC	; 188
    1d94:	94 e0       	ldi	r25, 0x04	; 4
    1d96:	0e 94 21 12 	call	0x2442	; 0x2442 <_ZN7TwoWire5writeEh>
            if (i + 1 < length) Serial.print(" ");
        #endif
        #if ((I2CDEV_IMPLEMENTATION == I2CDEV_ARDUINO_WIRE && ARDUINO < 100) || I2CDEV_IMPLEMENTATION == I2CDEV_BUILTIN_NBWIRE)
            Wire.send((uint8_t) data[i]);
        #elif (I2CDEV_IMPLEMENTATION == I2CDEV_ARDUINO_WIRE && ARDUINO >= 100)
            Wire.write((uint8_t) data[i]);
    1d9a:	60 2f       	mov	r22, r16
    1d9c:	8c eb       	ldi	r24, 0xBC	; 188
    1d9e:	94 e0       	ldi	r25, 0x04	; 4
    1da0:	0e 94 21 12 	call	0x2442	; 0x2442 <_ZN7TwoWire5writeEh>
        #endif
    }
    #if ((I2CDEV_IMPLEMENTATION == I2CDEV_ARDUINO_WIRE && ARDUINO < 100) || I2CDEV_IMPLEMENTATION == I2CDEV_BUILTIN_NBWIRE)
        Wire.endTransmission();
    #elif (I2CDEV_IMPLEMENTATION == I2CDEV_ARDUINO_WIRE && ARDUINO >= 100)
        status = Wire.endTransmission();
    1da4:	8c eb       	ldi	r24, 0xBC	; 188
    1da6:	94 e0       	ldi	r25, 0x04	; 4
    1da8:	0e 94 da 12 	call	0x25b4	; 0x25b4 <_ZN7TwoWire15endTransmissionEv>
        //status = Fastwire::endTransmission();
    #endif
    #ifdef I2CDEV_SERIAL_DEBUG
        Serial.println(". Done.");
    #endif
    return status == 0;
    1dac:	91 e0       	ldi	r25, 0x01	; 1
    1dae:	88 23       	and	r24, r24
    1db0:	09 f2       	breq	.-126    	; 0x1d34 <_ZN6I2Cdev9writeBitsEhhhhh+0x34>
    1db2:	bf cf       	rjmp	.-130    	; 0x1d32 <_ZN6I2Cdev9writeBitsEhhhhh+0x32>

00001db4 <_ZN7MPU6050C1Ev>:
// ZG_OFFS_USR* register

int16_t MPU6050::getZGyroOffset() {
    I2Cdev::readBytes(devAddr, MPU6050_RA_ZG_OFFS_USRH, 2, buffer);
    return (((int16_t)buffer[0]) << 8) | buffer[1];
}
    1db4:	28 e6       	ldi	r18, 0x68	; 104
    1db6:	fc 01       	movw	r30, r24
    1db8:	20 83       	st	Z, r18
    1dba:	08 95       	ret

00001dbc <_ZN7MPU6050C1Eh>:
    1dbc:	fc 01       	movw	r30, r24
    1dbe:	60 83       	st	Z, r22
    1dc0:	08 95       	ret

00001dc2 <_ZN7MPU605010initializeEv>:
    1dc2:	0f 93       	push	r16
    1dc4:	cf 93       	push	r28
    1dc6:	df 93       	push	r29
    1dc8:	ec 01       	movw	r28, r24
    1dca:	01 e0       	ldi	r16, 0x01	; 1
    1dcc:	23 e0       	ldi	r18, 0x03	; 3
    1dce:	42 e0       	ldi	r20, 0x02	; 2
    1dd0:	6b e6       	ldi	r22, 0x6B	; 107
    1dd2:	88 81       	ld	r24, Y
    1dd4:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <_ZN6I2Cdev9writeBitsEhhhhh>
    1dd8:	00 e0       	ldi	r16, 0x00	; 0
    1dda:	22 e0       	ldi	r18, 0x02	; 2
    1ddc:	44 e0       	ldi	r20, 0x04	; 4
    1dde:	6b e1       	ldi	r22, 0x1B	; 27
    1de0:	88 81       	ld	r24, Y
    1de2:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <_ZN6I2Cdev9writeBitsEhhhhh>
    1de6:	22 e0       	ldi	r18, 0x02	; 2
    1de8:	44 e0       	ldi	r20, 0x04	; 4
    1dea:	6c e1       	ldi	r22, 0x1C	; 28
    1dec:	88 81       	ld	r24, Y
    1dee:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <_ZN6I2Cdev9writeBitsEhhhhh>
    1df2:	20 e0       	ldi	r18, 0x00	; 0
    1df4:	46 e0       	ldi	r20, 0x06	; 6
    1df6:	6b e6       	ldi	r22, 0x6B	; 107
    1df8:	88 81       	ld	r24, Y
    1dfa:	df 91       	pop	r29
    1dfc:	cf 91       	pop	r28
    1dfe:	0f 91       	pop	r16
    1e00:	0c 94 3b 0e 	jmp	0x1c76	; 0x1c76 <_ZN6I2Cdev8writeBitEhhhh>

00001e04 <_ZN7MPU605016getAccelerationYEv>:
    1e04:	0f 93       	push	r16
    1e06:	1f 93       	push	r17
    1e08:	cf 93       	push	r28
    1e0a:	df 93       	push	r29
    1e0c:	ec 01       	movw	r28, r24
    1e0e:	00 91 05 01 	lds	r16, 0x0105	; 0x800105 <_ZN6I2Cdev11readTimeoutE>
    1e12:	10 91 06 01 	lds	r17, 0x0106	; 0x800106 <_ZN6I2Cdev11readTimeoutE+0x1>
    1e16:	9c 01       	movw	r18, r24
    1e18:	2f 5f       	subi	r18, 0xFF	; 255
    1e1a:	3f 4f       	sbci	r19, 0xFF	; 255
    1e1c:	42 e0       	ldi	r20, 0x02	; 2
    1e1e:	6d e3       	ldi	r22, 0x3D	; 61
    1e20:	88 81       	ld	r24, Y
    1e22:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <_ZN6I2Cdev9readBytesEhhhPhj>
    1e26:	89 81       	ldd	r24, Y+1	; 0x01
    1e28:	9a 81       	ldd	r25, Y+2	; 0x02
    1e2a:	98 27       	eor	r25, r24
    1e2c:	89 27       	eor	r24, r25
    1e2e:	98 27       	eor	r25, r24
    1e30:	df 91       	pop	r29
    1e32:	cf 91       	pop	r28
    1e34:	1f 91       	pop	r17
    1e36:	0f 91       	pop	r16
    1e38:	08 95       	ret

00001e3a <_ZN7MPU605016getAccelerationZEv>:
    1e3a:	0f 93       	push	r16
    1e3c:	1f 93       	push	r17
    1e3e:	cf 93       	push	r28
    1e40:	df 93       	push	r29
    1e42:	ec 01       	movw	r28, r24
    1e44:	00 91 05 01 	lds	r16, 0x0105	; 0x800105 <_ZN6I2Cdev11readTimeoutE>
    1e48:	10 91 06 01 	lds	r17, 0x0106	; 0x800106 <_ZN6I2Cdev11readTimeoutE+0x1>
    1e4c:	9c 01       	movw	r18, r24
    1e4e:	2f 5f       	subi	r18, 0xFF	; 255
    1e50:	3f 4f       	sbci	r19, 0xFF	; 255
    1e52:	42 e0       	ldi	r20, 0x02	; 2
    1e54:	6f e3       	ldi	r22, 0x3F	; 63
    1e56:	88 81       	ld	r24, Y
    1e58:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <_ZN6I2Cdev9readBytesEhhhPhj>
    1e5c:	89 81       	ldd	r24, Y+1	; 0x01
    1e5e:	9a 81       	ldd	r25, Y+2	; 0x02
    1e60:	98 27       	eor	r25, r24
    1e62:	89 27       	eor	r24, r25
    1e64:	98 27       	eor	r25, r24
    1e66:	df 91       	pop	r29
    1e68:	cf 91       	pop	r28
    1e6a:	1f 91       	pop	r17
    1e6c:	0f 91       	pop	r16
    1e6e:	08 95       	ret

00001e70 <_ZN7MPU605012getRotationXEv>:
    1e70:	0f 93       	push	r16
    1e72:	1f 93       	push	r17
    1e74:	cf 93       	push	r28
    1e76:	df 93       	push	r29
    1e78:	ec 01       	movw	r28, r24
    1e7a:	00 91 05 01 	lds	r16, 0x0105	; 0x800105 <_ZN6I2Cdev11readTimeoutE>
    1e7e:	10 91 06 01 	lds	r17, 0x0106	; 0x800106 <_ZN6I2Cdev11readTimeoutE+0x1>
    1e82:	9c 01       	movw	r18, r24
    1e84:	2f 5f       	subi	r18, 0xFF	; 255
    1e86:	3f 4f       	sbci	r19, 0xFF	; 255
    1e88:	42 e0       	ldi	r20, 0x02	; 2
    1e8a:	63 e4       	ldi	r22, 0x43	; 67
    1e8c:	88 81       	ld	r24, Y
    1e8e:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <_ZN6I2Cdev9readBytesEhhhPhj>
    1e92:	89 81       	ldd	r24, Y+1	; 0x01
    1e94:	9a 81       	ldd	r25, Y+2	; 0x02
    1e96:	98 27       	eor	r25, r24
    1e98:	89 27       	eor	r24, r25
    1e9a:	98 27       	eor	r25, r24
    1e9c:	df 91       	pop	r29
    1e9e:	cf 91       	pop	r28
    1ea0:	1f 91       	pop	r17
    1ea2:	0f 91       	pop	r16
    1ea4:	08 95       	ret

00001ea6 <_ZN7MPU605015setXAccelOffsetEi>:
    1ea6:	ab 01       	movw	r20, r22
    1ea8:	66 e0       	ldi	r22, 0x06	; 6
    1eaa:	fc 01       	movw	r30, r24
    1eac:	80 81       	ld	r24, Z
    1eae:	0c 94 b7 0c 	jmp	0x196e	; 0x196e <_ZN6I2Cdev9writeWordEhhj>

00001eb2 <_ZN7MPU605015setYAccelOffsetEi>:
    1eb2:	ab 01       	movw	r20, r22
    1eb4:	68 e0       	ldi	r22, 0x08	; 8
    1eb6:	fc 01       	movw	r30, r24
    1eb8:	80 81       	ld	r24, Z
    1eba:	0c 94 b7 0c 	jmp	0x196e	; 0x196e <_ZN6I2Cdev9writeWordEhhj>

00001ebe <_ZN7MPU605015setZAccelOffsetEi>:
    1ebe:	ab 01       	movw	r20, r22
    1ec0:	6a e0       	ldi	r22, 0x0A	; 10
    1ec2:	fc 01       	movw	r30, r24
    1ec4:	80 81       	ld	r24, Z
    1ec6:	0c 94 b7 0c 	jmp	0x196e	; 0x196e <_ZN6I2Cdev9writeWordEhhj>

00001eca <_ZN7MPU605014setXGyroOffsetEi>:
    1eca:	ab 01       	movw	r20, r22
    1ecc:	63 e1       	ldi	r22, 0x13	; 19
    1ece:	fc 01       	movw	r30, r24
    1ed0:	80 81       	ld	r24, Z
    1ed2:	0c 94 b7 0c 	jmp	0x196e	; 0x196e <_ZN6I2Cdev9writeWordEhhj>

00001ed6 <_ZN7MPU605014setYGyroOffsetEi>:
    1ed6:	ab 01       	movw	r20, r22
    1ed8:	65 e1       	ldi	r22, 0x15	; 21
    1eda:	fc 01       	movw	r30, r24
    1edc:	80 81       	ld	r24, Z
    1ede:	0c 94 b7 0c 	jmp	0x196e	; 0x196e <_ZN6I2Cdev9writeWordEhhj>

00001ee2 <_ZN7MPU605014setZGyroOffsetEi>:
void MPU6050::setZGyroOffset(int16_t offset) {
    1ee2:	ab 01       	movw	r20, r22
    I2Cdev::writeWord(devAddr, MPU6050_RA_ZG_OFFS_USRH, offset);
    1ee4:	67 e1       	ldi	r22, 0x17	; 23
    1ee6:	fc 01       	movw	r30, r24
    1ee8:	80 81       	ld	r24, Z
    1eea:	0c 94 b7 0c 	jmp	0x196e	; 0x196e <_ZN6I2Cdev9writeWordEhhj>

00001eee <_ZN7NewPingC1Ehhj>:
#else
	timer_stop();        // Disable Timer2 interrupt.
	ASSR &= ~(1<<AS2);   // Set clock, not pin.
	TCCR2A = (1<<WGM21); // Set Timer2 to CTC mode.
	TCCR2B = (1<<CS22);  // Set Timer2 prescaler to 64 (4uS/count, 4uS-1020uS range).
	TCNT2 = 0;           // Reset Timer2 counter.
    1eee:	dc 01       	movw	r26, r24
    1ef0:	70 e0       	ldi	r23, 0x00	; 0
    1ef2:	fb 01       	movw	r30, r22
    1ef4:	ef 52       	subi	r30, 0x2F	; 47
    1ef6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ef8:	e4 91       	lpm	r30, Z
    1efa:	14 96       	adiw	r26, 0x04	; 4
    1efc:	ec 93       	st	X, r30
    1efe:	14 97       	sbiw	r26, 0x04	; 4
    1f00:	50 e0       	ldi	r21, 0x00	; 0
    1f02:	fa 01       	movw	r30, r20
    1f04:	ef 52       	subi	r30, 0x2F	; 47
    1f06:	ff 4f       	sbci	r31, 0xFF	; 255
    1f08:	e4 91       	lpm	r30, Z
    1f0a:	15 96       	adiw	r26, 0x05	; 5
    1f0c:	ec 93       	st	X, r30
    1f0e:	15 97       	sbiw	r26, 0x05	; 5
    1f10:	6b 51       	subi	r22, 0x1B	; 27
    1f12:	7f 4f       	sbci	r23, 0xFF	; 255
    1f14:	fb 01       	movw	r30, r22
    1f16:	84 91       	lpm	r24, Z
    1f18:	e8 2f       	mov	r30, r24
    1f1a:	f0 e0       	ldi	r31, 0x00	; 0
    1f1c:	ee 0f       	add	r30, r30
    1f1e:	ff 1f       	adc	r31, r31
    1f20:	ed 5f       	subi	r30, 0xFD	; 253
    1f22:	fe 4f       	sbci	r31, 0xFE	; 254
    1f24:	85 91       	lpm	r24, Z+
    1f26:	94 91       	lpm	r25, Z
    1f28:	17 96       	adiw	r26, 0x07	; 7
    1f2a:	9c 93       	st	X, r25
    1f2c:	8e 93       	st	-X, r24
    1f2e:	16 97       	sbiw	r26, 0x06	; 6
    1f30:	fa 01       	movw	r30, r20
    1f32:	eb 51       	subi	r30, 0x1B	; 27
    1f34:	ff 4f       	sbci	r31, 0xFF	; 255
    1f36:	e4 91       	lpm	r30, Z
    1f38:	f0 e0       	ldi	r31, 0x00	; 0
    1f3a:	ee 0f       	add	r30, r30
    1f3c:	ff 1f       	adc	r31, r31
    1f3e:	e7 50       	subi	r30, 0x07	; 7
    1f40:	ff 4f       	sbci	r31, 0xFF	; 255
    1f42:	85 91       	lpm	r24, Z+
    1f44:	94 91       	lpm	r25, Z
    1f46:	19 96       	adiw	r26, 0x09	; 9
    1f48:	9c 93       	st	X, r25
    1f4a:	8e 93       	st	-X, r24
    1f4c:	18 97       	sbiw	r26, 0x08	; 8
    1f4e:	fb 01       	movw	r30, r22
    1f50:	64 91       	lpm	r22, Z
    1f52:	e6 2f       	mov	r30, r22
    1f54:	f0 e0       	ldi	r31, 0x00	; 0
    1f56:	ee 0f       	add	r30, r30
    1f58:	ff 1f       	adc	r31, r31
    1f5a:	e3 5f       	subi	r30, 0xF3	; 243
    1f5c:	fe 4f       	sbci	r31, 0xFE	; 254
    1f5e:	85 91       	lpm	r24, Z+
    1f60:	94 91       	lpm	r25, Z
    1f62:	1b 96       	adiw	r26, 0x0b	; 11
    1f64:	9c 93       	st	X, r25
    1f66:	8e 93       	st	-X, r24
    1f68:	1a 97       	sbiw	r26, 0x0a	; 10
    1f6a:	2f 5f       	subi	r18, 0xFF	; 255
    1f6c:	3f 4f       	sbci	r19, 0xFF	; 255
    1f6e:	49 e3       	ldi	r20, 0x39	; 57
    1f70:	42 9f       	mul	r20, r18
    1f72:	c0 01       	movw	r24, r0
    1f74:	43 9f       	mul	r20, r19
    1f76:	90 0d       	add	r25, r0
    1f78:	11 24       	eor	r1, r1
    1f7a:	8e 38       	cpi	r24, 0x8E	; 142
    1f7c:	ff e6       	ldi	r31, 0x6F	; 111
    1f7e:	9f 07       	cpc	r25, r31
    1f80:	10 f0       	brcs	.+4      	; 0x1f86 <_ZN7NewPingC1Ehhj+0x98>
    1f82:	8d e8       	ldi	r24, 0x8D	; 141
    1f84:	9f e6       	ldi	r25, 0x6F	; 111
    1f86:	1d 96       	adiw	r26, 0x0d	; 13
    1f88:	9c 93       	st	X, r25
    1f8a:	8e 93       	st	-X, r24
    1f8c:	1c 97       	sbiw	r26, 0x0c	; 12
    1f8e:	08 95       	ret

00001f90 <__vector_7>:
	intFunc(); // Call wrapped function.
}
#elif defined (__arm__)
// Do nothing...
#else
ISR(TIMER2_COMPA_vect) {
    1f90:	1f 92       	push	r1
    1f92:	0f 92       	push	r0
    1f94:	0f b6       	in	r0, 0x3f	; 63
    1f96:	0f 92       	push	r0
    1f98:	11 24       	eor	r1, r1
    1f9a:	2f 93       	push	r18
    1f9c:	3f 93       	push	r19
    1f9e:	4f 93       	push	r20
    1fa0:	5f 93       	push	r21
    1fa2:	6f 93       	push	r22
    1fa4:	7f 93       	push	r23
    1fa6:	8f 93       	push	r24
    1fa8:	9f 93       	push	r25
    1faa:	af 93       	push	r26
    1fac:	bf 93       	push	r27
    1fae:	ef 93       	push	r30
    1fb0:	ff 93       	push	r31
	intFunc(); // Call wrapped function.
    1fb2:	e0 91 4c 04 	lds	r30, 0x044C	; 0x80044c <intFunc>
    1fb6:	f0 91 4d 04 	lds	r31, 0x044D	; 0x80044d <intFunc+0x1>
    1fba:	09 95       	icall
}
    1fbc:	ff 91       	pop	r31
    1fbe:	ef 91       	pop	r30
    1fc0:	bf 91       	pop	r27
    1fc2:	af 91       	pop	r26
    1fc4:	9f 91       	pop	r25
    1fc6:	8f 91       	pop	r24
    1fc8:	7f 91       	pop	r23
    1fca:	6f 91       	pop	r22
    1fcc:	5f 91       	pop	r21
    1fce:	4f 91       	pop	r20
    1fd0:	3f 91       	pop	r19
    1fd2:	2f 91       	pop	r18
    1fd4:	0f 90       	pop	r0
    1fd6:	0f be       	out	0x3f, r0	; 63
    1fd8:	0f 90       	pop	r0
    1fda:	1f 90       	pop	r1
    1fdc:	18 95       	reti

00001fde <twi_readFrom>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    1fde:	41 32       	cpi	r20, 0x21	; 33
    1fe0:	08 f0       	brcs	.+2      	; 0x1fe4 <twi_readFrom+0x6>
    1fe2:	43 c0       	rjmp	.+134    	; 0x206a <twi_readFrom+0x8c>
    1fe4:	90 91 bb 04 	lds	r25, 0x04BB	; 0x8004bb <twi_state>
    1fe8:	91 11       	cpse	r25, r1
    1fea:	fc cf       	rjmp	.-8      	; 0x1fe4 <twi_readFrom+0x6>
    1fec:	91 e0       	ldi	r25, 0x01	; 1
    1fee:	90 93 bb 04 	sts	0x04BB, r25	; 0x8004bb <twi_state>
    1ff2:	20 93 b9 04 	sts	0x04B9, r18	; 0x8004b9 <twi_sendStop>
    1ff6:	2f ef       	ldi	r18, 0xFF	; 255
    1ff8:	20 93 4e 04 	sts	0x044E, r18	; 0x80044e <twi_error>
    1ffc:	10 92 93 04 	sts	0x0493, r1	; 0x800493 <twi_masterBufferIndex>
    2000:	24 0f       	add	r18, r20
    2002:	20 93 92 04 	sts	0x0492, r18	; 0x800492 <twi_masterBufferLength>
    2006:	90 93 ba 04 	sts	0x04BA, r25	; 0x8004ba <twi_slarw>
    200a:	90 91 ba 04 	lds	r25, 0x04BA	; 0x8004ba <twi_slarw>
    200e:	88 0f       	add	r24, r24
    2010:	89 2b       	or	r24, r25
    2012:	80 93 ba 04 	sts	0x04BA, r24	; 0x8004ba <twi_slarw>
    2016:	80 91 b8 04 	lds	r24, 0x04B8	; 0x8004b8 <twi_inRepStart>
    201a:	81 30       	cpi	r24, 0x01	; 1
    201c:	61 f4       	brne	.+24     	; 0x2036 <twi_readFrom+0x58>
    201e:	10 92 b8 04 	sts	0x04B8, r1	; 0x8004b8 <twi_inRepStart>
    2022:	80 91 ba 04 	lds	r24, 0x04BA	; 0x8004ba <twi_slarw>
    2026:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    202a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    202e:	83 fd       	sbrc	r24, 3
    2030:	f8 cf       	rjmp	.-16     	; 0x2022 <twi_readFrom+0x44>
    2032:	85 ec       	ldi	r24, 0xC5	; 197
    2034:	01 c0       	rjmp	.+2      	; 0x2038 <twi_readFrom+0x5a>
    2036:	85 ee       	ldi	r24, 0xE5	; 229
    2038:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    203c:	80 91 bb 04 	lds	r24, 0x04BB	; 0x8004bb <twi_state>
    2040:	81 30       	cpi	r24, 0x01	; 1
    2042:	e1 f3       	breq	.-8      	; 0x203c <twi_readFrom+0x5e>
    2044:	80 91 93 04 	lds	r24, 0x0493	; 0x800493 <twi_masterBufferIndex>
    2048:	84 17       	cp	r24, r20
    204a:	10 f4       	brcc	.+4      	; 0x2050 <twi_readFrom+0x72>
    204c:	40 91 93 04 	lds	r20, 0x0493	; 0x800493 <twi_masterBufferIndex>
    2050:	a4 e9       	ldi	r26, 0x94	; 148
    2052:	b4 e0       	ldi	r27, 0x04	; 4
    2054:	96 2f       	mov	r25, r22
    2056:	fb 01       	movw	r30, r22
    2058:	8e 2f       	mov	r24, r30
    205a:	89 1b       	sub	r24, r25
    205c:	84 17       	cp	r24, r20
    205e:	18 f4       	brcc	.+6      	; 0x2066 <twi_readFrom+0x88>
    2060:	8d 91       	ld	r24, X+
    2062:	81 93       	st	Z+, r24
    2064:	f9 cf       	rjmp	.-14     	; 0x2058 <twi_readFrom+0x7a>
    2066:	84 2f       	mov	r24, r20
    2068:	08 95       	ret
    206a:	80 e0       	ldi	r24, 0x00	; 0
    206c:	08 95       	ret

0000206e <twi_writeTo>:
    206e:	0f 93       	push	r16
    2070:	41 32       	cpi	r20, 0x21	; 33
    2072:	08 f0       	brcs	.+2      	; 0x2076 <twi_writeTo+0x8>
    2074:	4a c0       	rjmp	.+148    	; 0x210a <twi_writeTo+0x9c>
    2076:	90 91 bb 04 	lds	r25, 0x04BB	; 0x8004bb <twi_state>
    207a:	91 11       	cpse	r25, r1
    207c:	fc cf       	rjmp	.-8      	; 0x2076 <twi_writeTo+0x8>
    207e:	32 e0       	ldi	r19, 0x02	; 2
    2080:	30 93 bb 04 	sts	0x04BB, r19	; 0x8004bb <twi_state>
    2084:	00 93 b9 04 	sts	0x04B9, r16	; 0x8004b9 <twi_sendStop>
    2088:	3f ef       	ldi	r19, 0xFF	; 255
    208a:	30 93 4e 04 	sts	0x044E, r19	; 0x80044e <twi_error>
    208e:	10 92 93 04 	sts	0x0493, r1	; 0x800493 <twi_masterBufferIndex>
    2092:	40 93 92 04 	sts	0x0492, r20	; 0x800492 <twi_masterBufferLength>
    2096:	56 2f       	mov	r21, r22
    2098:	a4 e9       	ldi	r26, 0x94	; 148
    209a:	b4 e0       	ldi	r27, 0x04	; 4
    209c:	fb 01       	movw	r30, r22
    209e:	3e 2f       	mov	r19, r30
    20a0:	35 1b       	sub	r19, r21
    20a2:	34 17       	cp	r19, r20
    20a4:	18 f4       	brcc	.+6      	; 0x20ac <twi_writeTo+0x3e>
    20a6:	31 91       	ld	r19, Z+
    20a8:	3d 93       	st	X+, r19
    20aa:	f9 cf       	rjmp	.-14     	; 0x209e <twi_writeTo+0x30>
    20ac:	10 92 ba 04 	sts	0x04BA, r1	; 0x8004ba <twi_slarw>
    20b0:	30 91 ba 04 	lds	r19, 0x04BA	; 0x8004ba <twi_slarw>
    20b4:	88 0f       	add	r24, r24
    20b6:	83 2b       	or	r24, r19
    20b8:	80 93 ba 04 	sts	0x04BA, r24	; 0x8004ba <twi_slarw>
    20bc:	80 91 b8 04 	lds	r24, 0x04B8	; 0x8004b8 <twi_inRepStart>
    20c0:	81 30       	cpi	r24, 0x01	; 1
    20c2:	61 f4       	brne	.+24     	; 0x20dc <twi_writeTo+0x6e>
    20c4:	10 92 b8 04 	sts	0x04B8, r1	; 0x8004b8 <twi_inRepStart>
    20c8:	80 91 ba 04 	lds	r24, 0x04BA	; 0x8004ba <twi_slarw>
    20cc:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    20d0:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    20d4:	83 fd       	sbrc	r24, 3
    20d6:	f8 cf       	rjmp	.-16     	; 0x20c8 <twi_writeTo+0x5a>
    20d8:	85 ec       	ldi	r24, 0xC5	; 197
    20da:	01 c0       	rjmp	.+2      	; 0x20de <twi_writeTo+0x70>
    20dc:	85 ee       	ldi	r24, 0xE5	; 229
    20de:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    20e2:	22 23       	and	r18, r18
    20e4:	21 f0       	breq	.+8      	; 0x20ee <twi_writeTo+0x80>
    20e6:	80 91 bb 04 	lds	r24, 0x04BB	; 0x8004bb <twi_state>
    20ea:	82 30       	cpi	r24, 0x02	; 2
    20ec:	d1 f3       	breq	.-12     	; 0x20e2 <twi_writeTo+0x74>
    20ee:	80 91 4e 04 	lds	r24, 0x044E	; 0x80044e <twi_error>
    20f2:	8f 3f       	cpi	r24, 0xFF	; 255
    20f4:	79 f0       	breq	.+30     	; 0x2114 <twi_writeTo+0xa6>
    20f6:	80 91 4e 04 	lds	r24, 0x044E	; 0x80044e <twi_error>
    20fa:	80 32       	cpi	r24, 0x20	; 32
    20fc:	41 f0       	breq	.+16     	; 0x210e <twi_writeTo+0xa0>
    20fe:	80 91 4e 04 	lds	r24, 0x044E	; 0x80044e <twi_error>
    2102:	80 33       	cpi	r24, 0x30	; 48
    2104:	31 f0       	breq	.+12     	; 0x2112 <twi_writeTo+0xa4>
    2106:	94 e0       	ldi	r25, 0x04	; 4
    2108:	05 c0       	rjmp	.+10     	; 0x2114 <twi_writeTo+0xa6>
    210a:	91 e0       	ldi	r25, 0x01	; 1
    210c:	03 c0       	rjmp	.+6      	; 0x2114 <twi_writeTo+0xa6>
    210e:	92 e0       	ldi	r25, 0x02	; 2
    2110:	01 c0       	rjmp	.+2      	; 0x2114 <twi_writeTo+0xa6>
    2112:	93 e0       	ldi	r25, 0x03	; 3
    2114:	89 2f       	mov	r24, r25
    2116:	0f 91       	pop	r16
    2118:	08 95       	ret

0000211a <twi_transmit>:
    211a:	40 91 70 04 	lds	r20, 0x0470	; 0x800470 <twi_txBufferLength>
    211e:	26 2f       	mov	r18, r22
    2120:	30 e0       	ldi	r19, 0x00	; 0
    2122:	24 0f       	add	r18, r20
    2124:	31 1d       	adc	r19, r1
    2126:	21 32       	cpi	r18, 0x21	; 33
    2128:	31 05       	cpc	r19, r1
    212a:	dc f4       	brge	.+54     	; 0x2162 <twi_transmit+0x48>
    212c:	20 91 bb 04 	lds	r18, 0x04BB	; 0x8004bb <twi_state>
    2130:	24 30       	cpi	r18, 0x04	; 4
    2132:	c9 f4       	brne	.+50     	; 0x2166 <twi_transmit+0x4c>
    2134:	fc 01       	movw	r30, r24
    2136:	80 e0       	ldi	r24, 0x00	; 0
    2138:	90 e0       	ldi	r25, 0x00	; 0
    213a:	86 17       	cp	r24, r22
    213c:	58 f4       	brcc	.+22     	; 0x2154 <twi_transmit+0x3a>
    213e:	30 91 70 04 	lds	r19, 0x0470	; 0x800470 <twi_txBufferLength>
    2142:	21 91       	ld	r18, Z+
    2144:	dc 01       	movw	r26, r24
    2146:	ae 58       	subi	r26, 0x8E	; 142
    2148:	bb 4f       	sbci	r27, 0xFB	; 251
    214a:	a3 0f       	add	r26, r19
    214c:	b1 1d       	adc	r27, r1
    214e:	2c 93       	st	X, r18
    2150:	01 96       	adiw	r24, 0x01	; 1
    2152:	f3 cf       	rjmp	.-26     	; 0x213a <twi_transmit+0x20>
    2154:	80 91 70 04 	lds	r24, 0x0470	; 0x800470 <twi_txBufferLength>
    2158:	68 0f       	add	r22, r24
    215a:	60 93 70 04 	sts	0x0470, r22	; 0x800470 <twi_txBufferLength>
    215e:	80 e0       	ldi	r24, 0x00	; 0
    2160:	08 95       	ret
    2162:	81 e0       	ldi	r24, 0x01	; 1
    2164:	08 95       	ret
    2166:	82 e0       	ldi	r24, 0x02	; 2
    2168:	08 95       	ret

0000216a <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    216a:	85 ed       	ldi	r24, 0xD5	; 213
    216c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    2170:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    2174:	84 fd       	sbrc	r24, 4
    2176:	fc cf       	rjmp	.-8      	; 0x2170 <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    2178:	10 92 bb 04 	sts	0x04BB, r1	; 0x8004bb <twi_state>
    217c:	08 95       	ret

0000217e <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    217e:	85 ec       	ldi	r24, 0xC5	; 197
    2180:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // update twi state
  twi_state = TWI_READY;
    2184:	10 92 bb 04 	sts	0x04BB, r1	; 0x8004bb <twi_state>
    2188:	08 95       	ret

0000218a <__vector_24>:
}

ISR(TWI_vect)
{
    218a:	1f 92       	push	r1
    218c:	0f 92       	push	r0
    218e:	0f b6       	in	r0, 0x3f	; 63
    2190:	0f 92       	push	r0
    2192:	11 24       	eor	r1, r1
    2194:	2f 93       	push	r18
    2196:	3f 93       	push	r19
    2198:	4f 93       	push	r20
    219a:	5f 93       	push	r21
    219c:	6f 93       	push	r22
    219e:	7f 93       	push	r23
    21a0:	8f 93       	push	r24
    21a2:	9f 93       	push	r25
    21a4:	af 93       	push	r26
    21a6:	bf 93       	push	r27
    21a8:	ef 93       	push	r30
    21aa:	ff 93       	push	r31
  switch(TW_STATUS){
    21ac:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    21b0:	88 7f       	andi	r24, 0xF8	; 248
    21b2:	80 36       	cpi	r24, 0x60	; 96
    21b4:	09 f4       	brne	.+2      	; 0x21b8 <__vector_24+0x2e>
    21b6:	9e c0       	rjmp	.+316    	; 0x22f4 <__vector_24+0x16a>
    21b8:	78 f5       	brcc	.+94     	; 0x2218 <__vector_24+0x8e>
    21ba:	88 32       	cpi	r24, 0x28	; 40
    21bc:	09 f4       	brne	.+2      	; 0x21c0 <__vector_24+0x36>
    21be:	5d c0       	rjmp	.+186    	; 0x227a <__vector_24+0xf0>
    21c0:	90 f4       	brcc	.+36     	; 0x21e6 <__vector_24+0x5c>
    21c2:	80 31       	cpi	r24, 0x10	; 16
    21c4:	09 f4       	brne	.+2      	; 0x21c8 <__vector_24+0x3e>
    21c6:	56 c0       	rjmp	.+172    	; 0x2274 <__vector_24+0xea>
    21c8:	38 f4       	brcc	.+14     	; 0x21d8 <__vector_24+0x4e>
    21ca:	88 23       	and	r24, r24
    21cc:	09 f4       	brne	.+2      	; 0x21d0 <__vector_24+0x46>
    21ce:	f5 c0       	rjmp	.+490    	; 0x23ba <__vector_24+0x230>
    21d0:	88 30       	cpi	r24, 0x08	; 8
    21d2:	09 f4       	brne	.+2      	; 0x21d6 <__vector_24+0x4c>
    21d4:	4f c0       	rjmp	.+158    	; 0x2274 <__vector_24+0xea>
    21d6:	f5 c0       	rjmp	.+490    	; 0x23c2 <__vector_24+0x238>
    21d8:	88 31       	cpi	r24, 0x18	; 24
    21da:	09 f4       	brne	.+2      	; 0x21de <__vector_24+0x54>
    21dc:	4e c0       	rjmp	.+156    	; 0x227a <__vector_24+0xf0>
    21de:	80 32       	cpi	r24, 0x20	; 32
    21e0:	09 f4       	brne	.+2      	; 0x21e4 <__vector_24+0x5a>
    21e2:	5f c0       	rjmp	.+190    	; 0x22a2 <__vector_24+0x118>
    21e4:	ee c0       	rjmp	.+476    	; 0x23c2 <__vector_24+0x238>
    21e6:	80 34       	cpi	r24, 0x40	; 64
    21e8:	09 f4       	brne	.+2      	; 0x21ec <__vector_24+0x62>
    21ea:	6a c0       	rjmp	.+212    	; 0x22c0 <__vector_24+0x136>
    21ec:	58 f4       	brcc	.+22     	; 0x2204 <__vector_24+0x7a>
    21ee:	80 33       	cpi	r24, 0x30	; 48
    21f0:	09 f4       	brne	.+2      	; 0x21f4 <__vector_24+0x6a>
    21f2:	57 c0       	rjmp	.+174    	; 0x22a2 <__vector_24+0x118>
    21f4:	88 33       	cpi	r24, 0x38	; 56
    21f6:	09 f0       	breq	.+2      	; 0x21fa <__vector_24+0x70>
    21f8:	e4 c0       	rjmp	.+456    	; 0x23c2 <__vector_24+0x238>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    21fa:	80 93 4e 04 	sts	0x044E, r24	; 0x80044e <twi_error>
      twi_releaseBus();
    21fe:	0e 94 bf 10 	call	0x217e	; 0x217e <twi_releaseBus>
      break;
    2202:	df c0       	rjmp	.+446    	; 0x23c2 <__vector_24+0x238>
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    2204:	80 35       	cpi	r24, 0x50	; 80
    2206:	09 f4       	brne	.+2      	; 0x220a <__vector_24+0x80>
    2208:	4f c0       	rjmp	.+158    	; 0x22a8 <__vector_24+0x11e>
    220a:	88 35       	cpi	r24, 0x58	; 88
    220c:	09 f4       	brne	.+2      	; 0x2210 <__vector_24+0x86>
    220e:	5d c0       	rjmp	.+186    	; 0x22ca <__vector_24+0x140>
    2210:	88 34       	cpi	r24, 0x48	; 72
    2212:	09 f0       	breq	.+2      	; 0x2216 <__vector_24+0x8c>
    2214:	d6 c0       	rjmp	.+428    	; 0x23c2 <__vector_24+0x238>
    2216:	d3 c0       	rjmp	.+422    	; 0x23be <__vector_24+0x234>
    2218:	88 39       	cpi	r24, 0x98	; 152
    221a:	09 f4       	brne	.+2      	; 0x221e <__vector_24+0x94>
    221c:	c4 c0       	rjmp	.+392    	; 0x23a6 <__vector_24+0x21c>
    221e:	a8 f4       	brcc	.+42     	; 0x224a <__vector_24+0xc0>
    2220:	88 37       	cpi	r24, 0x78	; 120
    2222:	09 f4       	brne	.+2      	; 0x2226 <__vector_24+0x9c>
    2224:	67 c0       	rjmp	.+206    	; 0x22f4 <__vector_24+0x16a>
    2226:	38 f4       	brcc	.+14     	; 0x2236 <__vector_24+0xac>
    2228:	88 36       	cpi	r24, 0x68	; 104
    222a:	09 f4       	brne	.+2      	; 0x222e <__vector_24+0xa4>
    222c:	63 c0       	rjmp	.+198    	; 0x22f4 <__vector_24+0x16a>
    222e:	80 37       	cpi	r24, 0x70	; 112
    2230:	09 f4       	brne	.+2      	; 0x2234 <__vector_24+0xaa>
    2232:	60 c0       	rjmp	.+192    	; 0x22f4 <__vector_24+0x16a>
    2234:	c6 c0       	rjmp	.+396    	; 0x23c2 <__vector_24+0x238>
    2236:	88 38       	cpi	r24, 0x88	; 136
    2238:	09 f4       	brne	.+2      	; 0x223c <__vector_24+0xb2>
    223a:	b5 c0       	rjmp	.+362    	; 0x23a6 <__vector_24+0x21c>
    223c:	80 39       	cpi	r24, 0x90	; 144
    223e:	09 f4       	brne	.+2      	; 0x2242 <__vector_24+0xb8>
    2240:	5f c0       	rjmp	.+190    	; 0x2300 <__vector_24+0x176>
    2242:	80 38       	cpi	r24, 0x80	; 128
    2244:	09 f0       	breq	.+2      	; 0x2248 <__vector_24+0xbe>
    2246:	bd c0       	rjmp	.+378    	; 0x23c2 <__vector_24+0x238>
    2248:	5b c0       	rjmp	.+182    	; 0x2300 <__vector_24+0x176>
    224a:	80 3b       	cpi	r24, 0xB0	; 176
    224c:	09 f4       	brne	.+2      	; 0x2250 <__vector_24+0xc6>
    224e:	83 c0       	rjmp	.+262    	; 0x2356 <__vector_24+0x1cc>
    2250:	38 f4       	brcc	.+14     	; 0x2260 <__vector_24+0xd6>
    2252:	80 3a       	cpi	r24, 0xA0	; 160
    2254:	09 f4       	brne	.+2      	; 0x2258 <__vector_24+0xce>
    2256:	66 c0       	rjmp	.+204    	; 0x2324 <__vector_24+0x19a>
    2258:	88 3a       	cpi	r24, 0xA8	; 168
    225a:	09 f4       	brne	.+2      	; 0x225e <__vector_24+0xd4>
    225c:	7c c0       	rjmp	.+248    	; 0x2356 <__vector_24+0x1cc>
    225e:	b1 c0       	rjmp	.+354    	; 0x23c2 <__vector_24+0x238>
    2260:	80 3c       	cpi	r24, 0xC0	; 192
    2262:	09 f4       	brne	.+2      	; 0x2266 <__vector_24+0xdc>
    2264:	a4 c0       	rjmp	.+328    	; 0x23ae <__vector_24+0x224>
    2266:	88 3c       	cpi	r24, 0xC8	; 200
    2268:	09 f4       	brne	.+2      	; 0x226c <__vector_24+0xe2>
    226a:	a1 c0       	rjmp	.+322    	; 0x23ae <__vector_24+0x224>
    226c:	88 3b       	cpi	r24, 0xB8	; 184
    226e:	09 f4       	brne	.+2      	; 0x2272 <__vector_24+0xe8>
    2270:	87 c0       	rjmp	.+270    	; 0x2380 <__vector_24+0x1f6>
    2272:	a7 c0       	rjmp	.+334    	; 0x23c2 <__vector_24+0x238>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    2274:	80 91 ba 04 	lds	r24, 0x04BA	; 0x8004ba <twi_slarw>
    2278:	10 c0       	rjmp	.+32     	; 0x229a <__vector_24+0x110>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    227a:	90 91 93 04 	lds	r25, 0x0493	; 0x800493 <twi_masterBufferIndex>
    227e:	80 91 92 04 	lds	r24, 0x0492	; 0x800492 <twi_masterBufferLength>
    2282:	98 17       	cp	r25, r24
    2284:	70 f5       	brcc	.+92     	; 0x22e2 <__vector_24+0x158>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    2286:	e0 91 93 04 	lds	r30, 0x0493	; 0x800493 <twi_masterBufferIndex>
    228a:	81 e0       	ldi	r24, 0x01	; 1
    228c:	8e 0f       	add	r24, r30
    228e:	80 93 93 04 	sts	0x0493, r24	; 0x800493 <twi_masterBufferIndex>
    2292:	f0 e0       	ldi	r31, 0x00	; 0
    2294:	ec 56       	subi	r30, 0x6C	; 108
    2296:	fb 4f       	sbci	r31, 0xFB	; 251
    2298:	80 81       	ld	r24, Z
    229a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    229e:	85 ec       	ldi	r24, 0xC5	; 197
    22a0:	83 c0       	rjmp	.+262    	; 0x23a8 <__vector_24+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    22a2:	80 93 4e 04 	sts	0x044E, r24	; 0x80044e <twi_error>
    22a6:	8b c0       	rjmp	.+278    	; 0x23be <__vector_24+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    22a8:	e0 91 93 04 	lds	r30, 0x0493	; 0x800493 <twi_masterBufferIndex>
    22ac:	81 e0       	ldi	r24, 0x01	; 1
    22ae:	8e 0f       	add	r24, r30
    22b0:	80 93 93 04 	sts	0x0493, r24	; 0x800493 <twi_masterBufferIndex>
    22b4:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    22b8:	f0 e0       	ldi	r31, 0x00	; 0
    22ba:	ec 56       	subi	r30, 0x6C	; 108
    22bc:	fb 4f       	sbci	r31, 0xFB	; 251
    22be:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    22c0:	90 91 93 04 	lds	r25, 0x0493	; 0x800493 <twi_masterBufferIndex>
    22c4:	80 91 92 04 	lds	r24, 0x0492	; 0x800492 <twi_masterBufferLength>
    22c8:	6b c0       	rjmp	.+214    	; 0x23a0 <__vector_24+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    22ca:	e0 91 93 04 	lds	r30, 0x0493	; 0x800493 <twi_masterBufferIndex>
    22ce:	81 e0       	ldi	r24, 0x01	; 1
    22d0:	8e 0f       	add	r24, r30
    22d2:	80 93 93 04 	sts	0x0493, r24	; 0x800493 <twi_masterBufferIndex>
    22d6:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    22da:	f0 e0       	ldi	r31, 0x00	; 0
    22dc:	ec 56       	subi	r30, 0x6C	; 108
    22de:	fb 4f       	sbci	r31, 0xFB	; 251
    22e0:	80 83       	st	Z, r24
	if (twi_sendStop)
    22e2:	80 91 b9 04 	lds	r24, 0x04B9	; 0x8004b9 <twi_sendStop>
    22e6:	81 11       	cpse	r24, r1
    22e8:	6a c0       	rjmp	.+212    	; 0x23be <__vector_24+0x234>
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    22ea:	81 e0       	ldi	r24, 0x01	; 1
    22ec:	80 93 b8 04 	sts	0x04B8, r24	; 0x8004b8 <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    22f0:	84 ea       	ldi	r24, 0xA4	; 164
    22f2:	5e c0       	rjmp	.+188    	; 0x23b0 <__vector_24+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    22f4:	83 e0       	ldi	r24, 0x03	; 3
    22f6:	80 93 bb 04 	sts	0x04BB, r24	; 0x8004bb <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    22fa:	10 92 4f 04 	sts	0x044F, r1	; 0x80044f <twi_rxBufferIndex>
    22fe:	cf cf       	rjmp	.-98     	; 0x229e <__vector_24+0x114>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    2300:	80 91 4f 04 	lds	r24, 0x044F	; 0x80044f <twi_rxBufferIndex>
    2304:	80 32       	cpi	r24, 0x20	; 32
    2306:	08 f0       	brcs	.+2      	; 0x230a <__vector_24+0x180>
    2308:	4e c0       	rjmp	.+156    	; 0x23a6 <__vector_24+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    230a:	e0 91 4f 04 	lds	r30, 0x044F	; 0x80044f <twi_rxBufferIndex>
    230e:	81 e0       	ldi	r24, 0x01	; 1
    2310:	8e 0f       	add	r24, r30
    2312:	80 93 4f 04 	sts	0x044F, r24	; 0x80044f <twi_rxBufferIndex>
    2316:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    231a:	f0 e0       	ldi	r31, 0x00	; 0
    231c:	e0 5b       	subi	r30, 0xB0	; 176
    231e:	fb 4f       	sbci	r31, 0xFB	; 251
    2320:	80 83       	st	Z, r24
    2322:	bd cf       	rjmp	.-134    	; 0x229e <__vector_24+0x114>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    2324:	0e 94 bf 10 	call	0x217e	; 0x217e <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    2328:	80 91 4f 04 	lds	r24, 0x044F	; 0x80044f <twi_rxBufferIndex>
    232c:	80 32       	cpi	r24, 0x20	; 32
    232e:	30 f4       	brcc	.+12     	; 0x233c <__vector_24+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    2330:	e0 91 4f 04 	lds	r30, 0x044F	; 0x80044f <twi_rxBufferIndex>
    2334:	f0 e0       	ldi	r31, 0x00	; 0
    2336:	e0 5b       	subi	r30, 0xB0	; 176
    2338:	fb 4f       	sbci	r31, 0xFB	; 251
    233a:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    233c:	60 91 4f 04 	lds	r22, 0x044F	; 0x80044f <twi_rxBufferIndex>
    2340:	70 e0       	ldi	r23, 0x00	; 0
    2342:	e0 91 b4 04 	lds	r30, 0x04B4	; 0x8004b4 <twi_onSlaveReceive>
    2346:	f0 91 b5 04 	lds	r31, 0x04B5	; 0x8004b5 <twi_onSlaveReceive+0x1>
    234a:	80 e5       	ldi	r24, 0x50	; 80
    234c:	94 e0       	ldi	r25, 0x04	; 4
    234e:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    2350:	10 92 4f 04 	sts	0x044F, r1	; 0x80044f <twi_rxBufferIndex>
      break;
    2354:	36 c0       	rjmp	.+108    	; 0x23c2 <__vector_24+0x238>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    2356:	84 e0       	ldi	r24, 0x04	; 4
    2358:	80 93 bb 04 	sts	0x04BB, r24	; 0x8004bb <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    235c:	10 92 71 04 	sts	0x0471, r1	; 0x800471 <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    2360:	10 92 70 04 	sts	0x0470, r1	; 0x800470 <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    2364:	e0 91 b6 04 	lds	r30, 0x04B6	; 0x8004b6 <twi_onSlaveTransmit>
    2368:	f0 91 b7 04 	lds	r31, 0x04B7	; 0x8004b7 <twi_onSlaveTransmit+0x1>
    236c:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    236e:	80 91 70 04 	lds	r24, 0x0470	; 0x800470 <twi_txBufferLength>
    2372:	81 11       	cpse	r24, r1
    2374:	05 c0       	rjmp	.+10     	; 0x2380 <__vector_24+0x1f6>
        twi_txBufferLength = 1;
    2376:	81 e0       	ldi	r24, 0x01	; 1
    2378:	80 93 70 04 	sts	0x0470, r24	; 0x800470 <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    237c:	10 92 72 04 	sts	0x0472, r1	; 0x800472 <twi_txBuffer>
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    2380:	e0 91 71 04 	lds	r30, 0x0471	; 0x800471 <twi_txBufferIndex>
    2384:	81 e0       	ldi	r24, 0x01	; 1
    2386:	8e 0f       	add	r24, r30
    2388:	80 93 71 04 	sts	0x0471, r24	; 0x800471 <twi_txBufferIndex>
    238c:	f0 e0       	ldi	r31, 0x00	; 0
    238e:	ee 58       	subi	r30, 0x8E	; 142
    2390:	fb 4f       	sbci	r31, 0xFB	; 251
    2392:	80 81       	ld	r24, Z
    2394:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    2398:	90 91 71 04 	lds	r25, 0x0471	; 0x800471 <twi_txBufferIndex>
    239c:	80 91 70 04 	lds	r24, 0x0470	; 0x800470 <twi_txBufferLength>
    23a0:	98 17       	cp	r25, r24
    23a2:	08 f4       	brcc	.+2      	; 0x23a6 <__vector_24+0x21c>
    23a4:	7c cf       	rjmp	.-264    	; 0x229e <__vector_24+0x114>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    23a6:	85 e8       	ldi	r24, 0x85	; 133
    23a8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    23ac:	0a c0       	rjmp	.+20     	; 0x23c2 <__vector_24+0x238>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    23ae:	85 ec       	ldi	r24, 0xC5	; 197
    23b0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    23b4:	10 92 bb 04 	sts	0x04BB, r1	; 0x8004bb <twi_state>
      break;
    23b8:	04 c0       	rjmp	.+8      	; 0x23c2 <__vector_24+0x238>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    23ba:	10 92 4e 04 	sts	0x044E, r1	; 0x80044e <twi_error>
      twi_stop();
    23be:	0e 94 b5 10 	call	0x216a	; 0x216a <twi_stop>
      break;
  }
}
    23c2:	ff 91       	pop	r31
    23c4:	ef 91       	pop	r30
    23c6:	bf 91       	pop	r27
    23c8:	af 91       	pop	r26
    23ca:	9f 91       	pop	r25
    23cc:	8f 91       	pop	r24
    23ce:	7f 91       	pop	r23
    23d0:	6f 91       	pop	r22
    23d2:	5f 91       	pop	r21
    23d4:	4f 91       	pop	r20
    23d6:	3f 91       	pop	r19
    23d8:	2f 91       	pop	r18
    23da:	0f 90       	pop	r0
    23dc:	0f be       	out	0x3f, r0	; 63
    23de:	0f 90       	pop	r0
    23e0:	1f 90       	pop	r1
    23e2:	18 95       	reti

000023e4 <_ZN5Print17availableForWriteEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    23e4:	80 e0       	ldi	r24, 0x00	; 0
    23e6:	90 e0       	ldi	r25, 0x00	; 0
    23e8:	08 95       	ret

000023ea <_ZN7TwoWire9availableEv>:
    23ea:	80 91 ec 04 	lds	r24, 0x04EC	; 0x8004ec <_ZN7TwoWire14rxBufferLengthE>
    23ee:	90 e0       	ldi	r25, 0x00	; 0
    23f0:	20 91 ed 04 	lds	r18, 0x04ED	; 0x8004ed <_ZN7TwoWire13rxBufferIndexE>
    23f4:	82 1b       	sub	r24, r18
    23f6:	91 09       	sbc	r25, r1
    23f8:	08 95       	ret

000023fa <_ZN7TwoWire4readEv>:
    23fa:	90 91 ed 04 	lds	r25, 0x04ED	; 0x8004ed <_ZN7TwoWire13rxBufferIndexE>
    23fe:	80 91 ec 04 	lds	r24, 0x04EC	; 0x8004ec <_ZN7TwoWire14rxBufferLengthE>
    2402:	98 17       	cp	r25, r24
    2404:	58 f4       	brcc	.+22     	; 0x241c <_ZN7TwoWire4readEv+0x22>
    2406:	e9 2f       	mov	r30, r25
    2408:	f0 e0       	ldi	r31, 0x00	; 0
    240a:	e2 51       	subi	r30, 0x12	; 18
    240c:	fb 4f       	sbci	r31, 0xFB	; 251
    240e:	20 81       	ld	r18, Z
    2410:	30 e0       	ldi	r19, 0x00	; 0
    2412:	9f 5f       	subi	r25, 0xFF	; 255
    2414:	90 93 ed 04 	sts	0x04ED, r25	; 0x8004ed <_ZN7TwoWire13rxBufferIndexE>
    2418:	c9 01       	movw	r24, r18
    241a:	08 95       	ret
    241c:	2f ef       	ldi	r18, 0xFF	; 255
    241e:	3f ef       	ldi	r19, 0xFF	; 255
    2420:	fb cf       	rjmp	.-10     	; 0x2418 <_ZN7TwoWire4readEv+0x1e>

00002422 <_ZN7TwoWire4peekEv>:
    2422:	e0 91 ed 04 	lds	r30, 0x04ED	; 0x8004ed <_ZN7TwoWire13rxBufferIndexE>
    2426:	80 91 ec 04 	lds	r24, 0x04EC	; 0x8004ec <_ZN7TwoWire14rxBufferLengthE>
    242a:	e8 17       	cp	r30, r24
    242c:	30 f4       	brcc	.+12     	; 0x243a <_ZN7TwoWire4peekEv+0x18>
    242e:	f0 e0       	ldi	r31, 0x00	; 0
    2430:	e2 51       	subi	r30, 0x12	; 18
    2432:	fb 4f       	sbci	r31, 0xFB	; 251
    2434:	80 81       	ld	r24, Z
    2436:	90 e0       	ldi	r25, 0x00	; 0
    2438:	08 95       	ret
    243a:	8f ef       	ldi	r24, 0xFF	; 255
    243c:	9f ef       	ldi	r25, 0xFF	; 255
    243e:	08 95       	ret

00002440 <_ZN7TwoWire5flushEv>:
    2440:	08 95       	ret

00002442 <_ZN7TwoWire5writeEh>:
    2442:	cf 93       	push	r28
    2444:	df 93       	push	r29
    2446:	1f 92       	push	r1
    2448:	cd b7       	in	r28, 0x3d	; 61
    244a:	de b7       	in	r29, 0x3e	; 62
    244c:	fc 01       	movw	r30, r24
    244e:	69 83       	std	Y+1, r22	; 0x01
    2450:	90 91 c8 04 	lds	r25, 0x04C8	; 0x8004c8 <_ZN7TwoWire12transmittingE>
    2454:	99 23       	and	r25, r25
    2456:	01 f1       	breq	.+64     	; 0x2498 <_ZN7TwoWire5writeEh+0x56>
    2458:	90 91 c9 04 	lds	r25, 0x04C9	; 0x8004c9 <_ZN7TwoWire14txBufferLengthE>
    245c:	90 32       	cpi	r25, 0x20	; 32
    245e:	90 f4       	brcc	.+36     	; 0x2484 <_ZN7TwoWire5writeEh+0x42>
    2460:	80 91 ca 04 	lds	r24, 0x04CA	; 0x8004ca <_ZN7TwoWire13txBufferIndexE>
    2464:	e8 2f       	mov	r30, r24
    2466:	f0 e0       	ldi	r31, 0x00	; 0
    2468:	e5 53       	subi	r30, 0x35	; 53
    246a:	fb 4f       	sbci	r31, 0xFB	; 251
    246c:	60 83       	st	Z, r22
    246e:	8f 5f       	subi	r24, 0xFF	; 255
    2470:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <_ZN7TwoWire13txBufferIndexE>
    2474:	80 93 c9 04 	sts	0x04C9, r24	; 0x8004c9 <_ZN7TwoWire14txBufferLengthE>
    2478:	81 e0       	ldi	r24, 0x01	; 1
    247a:	90 e0       	ldi	r25, 0x00	; 0
    247c:	0f 90       	pop	r0
    247e:	df 91       	pop	r29
    2480:	cf 91       	pop	r28
    2482:	08 95       	ret
    2484:	81 e0       	ldi	r24, 0x01	; 1
    2486:	90 e0       	ldi	r25, 0x00	; 0
    2488:	93 83       	std	Z+3, r25	; 0x03
    248a:	82 83       	std	Z+2, r24	; 0x02
    248c:	80 e0       	ldi	r24, 0x00	; 0
    248e:	90 e0       	ldi	r25, 0x00	; 0
    2490:	0f 90       	pop	r0
    2492:	df 91       	pop	r29
    2494:	cf 91       	pop	r28
    2496:	08 95       	ret
    2498:	61 e0       	ldi	r22, 0x01	; 1
    249a:	ce 01       	movw	r24, r28
    249c:	01 96       	adiw	r24, 0x01	; 1
    249e:	0e 94 8d 10 	call	0x211a	; 0x211a <twi_transmit>
    24a2:	81 e0       	ldi	r24, 0x01	; 1
    24a4:	90 e0       	ldi	r25, 0x00	; 0
    24a6:	0f 90       	pop	r0
    24a8:	df 91       	pop	r29
    24aa:	cf 91       	pop	r28
    24ac:	08 95       	ret

000024ae <_ZN7TwoWire5writeEPKhj>:
    24ae:	8f 92       	push	r8
    24b0:	9f 92       	push	r9
    24b2:	af 92       	push	r10
    24b4:	bf 92       	push	r11
    24b6:	cf 92       	push	r12
    24b8:	df 92       	push	r13
    24ba:	ef 92       	push	r14
    24bc:	ff 92       	push	r15
    24be:	0f 93       	push	r16
    24c0:	1f 93       	push	r17
    24c2:	cf 93       	push	r28
    24c4:	df 93       	push	r29
    24c6:	1f 92       	push	r1
    24c8:	cd b7       	in	r28, 0x3d	; 61
    24ca:	de b7       	in	r29, 0x3e	; 62
    24cc:	7c 01       	movw	r14, r24
    24ce:	86 2f       	mov	r24, r22
    24d0:	5a 01       	movw	r10, r20
    24d2:	20 91 c8 04 	lds	r18, 0x04C8	; 0x8004c8 <_ZN7TwoWire12transmittingE>
    24d6:	22 23       	and	r18, r18
    24d8:	09 f4       	brne	.+2      	; 0x24dc <_ZN7TwoWire5writeEPKhj+0x2e>
    24da:	4f c0       	rjmp	.+158    	; 0x257a <_ZN7TwoWire5writeEPKhj+0xcc>
    24dc:	41 15       	cp	r20, r1
    24de:	51 05       	cpc	r21, r1
    24e0:	a1 f1       	breq	.+104    	; 0x254a <_ZN7TwoWire5writeEPKhj+0x9c>
    24e2:	06 2f       	mov	r16, r22
    24e4:	17 2f       	mov	r17, r23
    24e6:	68 01       	movw	r12, r16
    24e8:	c4 0e       	add	r12, r20
    24ea:	d5 1e       	adc	r13, r21
    24ec:	88 24       	eor	r8, r8
    24ee:	83 94       	inc	r8
    24f0:	91 2c       	mov	r9, r1
    24f2:	06 c0       	rjmp	.+12     	; 0x2500 <_ZN7TwoWire5writeEPKhj+0x52>
    24f4:	f7 01       	movw	r30, r14
    24f6:	93 82       	std	Z+3, r9	; 0x03
    24f8:	82 82       	std	Z+2, r8	; 0x02
    24fa:	c0 16       	cp	r12, r16
    24fc:	d1 06       	cpc	r13, r17
    24fe:	29 f1       	breq	.+74     	; 0x254a <_ZN7TwoWire5writeEPKhj+0x9c>
    2500:	d7 01       	movw	r26, r14
    2502:	ed 91       	ld	r30, X+
    2504:	fc 91       	ld	r31, X
    2506:	01 90       	ld	r0, Z+
    2508:	f0 81       	ld	r31, Z
    250a:	e0 2d       	mov	r30, r0
    250c:	d8 01       	movw	r26, r16
    250e:	6d 91       	ld	r22, X+
    2510:	8d 01       	movw	r16, r26
    2512:	b2 e1       	ldi	r27, 0x12	; 18
    2514:	e1 32       	cpi	r30, 0x21	; 33
    2516:	fb 07       	cpc	r31, r27
    2518:	69 f5       	brne	.+90     	; 0x2574 <_ZN7TwoWire5writeEPKhj+0xc6>
    251a:	69 83       	std	Y+1, r22	; 0x01
    251c:	80 91 c8 04 	lds	r24, 0x04C8	; 0x8004c8 <_ZN7TwoWire12transmittingE>
    2520:	88 23       	and	r24, r24
    2522:	11 f1       	breq	.+68     	; 0x2568 <_ZN7TwoWire5writeEPKhj+0xba>
    2524:	80 91 c9 04 	lds	r24, 0x04C9	; 0x8004c9 <_ZN7TwoWire14txBufferLengthE>
    2528:	80 32       	cpi	r24, 0x20	; 32
    252a:	20 f7       	brcc	.-56     	; 0x24f4 <_ZN7TwoWire5writeEPKhj+0x46>
    252c:	80 91 ca 04 	lds	r24, 0x04CA	; 0x8004ca <_ZN7TwoWire13txBufferIndexE>
    2530:	e8 2f       	mov	r30, r24
    2532:	f0 e0       	ldi	r31, 0x00	; 0
    2534:	e5 53       	subi	r30, 0x35	; 53
    2536:	fb 4f       	sbci	r31, 0xFB	; 251
    2538:	60 83       	st	Z, r22
    253a:	8f 5f       	subi	r24, 0xFF	; 255
    253c:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <_ZN7TwoWire13txBufferIndexE>
    2540:	80 93 c9 04 	sts	0x04C9, r24	; 0x8004c9 <_ZN7TwoWire14txBufferLengthE>
    2544:	c0 16       	cp	r12, r16
    2546:	d1 06       	cpc	r13, r17
    2548:	d9 f6       	brne	.-74     	; 0x2500 <_ZN7TwoWire5writeEPKhj+0x52>
    254a:	c5 01       	movw	r24, r10
    254c:	0f 90       	pop	r0
    254e:	df 91       	pop	r29
    2550:	cf 91       	pop	r28
    2552:	1f 91       	pop	r17
    2554:	0f 91       	pop	r16
    2556:	ff 90       	pop	r15
    2558:	ef 90       	pop	r14
    255a:	df 90       	pop	r13
    255c:	cf 90       	pop	r12
    255e:	bf 90       	pop	r11
    2560:	af 90       	pop	r10
    2562:	9f 90       	pop	r9
    2564:	8f 90       	pop	r8
    2566:	08 95       	ret
    2568:	61 e0       	ldi	r22, 0x01	; 1
    256a:	ce 01       	movw	r24, r28
    256c:	01 96       	adiw	r24, 0x01	; 1
    256e:	0e 94 8d 10 	call	0x211a	; 0x211a <twi_transmit>
    2572:	c3 cf       	rjmp	.-122    	; 0x24fa <_ZN7TwoWire5writeEPKhj+0x4c>
    2574:	c7 01       	movw	r24, r14
    2576:	09 95       	icall
    2578:	c0 cf       	rjmp	.-128    	; 0x24fa <_ZN7TwoWire5writeEPKhj+0x4c>
    257a:	64 2f       	mov	r22, r20
    257c:	97 2f       	mov	r25, r23
    257e:	0e 94 8d 10 	call	0x211a	; 0x211a <twi_transmit>
    2582:	e3 cf       	rjmp	.-58     	; 0x254a <_ZN7TwoWire5writeEPKhj+0x9c>

00002584 <_ZN7TwoWire11requestFromEhh>:
    2584:	86 2f       	mov	r24, r22
    2586:	41 32       	cpi	r20, 0x21	; 33
    2588:	08 f0       	brcs	.+2      	; 0x258c <_ZN7TwoWire11requestFromEhh+0x8>
    258a:	40 e2       	ldi	r20, 0x20	; 32
    258c:	21 e0       	ldi	r18, 0x01	; 1
    258e:	6e ee       	ldi	r22, 0xEE	; 238
    2590:	74 e0       	ldi	r23, 0x04	; 4
    2592:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <twi_readFrom>
    2596:	10 92 ed 04 	sts	0x04ED, r1	; 0x8004ed <_ZN7TwoWire13rxBufferIndexE>
    259a:	80 93 ec 04 	sts	0x04EC, r24	; 0x8004ec <_ZN7TwoWire14rxBufferLengthE>
    259e:	08 95       	ret

000025a0 <_ZN7TwoWire17beginTransmissionEh>:
    25a0:	81 e0       	ldi	r24, 0x01	; 1
    25a2:	80 93 c8 04 	sts	0x04C8, r24	; 0x8004c8 <_ZN7TwoWire12transmittingE>
    25a6:	60 93 eb 04 	sts	0x04EB, r22	; 0x8004eb <_ZN7TwoWire9txAddressE>
    25aa:	10 92 ca 04 	sts	0x04CA, r1	; 0x8004ca <_ZN7TwoWire13txBufferIndexE>
    25ae:	10 92 c9 04 	sts	0x04C9, r1	; 0x8004c9 <_ZN7TwoWire14txBufferLengthE>
    25b2:	08 95       	ret

000025b4 <_ZN7TwoWire15endTransmissionEv>:
    25b4:	0f 93       	push	r16
    25b6:	01 e0       	ldi	r16, 0x01	; 1
    25b8:	21 e0       	ldi	r18, 0x01	; 1
    25ba:	40 91 c9 04 	lds	r20, 0x04C9	; 0x8004c9 <_ZN7TwoWire14txBufferLengthE>
    25be:	6b ec       	ldi	r22, 0xCB	; 203
    25c0:	74 e0       	ldi	r23, 0x04	; 4
    25c2:	80 91 eb 04 	lds	r24, 0x04EB	; 0x8004eb <_ZN7TwoWire9txAddressE>
    25c6:	0e 94 37 10 	call	0x206e	; 0x206e <twi_writeTo>
    25ca:	10 92 ca 04 	sts	0x04CA, r1	; 0x8004ca <_ZN7TwoWire13txBufferIndexE>
    25ce:	10 92 c9 04 	sts	0x04C9, r1	; 0x8004c9 <_ZN7TwoWire14txBufferLengthE>
    25d2:	10 92 c8 04 	sts	0x04C8, r1	; 0x8004c8 <_ZN7TwoWire12transmittingE>
    25d6:	0f 91       	pop	r16
    25d8:	08 95       	ret

000025da <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    25da:	ec eb       	ldi	r30, 0xBC	; 188
    25dc:	f4 e0       	ldi	r31, 0x04	; 4
    25de:	13 82       	std	Z+3, r1	; 0x03
    25e0:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    25e2:	88 ee       	ldi	r24, 0xE8	; 232
    25e4:	93 e0       	ldi	r25, 0x03	; 3
    25e6:	a0 e0       	ldi	r26, 0x00	; 0
    25e8:	b0 e0       	ldi	r27, 0x00	; 0
    25ea:	84 83       	std	Z+4, r24	; 0x04
    25ec:	95 83       	std	Z+5, r25	; 0x05
    25ee:	a6 83       	std	Z+6, r26	; 0x06
    25f0:	b7 83       	std	Z+7, r27	; 0x07
void (*TwoWire::user_onRequest)(void);
void (*TwoWire::user_onReceive)(int);

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire()
    25f2:	84 e6       	ldi	r24, 0x64	; 100
    25f4:	92 e0       	ldi	r25, 0x02	; 2
    25f6:	91 83       	std	Z+1, r25	; 0x01
    25f8:	80 83       	st	Z, r24
    25fa:	08 95       	ret

000025fc <_GLOBAL__sub_I_buffersize>:
// default I2C address is 0x68
// specific I2C addresses may be passed as a parameter here
// AD0 low = 0x68 (default for InvenSense evaluation board)
// AD0 high = 0x69
//MPU6050 accelgyro;
MPU6050 accelgyro(0x68); // <-- use for AD0 high
    25fc:	68 e6       	ldi	r22, 0x68	; 104
    25fe:	8e e0       	ldi	r24, 0x0E	; 14
    2600:	95 e0       	ldi	r25, 0x05	; 5
    2602:	0c 94 de 0e 	jmp	0x1dbc	; 0x1dbc <_ZN7MPU6050C1Eh>

00002606 <_Z9Mot0_Initv>:
    {
        PWM_1_disable_output_ch0();
        PORTB &= ~(1<<PORTB3);

        PWM_1_enable_output_ch1();
        PWM_1_load_duty_cycle_ch1(speed);
    2606:	0e 94 25 14 	call	0x284a	; 0x284a <PWM_0_init>
    260a:	61 e0       	ldi	r22, 0x01	; 1
    260c:	85 e0       	ldi	r24, 0x05	; 5
    260e:	0e 94 dd 1b 	call	0x37ba	; 0x37ba <pinMode>
    2612:	61 e0       	ldi	r22, 0x01	; 1
    2614:	86 e0       	ldi	r24, 0x06	; 6
    2616:	0e 94 dd 1b 	call	0x37ba	; 0x37ba <pinMode>
    261a:	0e 94 41 14 	call	0x2882	; 0x2882 <PWM_0_disable_output_ch1>
    261e:	0e 94 39 14 	call	0x2872	; 0x2872 <PWM_0_disable_output_ch0>
    2622:	5d 98       	cbi	0x0b, 5	; 11
    2624:	5e 98       	cbi	0x0b, 6	; 11
    2626:	08 95       	ret

00002628 <_Z9Mot1_Initv>:
    2628:	0e 94 49 14 	call	0x2892	; 0x2892 <PWM_1_init>
    262c:	61 e0       	ldi	r22, 0x01	; 1
    262e:	8b e0       	ldi	r24, 0x0B	; 11
    2630:	0e 94 dd 1b 	call	0x37ba	; 0x37ba <pinMode>
    2634:	61 e0       	ldi	r22, 0x01	; 1
    2636:	83 e0       	ldi	r24, 0x03	; 3
    2638:	0e 94 dd 1b 	call	0x37ba	; 0x37ba <pinMode>
    263c:	0e 94 6e 14 	call	0x28dc	; 0x28dc <PWM_1_disable_output_ch1>
    2640:	0e 94 62 14 	call	0x28c4	; 0x28c4 <PWM_1_disable_output_ch0>
    2644:	5b 98       	cbi	0x0b, 3	; 11
    2646:	2b 98       	cbi	0x05, 3	; 5
    2648:	08 95       	ret

0000264a <_Z15Motors_SetSpeedii>:
    }
}

void Motors_SetSpeed(int leftMotorSpeed, int rightMotorSpeed)
{
    264a:	0f 93       	push	r16
    264c:	1f 93       	push	r17
    264e:	cf 93       	push	r28
    2650:	df 93       	push	r29
    2652:	8c 01       	movw	r16, r24
    2654:	eb 01       	movw	r28, r22

    if(leftMotorSpeed >= 0)
    2656:	97 fd       	sbrc	r25, 7
    2658:	23 c0       	rjmp	.+70     	; 0x26a0 <_Z15Motors_SetSpeedii+0x56>
        PWM_0_enable_output_ch0();
        PWM_0_load_duty_cycle_ch0(speed);
    }
    else if (dir==REV)
    {
        PWM_0_disable_output_ch0();
    265a:	0e 94 39 14 	call	0x2872	; 0x2872 <PWM_0_disable_output_ch0>
        PORTD &= ~(1<<PORTD6);
    265e:	5e 98       	cbi	0x0b, 6	; 11

        PWM_0_enable_output_ch1();
    2660:	0e 94 3d 14 	call	0x287a	; 0x287a <PWM_0_enable_output_ch1>
        PWM_0_load_duty_cycle_ch1(speed);
    2664:	80 2f       	mov	r24, r16
    2666:	0e 94 47 14 	call	0x288e	; 0x288e <PWM_0_load_duty_cycle_ch1>
    else
    {
        Motor0_SetSpeed(FWD, abs(leftMotorSpeed));
    }

    if(rightMotorSpeed >= 0)
    266a:	d7 fd       	sbrc	r29, 7
    266c:	0c c0       	rjmp	.+24     	; 0x2686 <_Z15Motors_SetSpeedii+0x3c>
        PWM_1_enable_output_ch0();
        PWM_1_load_duty_cycle_ch0(speed);
    }
    else if (dir==REV)
    {
        PWM_1_disable_output_ch0();
    266e:	0e 94 62 14 	call	0x28c4	; 0x28c4 <PWM_1_disable_output_ch0>
        PORTB &= ~(1<<PORTB3);
    2672:	2b 98       	cbi	0x05, 3	; 5

        PWM_1_enable_output_ch1();
    2674:	0e 94 68 14 	call	0x28d0	; 0x28d0 <PWM_1_enable_output_ch1>
        PWM_1_load_duty_cycle_ch1(speed);
    2678:	8c 2f       	mov	r24, r28
    }
    else
    {
        Motor1_SetSpeed(FWD,abs(rightMotorSpeed));
    }
}
    267a:	df 91       	pop	r29
    267c:	cf 91       	pop	r28
    267e:	1f 91       	pop	r17
    2680:	0f 91       	pop	r16
    {
        PWM_1_disable_output_ch0();
        PORTB &= ~(1<<PORTB3);

        PWM_1_enable_output_ch1();
        PWM_1_load_duty_cycle_ch1(speed);
    2682:	0c 94 77 14 	jmp	0x28ee	; 0x28ee <PWM_1_load_duty_cycle_ch1>

void Motor1_SetSpeed(uint8_t dir,uint8_t speed)
{
    if (dir==FWD)
    {
        PWM_1_disable_output_ch1();
    2686:	0e 94 6e 14 	call	0x28dc	; 0x28dc <PWM_1_disable_output_ch1>
        PORTD &= ~(1<<PORTD3);
    268a:	5b 98       	cbi	0x0b, 3	; 11

        PWM_1_enable_output_ch0();
    268c:	0e 94 5c 14 	call	0x28b8	; 0x28b8 <PWM_1_enable_output_ch0>
        PWM_1_load_duty_cycle_ch0(speed);
    2690:	8c 2f       	mov	r24, r28
    2692:	81 95       	neg	r24
    }
    else
    {
        Motor1_SetSpeed(FWD,abs(rightMotorSpeed));
    }
}
    2694:	df 91       	pop	r29
    2696:	cf 91       	pop	r28
    2698:	1f 91       	pop	r17
    269a:	0f 91       	pop	r16
    {
        PWM_1_disable_output_ch1();
        PORTD &= ~(1<<PORTD3);

        PWM_1_enable_output_ch0();
        PWM_1_load_duty_cycle_ch0(speed);
    269c:	0c 94 74 14 	jmp	0x28e8	; 0x28e8 <PWM_1_load_duty_cycle_ch0>

void Motor0_SetSpeed(uint8_t dir,uint8_t speed)
{
    if (dir==FWD)
    {
        PWM_0_disable_output_ch1();
    26a0:	0e 94 41 14 	call	0x2882	; 0x2882 <PWM_0_disable_output_ch1>
        PORTD &= ~(1<<PORTD5);
    26a4:	5d 98       	cbi	0x0b, 5	; 11

        PWM_0_enable_output_ch0();
    26a6:	0e 94 35 14 	call	0x286a	; 0x286a <PWM_0_enable_output_ch0>
        PWM_0_load_duty_cycle_ch0(speed);
    26aa:	80 2f       	mov	r24, r16
    26ac:	81 95       	neg	r24
    26ae:	0e 94 45 14 	call	0x288a	; 0x288a <PWM_0_load_duty_cycle_ch0>
    26b2:	db cf       	rjmp	.-74     	; 0x266a <_Z15Motors_SetSpeedii+0x20>

000026b4 <_Z8Enc_Initv>:
}


void Enc_Init()
{
    pinMode(A1,INPUT_PULLUP);
    26b4:	62 e0       	ldi	r22, 0x02	; 2
    26b6:	8f e0       	ldi	r24, 0x0F	; 15
    26b8:	0e 94 dd 1b 	call	0x37ba	; 0x37ba <pinMode>
    pinMode(A0,INPUT_PULLUP);
    26bc:	62 e0       	ldi	r22, 0x02	; 2
    26be:	8e e0       	ldi	r24, 0x0E	; 14
    26c0:	0e 94 dd 1b 	call	0x37ba	; 0x37ba <pinMode>
    pinMode(13,INPUT_PULLUP);//pinMode(13,INPUT_PULLUP); //led
    26c4:	62 e0       	ldi	r22, 0x02	; 2
    26c6:	8d e0       	ldi	r24, 0x0D	; 13
    26c8:	0e 94 dd 1b 	call	0x37ba	; 0x37ba <pinMode>
    pinMode(12,INPUT_PULLUP);
    26cc:	62 e0       	ldi	r22, 0x02	; 2
    26ce:	8c e0       	ldi	r24, 0x0C	; 12
    26d0:	0e 94 dd 1b 	call	0x37ba	; 0x37ba <pinMode>

    PCICR = (1 << PCIE0) | // Enable pin change interrupt 0 {PCINT[14:8]}
            (1 << PCIE1) ; // Enable pin change interrupt 1 {PCINT[7:0]}
    26d4:	83 e0       	ldi	r24, 0x03	; 3
    26d6:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>


    PCMSK0 = (1 << PCINT4); // Pin change enable mask 5
    26da:	80 e1       	ldi	r24, 0x10	; 16
    26dc:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <__TEXT_REGION_LENGTH__+0x7e006b>
    PCMSK1 = (1 << PCINT9); // Pin change enable mask 9
    26e0:	82 e0       	ldi	r24, 0x02	; 2
    26e2:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__TEXT_REGION_LENGTH__+0x7e006c>
    26e6:	08 95       	ret

000026e8 <__vector_3>:
uint8_t Mot0_Dir=0;
uint8_t Mot1_Dir=0;


ISR(PCINT0_vect)
{
    26e8:	1f 92       	push	r1
    26ea:	0f 92       	push	r0
    26ec:	0f b6       	in	r0, 0x3f	; 63
    26ee:	0f 92       	push	r0
    26f0:	11 24       	eor	r1, r1
    26f2:	2f 93       	push	r18
    26f4:	3f 93       	push	r19
    26f6:	8f 93       	push	r24
    26f8:	9f 93       	push	r25
    26fa:	af 93       	push	r26
    26fc:	bf 93       	push	r27
    if(bitRead(PINB,5) == bitRead(PINB,4))
    26fe:	23 b1       	in	r18, 0x03	; 3
    2700:	93 b1       	in	r25, 0x03	; 3
    2702:	30 e0       	ldi	r19, 0x00	; 0
    2704:	35 95       	asr	r19
    2706:	27 95       	ror	r18
    2708:	35 95       	asr	r19
    270a:	27 95       	ror	r18
    270c:	35 95       	asr	r19
    270e:	27 95       	ror	r18
    2710:	35 95       	asr	r19
    2712:	27 95       	ror	r18
    2714:	35 95       	asr	r19
    2716:	27 95       	ror	r18
    2718:	89 2f       	mov	r24, r25
    271a:	90 e0       	ldi	r25, 0x00	; 0
    271c:	95 95       	asr	r25
    271e:	87 95       	ror	r24
    2720:	95 95       	asr	r25
    2722:	87 95       	ror	r24
    2724:	95 95       	asr	r25
    2726:	87 95       	ror	r24
    2728:	95 95       	asr	r25
    272a:	87 95       	ror	r24
    272c:	82 27       	eor	r24, r18
    272e:	93 27       	eor	r25, r19
    2730:	80 ff       	sbrs	r24, 0
    2732:	23 c0       	rjmp	.+70     	; 0x277a <__vector_3+0x92>
        Mot1_Enc++;
        Mot1_Dir=((Mot1_Dir<<1) | 1);
    }
    else
    {
        Mot1_Enc--;
    2734:	80 91 1f 05 	lds	r24, 0x051F	; 0x80051f <Mot1_Enc>
    2738:	90 91 20 05 	lds	r25, 0x0520	; 0x800520 <Mot1_Enc+0x1>
    273c:	a0 91 21 05 	lds	r26, 0x0521	; 0x800521 <Mot1_Enc+0x2>
    2740:	b0 91 22 05 	lds	r27, 0x0522	; 0x800522 <Mot1_Enc+0x3>
    2744:	01 97       	sbiw	r24, 0x01	; 1
    2746:	a1 09       	sbc	r26, r1
    2748:	b1 09       	sbc	r27, r1
    274a:	80 93 1f 05 	sts	0x051F, r24	; 0x80051f <Mot1_Enc>
    274e:	90 93 20 05 	sts	0x0520, r25	; 0x800520 <Mot1_Enc+0x1>
    2752:	a0 93 21 05 	sts	0x0521, r26	; 0x800521 <Mot1_Enc+0x2>
    2756:	b0 93 22 05 	sts	0x0522, r27	; 0x800522 <Mot1_Enc+0x3>
        Mot1_Dir=(Mot1_Dir<<1);
    275a:	80 91 1d 05 	lds	r24, 0x051D	; 0x80051d <Mot1_Dir>
    275e:	88 0f       	add	r24, r24
    2760:	80 93 1d 05 	sts	0x051D, r24	; 0x80051d <Mot1_Dir>
    }
}
    2764:	bf 91       	pop	r27
    2766:	af 91       	pop	r26
    2768:	9f 91       	pop	r25
    276a:	8f 91       	pop	r24
    276c:	3f 91       	pop	r19
    276e:	2f 91       	pop	r18
    2770:	0f 90       	pop	r0
    2772:	0f be       	out	0x3f, r0	; 63
    2774:	0f 90       	pop	r0
    2776:	1f 90       	pop	r1
    2778:	18 95       	reti

ISR(PCINT0_vect)
{
    if(bitRead(PINB,5) == bitRead(PINB,4))
    {
        Mot1_Enc++;
    277a:	80 91 1f 05 	lds	r24, 0x051F	; 0x80051f <Mot1_Enc>
    277e:	90 91 20 05 	lds	r25, 0x0520	; 0x800520 <Mot1_Enc+0x1>
    2782:	a0 91 21 05 	lds	r26, 0x0521	; 0x800521 <Mot1_Enc+0x2>
    2786:	b0 91 22 05 	lds	r27, 0x0522	; 0x800522 <Mot1_Enc+0x3>
    278a:	01 96       	adiw	r24, 0x01	; 1
    278c:	a1 1d       	adc	r26, r1
    278e:	b1 1d       	adc	r27, r1
    2790:	80 93 1f 05 	sts	0x051F, r24	; 0x80051f <Mot1_Enc>
    2794:	90 93 20 05 	sts	0x0520, r25	; 0x800520 <Mot1_Enc+0x1>
    2798:	a0 93 21 05 	sts	0x0521, r26	; 0x800521 <Mot1_Enc+0x2>
    279c:	b0 93 22 05 	sts	0x0522, r27	; 0x800522 <Mot1_Enc+0x3>
        Mot1_Dir=((Mot1_Dir<<1) | 1);
    27a0:	80 91 1d 05 	lds	r24, 0x051D	; 0x80051d <Mot1_Dir>
    27a4:	88 0f       	add	r24, r24
    27a6:	81 60       	ori	r24, 0x01	; 1
    27a8:	80 93 1d 05 	sts	0x051D, r24	; 0x80051d <Mot1_Dir>
    27ac:	db cf       	rjmp	.-74     	; 0x2764 <__vector_3+0x7c>

000027ae <__vector_4>:
        Mot1_Dir=(Mot1_Dir<<1);
    }
}

ISR(PCINT1_vect)
{
    27ae:	1f 92       	push	r1
    27b0:	0f 92       	push	r0
    27b2:	0f b6       	in	r0, 0x3f	; 63
    27b4:	0f 92       	push	r0
    27b6:	11 24       	eor	r1, r1
    27b8:	2f 93       	push	r18
    27ba:	8f 93       	push	r24
    27bc:	9f 93       	push	r25
    27be:	af 93       	push	r26
    27c0:	bf 93       	push	r27
    if(bitRead(PINC,1) == bitRead(PINC,0))
    27c2:	86 b1       	in	r24, 0x06	; 6
    27c4:	26 b1       	in	r18, 0x06	; 6
    27c6:	90 e0       	ldi	r25, 0x00	; 0
    27c8:	95 95       	asr	r25
    27ca:	87 95       	ror	r24
    27cc:	82 27       	eor	r24, r18
    27ce:	80 ff       	sbrs	r24, 0
    27d0:	22 c0       	rjmp	.+68     	; 0x2816 <__vector_4+0x68>
        Mot0_Enc++;
        Mot0_Dir=((Mot0_Dir<<1) | 1);
    }
    else
    {
        Mot0_Enc--;
    27d2:	80 91 23 05 	lds	r24, 0x0523	; 0x800523 <Mot0_Enc>
    27d6:	90 91 24 05 	lds	r25, 0x0524	; 0x800524 <Mot0_Enc+0x1>
    27da:	a0 91 25 05 	lds	r26, 0x0525	; 0x800525 <Mot0_Enc+0x2>
    27de:	b0 91 26 05 	lds	r27, 0x0526	; 0x800526 <Mot0_Enc+0x3>
    27e2:	01 97       	sbiw	r24, 0x01	; 1
    27e4:	a1 09       	sbc	r26, r1
    27e6:	b1 09       	sbc	r27, r1
    27e8:	80 93 23 05 	sts	0x0523, r24	; 0x800523 <Mot0_Enc>
    27ec:	90 93 24 05 	sts	0x0524, r25	; 0x800524 <Mot0_Enc+0x1>
    27f0:	a0 93 25 05 	sts	0x0525, r26	; 0x800525 <Mot0_Enc+0x2>
    27f4:	b0 93 26 05 	sts	0x0526, r27	; 0x800526 <Mot0_Enc+0x3>
        Mot0_Dir=(Mot0_Dir<<1);
    27f8:	80 91 1e 05 	lds	r24, 0x051E	; 0x80051e <Mot0_Dir>
    27fc:	88 0f       	add	r24, r24
    27fe:	80 93 1e 05 	sts	0x051E, r24	; 0x80051e <Mot0_Dir>
    }
}
    2802:	bf 91       	pop	r27
    2804:	af 91       	pop	r26
    2806:	9f 91       	pop	r25
    2808:	8f 91       	pop	r24
    280a:	2f 91       	pop	r18
    280c:	0f 90       	pop	r0
    280e:	0f be       	out	0x3f, r0	; 63
    2810:	0f 90       	pop	r0
    2812:	1f 90       	pop	r1
    2814:	18 95       	reti

ISR(PCINT1_vect)
{
    if(bitRead(PINC,1) == bitRead(PINC,0))
    {
        Mot0_Enc++;
    2816:	80 91 23 05 	lds	r24, 0x0523	; 0x800523 <Mot0_Enc>
    281a:	90 91 24 05 	lds	r25, 0x0524	; 0x800524 <Mot0_Enc+0x1>
    281e:	a0 91 25 05 	lds	r26, 0x0525	; 0x800525 <Mot0_Enc+0x2>
    2822:	b0 91 26 05 	lds	r27, 0x0526	; 0x800526 <Mot0_Enc+0x3>
    2826:	01 96       	adiw	r24, 0x01	; 1
    2828:	a1 1d       	adc	r26, r1
    282a:	b1 1d       	adc	r27, r1
    282c:	80 93 23 05 	sts	0x0523, r24	; 0x800523 <Mot0_Enc>
    2830:	90 93 24 05 	sts	0x0524, r25	; 0x800524 <Mot0_Enc+0x1>
    2834:	a0 93 25 05 	sts	0x0525, r26	; 0x800525 <Mot0_Enc+0x2>
    2838:	b0 93 26 05 	sts	0x0526, r27	; 0x800526 <Mot0_Enc+0x3>
        Mot0_Dir=((Mot0_Dir<<1) | 1);
    283c:	80 91 1e 05 	lds	r24, 0x051E	; 0x80051e <Mot0_Dir>
    2840:	88 0f       	add	r24, r24
    2842:	81 60       	ori	r24, 0x01	; 1
    2844:	80 93 1e 05 	sts	0x051E, r24	; 0x80051e <Mot0_Dir>
    2848:	dc cf       	rjmp	.-72     	; 0x2802 <__vector_4+0x54>

0000284a <PWM_0_init>:
    TCCR2A &= ~((1 << COM2B1) | (1 << COM2B0));
}

inline void PWM_1_load_counter(PWM_1_register_t counter_value)
{
    TCNT2 = counter_value;
    284a:	e4 e6       	ldi	r30, 0x64	; 100
    284c:	f0 e0       	ldi	r31, 0x00	; 0
    284e:	80 81       	ld	r24, Z
    2850:	8f 7d       	andi	r24, 0xDF	; 223
    2852:	80 83       	st	Z, r24
    2854:	83 ea       	ldi	r24, 0xA3	; 163
    2856:	84 bd       	out	0x24, r24	; 36
    2858:	82 e0       	ldi	r24, 0x02	; 2
    285a:	85 bd       	out	0x25, r24	; 37
    285c:	81 e0       	ldi	r24, 0x01	; 1
    285e:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
    2862:	17 bc       	out	0x27, r1	; 39
    2864:	18 bc       	out	0x28, r1	; 40
    2866:	80 e0       	ldi	r24, 0x00	; 0
    2868:	08 95       	ret

0000286a <PWM_0_enable_output_ch0>:
    286a:	84 b5       	in	r24, 0x24	; 36
    286c:	80 68       	ori	r24, 0x80	; 128
    286e:	84 bd       	out	0x24, r24	; 36
    2870:	08 95       	ret

00002872 <PWM_0_disable_output_ch0>:
    2872:	84 b5       	in	r24, 0x24	; 36
    2874:	8f 73       	andi	r24, 0x3F	; 63
    2876:	84 bd       	out	0x24, r24	; 36
    2878:	08 95       	ret

0000287a <PWM_0_enable_output_ch1>:
    287a:	84 b5       	in	r24, 0x24	; 36
    287c:	80 62       	ori	r24, 0x20	; 32
    287e:	84 bd       	out	0x24, r24	; 36
    2880:	08 95       	ret

00002882 <PWM_0_disable_output_ch1>:
    2882:	84 b5       	in	r24, 0x24	; 36
    2884:	8f 7c       	andi	r24, 0xCF	; 207
    2886:	84 bd       	out	0x24, r24	; 36
    2888:	08 95       	ret

0000288a <PWM_0_load_duty_cycle_ch0>:
    288a:	87 bd       	out	0x27, r24	; 39
    288c:	08 95       	ret

0000288e <PWM_0_load_duty_cycle_ch1>:
    288e:	88 bd       	out	0x28, r24	; 40
    2890:	08 95       	ret

00002892 <PWM_1_init>:
    2892:	e4 e6       	ldi	r30, 0x64	; 100
    2894:	f0 e0       	ldi	r31, 0x00	; 0
    2896:	80 81       	ld	r24, Z
    2898:	8f 7b       	andi	r24, 0xBF	; 191
    289a:	80 83       	st	Z, r24
    289c:	83 ea       	ldi	r24, 0xA3	; 163
    289e:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    28a2:	82 e0       	ldi	r24, 0x02	; 2
    28a4:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
    28a8:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
    28ac:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
    28b0:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
    28b4:	80 e0       	ldi	r24, 0x00	; 0
    28b6:	08 95       	ret

000028b8 <PWM_1_enable_output_ch0>:
    28b8:	e0 eb       	ldi	r30, 0xB0	; 176
    28ba:	f0 e0       	ldi	r31, 0x00	; 0
    28bc:	80 81       	ld	r24, Z
    28be:	80 68       	ori	r24, 0x80	; 128
    28c0:	80 83       	st	Z, r24
    28c2:	08 95       	ret

000028c4 <PWM_1_disable_output_ch0>:
    28c4:	e0 eb       	ldi	r30, 0xB0	; 176
    28c6:	f0 e0       	ldi	r31, 0x00	; 0
    28c8:	80 81       	ld	r24, Z
    28ca:	8f 73       	andi	r24, 0x3F	; 63
    28cc:	80 83       	st	Z, r24
    28ce:	08 95       	ret

000028d0 <PWM_1_enable_output_ch1>:
    28d0:	e0 eb       	ldi	r30, 0xB0	; 176
    28d2:	f0 e0       	ldi	r31, 0x00	; 0
    28d4:	80 81       	ld	r24, Z
    28d6:	80 62       	ori	r24, 0x20	; 32
    28d8:	80 83       	st	Z, r24
    28da:	08 95       	ret

000028dc <PWM_1_disable_output_ch1>:
    28dc:	e0 eb       	ldi	r30, 0xB0	; 176
    28de:	f0 e0       	ldi	r31, 0x00	; 0
    28e0:	80 81       	ld	r24, Z
    28e2:	8f 7c       	andi	r24, 0xCF	; 207
    28e4:	80 83       	st	Z, r24
    28e6:	08 95       	ret

000028e8 <PWM_1_load_duty_cycle_ch0>:
}

inline void PWM_1_load_duty_cycle_ch0(PWM_1_register_t duty_value)
{
    OCR2A = duty_value;
    28e8:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
    28ec:	08 95       	ret

000028ee <PWM_1_load_duty_cycle_ch1>:
}

inline void PWM_1_load_duty_cycle_ch1(PWM_1_register_t duty_value)
{
    OCR2B = duty_value;
    28ee:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
    28f2:	08 95       	ret

000028f4 <__subsf3>:
    28f4:	50 58       	subi	r21, 0x80	; 128

000028f6 <__addsf3>:
    28f6:	bb 27       	eor	r27, r27
    28f8:	aa 27       	eor	r26, r26
    28fa:	0e 94 92 14 	call	0x2924	; 0x2924 <__addsf3x>
    28fe:	0c 94 a5 16 	jmp	0x2d4a	; 0x2d4a <__fp_round>
    2902:	0e 94 97 16 	call	0x2d2e	; 0x2d2e <__fp_pscA>
    2906:	38 f0       	brcs	.+14     	; 0x2916 <__addsf3+0x20>
    2908:	0e 94 9e 16 	call	0x2d3c	; 0x2d3c <__fp_pscB>
    290c:	20 f0       	brcs	.+8      	; 0x2916 <__addsf3+0x20>
    290e:	39 f4       	brne	.+14     	; 0x291e <__addsf3+0x28>
    2910:	9f 3f       	cpi	r25, 0xFF	; 255
    2912:	19 f4       	brne	.+6      	; 0x291a <__addsf3+0x24>
    2914:	26 f4       	brtc	.+8      	; 0x291e <__addsf3+0x28>
    2916:	0c 94 6d 16 	jmp	0x2cda	; 0x2cda <__fp_nan>
    291a:	0e f4       	brtc	.+2      	; 0x291e <__addsf3+0x28>
    291c:	e0 95       	com	r30
    291e:	e7 fb       	bst	r30, 7
    2920:	0c 94 67 16 	jmp	0x2cce	; 0x2cce <__fp_inf>

00002924 <__addsf3x>:
    2924:	e9 2f       	mov	r30, r25
    2926:	0e 94 b6 16 	call	0x2d6c	; 0x2d6c <__fp_split3>
    292a:	58 f3       	brcs	.-42     	; 0x2902 <__addsf3+0xc>
    292c:	ba 17       	cp	r27, r26
    292e:	62 07       	cpc	r22, r18
    2930:	73 07       	cpc	r23, r19
    2932:	84 07       	cpc	r24, r20
    2934:	95 07       	cpc	r25, r21
    2936:	20 f0       	brcs	.+8      	; 0x2940 <__addsf3x+0x1c>
    2938:	79 f4       	brne	.+30     	; 0x2958 <__addsf3x+0x34>
    293a:	a6 f5       	brtc	.+104    	; 0x29a4 <__addsf3x+0x80>
    293c:	0c 94 d8 16 	jmp	0x2db0	; 0x2db0 <__fp_zero>
    2940:	0e f4       	brtc	.+2      	; 0x2944 <__addsf3x+0x20>
    2942:	e0 95       	com	r30
    2944:	0b 2e       	mov	r0, r27
    2946:	ba 2f       	mov	r27, r26
    2948:	a0 2d       	mov	r26, r0
    294a:	0b 01       	movw	r0, r22
    294c:	b9 01       	movw	r22, r18
    294e:	90 01       	movw	r18, r0
    2950:	0c 01       	movw	r0, r24
    2952:	ca 01       	movw	r24, r20
    2954:	a0 01       	movw	r20, r0
    2956:	11 24       	eor	r1, r1
    2958:	ff 27       	eor	r31, r31
    295a:	59 1b       	sub	r21, r25
    295c:	99 f0       	breq	.+38     	; 0x2984 <__addsf3x+0x60>
    295e:	59 3f       	cpi	r21, 0xF9	; 249
    2960:	50 f4       	brcc	.+20     	; 0x2976 <__addsf3x+0x52>
    2962:	50 3e       	cpi	r21, 0xE0	; 224
    2964:	68 f1       	brcs	.+90     	; 0x29c0 <__addsf3x+0x9c>
    2966:	1a 16       	cp	r1, r26
    2968:	f0 40       	sbci	r31, 0x00	; 0
    296a:	a2 2f       	mov	r26, r18
    296c:	23 2f       	mov	r18, r19
    296e:	34 2f       	mov	r19, r20
    2970:	44 27       	eor	r20, r20
    2972:	58 5f       	subi	r21, 0xF8	; 248
    2974:	f3 cf       	rjmp	.-26     	; 0x295c <__addsf3x+0x38>
    2976:	46 95       	lsr	r20
    2978:	37 95       	ror	r19
    297a:	27 95       	ror	r18
    297c:	a7 95       	ror	r26
    297e:	f0 40       	sbci	r31, 0x00	; 0
    2980:	53 95       	inc	r21
    2982:	c9 f7       	brne	.-14     	; 0x2976 <__addsf3x+0x52>
    2984:	7e f4       	brtc	.+30     	; 0x29a4 <__addsf3x+0x80>
    2986:	1f 16       	cp	r1, r31
    2988:	ba 0b       	sbc	r27, r26
    298a:	62 0b       	sbc	r22, r18
    298c:	73 0b       	sbc	r23, r19
    298e:	84 0b       	sbc	r24, r20
    2990:	ba f0       	brmi	.+46     	; 0x29c0 <__addsf3x+0x9c>
    2992:	91 50       	subi	r25, 0x01	; 1
    2994:	a1 f0       	breq	.+40     	; 0x29be <__addsf3x+0x9a>
    2996:	ff 0f       	add	r31, r31
    2998:	bb 1f       	adc	r27, r27
    299a:	66 1f       	adc	r22, r22
    299c:	77 1f       	adc	r23, r23
    299e:	88 1f       	adc	r24, r24
    29a0:	c2 f7       	brpl	.-16     	; 0x2992 <__addsf3x+0x6e>
    29a2:	0e c0       	rjmp	.+28     	; 0x29c0 <__addsf3x+0x9c>
    29a4:	ba 0f       	add	r27, r26
    29a6:	62 1f       	adc	r22, r18
    29a8:	73 1f       	adc	r23, r19
    29aa:	84 1f       	adc	r24, r20
    29ac:	48 f4       	brcc	.+18     	; 0x29c0 <__addsf3x+0x9c>
    29ae:	87 95       	ror	r24
    29b0:	77 95       	ror	r23
    29b2:	67 95       	ror	r22
    29b4:	b7 95       	ror	r27
    29b6:	f7 95       	ror	r31
    29b8:	9e 3f       	cpi	r25, 0xFE	; 254
    29ba:	08 f0       	brcs	.+2      	; 0x29be <__addsf3x+0x9a>
    29bc:	b0 cf       	rjmp	.-160    	; 0x291e <__addsf3+0x28>
    29be:	93 95       	inc	r25
    29c0:	88 0f       	add	r24, r24
    29c2:	08 f0       	brcs	.+2      	; 0x29c6 <__addsf3x+0xa2>
    29c4:	99 27       	eor	r25, r25
    29c6:	ee 0f       	add	r30, r30
    29c8:	97 95       	ror	r25
    29ca:	87 95       	ror	r24
    29cc:	08 95       	ret
    29ce:	0e 94 97 16 	call	0x2d2e	; 0x2d2e <__fp_pscA>
    29d2:	60 f0       	brcs	.+24     	; 0x29ec <__addsf3x+0xc8>
    29d4:	80 e8       	ldi	r24, 0x80	; 128
    29d6:	91 e0       	ldi	r25, 0x01	; 1
    29d8:	09 f4       	brne	.+2      	; 0x29dc <__addsf3x+0xb8>
    29da:	9e ef       	ldi	r25, 0xFE	; 254
    29dc:	0e 94 9e 16 	call	0x2d3c	; 0x2d3c <__fp_pscB>
    29e0:	28 f0       	brcs	.+10     	; 0x29ec <__addsf3x+0xc8>
    29e2:	40 e8       	ldi	r20, 0x80	; 128
    29e4:	51 e0       	ldi	r21, 0x01	; 1
    29e6:	71 f4       	brne	.+28     	; 0x2a04 <atan2+0x10>
    29e8:	5e ef       	ldi	r21, 0xFE	; 254
    29ea:	0c c0       	rjmp	.+24     	; 0x2a04 <atan2+0x10>
    29ec:	0c 94 6d 16 	jmp	0x2cda	; 0x2cda <__fp_nan>
    29f0:	0c 94 d8 16 	jmp	0x2db0	; 0x2db0 <__fp_zero>

000029f4 <atan2>:
    29f4:	e9 2f       	mov	r30, r25
    29f6:	e0 78       	andi	r30, 0x80	; 128
    29f8:	0e 94 b6 16 	call	0x2d6c	; 0x2d6c <__fp_split3>
    29fc:	40 f3       	brcs	.-48     	; 0x29ce <__addsf3x+0xaa>
    29fe:	09 2e       	mov	r0, r25
    2a00:	05 2a       	or	r0, r21
    2a02:	b1 f3       	breq	.-20     	; 0x29f0 <__addsf3x+0xcc>
    2a04:	26 17       	cp	r18, r22
    2a06:	37 07       	cpc	r19, r23
    2a08:	48 07       	cpc	r20, r24
    2a0a:	59 07       	cpc	r21, r25
    2a0c:	38 f0       	brcs	.+14     	; 0x2a1c <atan2+0x28>
    2a0e:	0e 2e       	mov	r0, r30
    2a10:	07 f8       	bld	r0, 7
    2a12:	e0 25       	eor	r30, r0
    2a14:	69 f0       	breq	.+26     	; 0x2a30 <atan2+0x3c>
    2a16:	e0 25       	eor	r30, r0
    2a18:	e0 64       	ori	r30, 0x40	; 64
    2a1a:	0a c0       	rjmp	.+20     	; 0x2a30 <atan2+0x3c>
    2a1c:	ef 63       	ori	r30, 0x3F	; 63
    2a1e:	07 f8       	bld	r0, 7
    2a20:	00 94       	com	r0
    2a22:	07 fa       	bst	r0, 7
    2a24:	db 01       	movw	r26, r22
    2a26:	b9 01       	movw	r22, r18
    2a28:	9d 01       	movw	r18, r26
    2a2a:	dc 01       	movw	r26, r24
    2a2c:	ca 01       	movw	r24, r20
    2a2e:	ad 01       	movw	r20, r26
    2a30:	ef 93       	push	r30
    2a32:	0e 94 75 15 	call	0x2aea	; 0x2aea <__divsf3_pse>
    2a36:	0e 94 a5 16 	call	0x2d4a	; 0x2d4a <__fp_round>
    2a3a:	0e 94 2a 15 	call	0x2a54	; 0x2a54 <atan>
    2a3e:	5f 91       	pop	r21
    2a40:	55 23       	and	r21, r21
    2a42:	39 f0       	breq	.+14     	; 0x2a52 <atan2+0x5e>
    2a44:	2b ed       	ldi	r18, 0xDB	; 219
    2a46:	3f e0       	ldi	r19, 0x0F	; 15
    2a48:	49 e4       	ldi	r20, 0x49	; 73
    2a4a:	50 fd       	sbrc	r21, 0
    2a4c:	49 ec       	ldi	r20, 0xC9	; 201
    2a4e:	0c 94 7b 14 	jmp	0x28f6	; 0x28f6 <__addsf3>
    2a52:	08 95       	ret

00002a54 <atan>:
    2a54:	df 93       	push	r29
    2a56:	dd 27       	eor	r29, r29
    2a58:	b9 2f       	mov	r27, r25
    2a5a:	bf 77       	andi	r27, 0x7F	; 127
    2a5c:	40 e8       	ldi	r20, 0x80	; 128
    2a5e:	5f e3       	ldi	r21, 0x3F	; 63
    2a60:	16 16       	cp	r1, r22
    2a62:	17 06       	cpc	r1, r23
    2a64:	48 07       	cpc	r20, r24
    2a66:	5b 07       	cpc	r21, r27
    2a68:	18 f4       	brcc	.+6      	; 0x2a70 <atan+0x1c>
    2a6a:	d9 2f       	mov	r29, r25
    2a6c:	0e 94 e4 16 	call	0x2dc8	; 0x2dc8 <inverse>
    2a70:	9f 93       	push	r25
    2a72:	8f 93       	push	r24
    2a74:	7f 93       	push	r23
    2a76:	6f 93       	push	r22
    2a78:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <square>
    2a7c:	e8 e6       	ldi	r30, 0x68	; 104
    2a7e:	f0 e0       	ldi	r31, 0x00	; 0
    2a80:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <__fp_powser>
    2a84:	0e 94 a5 16 	call	0x2d4a	; 0x2d4a <__fp_round>
    2a88:	2f 91       	pop	r18
    2a8a:	3f 91       	pop	r19
    2a8c:	4f 91       	pop	r20
    2a8e:	5f 91       	pop	r21
    2a90:	0e 94 ff 16 	call	0x2dfe	; 0x2dfe <__mulsf3x>
    2a94:	dd 23       	and	r29, r29
    2a96:	51 f0       	breq	.+20     	; 0x2aac <atan+0x58>
    2a98:	90 58       	subi	r25, 0x80	; 128
    2a9a:	a2 ea       	ldi	r26, 0xA2	; 162
    2a9c:	2a ed       	ldi	r18, 0xDA	; 218
    2a9e:	3f e0       	ldi	r19, 0x0F	; 15
    2aa0:	49 ec       	ldi	r20, 0xC9	; 201
    2aa2:	5f e3       	ldi	r21, 0x3F	; 63
    2aa4:	d0 78       	andi	r29, 0x80	; 128
    2aa6:	5d 27       	eor	r21, r29
    2aa8:	0e 94 92 14 	call	0x2924	; 0x2924 <__addsf3x>
    2aac:	df 91       	pop	r29
    2aae:	0c 94 a5 16 	jmp	0x2d4a	; 0x2d4a <__fp_round>

00002ab2 <__cmpsf2>:
    2ab2:	0e 94 43 16 	call	0x2c86	; 0x2c86 <__fp_cmp>
    2ab6:	08 f4       	brcc	.+2      	; 0x2aba <__cmpsf2+0x8>
    2ab8:	81 e0       	ldi	r24, 0x01	; 1
    2aba:	08 95       	ret

00002abc <__divsf3>:
    2abc:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <__divsf3x>
    2ac0:	0c 94 a5 16 	jmp	0x2d4a	; 0x2d4a <__fp_round>
    2ac4:	0e 94 9e 16 	call	0x2d3c	; 0x2d3c <__fp_pscB>
    2ac8:	58 f0       	brcs	.+22     	; 0x2ae0 <__divsf3+0x24>
    2aca:	0e 94 97 16 	call	0x2d2e	; 0x2d2e <__fp_pscA>
    2ace:	40 f0       	brcs	.+16     	; 0x2ae0 <__divsf3+0x24>
    2ad0:	29 f4       	brne	.+10     	; 0x2adc <__divsf3+0x20>
    2ad2:	5f 3f       	cpi	r21, 0xFF	; 255
    2ad4:	29 f0       	breq	.+10     	; 0x2ae0 <__divsf3+0x24>
    2ad6:	0c 94 67 16 	jmp	0x2cce	; 0x2cce <__fp_inf>
    2ada:	51 11       	cpse	r21, r1
    2adc:	0c 94 d9 16 	jmp	0x2db2	; 0x2db2 <__fp_szero>
    2ae0:	0c 94 6d 16 	jmp	0x2cda	; 0x2cda <__fp_nan>

00002ae4 <__divsf3x>:
    2ae4:	0e 94 b6 16 	call	0x2d6c	; 0x2d6c <__fp_split3>
    2ae8:	68 f3       	brcs	.-38     	; 0x2ac4 <__divsf3+0x8>

00002aea <__divsf3_pse>:
    2aea:	99 23       	and	r25, r25
    2aec:	b1 f3       	breq	.-20     	; 0x2ada <__divsf3+0x1e>
    2aee:	55 23       	and	r21, r21
    2af0:	91 f3       	breq	.-28     	; 0x2ad6 <__divsf3+0x1a>
    2af2:	95 1b       	sub	r25, r21
    2af4:	55 0b       	sbc	r21, r21
    2af6:	bb 27       	eor	r27, r27
    2af8:	aa 27       	eor	r26, r26
    2afa:	62 17       	cp	r22, r18
    2afc:	73 07       	cpc	r23, r19
    2afe:	84 07       	cpc	r24, r20
    2b00:	38 f0       	brcs	.+14     	; 0x2b10 <__divsf3_pse+0x26>
    2b02:	9f 5f       	subi	r25, 0xFF	; 255
    2b04:	5f 4f       	sbci	r21, 0xFF	; 255
    2b06:	22 0f       	add	r18, r18
    2b08:	33 1f       	adc	r19, r19
    2b0a:	44 1f       	adc	r20, r20
    2b0c:	aa 1f       	adc	r26, r26
    2b0e:	a9 f3       	breq	.-22     	; 0x2afa <__divsf3_pse+0x10>
    2b10:	35 d0       	rcall	.+106    	; 0x2b7c <__divsf3_pse+0x92>
    2b12:	0e 2e       	mov	r0, r30
    2b14:	3a f0       	brmi	.+14     	; 0x2b24 <__divsf3_pse+0x3a>
    2b16:	e0 e8       	ldi	r30, 0x80	; 128
    2b18:	32 d0       	rcall	.+100    	; 0x2b7e <__divsf3_pse+0x94>
    2b1a:	91 50       	subi	r25, 0x01	; 1
    2b1c:	50 40       	sbci	r21, 0x00	; 0
    2b1e:	e6 95       	lsr	r30
    2b20:	00 1c       	adc	r0, r0
    2b22:	ca f7       	brpl	.-14     	; 0x2b16 <__divsf3_pse+0x2c>
    2b24:	2b d0       	rcall	.+86     	; 0x2b7c <__divsf3_pse+0x92>
    2b26:	fe 2f       	mov	r31, r30
    2b28:	29 d0       	rcall	.+82     	; 0x2b7c <__divsf3_pse+0x92>
    2b2a:	66 0f       	add	r22, r22
    2b2c:	77 1f       	adc	r23, r23
    2b2e:	88 1f       	adc	r24, r24
    2b30:	bb 1f       	adc	r27, r27
    2b32:	26 17       	cp	r18, r22
    2b34:	37 07       	cpc	r19, r23
    2b36:	48 07       	cpc	r20, r24
    2b38:	ab 07       	cpc	r26, r27
    2b3a:	b0 e8       	ldi	r27, 0x80	; 128
    2b3c:	09 f0       	breq	.+2      	; 0x2b40 <__divsf3_pse+0x56>
    2b3e:	bb 0b       	sbc	r27, r27
    2b40:	80 2d       	mov	r24, r0
    2b42:	bf 01       	movw	r22, r30
    2b44:	ff 27       	eor	r31, r31
    2b46:	93 58       	subi	r25, 0x83	; 131
    2b48:	5f 4f       	sbci	r21, 0xFF	; 255
    2b4a:	3a f0       	brmi	.+14     	; 0x2b5a <__divsf3_pse+0x70>
    2b4c:	9e 3f       	cpi	r25, 0xFE	; 254
    2b4e:	51 05       	cpc	r21, r1
    2b50:	78 f0       	brcs	.+30     	; 0x2b70 <__divsf3_pse+0x86>
    2b52:	0c 94 67 16 	jmp	0x2cce	; 0x2cce <__fp_inf>
    2b56:	0c 94 d9 16 	jmp	0x2db2	; 0x2db2 <__fp_szero>
    2b5a:	5f 3f       	cpi	r21, 0xFF	; 255
    2b5c:	e4 f3       	brlt	.-8      	; 0x2b56 <__divsf3_pse+0x6c>
    2b5e:	98 3e       	cpi	r25, 0xE8	; 232
    2b60:	d4 f3       	brlt	.-12     	; 0x2b56 <__divsf3_pse+0x6c>
    2b62:	86 95       	lsr	r24
    2b64:	77 95       	ror	r23
    2b66:	67 95       	ror	r22
    2b68:	b7 95       	ror	r27
    2b6a:	f7 95       	ror	r31
    2b6c:	9f 5f       	subi	r25, 0xFF	; 255
    2b6e:	c9 f7       	brne	.-14     	; 0x2b62 <__divsf3_pse+0x78>
    2b70:	88 0f       	add	r24, r24
    2b72:	91 1d       	adc	r25, r1
    2b74:	96 95       	lsr	r25
    2b76:	87 95       	ror	r24
    2b78:	97 f9       	bld	r25, 7
    2b7a:	08 95       	ret
    2b7c:	e1 e0       	ldi	r30, 0x01	; 1
    2b7e:	66 0f       	add	r22, r22
    2b80:	77 1f       	adc	r23, r23
    2b82:	88 1f       	adc	r24, r24
    2b84:	bb 1f       	adc	r27, r27
    2b86:	62 17       	cp	r22, r18
    2b88:	73 07       	cpc	r23, r19
    2b8a:	84 07       	cpc	r24, r20
    2b8c:	ba 07       	cpc	r27, r26
    2b8e:	20 f0       	brcs	.+8      	; 0x2b98 <__divsf3_pse+0xae>
    2b90:	62 1b       	sub	r22, r18
    2b92:	73 0b       	sbc	r23, r19
    2b94:	84 0b       	sbc	r24, r20
    2b96:	ba 0b       	sbc	r27, r26
    2b98:	ee 1f       	adc	r30, r30
    2b9a:	88 f7       	brcc	.-30     	; 0x2b7e <__divsf3_pse+0x94>
    2b9c:	e0 95       	com	r30
    2b9e:	08 95       	ret

00002ba0 <__fixsfsi>:
    2ba0:	0e 94 d7 15 	call	0x2bae	; 0x2bae <__fixunssfsi>
    2ba4:	68 94       	set
    2ba6:	b1 11       	cpse	r27, r1
    2ba8:	0c 94 d9 16 	jmp	0x2db2	; 0x2db2 <__fp_szero>
    2bac:	08 95       	ret

00002bae <__fixunssfsi>:
    2bae:	0e 94 be 16 	call	0x2d7c	; 0x2d7c <__fp_splitA>
    2bb2:	88 f0       	brcs	.+34     	; 0x2bd6 <__fixunssfsi+0x28>
    2bb4:	9f 57       	subi	r25, 0x7F	; 127
    2bb6:	98 f0       	brcs	.+38     	; 0x2bde <__fixunssfsi+0x30>
    2bb8:	b9 2f       	mov	r27, r25
    2bba:	99 27       	eor	r25, r25
    2bbc:	b7 51       	subi	r27, 0x17	; 23
    2bbe:	b0 f0       	brcs	.+44     	; 0x2bec <__fixunssfsi+0x3e>
    2bc0:	e1 f0       	breq	.+56     	; 0x2bfa <__fixunssfsi+0x4c>
    2bc2:	66 0f       	add	r22, r22
    2bc4:	77 1f       	adc	r23, r23
    2bc6:	88 1f       	adc	r24, r24
    2bc8:	99 1f       	adc	r25, r25
    2bca:	1a f0       	brmi	.+6      	; 0x2bd2 <__fixunssfsi+0x24>
    2bcc:	ba 95       	dec	r27
    2bce:	c9 f7       	brne	.-14     	; 0x2bc2 <__fixunssfsi+0x14>
    2bd0:	14 c0       	rjmp	.+40     	; 0x2bfa <__fixunssfsi+0x4c>
    2bd2:	b1 30       	cpi	r27, 0x01	; 1
    2bd4:	91 f0       	breq	.+36     	; 0x2bfa <__fixunssfsi+0x4c>
    2bd6:	0e 94 d8 16 	call	0x2db0	; 0x2db0 <__fp_zero>
    2bda:	b1 e0       	ldi	r27, 0x01	; 1
    2bdc:	08 95       	ret
    2bde:	0c 94 d8 16 	jmp	0x2db0	; 0x2db0 <__fp_zero>
    2be2:	67 2f       	mov	r22, r23
    2be4:	78 2f       	mov	r23, r24
    2be6:	88 27       	eor	r24, r24
    2be8:	b8 5f       	subi	r27, 0xF8	; 248
    2bea:	39 f0       	breq	.+14     	; 0x2bfa <__fixunssfsi+0x4c>
    2bec:	b9 3f       	cpi	r27, 0xF9	; 249
    2bee:	cc f3       	brlt	.-14     	; 0x2be2 <__fixunssfsi+0x34>
    2bf0:	86 95       	lsr	r24
    2bf2:	77 95       	ror	r23
    2bf4:	67 95       	ror	r22
    2bf6:	b3 95       	inc	r27
    2bf8:	d9 f7       	brne	.-10     	; 0x2bf0 <__fixunssfsi+0x42>
    2bfa:	3e f4       	brtc	.+14     	; 0x2c0a <__fixunssfsi+0x5c>
    2bfc:	90 95       	com	r25
    2bfe:	80 95       	com	r24
    2c00:	70 95       	com	r23
    2c02:	61 95       	neg	r22
    2c04:	7f 4f       	sbci	r23, 0xFF	; 255
    2c06:	8f 4f       	sbci	r24, 0xFF	; 255
    2c08:	9f 4f       	sbci	r25, 0xFF	; 255
    2c0a:	08 95       	ret

00002c0c <__floatunsisf>:
    2c0c:	e8 94       	clt
    2c0e:	09 c0       	rjmp	.+18     	; 0x2c22 <__floatsisf+0x12>

00002c10 <__floatsisf>:
    2c10:	97 fb       	bst	r25, 7
    2c12:	3e f4       	brtc	.+14     	; 0x2c22 <__floatsisf+0x12>
    2c14:	90 95       	com	r25
    2c16:	80 95       	com	r24
    2c18:	70 95       	com	r23
    2c1a:	61 95       	neg	r22
    2c1c:	7f 4f       	sbci	r23, 0xFF	; 255
    2c1e:	8f 4f       	sbci	r24, 0xFF	; 255
    2c20:	9f 4f       	sbci	r25, 0xFF	; 255
    2c22:	99 23       	and	r25, r25
    2c24:	a9 f0       	breq	.+42     	; 0x2c50 <__floatsisf+0x40>
    2c26:	f9 2f       	mov	r31, r25
    2c28:	96 e9       	ldi	r25, 0x96	; 150
    2c2a:	bb 27       	eor	r27, r27
    2c2c:	93 95       	inc	r25
    2c2e:	f6 95       	lsr	r31
    2c30:	87 95       	ror	r24
    2c32:	77 95       	ror	r23
    2c34:	67 95       	ror	r22
    2c36:	b7 95       	ror	r27
    2c38:	f1 11       	cpse	r31, r1
    2c3a:	f8 cf       	rjmp	.-16     	; 0x2c2c <__floatsisf+0x1c>
    2c3c:	fa f4       	brpl	.+62     	; 0x2c7c <__floatsisf+0x6c>
    2c3e:	bb 0f       	add	r27, r27
    2c40:	11 f4       	brne	.+4      	; 0x2c46 <__floatsisf+0x36>
    2c42:	60 ff       	sbrs	r22, 0
    2c44:	1b c0       	rjmp	.+54     	; 0x2c7c <__floatsisf+0x6c>
    2c46:	6f 5f       	subi	r22, 0xFF	; 255
    2c48:	7f 4f       	sbci	r23, 0xFF	; 255
    2c4a:	8f 4f       	sbci	r24, 0xFF	; 255
    2c4c:	9f 4f       	sbci	r25, 0xFF	; 255
    2c4e:	16 c0       	rjmp	.+44     	; 0x2c7c <__floatsisf+0x6c>
    2c50:	88 23       	and	r24, r24
    2c52:	11 f0       	breq	.+4      	; 0x2c58 <__floatsisf+0x48>
    2c54:	96 e9       	ldi	r25, 0x96	; 150
    2c56:	11 c0       	rjmp	.+34     	; 0x2c7a <__floatsisf+0x6a>
    2c58:	77 23       	and	r23, r23
    2c5a:	21 f0       	breq	.+8      	; 0x2c64 <__floatsisf+0x54>
    2c5c:	9e e8       	ldi	r25, 0x8E	; 142
    2c5e:	87 2f       	mov	r24, r23
    2c60:	76 2f       	mov	r23, r22
    2c62:	05 c0       	rjmp	.+10     	; 0x2c6e <__floatsisf+0x5e>
    2c64:	66 23       	and	r22, r22
    2c66:	71 f0       	breq	.+28     	; 0x2c84 <__floatsisf+0x74>
    2c68:	96 e8       	ldi	r25, 0x86	; 134
    2c6a:	86 2f       	mov	r24, r22
    2c6c:	70 e0       	ldi	r23, 0x00	; 0
    2c6e:	60 e0       	ldi	r22, 0x00	; 0
    2c70:	2a f0       	brmi	.+10     	; 0x2c7c <__floatsisf+0x6c>
    2c72:	9a 95       	dec	r25
    2c74:	66 0f       	add	r22, r22
    2c76:	77 1f       	adc	r23, r23
    2c78:	88 1f       	adc	r24, r24
    2c7a:	da f7       	brpl	.-10     	; 0x2c72 <__floatsisf+0x62>
    2c7c:	88 0f       	add	r24, r24
    2c7e:	96 95       	lsr	r25
    2c80:	87 95       	ror	r24
    2c82:	97 f9       	bld	r25, 7
    2c84:	08 95       	ret

00002c86 <__fp_cmp>:
    2c86:	99 0f       	add	r25, r25
    2c88:	00 08       	sbc	r0, r0
    2c8a:	55 0f       	add	r21, r21
    2c8c:	aa 0b       	sbc	r26, r26
    2c8e:	e0 e8       	ldi	r30, 0x80	; 128
    2c90:	fe ef       	ldi	r31, 0xFE	; 254
    2c92:	16 16       	cp	r1, r22
    2c94:	17 06       	cpc	r1, r23
    2c96:	e8 07       	cpc	r30, r24
    2c98:	f9 07       	cpc	r31, r25
    2c9a:	c0 f0       	brcs	.+48     	; 0x2ccc <__fp_cmp+0x46>
    2c9c:	12 16       	cp	r1, r18
    2c9e:	13 06       	cpc	r1, r19
    2ca0:	e4 07       	cpc	r30, r20
    2ca2:	f5 07       	cpc	r31, r21
    2ca4:	98 f0       	brcs	.+38     	; 0x2ccc <__fp_cmp+0x46>
    2ca6:	62 1b       	sub	r22, r18
    2ca8:	73 0b       	sbc	r23, r19
    2caa:	84 0b       	sbc	r24, r20
    2cac:	95 0b       	sbc	r25, r21
    2cae:	39 f4       	brne	.+14     	; 0x2cbe <__fp_cmp+0x38>
    2cb0:	0a 26       	eor	r0, r26
    2cb2:	61 f0       	breq	.+24     	; 0x2ccc <__fp_cmp+0x46>
    2cb4:	23 2b       	or	r18, r19
    2cb6:	24 2b       	or	r18, r20
    2cb8:	25 2b       	or	r18, r21
    2cba:	21 f4       	brne	.+8      	; 0x2cc4 <__fp_cmp+0x3e>
    2cbc:	08 95       	ret
    2cbe:	0a 26       	eor	r0, r26
    2cc0:	09 f4       	brne	.+2      	; 0x2cc4 <__fp_cmp+0x3e>
    2cc2:	a1 40       	sbci	r26, 0x01	; 1
    2cc4:	a6 95       	lsr	r26
    2cc6:	8f ef       	ldi	r24, 0xFF	; 255
    2cc8:	81 1d       	adc	r24, r1
    2cca:	81 1d       	adc	r24, r1
    2ccc:	08 95       	ret

00002cce <__fp_inf>:
    2cce:	97 f9       	bld	r25, 7
    2cd0:	9f 67       	ori	r25, 0x7F	; 127
    2cd2:	80 e8       	ldi	r24, 0x80	; 128
    2cd4:	70 e0       	ldi	r23, 0x00	; 0
    2cd6:	60 e0       	ldi	r22, 0x00	; 0
    2cd8:	08 95       	ret

00002cda <__fp_nan>:
    2cda:	9f ef       	ldi	r25, 0xFF	; 255
    2cdc:	80 ec       	ldi	r24, 0xC0	; 192
    2cde:	08 95       	ret

00002ce0 <__fp_powser>:
    2ce0:	df 93       	push	r29
    2ce2:	cf 93       	push	r28
    2ce4:	1f 93       	push	r17
    2ce6:	0f 93       	push	r16
    2ce8:	ff 92       	push	r15
    2cea:	ef 92       	push	r14
    2cec:	df 92       	push	r13
    2cee:	7b 01       	movw	r14, r22
    2cf0:	8c 01       	movw	r16, r24
    2cf2:	68 94       	set
    2cf4:	06 c0       	rjmp	.+12     	; 0x2d02 <__fp_powser+0x22>
    2cf6:	da 2e       	mov	r13, r26
    2cf8:	ef 01       	movw	r28, r30
    2cfa:	0e 94 ff 16 	call	0x2dfe	; 0x2dfe <__mulsf3x>
    2cfe:	fe 01       	movw	r30, r28
    2d00:	e8 94       	clt
    2d02:	a5 91       	lpm	r26, Z+
    2d04:	25 91       	lpm	r18, Z+
    2d06:	35 91       	lpm	r19, Z+
    2d08:	45 91       	lpm	r20, Z+
    2d0a:	55 91       	lpm	r21, Z+
    2d0c:	a6 f3       	brts	.-24     	; 0x2cf6 <__fp_powser+0x16>
    2d0e:	ef 01       	movw	r28, r30
    2d10:	0e 94 92 14 	call	0x2924	; 0x2924 <__addsf3x>
    2d14:	fe 01       	movw	r30, r28
    2d16:	97 01       	movw	r18, r14
    2d18:	a8 01       	movw	r20, r16
    2d1a:	da 94       	dec	r13
    2d1c:	69 f7       	brne	.-38     	; 0x2cf8 <__fp_powser+0x18>
    2d1e:	df 90       	pop	r13
    2d20:	ef 90       	pop	r14
    2d22:	ff 90       	pop	r15
    2d24:	0f 91       	pop	r16
    2d26:	1f 91       	pop	r17
    2d28:	cf 91       	pop	r28
    2d2a:	df 91       	pop	r29
    2d2c:	08 95       	ret

00002d2e <__fp_pscA>:
    2d2e:	00 24       	eor	r0, r0
    2d30:	0a 94       	dec	r0
    2d32:	16 16       	cp	r1, r22
    2d34:	17 06       	cpc	r1, r23
    2d36:	18 06       	cpc	r1, r24
    2d38:	09 06       	cpc	r0, r25
    2d3a:	08 95       	ret

00002d3c <__fp_pscB>:
    2d3c:	00 24       	eor	r0, r0
    2d3e:	0a 94       	dec	r0
    2d40:	12 16       	cp	r1, r18
    2d42:	13 06       	cpc	r1, r19
    2d44:	14 06       	cpc	r1, r20
    2d46:	05 06       	cpc	r0, r21
    2d48:	08 95       	ret

00002d4a <__fp_round>:
    2d4a:	09 2e       	mov	r0, r25
    2d4c:	03 94       	inc	r0
    2d4e:	00 0c       	add	r0, r0
    2d50:	11 f4       	brne	.+4      	; 0x2d56 <__fp_round+0xc>
    2d52:	88 23       	and	r24, r24
    2d54:	52 f0       	brmi	.+20     	; 0x2d6a <__fp_round+0x20>
    2d56:	bb 0f       	add	r27, r27
    2d58:	40 f4       	brcc	.+16     	; 0x2d6a <__fp_round+0x20>
    2d5a:	bf 2b       	or	r27, r31
    2d5c:	11 f4       	brne	.+4      	; 0x2d62 <__fp_round+0x18>
    2d5e:	60 ff       	sbrs	r22, 0
    2d60:	04 c0       	rjmp	.+8      	; 0x2d6a <__fp_round+0x20>
    2d62:	6f 5f       	subi	r22, 0xFF	; 255
    2d64:	7f 4f       	sbci	r23, 0xFF	; 255
    2d66:	8f 4f       	sbci	r24, 0xFF	; 255
    2d68:	9f 4f       	sbci	r25, 0xFF	; 255
    2d6a:	08 95       	ret

00002d6c <__fp_split3>:
    2d6c:	57 fd       	sbrc	r21, 7
    2d6e:	90 58       	subi	r25, 0x80	; 128
    2d70:	44 0f       	add	r20, r20
    2d72:	55 1f       	adc	r21, r21
    2d74:	59 f0       	breq	.+22     	; 0x2d8c <__fp_splitA+0x10>
    2d76:	5f 3f       	cpi	r21, 0xFF	; 255
    2d78:	71 f0       	breq	.+28     	; 0x2d96 <__fp_splitA+0x1a>
    2d7a:	47 95       	ror	r20

00002d7c <__fp_splitA>:
    2d7c:	88 0f       	add	r24, r24
    2d7e:	97 fb       	bst	r25, 7
    2d80:	99 1f       	adc	r25, r25
    2d82:	61 f0       	breq	.+24     	; 0x2d9c <__fp_splitA+0x20>
    2d84:	9f 3f       	cpi	r25, 0xFF	; 255
    2d86:	79 f0       	breq	.+30     	; 0x2da6 <__fp_splitA+0x2a>
    2d88:	87 95       	ror	r24
    2d8a:	08 95       	ret
    2d8c:	12 16       	cp	r1, r18
    2d8e:	13 06       	cpc	r1, r19
    2d90:	14 06       	cpc	r1, r20
    2d92:	55 1f       	adc	r21, r21
    2d94:	f2 cf       	rjmp	.-28     	; 0x2d7a <__fp_split3+0xe>
    2d96:	46 95       	lsr	r20
    2d98:	f1 df       	rcall	.-30     	; 0x2d7c <__fp_splitA>
    2d9a:	08 c0       	rjmp	.+16     	; 0x2dac <__fp_splitA+0x30>
    2d9c:	16 16       	cp	r1, r22
    2d9e:	17 06       	cpc	r1, r23
    2da0:	18 06       	cpc	r1, r24
    2da2:	99 1f       	adc	r25, r25
    2da4:	f1 cf       	rjmp	.-30     	; 0x2d88 <__fp_splitA+0xc>
    2da6:	86 95       	lsr	r24
    2da8:	71 05       	cpc	r23, r1
    2daa:	61 05       	cpc	r22, r1
    2dac:	08 94       	sec
    2dae:	08 95       	ret

00002db0 <__fp_zero>:
    2db0:	e8 94       	clt

00002db2 <__fp_szero>:
    2db2:	bb 27       	eor	r27, r27
    2db4:	66 27       	eor	r22, r22
    2db6:	77 27       	eor	r23, r23
    2db8:	cb 01       	movw	r24, r22
    2dba:	97 f9       	bld	r25, 7
    2dbc:	08 95       	ret

00002dbe <__gesf2>:
    2dbe:	0e 94 43 16 	call	0x2c86	; 0x2c86 <__fp_cmp>
    2dc2:	08 f4       	brcc	.+2      	; 0x2dc6 <__gesf2+0x8>
    2dc4:	8f ef       	ldi	r24, 0xFF	; 255
    2dc6:	08 95       	ret

00002dc8 <inverse>:
    2dc8:	9b 01       	movw	r18, r22
    2dca:	ac 01       	movw	r20, r24
    2dcc:	60 e0       	ldi	r22, 0x00	; 0
    2dce:	70 e0       	ldi	r23, 0x00	; 0
    2dd0:	80 e8       	ldi	r24, 0x80	; 128
    2dd2:	9f e3       	ldi	r25, 0x3F	; 63
    2dd4:	0c 94 5e 15 	jmp	0x2abc	; 0x2abc <__divsf3>

00002dd8 <__mulsf3>:
    2dd8:	0e 94 ff 16 	call	0x2dfe	; 0x2dfe <__mulsf3x>
    2ddc:	0c 94 a5 16 	jmp	0x2d4a	; 0x2d4a <__fp_round>
    2de0:	0e 94 97 16 	call	0x2d2e	; 0x2d2e <__fp_pscA>
    2de4:	38 f0       	brcs	.+14     	; 0x2df4 <__mulsf3+0x1c>
    2de6:	0e 94 9e 16 	call	0x2d3c	; 0x2d3c <__fp_pscB>
    2dea:	20 f0       	brcs	.+8      	; 0x2df4 <__mulsf3+0x1c>
    2dec:	95 23       	and	r25, r21
    2dee:	11 f0       	breq	.+4      	; 0x2df4 <__mulsf3+0x1c>
    2df0:	0c 94 67 16 	jmp	0x2cce	; 0x2cce <__fp_inf>
    2df4:	0c 94 6d 16 	jmp	0x2cda	; 0x2cda <__fp_nan>
    2df8:	11 24       	eor	r1, r1
    2dfa:	0c 94 d9 16 	jmp	0x2db2	; 0x2db2 <__fp_szero>

00002dfe <__mulsf3x>:
    2dfe:	0e 94 b6 16 	call	0x2d6c	; 0x2d6c <__fp_split3>
    2e02:	70 f3       	brcs	.-36     	; 0x2de0 <__mulsf3+0x8>

00002e04 <__mulsf3_pse>:
    2e04:	95 9f       	mul	r25, r21
    2e06:	c1 f3       	breq	.-16     	; 0x2df8 <__mulsf3+0x20>
    2e08:	95 0f       	add	r25, r21
    2e0a:	50 e0       	ldi	r21, 0x00	; 0
    2e0c:	55 1f       	adc	r21, r21
    2e0e:	62 9f       	mul	r22, r18
    2e10:	f0 01       	movw	r30, r0
    2e12:	72 9f       	mul	r23, r18
    2e14:	bb 27       	eor	r27, r27
    2e16:	f0 0d       	add	r31, r0
    2e18:	b1 1d       	adc	r27, r1
    2e1a:	63 9f       	mul	r22, r19
    2e1c:	aa 27       	eor	r26, r26
    2e1e:	f0 0d       	add	r31, r0
    2e20:	b1 1d       	adc	r27, r1
    2e22:	aa 1f       	adc	r26, r26
    2e24:	64 9f       	mul	r22, r20
    2e26:	66 27       	eor	r22, r22
    2e28:	b0 0d       	add	r27, r0
    2e2a:	a1 1d       	adc	r26, r1
    2e2c:	66 1f       	adc	r22, r22
    2e2e:	82 9f       	mul	r24, r18
    2e30:	22 27       	eor	r18, r18
    2e32:	b0 0d       	add	r27, r0
    2e34:	a1 1d       	adc	r26, r1
    2e36:	62 1f       	adc	r22, r18
    2e38:	73 9f       	mul	r23, r19
    2e3a:	b0 0d       	add	r27, r0
    2e3c:	a1 1d       	adc	r26, r1
    2e3e:	62 1f       	adc	r22, r18
    2e40:	83 9f       	mul	r24, r19
    2e42:	a0 0d       	add	r26, r0
    2e44:	61 1d       	adc	r22, r1
    2e46:	22 1f       	adc	r18, r18
    2e48:	74 9f       	mul	r23, r20
    2e4a:	33 27       	eor	r19, r19
    2e4c:	a0 0d       	add	r26, r0
    2e4e:	61 1d       	adc	r22, r1
    2e50:	23 1f       	adc	r18, r19
    2e52:	84 9f       	mul	r24, r20
    2e54:	60 0d       	add	r22, r0
    2e56:	21 1d       	adc	r18, r1
    2e58:	82 2f       	mov	r24, r18
    2e5a:	76 2f       	mov	r23, r22
    2e5c:	6a 2f       	mov	r22, r26
    2e5e:	11 24       	eor	r1, r1
    2e60:	9f 57       	subi	r25, 0x7F	; 127
    2e62:	50 40       	sbci	r21, 0x00	; 0
    2e64:	9a f0       	brmi	.+38     	; 0x2e8c <__mulsf3_pse+0x88>
    2e66:	f1 f0       	breq	.+60     	; 0x2ea4 <__mulsf3_pse+0xa0>
    2e68:	88 23       	and	r24, r24
    2e6a:	4a f0       	brmi	.+18     	; 0x2e7e <__mulsf3_pse+0x7a>
    2e6c:	ee 0f       	add	r30, r30
    2e6e:	ff 1f       	adc	r31, r31
    2e70:	bb 1f       	adc	r27, r27
    2e72:	66 1f       	adc	r22, r22
    2e74:	77 1f       	adc	r23, r23
    2e76:	88 1f       	adc	r24, r24
    2e78:	91 50       	subi	r25, 0x01	; 1
    2e7a:	50 40       	sbci	r21, 0x00	; 0
    2e7c:	a9 f7       	brne	.-22     	; 0x2e68 <__mulsf3_pse+0x64>
    2e7e:	9e 3f       	cpi	r25, 0xFE	; 254
    2e80:	51 05       	cpc	r21, r1
    2e82:	80 f0       	brcs	.+32     	; 0x2ea4 <__mulsf3_pse+0xa0>
    2e84:	0c 94 67 16 	jmp	0x2cce	; 0x2cce <__fp_inf>
    2e88:	0c 94 d9 16 	jmp	0x2db2	; 0x2db2 <__fp_szero>
    2e8c:	5f 3f       	cpi	r21, 0xFF	; 255
    2e8e:	e4 f3       	brlt	.-8      	; 0x2e88 <__mulsf3_pse+0x84>
    2e90:	98 3e       	cpi	r25, 0xE8	; 232
    2e92:	d4 f3       	brlt	.-12     	; 0x2e88 <__mulsf3_pse+0x84>
    2e94:	86 95       	lsr	r24
    2e96:	77 95       	ror	r23
    2e98:	67 95       	ror	r22
    2e9a:	b7 95       	ror	r27
    2e9c:	f7 95       	ror	r31
    2e9e:	e7 95       	ror	r30
    2ea0:	9f 5f       	subi	r25, 0xFF	; 255
    2ea2:	c1 f7       	brne	.-16     	; 0x2e94 <__mulsf3_pse+0x90>
    2ea4:	fe 2b       	or	r31, r30
    2ea6:	88 0f       	add	r24, r24
    2ea8:	91 1d       	adc	r25, r1
    2eaa:	96 95       	lsr	r25
    2eac:	87 95       	ror	r24
    2eae:	97 f9       	bld	r25, 7
    2eb0:	08 95       	ret

00002eb2 <square>:
    2eb2:	9b 01       	movw	r18, r22
    2eb4:	ac 01       	movw	r20, r24
    2eb6:	0c 94 ec 16 	jmp	0x2dd8	; 0x2dd8 <__mulsf3>

00002eba <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    2eba:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    2ebc:	91 8d       	ldd	r25, Z+25	; 0x19
    2ebe:	22 8d       	ldd	r18, Z+26	; 0x1a
    2ec0:	89 2f       	mov	r24, r25
    2ec2:	90 e0       	ldi	r25, 0x00	; 0
    2ec4:	80 5c       	subi	r24, 0xC0	; 192
    2ec6:	9f 4f       	sbci	r25, 0xFF	; 255
    2ec8:	82 1b       	sub	r24, r18
    2eca:	91 09       	sbc	r25, r1
}
    2ecc:	8f 73       	andi	r24, 0x3F	; 63
    2ece:	99 27       	eor	r25, r25
    2ed0:	08 95       	ret

00002ed2 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    2ed2:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    2ed4:	91 8d       	ldd	r25, Z+25	; 0x19
    2ed6:	82 8d       	ldd	r24, Z+26	; 0x1a
    2ed8:	98 17       	cp	r25, r24
    2eda:	31 f0       	breq	.+12     	; 0x2ee8 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    2edc:	82 8d       	ldd	r24, Z+26	; 0x1a
    2ede:	e8 0f       	add	r30, r24
    2ee0:	f1 1d       	adc	r31, r1
    2ee2:	85 8d       	ldd	r24, Z+29	; 0x1d
    2ee4:	90 e0       	ldi	r25, 0x00	; 0
    2ee6:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    2ee8:	8f ef       	ldi	r24, 0xFF	; 255
    2eea:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    2eec:	08 95       	ret

00002eee <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    2eee:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    2ef0:	91 8d       	ldd	r25, Z+25	; 0x19
    2ef2:	82 8d       	ldd	r24, Z+26	; 0x1a
    2ef4:	98 17       	cp	r25, r24
    2ef6:	61 f0       	breq	.+24     	; 0x2f10 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    2ef8:	82 8d       	ldd	r24, Z+26	; 0x1a
    2efa:	df 01       	movw	r26, r30
    2efc:	a8 0f       	add	r26, r24
    2efe:	b1 1d       	adc	r27, r1
    2f00:	5d 96       	adiw	r26, 0x1d	; 29
    2f02:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    2f04:	92 8d       	ldd	r25, Z+26	; 0x1a
    2f06:	9f 5f       	subi	r25, 0xFF	; 255
    2f08:	9f 73       	andi	r25, 0x3F	; 63
    2f0a:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    2f0c:	90 e0       	ldi	r25, 0x00	; 0
    2f0e:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    2f10:	8f ef       	ldi	r24, 0xFF	; 255
    2f12:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    2f14:	08 95       	ret

00002f16 <_ZN14HardwareSerial17availableForWriteEv>:
{
#if (SERIAL_TX_BUFFER_SIZE>256)
  uint8_t oldSREG = SREG;
  cli();
#endif
  tx_buffer_index_t head = _tx_buffer_head;
    2f16:	fc 01       	movw	r30, r24
    2f18:	53 8d       	ldd	r21, Z+27	; 0x1b
  tx_buffer_index_t tail = _tx_buffer_tail;
    2f1a:	44 8d       	ldd	r20, Z+28	; 0x1c
    2f1c:	25 2f       	mov	r18, r21
    2f1e:	30 e0       	ldi	r19, 0x00	; 0
    2f20:	84 2f       	mov	r24, r20
    2f22:	90 e0       	ldi	r25, 0x00	; 0
#if (SERIAL_TX_BUFFER_SIZE>256)
  SREG = oldSREG;
#endif
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    2f24:	82 1b       	sub	r24, r18
    2f26:	93 0b       	sbc	r25, r19
    2f28:	54 17       	cp	r21, r20
    2f2a:	10 f0       	brcs	.+4      	; 0x2f30 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
    2f2c:	cf 96       	adiw	r24, 0x3f	; 63
    2f2e:	08 95       	ret
  return tail - head - 1;
    2f30:	01 97       	sbiw	r24, 0x01	; 1
}
    2f32:	08 95       	ret

00002f34 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    2f34:	8f ee       	ldi	r24, 0xEF	; 239
    2f36:	98 e1       	ldi	r25, 0x18	; 24
    2f38:	89 2b       	or	r24, r25
    2f3a:	49 f0       	breq	.+18     	; 0x2f4e <_Z14serialEventRunv+0x1a>
    2f3c:	80 e0       	ldi	r24, 0x00	; 0
    2f3e:	90 e0       	ldi	r25, 0x00	; 0
    2f40:	89 2b       	or	r24, r25
    2f42:	29 f0       	breq	.+10     	; 0x2f4e <_Z14serialEventRunv+0x1a>
    2f44:	0e 94 ef 18 	call	0x31de	; 0x31de <_Z17Serial0_availablev>
    2f48:	81 11       	cpse	r24, r1
    2f4a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    2f4e:	08 95       	ret

00002f50 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    2f50:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    2f52:	84 8d       	ldd	r24, Z+28	; 0x1c
    2f54:	df 01       	movw	r26, r30
    2f56:	a8 0f       	add	r26, r24
    2f58:	b1 1d       	adc	r27, r1
    2f5a:	a3 5a       	subi	r26, 0xA3	; 163
    2f5c:	bf 4f       	sbci	r27, 0xFF	; 255
    2f5e:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    2f60:	84 8d       	ldd	r24, Z+28	; 0x1c
    2f62:	90 e0       	ldi	r25, 0x00	; 0
    2f64:	01 96       	adiw	r24, 0x01	; 1
    2f66:	8f 73       	andi	r24, 0x3F	; 63
    2f68:	99 27       	eor	r25, r25
    2f6a:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    2f6c:	a6 89       	ldd	r26, Z+22	; 0x16
    2f6e:	b7 89       	ldd	r27, Z+23	; 0x17
    2f70:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
    2f72:	a0 89       	ldd	r26, Z+16	; 0x10
    2f74:	b1 89       	ldd	r27, Z+17	; 0x11
    2f76:	8c 91       	ld	r24, X
    2f78:	80 64       	ori	r24, 0x40	; 64
    2f7a:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
    2f7c:	93 8d       	ldd	r25, Z+27	; 0x1b
    2f7e:	84 8d       	ldd	r24, Z+28	; 0x1c
    2f80:	98 13       	cpse	r25, r24
    2f82:	06 c0       	rjmp	.+12     	; 0x2f90 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    2f84:	02 88       	ldd	r0, Z+18	; 0x12
    2f86:	f3 89       	ldd	r31, Z+19	; 0x13
    2f88:	e0 2d       	mov	r30, r0
    2f8a:	80 81       	ld	r24, Z
    2f8c:	8f 7d       	andi	r24, 0xDF	; 223
    2f8e:	80 83       	st	Z, r24
    2f90:	08 95       	ret

00002f92 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    2f92:	ef 92       	push	r14
    2f94:	ff 92       	push	r15
    2f96:	0f 93       	push	r16
    2f98:	1f 93       	push	r17
    2f9a:	cf 93       	push	r28
    2f9c:	df 93       	push	r29
    2f9e:	ec 01       	movw	r28, r24
  _written = true;
    2fa0:	81 e0       	ldi	r24, 0x01	; 1
    2fa2:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    2fa4:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2fa6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2fa8:	98 13       	cpse	r25, r24
    2faa:	05 c0       	rjmp	.+10     	; 0x2fb6 <_ZN14HardwareSerial5writeEh+0x24>
    2fac:	e8 89       	ldd	r30, Y+16	; 0x10
    2fae:	f9 89       	ldd	r31, Y+17	; 0x11
    2fb0:	80 81       	ld	r24, Z
    2fb2:	85 fd       	sbrc	r24, 5
    2fb4:	24 c0       	rjmp	.+72     	; 0x2ffe <_ZN14HardwareSerial5writeEh+0x6c>
    2fb6:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    2fb8:	0b 8d       	ldd	r16, Y+27	; 0x1b
    2fba:	10 e0       	ldi	r17, 0x00	; 0
    2fbc:	0f 5f       	subi	r16, 0xFF	; 255
    2fbe:	1f 4f       	sbci	r17, 0xFF	; 255
    2fc0:	0f 73       	andi	r16, 0x3F	; 63
    2fc2:	11 27       	eor	r17, r17
    2fc4:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    2fc6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2fc8:	e8 12       	cpse	r14, r24
    2fca:	0c c0       	rjmp	.+24     	; 0x2fe4 <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
    2fcc:	0f b6       	in	r0, 0x3f	; 63
    2fce:	07 fc       	sbrc	r0, 7
    2fd0:	fa cf       	rjmp	.-12     	; 0x2fc6 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    2fd2:	e8 89       	ldd	r30, Y+16	; 0x10
    2fd4:	f9 89       	ldd	r31, Y+17	; 0x11
    2fd6:	80 81       	ld	r24, Z
    2fd8:	85 ff       	sbrs	r24, 5
    2fda:	f5 cf       	rjmp	.-22     	; 0x2fc6 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    2fdc:	ce 01       	movw	r24, r28
    2fde:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    2fe2:	f1 cf       	rjmp	.-30     	; 0x2fc6 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    2fe4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2fe6:	fe 01       	movw	r30, r28
    2fe8:	e8 0f       	add	r30, r24
    2fea:	f1 1d       	adc	r31, r1
    2fec:	e3 5a       	subi	r30, 0xA3	; 163
    2fee:	ff 4f       	sbci	r31, 0xFF	; 255
    2ff0:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
    2ff2:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
    2ff4:	ea 89       	ldd	r30, Y+18	; 0x12
    2ff6:	fb 89       	ldd	r31, Y+19	; 0x13
    2ff8:	80 81       	ld	r24, Z
    2ffa:	80 62       	ori	r24, 0x20	; 32
    2ffc:	07 c0       	rjmp	.+14     	; 0x300c <_ZN14HardwareSerial5writeEh+0x7a>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    2ffe:	ee 89       	ldd	r30, Y+22	; 0x16
    3000:	ff 89       	ldd	r31, Y+23	; 0x17
    3002:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
    3004:	e8 89       	ldd	r30, Y+16	; 0x10
    3006:	f9 89       	ldd	r31, Y+17	; 0x11
    3008:	80 81       	ld	r24, Z
    300a:	80 64       	ori	r24, 0x40	; 64
    300c:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
    300e:	81 e0       	ldi	r24, 0x01	; 1
    3010:	90 e0       	ldi	r25, 0x00	; 0
    3012:	df 91       	pop	r29
    3014:	cf 91       	pop	r28
    3016:	1f 91       	pop	r17
    3018:	0f 91       	pop	r16
    301a:	ff 90       	pop	r15
    301c:	ef 90       	pop	r14
    301e:	08 95       	ret

00003020 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    3020:	cf 93       	push	r28
    3022:	df 93       	push	r29
    3024:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    3026:	88 8d       	ldd	r24, Y+24	; 0x18
    3028:	88 23       	and	r24, r24
    302a:	c9 f0       	breq	.+50     	; 0x305e <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    302c:	ea 89       	ldd	r30, Y+18	; 0x12
    302e:	fb 89       	ldd	r31, Y+19	; 0x13
    3030:	80 81       	ld	r24, Z
    3032:	85 fd       	sbrc	r24, 5
    3034:	05 c0       	rjmp	.+10     	; 0x3040 <_ZN14HardwareSerial5flushEv+0x20>
    3036:	a8 89       	ldd	r26, Y+16	; 0x10
    3038:	b9 89       	ldd	r27, Y+17	; 0x11
    303a:	8c 91       	ld	r24, X
    303c:	86 fd       	sbrc	r24, 6
    303e:	0f c0       	rjmp	.+30     	; 0x305e <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    3040:	0f b6       	in	r0, 0x3f	; 63
    3042:	07 fc       	sbrc	r0, 7
    3044:	f5 cf       	rjmp	.-22     	; 0x3030 <_ZN14HardwareSerial5flushEv+0x10>
    3046:	80 81       	ld	r24, Z
    3048:	85 ff       	sbrs	r24, 5
    304a:	f2 cf       	rjmp	.-28     	; 0x3030 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    304c:	a8 89       	ldd	r26, Y+16	; 0x10
    304e:	b9 89       	ldd	r27, Y+17	; 0x11
    3050:	8c 91       	ld	r24, X
    3052:	85 ff       	sbrs	r24, 5
    3054:	ed cf       	rjmp	.-38     	; 0x3030 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    3056:	ce 01       	movw	r24, r28
    3058:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    305c:	e7 cf       	rjmp	.-50     	; 0x302c <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    305e:	df 91       	pop	r29
    3060:	cf 91       	pop	r28
    3062:	08 95       	ret

00003064 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    3064:	cf 92       	push	r12
    3066:	df 92       	push	r13
    3068:	ef 92       	push	r14
    306a:	ff 92       	push	r15
    306c:	1f 93       	push	r17
    306e:	cf 93       	push	r28
    3070:	df 93       	push	r29
    3072:	ec 01       	movw	r28, r24
    3074:	6a 01       	movw	r12, r20
    3076:	7b 01       	movw	r14, r22
    3078:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    307a:	e8 89       	ldd	r30, Y+16	; 0x10
    307c:	f9 89       	ldd	r31, Y+17	; 0x11
    307e:	82 e0       	ldi	r24, 0x02	; 2
    3080:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    3082:	41 15       	cp	r20, r1
    3084:	51 4e       	sbci	r21, 0xE1	; 225
    3086:	61 05       	cpc	r22, r1
    3088:	71 05       	cpc	r23, r1
    308a:	b1 f0       	breq	.+44     	; 0x30b8 <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    308c:	60 e0       	ldi	r22, 0x00	; 0
    308e:	79 e0       	ldi	r23, 0x09	; 9
    3090:	8d e3       	ldi	r24, 0x3D	; 61
    3092:	90 e0       	ldi	r25, 0x00	; 0
    3094:	a7 01       	movw	r20, r14
    3096:	96 01       	movw	r18, r12
    3098:	0e 94 6f 1c 	call	0x38de	; 0x38de <__udivmodsi4>
    309c:	da 01       	movw	r26, r20
    309e:	c9 01       	movw	r24, r18
    30a0:	01 97       	sbiw	r24, 0x01	; 1
    30a2:	a1 09       	sbc	r26, r1
    30a4:	b1 09       	sbc	r27, r1
    30a6:	b6 95       	lsr	r27
    30a8:	a7 95       	ror	r26
    30aa:	97 95       	ror	r25
    30ac:	87 95       	ror	r24
    30ae:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    30b0:	21 15       	cp	r18, r1
    30b2:	80 e1       	ldi	r24, 0x10	; 16
    30b4:	38 07       	cpc	r19, r24
    30b6:	a8 f0       	brcs	.+42     	; 0x30e2 <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
    30b8:	e8 89       	ldd	r30, Y+16	; 0x10
    30ba:	f9 89       	ldd	r31, Y+17	; 0x11
    30bc:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    30be:	60 e8       	ldi	r22, 0x80	; 128
    30c0:	74 e8       	ldi	r23, 0x84	; 132
    30c2:	8e e1       	ldi	r24, 0x1E	; 30
    30c4:	90 e0       	ldi	r25, 0x00	; 0
    30c6:	a7 01       	movw	r20, r14
    30c8:	96 01       	movw	r18, r12
    30ca:	0e 94 6f 1c 	call	0x38de	; 0x38de <__udivmodsi4>
    30ce:	da 01       	movw	r26, r20
    30d0:	c9 01       	movw	r24, r18
    30d2:	01 97       	sbiw	r24, 0x01	; 1
    30d4:	a1 09       	sbc	r26, r1
    30d6:	b1 09       	sbc	r27, r1
    30d8:	b6 95       	lsr	r27
    30da:	a7 95       	ror	r26
    30dc:	97 95       	ror	r25
    30de:	87 95       	ror	r24
    30e0:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    30e2:	ec 85       	ldd	r30, Y+12	; 0x0c
    30e4:	fd 85       	ldd	r31, Y+13	; 0x0d
    30e6:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    30e8:	ee 85       	ldd	r30, Y+14	; 0x0e
    30ea:	ff 85       	ldd	r31, Y+15	; 0x0f
    30ec:	20 83       	st	Z, r18

  _written = false;
    30ee:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    30f0:	ec 89       	ldd	r30, Y+20	; 0x14
    30f2:	fd 89       	ldd	r31, Y+21	; 0x15
    30f4:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    30f6:	ea 89       	ldd	r30, Y+18	; 0x12
    30f8:	fb 89       	ldd	r31, Y+19	; 0x13
    30fa:	80 81       	ld	r24, Z
    30fc:	80 61       	ori	r24, 0x10	; 16
    30fe:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    3100:	ea 89       	ldd	r30, Y+18	; 0x12
    3102:	fb 89       	ldd	r31, Y+19	; 0x13
    3104:	80 81       	ld	r24, Z
    3106:	88 60       	ori	r24, 0x08	; 8
    3108:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    310a:	ea 89       	ldd	r30, Y+18	; 0x12
    310c:	fb 89       	ldd	r31, Y+19	; 0x13
    310e:	80 81       	ld	r24, Z
    3110:	80 68       	ori	r24, 0x80	; 128
    3112:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    3114:	ea 89       	ldd	r30, Y+18	; 0x12
    3116:	fb 89       	ldd	r31, Y+19	; 0x13
    3118:	80 81       	ld	r24, Z
    311a:	8f 7d       	andi	r24, 0xDF	; 223
    311c:	80 83       	st	Z, r24
}
    311e:	df 91       	pop	r29
    3120:	cf 91       	pop	r28
    3122:	1f 91       	pop	r17
    3124:	ff 90       	pop	r15
    3126:	ef 90       	pop	r14
    3128:	df 90       	pop	r13
    312a:	cf 90       	pop	r12
    312c:	08 95       	ret

0000312e <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    312e:	1f 92       	push	r1
    3130:	0f 92       	push	r0
    3132:	0f b6       	in	r0, 0x3f	; 63
    3134:	0f 92       	push	r0
    3136:	11 24       	eor	r1, r1
    3138:	2f 93       	push	r18
    313a:	8f 93       	push	r24
    313c:	9f 93       	push	r25
    313e:	ef 93       	push	r30
    3140:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    3142:	e0 91 37 05 	lds	r30, 0x0537	; 0x800537 <Serial+0x10>
    3146:	f0 91 38 05 	lds	r31, 0x0538	; 0x800538 <Serial+0x11>
    314a:	80 81       	ld	r24, Z
    314c:	e0 91 3d 05 	lds	r30, 0x053D	; 0x80053d <Serial+0x16>
    3150:	f0 91 3e 05 	lds	r31, 0x053E	; 0x80053e <Serial+0x17>
    3154:	82 fd       	sbrc	r24, 2
    3156:	12 c0       	rjmp	.+36     	; 0x317c <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    3158:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    315a:	80 91 40 05 	lds	r24, 0x0540	; 0x800540 <Serial+0x19>
    315e:	8f 5f       	subi	r24, 0xFF	; 255
    3160:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    3162:	20 91 41 05 	lds	r18, 0x0541	; 0x800541 <Serial+0x1a>
    3166:	82 17       	cp	r24, r18
    3168:	51 f0       	breq	.+20     	; 0x317e <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
    316a:	e0 91 40 05 	lds	r30, 0x0540	; 0x800540 <Serial+0x19>
    316e:	f0 e0       	ldi	r31, 0x00	; 0
    3170:	e9 5d       	subi	r30, 0xD9	; 217
    3172:	fa 4f       	sbci	r31, 0xFA	; 250
    3174:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    3176:	80 93 40 05 	sts	0x0540, r24	; 0x800540 <Serial+0x19>
    317a:	01 c0       	rjmp	.+2      	; 0x317e <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    317c:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    317e:	ff 91       	pop	r31
    3180:	ef 91       	pop	r30
    3182:	9f 91       	pop	r25
    3184:	8f 91       	pop	r24
    3186:	2f 91       	pop	r18
    3188:	0f 90       	pop	r0
    318a:	0f be       	out	0x3f, r0	; 63
    318c:	0f 90       	pop	r0
    318e:	1f 90       	pop	r1
    3190:	18 95       	reti

00003192 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    3192:	1f 92       	push	r1
    3194:	0f 92       	push	r0
    3196:	0f b6       	in	r0, 0x3f	; 63
    3198:	0f 92       	push	r0
    319a:	11 24       	eor	r1, r1
    319c:	2f 93       	push	r18
    319e:	3f 93       	push	r19
    31a0:	4f 93       	push	r20
    31a2:	5f 93       	push	r21
    31a4:	6f 93       	push	r22
    31a6:	7f 93       	push	r23
    31a8:	8f 93       	push	r24
    31aa:	9f 93       	push	r25
    31ac:	af 93       	push	r26
    31ae:	bf 93       	push	r27
    31b0:	ef 93       	push	r30
    31b2:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    31b4:	87 e2       	ldi	r24, 0x27	; 39
    31b6:	95 e0       	ldi	r25, 0x05	; 5
    31b8:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    31bc:	ff 91       	pop	r31
    31be:	ef 91       	pop	r30
    31c0:	bf 91       	pop	r27
    31c2:	af 91       	pop	r26
    31c4:	9f 91       	pop	r25
    31c6:	8f 91       	pop	r24
    31c8:	7f 91       	pop	r23
    31ca:	6f 91       	pop	r22
    31cc:	5f 91       	pop	r21
    31ce:	4f 91       	pop	r20
    31d0:	3f 91       	pop	r19
    31d2:	2f 91       	pop	r18
    31d4:	0f 90       	pop	r0
    31d6:	0f be       	out	0x3f, r0	; 63
    31d8:	0f 90       	pop	r0
    31da:	1f 90       	pop	r1
    31dc:	18 95       	reti

000031de <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    31de:	87 e2       	ldi	r24, 0x27	; 39
    31e0:	95 e0       	ldi	r25, 0x05	; 5
    31e2:	0e 94 5d 17 	call	0x2eba	; 0x2eba <_ZN14HardwareSerial9availableEv>
    31e6:	21 e0       	ldi	r18, 0x01	; 1
    31e8:	89 2b       	or	r24, r25
    31ea:	09 f4       	brne	.+2      	; 0x31ee <_Z17Serial0_availablev+0x10>
    31ec:	20 e0       	ldi	r18, 0x00	; 0
}
    31ee:	82 2f       	mov	r24, r18
    31f0:	08 95       	ret

000031f2 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    31f2:	e7 e2       	ldi	r30, 0x27	; 39
    31f4:	f5 e0       	ldi	r31, 0x05	; 5
    31f6:	13 82       	std	Z+3, r1	; 0x03
    31f8:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    31fa:	88 ee       	ldi	r24, 0xE8	; 232
    31fc:	93 e0       	ldi	r25, 0x03	; 3
    31fe:	a0 e0       	ldi	r26, 0x00	; 0
    3200:	b0 e0       	ldi	r27, 0x00	; 0
    3202:	84 83       	std	Z+4, r24	; 0x04
    3204:	95 83       	std	Z+5, r25	; 0x05
    3206:	a6 83       	std	Z+6, r26	; 0x06
    3208:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    320a:	86 e7       	ldi	r24, 0x76	; 118
    320c:	92 e0       	ldi	r25, 0x02	; 2
    320e:	91 83       	std	Z+1, r25	; 0x01
    3210:	80 83       	st	Z, r24
    3212:	85 ec       	ldi	r24, 0xC5	; 197
    3214:	90 e0       	ldi	r25, 0x00	; 0
    3216:	95 87       	std	Z+13, r25	; 0x0d
    3218:	84 87       	std	Z+12, r24	; 0x0c
    321a:	84 ec       	ldi	r24, 0xC4	; 196
    321c:	90 e0       	ldi	r25, 0x00	; 0
    321e:	97 87       	std	Z+15, r25	; 0x0f
    3220:	86 87       	std	Z+14, r24	; 0x0e
    3222:	80 ec       	ldi	r24, 0xC0	; 192
    3224:	90 e0       	ldi	r25, 0x00	; 0
    3226:	91 8b       	std	Z+17, r25	; 0x11
    3228:	80 8b       	std	Z+16, r24	; 0x10
    322a:	81 ec       	ldi	r24, 0xC1	; 193
    322c:	90 e0       	ldi	r25, 0x00	; 0
    322e:	93 8b       	std	Z+19, r25	; 0x13
    3230:	82 8b       	std	Z+18, r24	; 0x12
    3232:	82 ec       	ldi	r24, 0xC2	; 194
    3234:	90 e0       	ldi	r25, 0x00	; 0
    3236:	95 8b       	std	Z+21, r25	; 0x15
    3238:	84 8b       	std	Z+20, r24	; 0x14
    323a:	86 ec       	ldi	r24, 0xC6	; 198
    323c:	90 e0       	ldi	r25, 0x00	; 0
    323e:	97 8b       	std	Z+23, r25	; 0x17
    3240:	86 8b       	std	Z+22, r24	; 0x16
    3242:	11 8e       	std	Z+25, r1	; 0x19
    3244:	12 8e       	std	Z+26, r1	; 0x1a
    3246:	13 8e       	std	Z+27, r1	; 0x1b
    3248:	14 8e       	std	Z+28, r1	; 0x1c
    324a:	08 95       	ret

0000324c <initVariant>:
    324c:	08 95       	ret

0000324e <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    324e:	0e 94 a2 1b 	call	0x3744	; 0x3744 <init>

	initVariant();
    3252:	0e 94 26 19 	call	0x324c	; 0x324c <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    3256:	0e 94 0c 04 	call	0x818	; 0x818 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    325a:	ca e9       	ldi	r28, 0x9A	; 154
    325c:	d7 e1       	ldi	r29, 0x17	; 23
#endif
	
	setup();
    
	for (;;) {
		loop();
    325e:	0e 94 ad 05 	call	0xb5a	; 0xb5a <loop>
		if (serialEventRun) serialEventRun();
    3262:	20 97       	sbiw	r28, 0x00	; 0
    3264:	e1 f3       	breq	.-8      	; 0x325e <main+0x10>
    3266:	0e 94 9a 17 	call	0x2f34	; 0x2f34 <_Z14serialEventRunv>
    326a:	f9 cf       	rjmp	.-14     	; 0x325e <main+0x10>

0000326c <_ZN5Print5writeEPKhj>:
size_t Print::println(long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
    326c:	cf 92       	push	r12
    326e:	df 92       	push	r13
    3270:	ef 92       	push	r14
    3272:	ff 92       	push	r15
    3274:	0f 93       	push	r16
    3276:	1f 93       	push	r17
    3278:	cf 93       	push	r28
    327a:	df 93       	push	r29
    327c:	6c 01       	movw	r12, r24
    327e:	7a 01       	movw	r14, r20
    3280:	8b 01       	movw	r16, r22
    3282:	c0 e0       	ldi	r28, 0x00	; 0
    3284:	d0 e0       	ldi	r29, 0x00	; 0
    3286:	ce 15       	cp	r28, r14
    3288:	df 05       	cpc	r29, r15
    328a:	81 f0       	breq	.+32     	; 0x32ac <_ZN5Print5writeEPKhj+0x40>
    328c:	d8 01       	movw	r26, r16
    328e:	6d 91       	ld	r22, X+
    3290:	8d 01       	movw	r16, r26
    3292:	d6 01       	movw	r26, r12
    3294:	ed 91       	ld	r30, X+
    3296:	fc 91       	ld	r31, X
    3298:	01 90       	ld	r0, Z+
    329a:	f0 81       	ld	r31, Z
    329c:	e0 2d       	mov	r30, r0
    329e:	c6 01       	movw	r24, r12
    32a0:	09 95       	icall
    32a2:	89 2b       	or	r24, r25
    32a4:	11 f0       	breq	.+4      	; 0x32aa <_ZN5Print5writeEPKhj+0x3e>
    32a6:	21 96       	adiw	r28, 0x01	; 1
    32a8:	ee cf       	rjmp	.-36     	; 0x3286 <_ZN5Print5writeEPKhj+0x1a>
    32aa:	7e 01       	movw	r14, r28
    32ac:	c7 01       	movw	r24, r14
    32ae:	df 91       	pop	r29
    32b0:	cf 91       	pop	r28
    32b2:	1f 91       	pop	r17
    32b4:	0f 91       	pop	r16
    32b6:	ff 90       	pop	r15
    32b8:	ef 90       	pop	r14
    32ba:	df 90       	pop	r13
    32bc:	cf 90       	pop	r12
    32be:	08 95       	ret

000032c0 <_ZN5Print5writeEPKc>:
    32c0:	61 15       	cp	r22, r1
    32c2:	71 05       	cpc	r23, r1
    32c4:	79 f0       	breq	.+30     	; 0x32e4 <_ZN5Print5writeEPKc+0x24>
    32c6:	fb 01       	movw	r30, r22
    32c8:	01 90       	ld	r0, Z+
    32ca:	00 20       	and	r0, r0
    32cc:	e9 f7       	brne	.-6      	; 0x32c8 <_ZN5Print5writeEPKc+0x8>
    32ce:	31 97       	sbiw	r30, 0x01	; 1
    32d0:	af 01       	movw	r20, r30
    32d2:	46 1b       	sub	r20, r22
    32d4:	57 0b       	sbc	r21, r23
    32d6:	dc 01       	movw	r26, r24
    32d8:	ed 91       	ld	r30, X+
    32da:	fc 91       	ld	r31, X
    32dc:	02 80       	ldd	r0, Z+2	; 0x02
    32de:	f3 81       	ldd	r31, Z+3	; 0x03
    32e0:	e0 2d       	mov	r30, r0
    32e2:	09 94       	ijmp
    32e4:	80 e0       	ldi	r24, 0x00	; 0
    32e6:	90 e0       	ldi	r25, 0x00	; 0
    32e8:	08 95       	ret

000032ea <_ZN5Print5printEPKc>:
    32ea:	0c 94 60 19 	jmp	0x32c0	; 0x32c0 <_ZN5Print5writeEPKc>

000032ee <_ZN5Print5printEc>:
    32ee:	dc 01       	movw	r26, r24
    32f0:	ed 91       	ld	r30, X+
    32f2:	fc 91       	ld	r31, X
    32f4:	01 90       	ld	r0, Z+
    32f6:	f0 81       	ld	r31, Z
    32f8:	e0 2d       	mov	r30, r0
    32fa:	09 94       	ijmp

000032fc <_ZN5Print7printlnEv>:
    32fc:	64 e8       	ldi	r22, 0x84	; 132
    32fe:	72 e0       	ldi	r23, 0x02	; 2
    3300:	0c 94 60 19 	jmp	0x32c0	; 0x32c0 <_ZN5Print5writeEPKc>

00003304 <_ZN5Print7printlnEPKc>:
    3304:	0f 93       	push	r16
    3306:	1f 93       	push	r17
    3308:	cf 93       	push	r28
    330a:	df 93       	push	r29
    330c:	ec 01       	movw	r28, r24
    330e:	0e 94 60 19 	call	0x32c0	; 0x32c0 <_ZN5Print5writeEPKc>
    3312:	8c 01       	movw	r16, r24
    3314:	ce 01       	movw	r24, r28
    3316:	0e 94 7e 19 	call	0x32fc	; 0x32fc <_ZN5Print7printlnEv>
    331a:	80 0f       	add	r24, r16
    331c:	91 1f       	adc	r25, r17
    331e:	df 91       	pop	r29
    3320:	cf 91       	pop	r28
    3322:	1f 91       	pop	r17
    3324:	0f 91       	pop	r16
    3326:	08 95       	ret

00003328 <_ZN5Print11printNumberEmh>:
    3328:	8f 92       	push	r8
    332a:	9f 92       	push	r9
    332c:	af 92       	push	r10
    332e:	bf 92       	push	r11
    3330:	ef 92       	push	r14
    3332:	ff 92       	push	r15
    3334:	0f 93       	push	r16
    3336:	1f 93       	push	r17
    3338:	cf 93       	push	r28
    333a:	df 93       	push	r29
    333c:	cd b7       	in	r28, 0x3d	; 61
    333e:	de b7       	in	r29, 0x3e	; 62
    3340:	a1 97       	sbiw	r28, 0x21	; 33
    3342:	0f b6       	in	r0, 0x3f	; 63
    3344:	f8 94       	cli
    3346:	de bf       	out	0x3e, r29	; 62
    3348:	0f be       	out	0x3f, r0	; 63
    334a:	cd bf       	out	0x3d, r28	; 61
    334c:	7c 01       	movw	r14, r24
    334e:	fa 01       	movw	r30, r20
    3350:	cb 01       	movw	r24, r22
    3352:	19 a2       	std	Y+33, r1	; 0x21
    3354:	22 30       	cpi	r18, 0x02	; 2
    3356:	08 f4       	brcc	.+2      	; 0x335a <_ZN5Print11printNumberEmh+0x32>
    3358:	2a e0       	ldi	r18, 0x0A	; 10
    335a:	8e 01       	movw	r16, r28
    335c:	0f 5d       	subi	r16, 0xDF	; 223
    335e:	1f 4f       	sbci	r17, 0xFF	; 255
    3360:	82 2e       	mov	r8, r18
    3362:	91 2c       	mov	r9, r1
    3364:	a1 2c       	mov	r10, r1
    3366:	b1 2c       	mov	r11, r1
    3368:	bf 01       	movw	r22, r30
    336a:	a5 01       	movw	r20, r10
    336c:	94 01       	movw	r18, r8
    336e:	0e 94 6f 1c 	call	0x38de	; 0x38de <__udivmodsi4>
    3372:	f9 01       	movw	r30, r18
    3374:	ca 01       	movw	r24, r20
    3376:	01 50       	subi	r16, 0x01	; 1
    3378:	11 09       	sbc	r17, r1
    337a:	6a 30       	cpi	r22, 0x0A	; 10
    337c:	10 f4       	brcc	.+4      	; 0x3382 <_ZN5Print11printNumberEmh+0x5a>
    337e:	60 5d       	subi	r22, 0xD0	; 208
    3380:	01 c0       	rjmp	.+2      	; 0x3384 <_ZN5Print11printNumberEmh+0x5c>
    3382:	69 5c       	subi	r22, 0xC9	; 201
    3384:	d8 01       	movw	r26, r16
    3386:	6c 93       	st	X, r22
    3388:	23 2b       	or	r18, r19
    338a:	24 2b       	or	r18, r20
    338c:	25 2b       	or	r18, r21
    338e:	61 f7       	brne	.-40     	; 0x3368 <_ZN5Print11printNumberEmh+0x40>
    3390:	b8 01       	movw	r22, r16
    3392:	c7 01       	movw	r24, r14
    3394:	0e 94 60 19 	call	0x32c0	; 0x32c0 <_ZN5Print5writeEPKc>
    3398:	a1 96       	adiw	r28, 0x21	; 33
    339a:	0f b6       	in	r0, 0x3f	; 63
    339c:	f8 94       	cli
    339e:	de bf       	out	0x3e, r29	; 62
    33a0:	0f be       	out	0x3f, r0	; 63
    33a2:	cd bf       	out	0x3d, r28	; 61
    33a4:	df 91       	pop	r29
    33a6:	cf 91       	pop	r28
    33a8:	1f 91       	pop	r17
    33aa:	0f 91       	pop	r16
    33ac:	ff 90       	pop	r15
    33ae:	ef 90       	pop	r14
    33b0:	bf 90       	pop	r11
    33b2:	af 90       	pop	r10
    33b4:	9f 90       	pop	r9
    33b6:	8f 90       	pop	r8
    33b8:	08 95       	ret

000033ba <_ZN5Print5printEmi>:
    33ba:	21 15       	cp	r18, r1
    33bc:	31 05       	cpc	r19, r1
    33be:	41 f4       	brne	.+16     	; 0x33d0 <_ZN5Print5printEmi+0x16>
    33c0:	dc 01       	movw	r26, r24
    33c2:	ed 91       	ld	r30, X+
    33c4:	fc 91       	ld	r31, X
    33c6:	01 90       	ld	r0, Z+
    33c8:	f0 81       	ld	r31, Z
    33ca:	e0 2d       	mov	r30, r0
    33cc:	64 2f       	mov	r22, r20
    33ce:	09 94       	ijmp
    33d0:	0c 94 94 19 	jmp	0x3328	; 0x3328 <_ZN5Print11printNumberEmh>

000033d4 <_ZN5Print5printEji>:
    33d4:	9a 01       	movw	r18, r20
    33d6:	ab 01       	movw	r20, r22
    33d8:	60 e0       	ldi	r22, 0x00	; 0
    33da:	70 e0       	ldi	r23, 0x00	; 0
    33dc:	0c 94 dd 19 	jmp	0x33ba	; 0x33ba <_ZN5Print5printEmi>

000033e0 <_ZN5Print7printlnEmi>:
    33e0:	0f 93       	push	r16
    33e2:	1f 93       	push	r17
    33e4:	cf 93       	push	r28
    33e6:	df 93       	push	r29
    33e8:	ec 01       	movw	r28, r24
    33ea:	0e 94 dd 19 	call	0x33ba	; 0x33ba <_ZN5Print5printEmi>
    33ee:	8c 01       	movw	r16, r24
    33f0:	ce 01       	movw	r24, r28
    33f2:	0e 94 7e 19 	call	0x32fc	; 0x32fc <_ZN5Print7printlnEv>
    33f6:	80 0f       	add	r24, r16
    33f8:	91 1f       	adc	r25, r17
    33fa:	df 91       	pop	r29
    33fc:	cf 91       	pop	r28
    33fe:	1f 91       	pop	r17
    3400:	0f 91       	pop	r16
    3402:	08 95       	ret

00003404 <_ZN5Print5printEli>:
    3404:	cf 92       	push	r12
    3406:	df 92       	push	r13
    3408:	ef 92       	push	r14
    340a:	ff 92       	push	r15
    340c:	0f 93       	push	r16
    340e:	1f 93       	push	r17
    3410:	cf 93       	push	r28
    3412:	df 93       	push	r29
    3414:	21 15       	cp	r18, r1
    3416:	31 05       	cpc	r19, r1
    3418:	81 f4       	brne	.+32     	; 0x343a <_ZN5Print5printEli+0x36>
    341a:	dc 01       	movw	r26, r24
    341c:	ed 91       	ld	r30, X+
    341e:	fc 91       	ld	r31, X
    3420:	01 90       	ld	r0, Z+
    3422:	f0 81       	ld	r31, Z
    3424:	e0 2d       	mov	r30, r0
    3426:	64 2f       	mov	r22, r20
    3428:	df 91       	pop	r29
    342a:	cf 91       	pop	r28
    342c:	1f 91       	pop	r17
    342e:	0f 91       	pop	r16
    3430:	ff 90       	pop	r15
    3432:	ef 90       	pop	r14
    3434:	df 90       	pop	r13
    3436:	cf 90       	pop	r12
    3438:	09 94       	ijmp
    343a:	2a 30       	cpi	r18, 0x0A	; 10
    343c:	31 05       	cpc	r19, r1
    343e:	01 f5       	brne	.+64     	; 0x3480 <_ZN5Print5printEli+0x7c>
    3440:	77 ff       	sbrs	r23, 7
    3442:	1d c0       	rjmp	.+58     	; 0x347e <_ZN5Print5printEli+0x7a>
    3444:	6a 01       	movw	r12, r20
    3446:	7b 01       	movw	r14, r22
    3448:	ec 01       	movw	r28, r24
    344a:	6d e2       	ldi	r22, 0x2D	; 45
    344c:	0e 94 77 19 	call	0x32ee	; 0x32ee <_ZN5Print5printEc>
    3450:	8c 01       	movw	r16, r24
    3452:	44 27       	eor	r20, r20
    3454:	55 27       	eor	r21, r21
    3456:	ba 01       	movw	r22, r20
    3458:	4c 19       	sub	r20, r12
    345a:	5d 09       	sbc	r21, r13
    345c:	6e 09       	sbc	r22, r14
    345e:	7f 09       	sbc	r23, r15
    3460:	2a e0       	ldi	r18, 0x0A	; 10
    3462:	ce 01       	movw	r24, r28
    3464:	0e 94 94 19 	call	0x3328	; 0x3328 <_ZN5Print11printNumberEmh>
    3468:	80 0f       	add	r24, r16
    346a:	91 1f       	adc	r25, r17
    346c:	df 91       	pop	r29
    346e:	cf 91       	pop	r28
    3470:	1f 91       	pop	r17
    3472:	0f 91       	pop	r16
    3474:	ff 90       	pop	r15
    3476:	ef 90       	pop	r14
    3478:	df 90       	pop	r13
    347a:	cf 90       	pop	r12
    347c:	08 95       	ret
    347e:	2a e0       	ldi	r18, 0x0A	; 10
    3480:	df 91       	pop	r29
    3482:	cf 91       	pop	r28
    3484:	1f 91       	pop	r17
    3486:	0f 91       	pop	r16
    3488:	ff 90       	pop	r15
    348a:	ef 90       	pop	r14
    348c:	df 90       	pop	r13
    348e:	cf 90       	pop	r12
    3490:	0c 94 94 19 	jmp	0x3328	; 0x3328 <_ZN5Print11printNumberEmh>

00003494 <_ZN5Print5printEii>:
    3494:	9a 01       	movw	r18, r20
    3496:	ab 01       	movw	r20, r22
    3498:	77 0f       	add	r23, r23
    349a:	66 0b       	sbc	r22, r22
    349c:	77 0b       	sbc	r23, r23
    349e:	0c 94 02 1a 	jmp	0x3404	; 0x3404 <_ZN5Print5printEli>

000034a2 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
    34a2:	7f 92       	push	r7
    34a4:	8f 92       	push	r8
    34a6:	9f 92       	push	r9
    34a8:	af 92       	push	r10
    34aa:	bf 92       	push	r11
    34ac:	cf 92       	push	r12
    34ae:	df 92       	push	r13
    34b0:	ef 92       	push	r14
    34b2:	ff 92       	push	r15
    34b4:	0f 93       	push	r16
    34b6:	1f 93       	push	r17
    34b8:	cf 93       	push	r28
    34ba:	df 93       	push	r29
    34bc:	8c 01       	movw	r16, r24
    34be:	6a 01       	movw	r12, r20
    34c0:	7b 01       	movw	r14, r22
    34c2:	72 2e       	mov	r7, r18
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
    34c4:	9a 01       	movw	r18, r20
    34c6:	ab 01       	movw	r20, r22
    34c8:	c7 01       	movw	r24, r14
    34ca:	b6 01       	movw	r22, r12
    34cc:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <__unordsf2>
    34d0:	88 23       	and	r24, r24
    34d2:	19 f0       	breq	.+6      	; 0x34da <_ZN5Print10printFloatEdh+0x38>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    34d4:	67 e8       	ldi	r22, 0x87	; 135
    34d6:	72 e0       	ldi	r23, 0x02	; 2
    34d8:	27 c0       	rjmp	.+78     	; 0x3528 <_ZN5Print10printFloatEdh+0x86>
size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
    34da:	46 01       	movw	r8, r12
    34dc:	57 01       	movw	r10, r14
    34de:	e8 94       	clt
    34e0:	b7 f8       	bld	r11, 7
    34e2:	2f ef       	ldi	r18, 0xFF	; 255
    34e4:	3f ef       	ldi	r19, 0xFF	; 255
    34e6:	4f e7       	ldi	r20, 0x7F	; 127
    34e8:	5f e7       	ldi	r21, 0x7F	; 127
    34ea:	c5 01       	movw	r24, r10
    34ec:	b4 01       	movw	r22, r8
    34ee:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <__unordsf2>
    34f2:	81 11       	cpse	r24, r1
    34f4:	0d c0       	rjmp	.+26     	; 0x3510 <_ZN5Print10printFloatEdh+0x6e>
    34f6:	2f ef       	ldi	r18, 0xFF	; 255
    34f8:	3f ef       	ldi	r19, 0xFF	; 255
    34fa:	4f e7       	ldi	r20, 0x7F	; 127
    34fc:	5f e7       	ldi	r21, 0x7F	; 127
    34fe:	c5 01       	movw	r24, r10
    3500:	b4 01       	movw	r22, r8
    3502:	0e 94 59 15 	call	0x2ab2	; 0x2ab2 <__cmpsf2>
    3506:	18 16       	cp	r1, r24
    3508:	1c f4       	brge	.+6      	; 0x3510 <_ZN5Print10printFloatEdh+0x6e>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    350a:	6b e8       	ldi	r22, 0x8B	; 139
    350c:	72 e0       	ldi	r23, 0x02	; 2
    350e:	0c c0       	rjmp	.+24     	; 0x3528 <_ZN5Print10printFloatEdh+0x86>
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
    3510:	2f ef       	ldi	r18, 0xFF	; 255
    3512:	3f ef       	ldi	r19, 0xFF	; 255
    3514:	4f e7       	ldi	r20, 0x7F	; 127
    3516:	5f e4       	ldi	r21, 0x4F	; 79
    3518:	c7 01       	movw	r24, r14
    351a:	b6 01       	movw	r22, r12
    351c:	0e 94 df 16 	call	0x2dbe	; 0x2dbe <__gesf2>
    3520:	18 16       	cp	r1, r24
    3522:	94 f4       	brge	.+36     	; 0x3548 <_ZN5Print10printFloatEdh+0xa6>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    3524:	6f e8       	ldi	r22, 0x8F	; 143
    3526:	72 e0       	ldi	r23, 0x02	; 2
    3528:	c8 01       	movw	r24, r16
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    352a:	df 91       	pop	r29
    352c:	cf 91       	pop	r28
    352e:	1f 91       	pop	r17
    3530:	0f 91       	pop	r16
    3532:	ff 90       	pop	r15
    3534:	ef 90       	pop	r14
    3536:	df 90       	pop	r13
    3538:	cf 90       	pop	r12
    353a:	bf 90       	pop	r11
    353c:	af 90       	pop	r10
    353e:	9f 90       	pop	r9
    3540:	8f 90       	pop	r8
    3542:	7f 90       	pop	r7
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    3544:	0c 94 60 19 	jmp	0x32c0	; 0x32c0 <_ZN5Print5writeEPKc>
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
    3548:	2f ef       	ldi	r18, 0xFF	; 255
    354a:	3f ef       	ldi	r19, 0xFF	; 255
    354c:	4f e7       	ldi	r20, 0x7F	; 127
    354e:	5f ec       	ldi	r21, 0xCF	; 207
    3550:	c7 01       	movw	r24, r14
    3552:	b6 01       	movw	r22, r12
    3554:	0e 94 59 15 	call	0x2ab2	; 0x2ab2 <__cmpsf2>
    3558:	87 fd       	sbrc	r24, 7
    355a:	e4 cf       	rjmp	.-56     	; 0x3524 <_ZN5Print10printFloatEdh+0x82>
  
  // Handle negative numbers
  if (number < 0.0)
    355c:	20 e0       	ldi	r18, 0x00	; 0
    355e:	30 e0       	ldi	r19, 0x00	; 0
    3560:	a9 01       	movw	r20, r18
    3562:	c7 01       	movw	r24, r14
    3564:	b6 01       	movw	r22, r12
    3566:	0e 94 59 15 	call	0x2ab2	; 0x2ab2 <__cmpsf2>
    356a:	87 ff       	sbrs	r24, 7
    356c:	0a c0       	rjmp	.+20     	; 0x3582 <_ZN5Print10printFloatEdh+0xe0>
  {
     n += print('-');
    356e:	6d e2       	ldi	r22, 0x2D	; 45
    3570:	c8 01       	movw	r24, r16
    3572:	0e 94 77 19 	call	0x32ee	; 0x32ee <_ZN5Print5printEc>
    3576:	ec 01       	movw	r28, r24
     number = -number;
    3578:	f7 fa       	bst	r15, 7
    357a:	f0 94       	com	r15
    357c:	f7 f8       	bld	r15, 7
    357e:	f0 94       	com	r15
    3580:	02 c0       	rjmp	.+4      	; 0x3586 <_ZN5Print10printFloatEdh+0xe4>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
    3582:	c0 e0       	ldi	r28, 0x00	; 0
    3584:	d0 e0       	ldi	r29, 0x00	; 0
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    3586:	b1 2c       	mov	r11, r1
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
    3588:	60 e0       	ldi	r22, 0x00	; 0
    358a:	70 e0       	ldi	r23, 0x00	; 0
    358c:	80 e0       	ldi	r24, 0x00	; 0
    358e:	9f e3       	ldi	r25, 0x3F	; 63
  for (uint8_t i=0; i<digits; ++i)
    3590:	7b 14       	cp	r7, r11
    3592:	41 f0       	breq	.+16     	; 0x35a4 <_ZN5Print10printFloatEdh+0x102>
    rounding /= 10.0;
    3594:	20 e0       	ldi	r18, 0x00	; 0
    3596:	30 e0       	ldi	r19, 0x00	; 0
    3598:	40 e2       	ldi	r20, 0x20	; 32
    359a:	51 e4       	ldi	r21, 0x41	; 65
    359c:	0e 94 5e 15 	call	0x2abc	; 0x2abc <__divsf3>
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    35a0:	b3 94       	inc	r11
    35a2:	f6 cf       	rjmp	.-20     	; 0x3590 <_ZN5Print10printFloatEdh+0xee>
    rounding /= 10.0;
  
  number += rounding;
    35a4:	a7 01       	movw	r20, r14
    35a6:	96 01       	movw	r18, r12
    35a8:	0e 94 7b 14 	call	0x28f6	; 0x28f6 <__addsf3>
    35ac:	6b 01       	movw	r12, r22
    35ae:	7c 01       	movw	r14, r24

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
    35b0:	0e 94 d7 15 	call	0x2bae	; 0x2bae <__fixunssfsi>
    35b4:	4b 01       	movw	r8, r22
    35b6:	5c 01       	movw	r10, r24
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
    35b8:	2a e0       	ldi	r18, 0x0A	; 10
    35ba:	ab 01       	movw	r20, r22
    35bc:	bc 01       	movw	r22, r24
    35be:	c8 01       	movw	r24, r16
    35c0:	0e 94 94 19 	call	0x3328	; 0x3328 <_ZN5Print11printNumberEmh>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    35c4:	c8 0f       	add	r28, r24
    35c6:	d9 1f       	adc	r29, r25

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    35c8:	77 20       	and	r7, r7
    35ca:	b9 f1       	breq	.+110    	; 0x363a <_ZN5Print10printFloatEdh+0x198>
  
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
    35cc:	c5 01       	movw	r24, r10
    35ce:	b4 01       	movw	r22, r8
    35d0:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <__floatunsisf>
    35d4:	9b 01       	movw	r18, r22
    35d6:	ac 01       	movw	r20, r24
    35d8:	c7 01       	movw	r24, r14
    35da:	b6 01       	movw	r22, r12
    35dc:	0e 94 7a 14 	call	0x28f4	; 0x28f4 <__subsf3>
    35e0:	6b 01       	movw	r12, r22
    35e2:	7c 01       	movw	r14, r24
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print('.'); 
    35e4:	6e e2       	ldi	r22, 0x2E	; 46
    35e6:	c8 01       	movw	r24, r16
    35e8:	0e 94 77 19 	call	0x32ee	; 0x32ee <_ZN5Print5printEc>
    35ec:	c8 0f       	add	r28, r24
    35ee:	d9 1f       	adc	r29, r25
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    35f0:	20 e0       	ldi	r18, 0x00	; 0
    35f2:	30 e0       	ldi	r19, 0x00	; 0
    35f4:	40 e2       	ldi	r20, 0x20	; 32
    35f6:	51 e4       	ldi	r21, 0x41	; 65
    35f8:	c7 01       	movw	r24, r14
    35fa:	b6 01       	movw	r22, r12
    35fc:	0e 94 ec 16 	call	0x2dd8	; 0x2dd8 <__mulsf3>
    3600:	4b 01       	movw	r8, r22
    3602:	5c 01       	movw	r10, r24
    unsigned int toPrint = (unsigned int)(remainder);
    3604:	0e 94 d7 15 	call	0x2bae	; 0x2bae <__fixunssfsi>
    3608:	6b 01       	movw	r12, r22
    360a:	7c 01       	movw	r14, r24
    n += print(toPrint);
    360c:	4a e0       	ldi	r20, 0x0A	; 10
    360e:	50 e0       	ldi	r21, 0x00	; 0
    3610:	c8 01       	movw	r24, r16
    3612:	0e 94 ea 19 	call	0x33d4	; 0x33d4 <_ZN5Print5printEji>
    3616:	c8 0f       	add	r28, r24
    3618:	d9 1f       	adc	r29, r25
    remainder -= toPrint; 
    361a:	b6 01       	movw	r22, r12
    361c:	80 e0       	ldi	r24, 0x00	; 0
    361e:	90 e0       	ldi	r25, 0x00	; 0
    3620:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <__floatunsisf>
    3624:	9b 01       	movw	r18, r22
    3626:	ac 01       	movw	r20, r24
    3628:	c5 01       	movw	r24, r10
    362a:	b4 01       	movw	r22, r8
    362c:	0e 94 7a 14 	call	0x28f4	; 0x28f4 <__subsf3>
    3630:	6b 01       	movw	r12, r22
    3632:	7c 01       	movw	r14, r24
    3634:	7a 94       	dec	r7
  if (digits > 0) {
    n += print('.'); 
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
    3636:	71 10       	cpse	r7, r1
    3638:	db cf       	rjmp	.-74     	; 0x35f0 <_ZN5Print10printFloatEdh+0x14e>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    363a:	ce 01       	movw	r24, r28
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    363c:	df 91       	pop	r29
    363e:	cf 91       	pop	r28
    3640:	1f 91       	pop	r17
    3642:	0f 91       	pop	r16
    3644:	ff 90       	pop	r15
    3646:	ef 90       	pop	r14
    3648:	df 90       	pop	r13
    364a:	cf 90       	pop	r12
    364c:	bf 90       	pop	r11
    364e:	af 90       	pop	r10
    3650:	9f 90       	pop	r9
    3652:	8f 90       	pop	r8
    3654:	7f 90       	pop	r7
    3656:	08 95       	ret

00003658 <_ZN5Print5printEdi>:
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    3658:	0c 94 51 1a 	jmp	0x34a2	; 0x34a2 <_ZN5Print10printFloatEdh>

0000365c <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
    365c:	1f 92       	push	r1
    365e:	0f 92       	push	r0
    3660:	0f b6       	in	r0, 0x3f	; 63
    3662:	0f 92       	push	r0
    3664:	11 24       	eor	r1, r1
    3666:	2f 93       	push	r18
    3668:	3f 93       	push	r19
    366a:	8f 93       	push	r24
    366c:	9f 93       	push	r25
    366e:	af 93       	push	r26
    3670:	bf 93       	push	r27
    3672:	80 91 c5 05 	lds	r24, 0x05C5	; 0x8005c5 <timer0_millis>
    3676:	90 91 c6 05 	lds	r25, 0x05C6	; 0x8005c6 <timer0_millis+0x1>
    367a:	a0 91 c7 05 	lds	r26, 0x05C7	; 0x8005c7 <timer0_millis+0x2>
    367e:	b0 91 c8 05 	lds	r27, 0x05C8	; 0x8005c8 <timer0_millis+0x3>
    3682:	30 91 c4 05 	lds	r19, 0x05C4	; 0x8005c4 <timer0_fract>
    3686:	20 e1       	ldi	r18, 0x10	; 16
    3688:	23 0f       	add	r18, r19
    368a:	2d 37       	cpi	r18, 0x7D	; 125
    368c:	28 f0       	brcs	.+10     	; 0x3698 <__vector_16+0x3c>
    368e:	23 e9       	ldi	r18, 0x93	; 147
    3690:	23 0f       	add	r18, r19
    3692:	01 96       	adiw	r24, 0x01	; 1
    3694:	a1 1d       	adc	r26, r1
    3696:	b1 1d       	adc	r27, r1
    3698:	20 93 c4 05 	sts	0x05C4, r18	; 0x8005c4 <timer0_fract>
    369c:	80 93 c5 05 	sts	0x05C5, r24	; 0x8005c5 <timer0_millis>
    36a0:	90 93 c6 05 	sts	0x05C6, r25	; 0x8005c6 <timer0_millis+0x1>
    36a4:	a0 93 c7 05 	sts	0x05C7, r26	; 0x8005c7 <timer0_millis+0x2>
    36a8:	b0 93 c8 05 	sts	0x05C8, r27	; 0x8005c8 <timer0_millis+0x3>
    36ac:	80 91 c9 05 	lds	r24, 0x05C9	; 0x8005c9 <timer0_overflow_count>
    36b0:	90 91 ca 05 	lds	r25, 0x05CA	; 0x8005ca <timer0_overflow_count+0x1>
    36b4:	a0 91 cb 05 	lds	r26, 0x05CB	; 0x8005cb <timer0_overflow_count+0x2>
    36b8:	b0 91 cc 05 	lds	r27, 0x05CC	; 0x8005cc <timer0_overflow_count+0x3>
    36bc:	01 96       	adiw	r24, 0x01	; 1
    36be:	a1 1d       	adc	r26, r1
    36c0:	b1 1d       	adc	r27, r1
    36c2:	80 93 c9 05 	sts	0x05C9, r24	; 0x8005c9 <timer0_overflow_count>
    36c6:	90 93 ca 05 	sts	0x05CA, r25	; 0x8005ca <timer0_overflow_count+0x1>
    36ca:	a0 93 cb 05 	sts	0x05CB, r26	; 0x8005cb <timer0_overflow_count+0x2>
    36ce:	b0 93 cc 05 	sts	0x05CC, r27	; 0x8005cc <timer0_overflow_count+0x3>
    36d2:	bf 91       	pop	r27
    36d4:	af 91       	pop	r26
    36d6:	9f 91       	pop	r25
    36d8:	8f 91       	pop	r24
    36da:	3f 91       	pop	r19
    36dc:	2f 91       	pop	r18
    36de:	0f 90       	pop	r0
    36e0:	0f be       	out	0x3f, r0	; 63
    36e2:	0f 90       	pop	r0
    36e4:	1f 90       	pop	r1
    36e6:	18 95       	reti

000036e8 <millis>:
    36e8:	2f b7       	in	r18, 0x3f	; 63
    36ea:	f8 94       	cli
    36ec:	60 91 c5 05 	lds	r22, 0x05C5	; 0x8005c5 <timer0_millis>
    36f0:	70 91 c6 05 	lds	r23, 0x05C6	; 0x8005c6 <timer0_millis+0x1>
    36f4:	80 91 c7 05 	lds	r24, 0x05C7	; 0x8005c7 <timer0_millis+0x2>
    36f8:	90 91 c8 05 	lds	r25, 0x05C8	; 0x8005c8 <timer0_millis+0x3>
    36fc:	2f bf       	out	0x3f, r18	; 63
    36fe:	08 95       	ret

00003700 <micros>:
    3700:	3f b7       	in	r19, 0x3f	; 63
    3702:	f8 94       	cli
    3704:	80 91 c9 05 	lds	r24, 0x05C9	; 0x8005c9 <timer0_overflow_count>
    3708:	90 91 ca 05 	lds	r25, 0x05CA	; 0x8005ca <timer0_overflow_count+0x1>
    370c:	a0 91 cb 05 	lds	r26, 0x05CB	; 0x8005cb <timer0_overflow_count+0x2>
    3710:	b0 91 cc 05 	lds	r27, 0x05CC	; 0x8005cc <timer0_overflow_count+0x3>
    3714:	26 b5       	in	r18, 0x26	; 38
    3716:	a8 9b       	sbis	0x15, 0	; 21
    3718:	05 c0       	rjmp	.+10     	; 0x3724 <micros+0x24>
    371a:	2f 3f       	cpi	r18, 0xFF	; 255
    371c:	19 f0       	breq	.+6      	; 0x3724 <micros+0x24>
    371e:	01 96       	adiw	r24, 0x01	; 1
    3720:	a1 1d       	adc	r26, r1
    3722:	b1 1d       	adc	r27, r1
    3724:	3f bf       	out	0x3f, r19	; 63
    3726:	ba 2f       	mov	r27, r26
    3728:	a9 2f       	mov	r26, r25
    372a:	98 2f       	mov	r25, r24
    372c:	88 27       	eor	r24, r24
    372e:	82 0f       	add	r24, r18
    3730:	91 1d       	adc	r25, r1
    3732:	a1 1d       	adc	r26, r1
    3734:	b1 1d       	adc	r27, r1
    3736:	bc 01       	movw	r22, r24
    3738:	cd 01       	movw	r24, r26
    373a:	96 95       	lsr	r25
    373c:	87 95       	ror	r24
    373e:	77 95       	ror	r23
    3740:	67 95       	ror	r22
    3742:	08 95       	ret

00003744 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    3744:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    3746:	84 b5       	in	r24, 0x24	; 36
    3748:	82 60       	ori	r24, 0x02	; 2
    374a:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    374c:	84 b5       	in	r24, 0x24	; 36
    374e:	81 60       	ori	r24, 0x01	; 1
    3750:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    3752:	85 b5       	in	r24, 0x25	; 37
    3754:	82 60       	ori	r24, 0x02	; 2
    3756:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    3758:	85 b5       	in	r24, 0x25	; 37
    375a:	81 60       	ori	r24, 0x01	; 1
    375c:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    375e:	ee e6       	ldi	r30, 0x6E	; 110
    3760:	f0 e0       	ldi	r31, 0x00	; 0
    3762:	80 81       	ld	r24, Z
    3764:	81 60       	ori	r24, 0x01	; 1
    3766:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    3768:	e1 e8       	ldi	r30, 0x81	; 129
    376a:	f0 e0       	ldi	r31, 0x00	; 0
    376c:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    376e:	80 81       	ld	r24, Z
    3770:	82 60       	ori	r24, 0x02	; 2
    3772:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    3774:	80 81       	ld	r24, Z
    3776:	81 60       	ori	r24, 0x01	; 1
    3778:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    377a:	e0 e8       	ldi	r30, 0x80	; 128
    377c:	f0 e0       	ldi	r31, 0x00	; 0
    377e:	80 81       	ld	r24, Z
    3780:	81 60       	ori	r24, 0x01	; 1
    3782:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    3784:	e1 eb       	ldi	r30, 0xB1	; 177
    3786:	f0 e0       	ldi	r31, 0x00	; 0
    3788:	80 81       	ld	r24, Z
    378a:	84 60       	ori	r24, 0x04	; 4
    378c:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    378e:	e0 eb       	ldi	r30, 0xB0	; 176
    3790:	f0 e0       	ldi	r31, 0x00	; 0
    3792:	80 81       	ld	r24, Z
    3794:	81 60       	ori	r24, 0x01	; 1
    3796:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    3798:	ea e7       	ldi	r30, 0x7A	; 122
    379a:	f0 e0       	ldi	r31, 0x00	; 0
    379c:	80 81       	ld	r24, Z
    379e:	84 60       	ori	r24, 0x04	; 4
    37a0:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    37a2:	80 81       	ld	r24, Z
    37a4:	82 60       	ori	r24, 0x02	; 2
    37a6:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    37a8:	80 81       	ld	r24, Z
    37aa:	81 60       	ori	r24, 0x01	; 1
    37ac:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    37ae:	80 81       	ld	r24, Z
    37b0:	80 68       	ori	r24, 0x80	; 128
    37b2:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    37b4:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    37b8:	08 95       	ret

000037ba <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    37ba:	cf 93       	push	r28
    37bc:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    37be:	90 e0       	ldi	r25, 0x00	; 0
    37c0:	fc 01       	movw	r30, r24
    37c2:	ef 52       	subi	r30, 0x2F	; 47
    37c4:	ff 4f       	sbci	r31, 0xFF	; 255
    37c6:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    37c8:	fc 01       	movw	r30, r24
    37ca:	eb 51       	subi	r30, 0x1B	; 27
    37cc:	ff 4f       	sbci	r31, 0xFF	; 255
    37ce:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    37d0:	88 23       	and	r24, r24
    37d2:	61 f1       	breq	.+88     	; 0x382c <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    37d4:	90 e0       	ldi	r25, 0x00	; 0
    37d6:	88 0f       	add	r24, r24
    37d8:	99 1f       	adc	r25, r25
    37da:	fc 01       	movw	r30, r24
    37dc:	e3 5f       	subi	r30, 0xF3	; 243
    37de:	fe 4f       	sbci	r31, 0xFE	; 254
    37e0:	c5 91       	lpm	r28, Z+
    37e2:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    37e4:	fc 01       	movw	r30, r24
    37e6:	ed 5f       	subi	r30, 0xFD	; 253
    37e8:	fe 4f       	sbci	r31, 0xFE	; 254
    37ea:	a5 91       	lpm	r26, Z+
    37ec:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    37ee:	61 11       	cpse	r22, r1
    37f0:	09 c0       	rjmp	.+18     	; 0x3804 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    37f2:	9f b7       	in	r25, 0x3f	; 63
                cli();
    37f4:	f8 94       	cli
		*reg &= ~bit;
    37f6:	88 81       	ld	r24, Y
    37f8:	20 95       	com	r18
    37fa:	82 23       	and	r24, r18
    37fc:	88 83       	st	Y, r24
		*out &= ~bit;
    37fe:	ec 91       	ld	r30, X
    3800:	2e 23       	and	r18, r30
    3802:	0b c0       	rjmp	.+22     	; 0x381a <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    3804:	62 30       	cpi	r22, 0x02	; 2
    3806:	61 f4       	brne	.+24     	; 0x3820 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    3808:	9f b7       	in	r25, 0x3f	; 63
                cli();
    380a:	f8 94       	cli
		*reg &= ~bit;
    380c:	88 81       	ld	r24, Y
    380e:	32 2f       	mov	r19, r18
    3810:	30 95       	com	r19
    3812:	83 23       	and	r24, r19
    3814:	88 83       	st	Y, r24
		*out |= bit;
    3816:	ec 91       	ld	r30, X
    3818:	2e 2b       	or	r18, r30
    381a:	2c 93       	st	X, r18
		SREG = oldSREG;
    381c:	9f bf       	out	0x3f, r25	; 63
    381e:	06 c0       	rjmp	.+12     	; 0x382c <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    3820:	8f b7       	in	r24, 0x3f	; 63
                cli();
    3822:	f8 94       	cli
		*reg |= bit;
    3824:	e8 81       	ld	r30, Y
    3826:	2e 2b       	or	r18, r30
    3828:	28 83       	st	Y, r18
		SREG = oldSREG;
    382a:	8f bf       	out	0x3f, r24	; 63
	}
}
    382c:	df 91       	pop	r29
    382e:	cf 91       	pop	r28
    3830:	08 95       	ret

00003832 <_Z3maplllll>:
  long diff = howbig - howsmall;
  return random(diff) + howsmall;
}

long map(long x, long in_min, long in_max, long out_min, long out_max)
{
    3832:	4f 92       	push	r4
    3834:	5f 92       	push	r5
    3836:	6f 92       	push	r6
    3838:	7f 92       	push	r7
    383a:	af 92       	push	r10
    383c:	bf 92       	push	r11
    383e:	cf 92       	push	r12
    3840:	df 92       	push	r13
    3842:	ef 92       	push	r14
    3844:	ff 92       	push	r15
    3846:	0f 93       	push	r16
    3848:	1f 93       	push	r17
    384a:	cf 93       	push	r28
    384c:	df 93       	push	r29
    384e:	cd b7       	in	r28, 0x3d	; 61
    3850:	de b7       	in	r29, 0x3e	; 62
    3852:	29 01       	movw	r4, r18
    3854:	3a 01       	movw	r6, r20
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    3856:	9b 01       	movw	r18, r22
    3858:	ac 01       	movw	r20, r24
    385a:	24 19       	sub	r18, r4
    385c:	35 09       	sbc	r19, r5
    385e:	46 09       	sbc	r20, r6
    3860:	57 09       	sbc	r21, r7
    3862:	89 89       	ldd	r24, Y+17	; 0x11
    3864:	9a 89       	ldd	r25, Y+18	; 0x12
    3866:	ab 89       	ldd	r26, Y+19	; 0x13
    3868:	bc 89       	ldd	r27, Y+20	; 0x14
    386a:	bc 01       	movw	r22, r24
    386c:	cd 01       	movw	r24, r26
    386e:	6a 19       	sub	r22, r10
    3870:	7b 09       	sbc	r23, r11
    3872:	8c 09       	sbc	r24, r12
    3874:	9d 09       	sbc	r25, r13
    3876:	0e 94 5f 1c 	call	0x38be	; 0x38be <__mulsi3>
    387a:	a8 01       	movw	r20, r16
    387c:	97 01       	movw	r18, r14
    387e:	24 19       	sub	r18, r4
    3880:	35 09       	sbc	r19, r5
    3882:	46 09       	sbc	r20, r6
    3884:	57 09       	sbc	r21, r7
    3886:	0e 94 91 1c 	call	0x3922	; 0x3922 <__divmodsi4>
    388a:	ca 01       	movw	r24, r20
    388c:	b9 01       	movw	r22, r18
    388e:	6a 0d       	add	r22, r10
    3890:	7b 1d       	adc	r23, r11
    3892:	8c 1d       	adc	r24, r12
    3894:	9d 1d       	adc	r25, r13
}
    3896:	df 91       	pop	r29
    3898:	cf 91       	pop	r28
    389a:	1f 91       	pop	r17
    389c:	0f 91       	pop	r16
    389e:	ff 90       	pop	r15
    38a0:	ef 90       	pop	r14
    38a2:	df 90       	pop	r13
    38a4:	cf 90       	pop	r12
    38a6:	bf 90       	pop	r11
    38a8:	af 90       	pop	r10
    38aa:	7f 90       	pop	r7
    38ac:	6f 90       	pop	r6
    38ae:	5f 90       	pop	r5
    38b0:	4f 90       	pop	r4
    38b2:	08 95       	ret

000038b4 <__unordsf2>:
    38b4:	0e 94 43 16 	call	0x2c86	; 0x2c86 <__fp_cmp>
    38b8:	88 0b       	sbc	r24, r24
    38ba:	99 0b       	sbc	r25, r25
    38bc:	08 95       	ret

000038be <__mulsi3>:
    38be:	db 01       	movw	r26, r22
    38c0:	8f 93       	push	r24
    38c2:	9f 93       	push	r25
    38c4:	0e 94 bf 1c 	call	0x397e	; 0x397e <__muluhisi3>
    38c8:	bf 91       	pop	r27
    38ca:	af 91       	pop	r26
    38cc:	a2 9f       	mul	r26, r18
    38ce:	80 0d       	add	r24, r0
    38d0:	91 1d       	adc	r25, r1
    38d2:	a3 9f       	mul	r26, r19
    38d4:	90 0d       	add	r25, r0
    38d6:	b2 9f       	mul	r27, r18
    38d8:	90 0d       	add	r25, r0
    38da:	11 24       	eor	r1, r1
    38dc:	08 95       	ret

000038de <__udivmodsi4>:
    38de:	a1 e2       	ldi	r26, 0x21	; 33
    38e0:	1a 2e       	mov	r1, r26
    38e2:	aa 1b       	sub	r26, r26
    38e4:	bb 1b       	sub	r27, r27
    38e6:	fd 01       	movw	r30, r26
    38e8:	0d c0       	rjmp	.+26     	; 0x3904 <__udivmodsi4_ep>

000038ea <__udivmodsi4_loop>:
    38ea:	aa 1f       	adc	r26, r26
    38ec:	bb 1f       	adc	r27, r27
    38ee:	ee 1f       	adc	r30, r30
    38f0:	ff 1f       	adc	r31, r31
    38f2:	a2 17       	cp	r26, r18
    38f4:	b3 07       	cpc	r27, r19
    38f6:	e4 07       	cpc	r30, r20
    38f8:	f5 07       	cpc	r31, r21
    38fa:	20 f0       	brcs	.+8      	; 0x3904 <__udivmodsi4_ep>
    38fc:	a2 1b       	sub	r26, r18
    38fe:	b3 0b       	sbc	r27, r19
    3900:	e4 0b       	sbc	r30, r20
    3902:	f5 0b       	sbc	r31, r21

00003904 <__udivmodsi4_ep>:
    3904:	66 1f       	adc	r22, r22
    3906:	77 1f       	adc	r23, r23
    3908:	88 1f       	adc	r24, r24
    390a:	99 1f       	adc	r25, r25
    390c:	1a 94       	dec	r1
    390e:	69 f7       	brne	.-38     	; 0x38ea <__udivmodsi4_loop>
    3910:	60 95       	com	r22
    3912:	70 95       	com	r23
    3914:	80 95       	com	r24
    3916:	90 95       	com	r25
    3918:	9b 01       	movw	r18, r22
    391a:	ac 01       	movw	r20, r24
    391c:	bd 01       	movw	r22, r26
    391e:	cf 01       	movw	r24, r30
    3920:	08 95       	ret

00003922 <__divmodsi4>:
    3922:	05 2e       	mov	r0, r21
    3924:	97 fb       	bst	r25, 7
    3926:	1e f4       	brtc	.+6      	; 0x392e <__divmodsi4+0xc>
    3928:	00 94       	com	r0
    392a:	0e 94 a8 1c 	call	0x3950	; 0x3950 <__negsi2>
    392e:	57 fd       	sbrc	r21, 7
    3930:	07 d0       	rcall	.+14     	; 0x3940 <__divmodsi4_neg2>
    3932:	0e 94 6f 1c 	call	0x38de	; 0x38de <__udivmodsi4>
    3936:	07 fc       	sbrc	r0, 7
    3938:	03 d0       	rcall	.+6      	; 0x3940 <__divmodsi4_neg2>
    393a:	4e f4       	brtc	.+18     	; 0x394e <__divmodsi4_exit>
    393c:	0c 94 a8 1c 	jmp	0x3950	; 0x3950 <__negsi2>

00003940 <__divmodsi4_neg2>:
    3940:	50 95       	com	r21
    3942:	40 95       	com	r20
    3944:	30 95       	com	r19
    3946:	21 95       	neg	r18
    3948:	3f 4f       	sbci	r19, 0xFF	; 255
    394a:	4f 4f       	sbci	r20, 0xFF	; 255
    394c:	5f 4f       	sbci	r21, 0xFF	; 255

0000394e <__divmodsi4_exit>:
    394e:	08 95       	ret

00003950 <__negsi2>:
    3950:	90 95       	com	r25
    3952:	80 95       	com	r24
    3954:	70 95       	com	r23
    3956:	61 95       	neg	r22
    3958:	7f 4f       	sbci	r23, 0xFF	; 255
    395a:	8f 4f       	sbci	r24, 0xFF	; 255
    395c:	9f 4f       	sbci	r25, 0xFF	; 255
    395e:	08 95       	ret

00003960 <__umulhisi3>:
    3960:	a2 9f       	mul	r26, r18
    3962:	b0 01       	movw	r22, r0
    3964:	b3 9f       	mul	r27, r19
    3966:	c0 01       	movw	r24, r0
    3968:	a3 9f       	mul	r26, r19
    396a:	70 0d       	add	r23, r0
    396c:	81 1d       	adc	r24, r1
    396e:	11 24       	eor	r1, r1
    3970:	91 1d       	adc	r25, r1
    3972:	b2 9f       	mul	r27, r18
    3974:	70 0d       	add	r23, r0
    3976:	81 1d       	adc	r24, r1
    3978:	11 24       	eor	r1, r1
    397a:	91 1d       	adc	r25, r1
    397c:	08 95       	ret

0000397e <__muluhisi3>:
    397e:	0e 94 b0 1c 	call	0x3960	; 0x3960 <__umulhisi3>
    3982:	a5 9f       	mul	r26, r21
    3984:	90 0d       	add	r25, r0
    3986:	b4 9f       	mul	r27, r20
    3988:	90 0d       	add	r25, r0
    398a:	a4 9f       	mul	r26, r20
    398c:	80 0d       	add	r24, r0
    398e:	91 1d       	adc	r25, r1
    3990:	11 24       	eor	r1, r1
    3992:	08 95       	ret

00003994 <__tablejump2__>:
    3994:	ee 0f       	add	r30, r30
    3996:	ff 1f       	adc	r31, r31
    3998:	05 90       	lpm	r0, Z+
    399a:	f4 91       	lpm	r31, Z
    399c:	e0 2d       	mov	r30, r0
    399e:	09 94       	ijmp

000039a0 <atof>:
    39a0:	66 27       	eor	r22, r22
    39a2:	77 27       	eor	r23, r23
    39a4:	0c 94 09 1d 	jmp	0x3a12	; 0x3a12 <strtod>

000039a8 <strtok>:
    39a8:	44 e9       	ldi	r20, 0x94	; 148
    39aa:	52 e0       	ldi	r21, 0x02	; 2
    39ac:	0e 94 e2 1c 	call	0x39c4	; 0x39c4 <strtok_r>
    39b0:	08 95       	ret

000039b2 <strcmp>:
    39b2:	fb 01       	movw	r30, r22
    39b4:	dc 01       	movw	r26, r24
    39b6:	8d 91       	ld	r24, X+
    39b8:	01 90       	ld	r0, Z+
    39ba:	80 19       	sub	r24, r0
    39bc:	01 10       	cpse	r0, r1
    39be:	d9 f3       	breq	.-10     	; 0x39b6 <strcmp+0x4>
    39c0:	99 0b       	sbc	r25, r25
    39c2:	08 95       	ret

000039c4 <strtok_r>:
    39c4:	fa 01       	movw	r30, r20
    39c6:	a1 91       	ld	r26, Z+
    39c8:	b0 81       	ld	r27, Z
    39ca:	00 97       	sbiw	r24, 0x00	; 0
    39cc:	19 f4       	brne	.+6      	; 0x39d4 <strtok_r+0x10>
    39ce:	10 97       	sbiw	r26, 0x00	; 0
    39d0:	e1 f0       	breq	.+56     	; 0x3a0a <strtok_r+0x46>
    39d2:	cd 01       	movw	r24, r26
    39d4:	dc 01       	movw	r26, r24
    39d6:	cd 01       	movw	r24, r26
    39d8:	0d 90       	ld	r0, X+
    39da:	00 20       	and	r0, r0
    39dc:	11 f4       	brne	.+4      	; 0x39e2 <strtok_r+0x1e>
    39de:	c0 01       	movw	r24, r0
    39e0:	13 c0       	rjmp	.+38     	; 0x3a08 <strtok_r+0x44>
    39e2:	fb 01       	movw	r30, r22
    39e4:	21 91       	ld	r18, Z+
    39e6:	22 23       	and	r18, r18
    39e8:	19 f0       	breq	.+6      	; 0x39f0 <strtok_r+0x2c>
    39ea:	20 15       	cp	r18, r0
    39ec:	d9 f7       	brne	.-10     	; 0x39e4 <strtok_r+0x20>
    39ee:	f3 cf       	rjmp	.-26     	; 0x39d6 <strtok_r+0x12>
    39f0:	fb 01       	movw	r30, r22
    39f2:	21 91       	ld	r18, Z+
    39f4:	20 15       	cp	r18, r0
    39f6:	19 f4       	brne	.+6      	; 0x39fe <strtok_r+0x3a>
    39f8:	1e 92       	st	-X, r1
    39fa:	11 96       	adiw	r26, 0x01	; 1
    39fc:	06 c0       	rjmp	.+12     	; 0x3a0a <strtok_r+0x46>
    39fe:	22 23       	and	r18, r18
    3a00:	c1 f7       	brne	.-16     	; 0x39f2 <strtok_r+0x2e>
    3a02:	0d 90       	ld	r0, X+
    3a04:	00 20       	and	r0, r0
    3a06:	a1 f7       	brne	.-24     	; 0x39f0 <strtok_r+0x2c>
    3a08:	d0 01       	movw	r26, r0
    3a0a:	fa 01       	movw	r30, r20
    3a0c:	a1 93       	st	Z+, r26
    3a0e:	b0 83       	st	Z, r27
    3a10:	08 95       	ret

00003a12 <strtod>:
    3a12:	a0 e0       	ldi	r26, 0x00	; 0
    3a14:	b0 e0       	ldi	r27, 0x00	; 0
    3a16:	ef e0       	ldi	r30, 0x0F	; 15
    3a18:	fd e1       	ldi	r31, 0x1D	; 29
    3a1a:	0c 94 81 1e 	jmp	0x3d02	; 0x3d02 <__prologue_saves__+0xc>
    3a1e:	ec 01       	movw	r28, r24
    3a20:	6b 01       	movw	r12, r22
    3a22:	61 15       	cp	r22, r1
    3a24:	71 05       	cpc	r23, r1
    3a26:	19 f0       	breq	.+6      	; 0x3a2e <strtod+0x1c>
    3a28:	fb 01       	movw	r30, r22
    3a2a:	91 83       	std	Z+1, r25	; 0x01
    3a2c:	80 83       	st	Z, r24
    3a2e:	7e 01       	movw	r14, r28
    3a30:	ff ef       	ldi	r31, 0xFF	; 255
    3a32:	ef 1a       	sub	r14, r31
    3a34:	ff 0a       	sbc	r15, r31
    3a36:	08 81       	ld	r16, Y
    3a38:	80 2f       	mov	r24, r16
    3a3a:	90 e0       	ldi	r25, 0x00	; 0
    3a3c:	0e 94 57 1e 	call	0x3cae	; 0x3cae <isspace>
    3a40:	89 2b       	or	r24, r25
    3a42:	11 f0       	breq	.+4      	; 0x3a48 <strtod+0x36>
    3a44:	e7 01       	movw	r28, r14
    3a46:	f3 cf       	rjmp	.-26     	; 0x3a2e <strtod+0x1c>
    3a48:	0d 32       	cpi	r16, 0x2D	; 45
    3a4a:	39 f4       	brne	.+14     	; 0x3a5a <strtod+0x48>
    3a4c:	7e 01       	movw	r14, r28
    3a4e:	82 e0       	ldi	r24, 0x02	; 2
    3a50:	e8 0e       	add	r14, r24
    3a52:	f1 1c       	adc	r15, r1
    3a54:	09 81       	ldd	r16, Y+1	; 0x01
    3a56:	11 e0       	ldi	r17, 0x01	; 1
    3a58:	08 c0       	rjmp	.+16     	; 0x3a6a <strtod+0x58>
    3a5a:	0b 32       	cpi	r16, 0x2B	; 43
    3a5c:	29 f4       	brne	.+10     	; 0x3a68 <strtod+0x56>
    3a5e:	7e 01       	movw	r14, r28
    3a60:	92 e0       	ldi	r25, 0x02	; 2
    3a62:	e9 0e       	add	r14, r25
    3a64:	f1 1c       	adc	r15, r1
    3a66:	09 81       	ldd	r16, Y+1	; 0x01
    3a68:	10 e0       	ldi	r17, 0x00	; 0
    3a6a:	e7 01       	movw	r28, r14
    3a6c:	21 97       	sbiw	r28, 0x01	; 1
    3a6e:	43 e0       	ldi	r20, 0x03	; 3
    3a70:	50 e0       	ldi	r21, 0x00	; 0
    3a72:	6e e9       	ldi	r22, 0x9E	; 158
    3a74:	70 e0       	ldi	r23, 0x00	; 0
    3a76:	ce 01       	movw	r24, r28
    3a78:	0e 94 60 1e 	call	0x3cc0	; 0x3cc0 <strncasecmp_P>
    3a7c:	89 2b       	or	r24, r25
    3a7e:	c1 f4       	brne	.+48     	; 0x3ab0 <strtod+0x9e>
    3a80:	23 96       	adiw	r28, 0x03	; 3
    3a82:	45 e0       	ldi	r20, 0x05	; 5
    3a84:	50 e0       	ldi	r21, 0x00	; 0
    3a86:	69 e9       	ldi	r22, 0x99	; 153
    3a88:	70 e0       	ldi	r23, 0x00	; 0
    3a8a:	ce 01       	movw	r24, r28
    3a8c:	0e 94 60 1e 	call	0x3cc0	; 0x3cc0 <strncasecmp_P>
    3a90:	89 2b       	or	r24, r25
    3a92:	09 f4       	brne	.+2      	; 0x3a96 <strtod+0x84>
    3a94:	25 96       	adiw	r28, 0x05	; 5
    3a96:	c1 14       	cp	r12, r1
    3a98:	d1 04       	cpc	r13, r1
    3a9a:	19 f0       	breq	.+6      	; 0x3aa2 <strtod+0x90>
    3a9c:	f6 01       	movw	r30, r12
    3a9e:	d1 83       	std	Z+1, r29	; 0x01
    3aa0:	c0 83       	st	Z, r28
    3aa2:	11 11       	cpse	r17, r1
    3aa4:	f6 c0       	rjmp	.+492    	; 0x3c92 <strtod+0x280>
    3aa6:	60 e0       	ldi	r22, 0x00	; 0
    3aa8:	70 e0       	ldi	r23, 0x00	; 0
    3aaa:	80 e8       	ldi	r24, 0x80	; 128
    3aac:	9f e7       	ldi	r25, 0x7F	; 127
    3aae:	fa c0       	rjmp	.+500    	; 0x3ca4 <strtod+0x292>
    3ab0:	43 e0       	ldi	r20, 0x03	; 3
    3ab2:	50 e0       	ldi	r21, 0x00	; 0
    3ab4:	66 e9       	ldi	r22, 0x96	; 150
    3ab6:	70 e0       	ldi	r23, 0x00	; 0
    3ab8:	ce 01       	movw	r24, r28
    3aba:	0e 94 60 1e 	call	0x3cc0	; 0x3cc0 <strncasecmp_P>
    3abe:	89 2b       	or	r24, r25
    3ac0:	59 f4       	brne	.+22     	; 0x3ad8 <strtod+0xc6>
    3ac2:	c1 14       	cp	r12, r1
    3ac4:	d1 04       	cpc	r13, r1
    3ac6:	09 f4       	brne	.+2      	; 0x3aca <strtod+0xb8>
    3ac8:	e9 c0       	rjmp	.+466    	; 0x3c9c <strtod+0x28a>
    3aca:	f2 e0       	ldi	r31, 0x02	; 2
    3acc:	ef 0e       	add	r14, r31
    3ace:	f1 1c       	adc	r15, r1
    3ad0:	f6 01       	movw	r30, r12
    3ad2:	f1 82       	std	Z+1, r15	; 0x01
    3ad4:	e0 82       	st	Z, r14
    3ad6:	e2 c0       	rjmp	.+452    	; 0x3c9c <strtod+0x28a>
    3ad8:	20 e0       	ldi	r18, 0x00	; 0
    3ada:	30 e0       	ldi	r19, 0x00	; 0
    3adc:	a9 01       	movw	r20, r18
    3ade:	c0 e0       	ldi	r28, 0x00	; 0
    3ae0:	d0 e0       	ldi	r29, 0x00	; 0
    3ae2:	f7 01       	movw	r30, r14
    3ae4:	80 ed       	ldi	r24, 0xD0	; 208
    3ae6:	a8 2e       	mov	r10, r24
    3ae8:	a0 0e       	add	r10, r16
    3aea:	89 e0       	ldi	r24, 0x09	; 9
    3aec:	8a 15       	cp	r24, r10
    3aee:	30 f1       	brcs	.+76     	; 0x3b3c <strtod+0x12a>
    3af0:	91 2f       	mov	r25, r17
    3af2:	92 60       	ori	r25, 0x02	; 2
    3af4:	b9 2e       	mov	r11, r25
    3af6:	81 2f       	mov	r24, r17
    3af8:	88 70       	andi	r24, 0x08	; 8
    3afa:	12 ff       	sbrs	r17, 2
    3afc:	04 c0       	rjmp	.+8      	; 0x3b06 <strtod+0xf4>
    3afe:	81 11       	cpse	r24, r1
    3b00:	24 c0       	rjmp	.+72     	; 0x3b4a <strtod+0x138>
    3b02:	21 96       	adiw	r28, 0x01	; 1
    3b04:	22 c0       	rjmp	.+68     	; 0x3b4a <strtod+0x138>
    3b06:	81 11       	cpse	r24, r1
    3b08:	21 97       	sbiw	r28, 0x01	; 1
    3b0a:	a5 e0       	ldi	r26, 0x05	; 5
    3b0c:	b0 e0       	ldi	r27, 0x00	; 0
    3b0e:	0e 94 bf 1c 	call	0x397e	; 0x397e <__muluhisi3>
    3b12:	dc 01       	movw	r26, r24
    3b14:	cb 01       	movw	r24, r22
    3b16:	88 0f       	add	r24, r24
    3b18:	99 1f       	adc	r25, r25
    3b1a:	aa 1f       	adc	r26, r26
    3b1c:	bb 1f       	adc	r27, r27
    3b1e:	9c 01       	movw	r18, r24
    3b20:	ad 01       	movw	r20, r26
    3b22:	2a 0d       	add	r18, r10
    3b24:	31 1d       	adc	r19, r1
    3b26:	41 1d       	adc	r20, r1
    3b28:	51 1d       	adc	r21, r1
    3b2a:	28 39       	cpi	r18, 0x98	; 152
    3b2c:	89 e9       	ldi	r24, 0x99	; 153
    3b2e:	38 07       	cpc	r19, r24
    3b30:	48 07       	cpc	r20, r24
    3b32:	89 e1       	ldi	r24, 0x19	; 25
    3b34:	58 07       	cpc	r21, r24
    3b36:	48 f0       	brcs	.+18     	; 0x3b4a <strtod+0x138>
    3b38:	16 60       	ori	r17, 0x06	; 6
    3b3a:	06 c0       	rjmp	.+12     	; 0x3b48 <strtod+0x136>
    3b3c:	9e ef       	ldi	r25, 0xFE	; 254
    3b3e:	a9 12       	cpse	r10, r25
    3b40:	0a c0       	rjmp	.+20     	; 0x3b56 <strtod+0x144>
    3b42:	13 fd       	sbrc	r17, 3
    3b44:	40 c0       	rjmp	.+128    	; 0x3bc6 <strtod+0x1b4>
    3b46:	18 60       	ori	r17, 0x08	; 8
    3b48:	b1 2e       	mov	r11, r17
    3b4a:	8f ef       	ldi	r24, 0xFF	; 255
    3b4c:	e8 1a       	sub	r14, r24
    3b4e:	f8 0a       	sbc	r15, r24
    3b50:	00 81       	ld	r16, Z
    3b52:	1b 2d       	mov	r17, r11
    3b54:	c6 cf       	rjmp	.-116    	; 0x3ae2 <strtod+0xd0>
    3b56:	80 2f       	mov	r24, r16
    3b58:	8f 7d       	andi	r24, 0xDF	; 223
    3b5a:	85 34       	cpi	r24, 0x45	; 69
    3b5c:	a1 f5       	brne	.+104    	; 0x3bc6 <strtod+0x1b4>
    3b5e:	80 81       	ld	r24, Z
    3b60:	8d 32       	cpi	r24, 0x2D	; 45
    3b62:	11 f4       	brne	.+4      	; 0x3b68 <strtod+0x156>
    3b64:	10 61       	ori	r17, 0x10	; 16
    3b66:	06 c0       	rjmp	.+12     	; 0x3b74 <strtod+0x162>
    3b68:	8b 32       	cpi	r24, 0x2B	; 43
    3b6a:	21 f0       	breq	.+8      	; 0x3b74 <strtod+0x162>
    3b6c:	31 96       	adiw	r30, 0x01	; 1
    3b6e:	61 e0       	ldi	r22, 0x01	; 1
    3b70:	70 e0       	ldi	r23, 0x00	; 0
    3b72:	04 c0       	rjmp	.+8      	; 0x3b7c <strtod+0x16a>
    3b74:	81 81       	ldd	r24, Z+1	; 0x01
    3b76:	32 96       	adiw	r30, 0x02	; 2
    3b78:	62 e0       	ldi	r22, 0x02	; 2
    3b7a:	70 e0       	ldi	r23, 0x00	; 0
    3b7c:	80 53       	subi	r24, 0x30	; 48
    3b7e:	8a 30       	cpi	r24, 0x0A	; 10
    3b80:	18 f0       	brcs	.+6      	; 0x3b88 <strtod+0x176>
    3b82:	e6 1b       	sub	r30, r22
    3b84:	f7 0b       	sbc	r31, r23
    3b86:	1f c0       	rjmp	.+62     	; 0x3bc6 <strtod+0x1b4>
    3b88:	60 e0       	ldi	r22, 0x00	; 0
    3b8a:	70 e0       	ldi	r23, 0x00	; 0
    3b8c:	60 38       	cpi	r22, 0x80	; 128
    3b8e:	9c e0       	ldi	r25, 0x0C	; 12
    3b90:	79 07       	cpc	r23, r25
    3b92:	5c f4       	brge	.+22     	; 0x3baa <strtod+0x198>
    3b94:	db 01       	movw	r26, r22
    3b96:	aa 0f       	add	r26, r26
    3b98:	bb 1f       	adc	r27, r27
    3b9a:	aa 0f       	add	r26, r26
    3b9c:	bb 1f       	adc	r27, r27
    3b9e:	6a 0f       	add	r22, r26
    3ba0:	7b 1f       	adc	r23, r27
    3ba2:	66 0f       	add	r22, r22
    3ba4:	77 1f       	adc	r23, r23
    3ba6:	68 0f       	add	r22, r24
    3ba8:	71 1d       	adc	r23, r1
    3baa:	31 96       	adiw	r30, 0x01	; 1
    3bac:	df 01       	movw	r26, r30
    3bae:	11 97       	sbiw	r26, 0x01	; 1
    3bb0:	8c 91       	ld	r24, X
    3bb2:	80 53       	subi	r24, 0x30	; 48
    3bb4:	8a 30       	cpi	r24, 0x0A	; 10
    3bb6:	50 f3       	brcs	.-44     	; 0x3b8c <strtod+0x17a>
    3bb8:	14 ff       	sbrs	r17, 4
    3bba:	03 c0       	rjmp	.+6      	; 0x3bc2 <strtod+0x1b0>
    3bbc:	71 95       	neg	r23
    3bbe:	61 95       	neg	r22
    3bc0:	71 09       	sbc	r23, r1
    3bc2:	c6 0f       	add	r28, r22
    3bc4:	d7 1f       	adc	r29, r23
    3bc6:	11 ff       	sbrs	r17, 1
    3bc8:	08 c0       	rjmp	.+16     	; 0x3bda <strtod+0x1c8>
    3bca:	c1 14       	cp	r12, r1
    3bcc:	d1 04       	cpc	r13, r1
    3bce:	29 f0       	breq	.+10     	; 0x3bda <strtod+0x1c8>
    3bd0:	cf 01       	movw	r24, r30
    3bd2:	01 97       	sbiw	r24, 0x01	; 1
    3bd4:	f6 01       	movw	r30, r12
    3bd6:	91 83       	std	Z+1, r25	; 0x01
    3bd8:	80 83       	st	Z, r24
    3bda:	ca 01       	movw	r24, r20
    3bdc:	b9 01       	movw	r22, r18
    3bde:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <__floatunsisf>
    3be2:	21 2f       	mov	r18, r17
    3be4:	23 70       	andi	r18, 0x03	; 3
    3be6:	23 30       	cpi	r18, 0x03	; 3
    3be8:	19 f0       	breq	.+6      	; 0x3bf0 <strtod+0x1de>
    3bea:	4b 01       	movw	r8, r22
    3bec:	5c 01       	movw	r10, r24
    3bee:	06 c0       	rjmp	.+12     	; 0x3bfc <strtod+0x1ea>
    3bf0:	4b 01       	movw	r8, r22
    3bf2:	5c 01       	movw	r10, r24
    3bf4:	b7 fa       	bst	r11, 7
    3bf6:	b0 94       	com	r11
    3bf8:	b7 f8       	bld	r11, 7
    3bfa:	b0 94       	com	r11
    3bfc:	20 e0       	ldi	r18, 0x00	; 0
    3bfe:	30 e0       	ldi	r19, 0x00	; 0
    3c00:	a9 01       	movw	r20, r18
    3c02:	c5 01       	movw	r24, r10
    3c04:	b4 01       	movw	r22, r8
    3c06:	0e 94 59 15 	call	0x2ab2	; 0x2ab2 <__cmpsf2>
    3c0a:	88 23       	and	r24, r24
    3c0c:	09 f4       	brne	.+2      	; 0x3c10 <strtod+0x1fe>
    3c0e:	3e c0       	rjmp	.+124    	; 0x3c8c <strtod+0x27a>
    3c10:	d7 ff       	sbrs	r29, 7
    3c12:	06 c0       	rjmp	.+12     	; 0x3c20 <strtod+0x20e>
    3c14:	d1 95       	neg	r29
    3c16:	c1 95       	neg	r28
    3c18:	d1 09       	sbc	r29, r1
    3c1a:	05 eb       	ldi	r16, 0xB5	; 181
    3c1c:	10 e0       	ldi	r17, 0x00	; 0
    3c1e:	02 c0       	rjmp	.+4      	; 0x3c24 <strtod+0x212>
    3c20:	0d ec       	ldi	r16, 0xCD	; 205
    3c22:	10 e0       	ldi	r17, 0x00	; 0
    3c24:	68 01       	movw	r12, r16
    3c26:	f8 e1       	ldi	r31, 0x18	; 24
    3c28:	cf 1a       	sub	r12, r31
    3c2a:	d1 08       	sbc	r13, r1
    3c2c:	90 e2       	ldi	r25, 0x20	; 32
    3c2e:	e9 2e       	mov	r14, r25
    3c30:	f1 2c       	mov	r15, r1
    3c32:	ce 15       	cp	r28, r14
    3c34:	df 05       	cpc	r29, r15
    3c36:	74 f0       	brlt	.+28     	; 0x3c54 <strtod+0x242>
    3c38:	f8 01       	movw	r30, r16
    3c3a:	25 91       	lpm	r18, Z+
    3c3c:	35 91       	lpm	r19, Z+
    3c3e:	45 91       	lpm	r20, Z+
    3c40:	54 91       	lpm	r21, Z
    3c42:	c5 01       	movw	r24, r10
    3c44:	b4 01       	movw	r22, r8
    3c46:	0e 94 ec 16 	call	0x2dd8	; 0x2dd8 <__mulsf3>
    3c4a:	4b 01       	movw	r8, r22
    3c4c:	5c 01       	movw	r10, r24
    3c4e:	ce 19       	sub	r28, r14
    3c50:	df 09       	sbc	r29, r15
    3c52:	ef cf       	rjmp	.-34     	; 0x3c32 <strtod+0x220>
    3c54:	04 50       	subi	r16, 0x04	; 4
    3c56:	11 09       	sbc	r17, r1
    3c58:	f5 94       	asr	r15
    3c5a:	e7 94       	ror	r14
    3c5c:	0c 15       	cp	r16, r12
    3c5e:	1d 05       	cpc	r17, r13
    3c60:	41 f7       	brne	.-48     	; 0x3c32 <strtod+0x220>
    3c62:	8a 2d       	mov	r24, r10
    3c64:	88 0f       	add	r24, r24
    3c66:	8b 2d       	mov	r24, r11
    3c68:	88 1f       	adc	r24, r24
    3c6a:	8f 3f       	cpi	r24, 0xFF	; 255
    3c6c:	49 f0       	breq	.+18     	; 0x3c80 <strtod+0x26e>
    3c6e:	20 e0       	ldi	r18, 0x00	; 0
    3c70:	30 e0       	ldi	r19, 0x00	; 0
    3c72:	a9 01       	movw	r20, r18
    3c74:	c5 01       	movw	r24, r10
    3c76:	b4 01       	movw	r22, r8
    3c78:	0e 94 59 15 	call	0x2ab2	; 0x2ab2 <__cmpsf2>
    3c7c:	81 11       	cpse	r24, r1
    3c7e:	06 c0       	rjmp	.+12     	; 0x3c8c <strtod+0x27a>
    3c80:	82 e2       	ldi	r24, 0x22	; 34
    3c82:	90 e0       	ldi	r25, 0x00	; 0
    3c84:	90 93 ce 05 	sts	0x05CE, r25	; 0x8005ce <errno+0x1>
    3c88:	80 93 cd 05 	sts	0x05CD, r24	; 0x8005cd <errno>
    3c8c:	c5 01       	movw	r24, r10
    3c8e:	b4 01       	movw	r22, r8
    3c90:	09 c0       	rjmp	.+18     	; 0x3ca4 <strtod+0x292>
    3c92:	60 e0       	ldi	r22, 0x00	; 0
    3c94:	70 e0       	ldi	r23, 0x00	; 0
    3c96:	80 e8       	ldi	r24, 0x80	; 128
    3c98:	9f ef       	ldi	r25, 0xFF	; 255
    3c9a:	04 c0       	rjmp	.+8      	; 0x3ca4 <strtod+0x292>
    3c9c:	60 e0       	ldi	r22, 0x00	; 0
    3c9e:	70 e0       	ldi	r23, 0x00	; 0
    3ca0:	80 ec       	ldi	r24, 0xC0	; 192
    3ca2:	9f e7       	ldi	r25, 0x7F	; 127
    3ca4:	cd b7       	in	r28, 0x3d	; 61
    3ca6:	de b7       	in	r29, 0x3e	; 62
    3ca8:	ec e0       	ldi	r30, 0x0C	; 12
    3caa:	0c 94 9d 1e 	jmp	0x3d3a	; 0x3d3a <__epilogue_restores__+0xc>

00003cae <isspace>:
    3cae:	91 11       	cpse	r25, r1
    3cb0:	0c 94 78 1e 	jmp	0x3cf0	; 0x3cf0 <__ctype_isfalse>
    3cb4:	80 32       	cpi	r24, 0x20	; 32
    3cb6:	19 f0       	breq	.+6      	; 0x3cbe <isspace+0x10>
    3cb8:	89 50       	subi	r24, 0x09	; 9
    3cba:	85 50       	subi	r24, 0x05	; 5
    3cbc:	c8 f7       	brcc	.-14     	; 0x3cb0 <isspace+0x2>
    3cbe:	08 95       	ret

00003cc0 <strncasecmp_P>:
    3cc0:	fb 01       	movw	r30, r22
    3cc2:	dc 01       	movw	r26, r24
    3cc4:	41 50       	subi	r20, 0x01	; 1
    3cc6:	50 40       	sbci	r21, 0x00	; 0
    3cc8:	88 f0       	brcs	.+34     	; 0x3cec <strncasecmp_P+0x2c>
    3cca:	8d 91       	ld	r24, X+
    3ccc:	81 34       	cpi	r24, 0x41	; 65
    3cce:	1c f0       	brlt	.+6      	; 0x3cd6 <strncasecmp_P+0x16>
    3cd0:	8b 35       	cpi	r24, 0x5B	; 91
    3cd2:	0c f4       	brge	.+2      	; 0x3cd6 <strncasecmp_P+0x16>
    3cd4:	80 5e       	subi	r24, 0xE0	; 224
    3cd6:	65 91       	lpm	r22, Z+
    3cd8:	61 34       	cpi	r22, 0x41	; 65
    3cda:	1c f0       	brlt	.+6      	; 0x3ce2 <strncasecmp_P+0x22>
    3cdc:	6b 35       	cpi	r22, 0x5B	; 91
    3cde:	0c f4       	brge	.+2      	; 0x3ce2 <strncasecmp_P+0x22>
    3ce0:	60 5e       	subi	r22, 0xE0	; 224
    3ce2:	86 1b       	sub	r24, r22
    3ce4:	61 11       	cpse	r22, r1
    3ce6:	71 f3       	breq	.-36     	; 0x3cc4 <strncasecmp_P+0x4>
    3ce8:	99 0b       	sbc	r25, r25
    3cea:	08 95       	ret
    3cec:	88 1b       	sub	r24, r24
    3cee:	fc cf       	rjmp	.-8      	; 0x3ce8 <strncasecmp_P+0x28>

00003cf0 <__ctype_isfalse>:
    3cf0:	99 27       	eor	r25, r25
    3cf2:	88 27       	eor	r24, r24

00003cf4 <__ctype_istrue>:
    3cf4:	08 95       	ret

00003cf6 <__prologue_saves__>:
    3cf6:	2f 92       	push	r2
    3cf8:	3f 92       	push	r3
    3cfa:	4f 92       	push	r4
    3cfc:	5f 92       	push	r5
    3cfe:	6f 92       	push	r6
    3d00:	7f 92       	push	r7
    3d02:	8f 92       	push	r8
    3d04:	9f 92       	push	r9
    3d06:	af 92       	push	r10
    3d08:	bf 92       	push	r11
    3d0a:	cf 92       	push	r12
    3d0c:	df 92       	push	r13
    3d0e:	ef 92       	push	r14
    3d10:	ff 92       	push	r15
    3d12:	0f 93       	push	r16
    3d14:	1f 93       	push	r17
    3d16:	cf 93       	push	r28
    3d18:	df 93       	push	r29
    3d1a:	cd b7       	in	r28, 0x3d	; 61
    3d1c:	de b7       	in	r29, 0x3e	; 62
    3d1e:	ca 1b       	sub	r28, r26
    3d20:	db 0b       	sbc	r29, r27
    3d22:	0f b6       	in	r0, 0x3f	; 63
    3d24:	f8 94       	cli
    3d26:	de bf       	out	0x3e, r29	; 62
    3d28:	0f be       	out	0x3f, r0	; 63
    3d2a:	cd bf       	out	0x3d, r28	; 61
    3d2c:	09 94       	ijmp

00003d2e <__epilogue_restores__>:
    3d2e:	2a 88       	ldd	r2, Y+18	; 0x12
    3d30:	39 88       	ldd	r3, Y+17	; 0x11
    3d32:	48 88       	ldd	r4, Y+16	; 0x10
    3d34:	5f 84       	ldd	r5, Y+15	; 0x0f
    3d36:	6e 84       	ldd	r6, Y+14	; 0x0e
    3d38:	7d 84       	ldd	r7, Y+13	; 0x0d
    3d3a:	8c 84       	ldd	r8, Y+12	; 0x0c
    3d3c:	9b 84       	ldd	r9, Y+11	; 0x0b
    3d3e:	aa 84       	ldd	r10, Y+10	; 0x0a
    3d40:	b9 84       	ldd	r11, Y+9	; 0x09
    3d42:	c8 84       	ldd	r12, Y+8	; 0x08
    3d44:	df 80       	ldd	r13, Y+7	; 0x07
    3d46:	ee 80       	ldd	r14, Y+6	; 0x06
    3d48:	fd 80       	ldd	r15, Y+5	; 0x05
    3d4a:	0c 81       	ldd	r16, Y+4	; 0x04
    3d4c:	1b 81       	ldd	r17, Y+3	; 0x03
    3d4e:	aa 81       	ldd	r26, Y+2	; 0x02
    3d50:	b9 81       	ldd	r27, Y+1	; 0x01
    3d52:	ce 0f       	add	r28, r30
    3d54:	d1 1d       	adc	r29, r1
    3d56:	0f b6       	in	r0, 0x3f	; 63
    3d58:	f8 94       	cli
    3d5a:	de bf       	out	0x3e, r29	; 62
    3d5c:	0f be       	out	0x3f, r0	; 63
    3d5e:	cd bf       	out	0x3d, r28	; 61
    3d60:	ed 01       	movw	r28, r26
    3d62:	08 95       	ret

00003d64 <_exit>:
    3d64:	f8 94       	cli

00003d66 <__stop_program>:
    3d66:	ff cf       	rjmp	.-2      	; 0x3d66 <__stop_program>
